
bin/kernel_nopage：     文件格式 elf32-i386


Disassembly of section .text:

00100000 <kern_entry>:
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
    movl $KERNEL_DS, %eax
    movw %ax, %ds
  100000:	0f 01 15 18 30 11 40 	lgdtl  0x40113018
    movw %ax, %es
  100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ss
  10000c:	66 8e d8             	mov    %ax,%ds

  10000f:	66 8e c0             	mov    %ax,%es
    ljmp $KERNEL_CS, $relocated
  100012:	66 8e d0             	mov    %ax,%ss

relocated:
  100015:	ea 1c 00 10 00 08 00 	ljmp   $0x8,$0x10001c

0010001c <relocated>:

    # set ebp, esp
    movl $0x0, %ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
  10001c:	bd 00 00 00 00       	mov    $0x0,%ebp
    # now kernel stack is ready , call the first C function
    call kern_init

# should never get here
spin:
  100021:	bc 00 30 11 00       	mov    $0x113000,%esp
    jmp spin

.data
  100026:	e8 05 00 00 00       	call   100030 <kern_init>

0010002b <spin>:
.align PGSIZE
    .globl bootstack
bootstack:
    .space KSTACKSIZE
    .globl bootstacktop
  10002b:	eb fe                	jmp    10002b <spin>
  10002d:	66 90                	xchg   %ax,%ax
  10002f:	90                   	nop

00100030 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
  100030:	55                   	push   %ebp
  100031:	89 e5                	mov    %esp,%ebp
  100033:	83 ec 28             	sub    $0x28,%esp
  100036:	8d 05 04 3a 11 00    	lea    0x113a04,%eax
  10003c:	31 c9                	xor    %ecx,%ecx
  10003e:	8d 15 3c 49 11 00    	lea    0x11493c,%edx
  100044:	29 c2                	sub    %eax,%edx
    extern char edata[], end[];
    memset(edata, 0, end - edata);
  100046:	89 04 24             	mov    %eax,(%esp)
  100049:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100050:	00 
  100051:	89 54 24 08          	mov    %edx,0x8(%esp)
  100055:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100058:	e8 83 e3 00 00       	call   10e3e0 <memset>

    cons_init();                // init the console
  10005d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100060:	e8 6b 11 00 00       	call   1011d0 <cons_init>
  100065:	8d 05 f8 f0 10 00    	lea    0x10f0f8,%eax
  10006b:	8d 0d dc f0 10 00    	lea    0x10f0dc,%ecx

    const char *message = "(THU.CST) os is loading ...";
  100071:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    cprintf("%s\n\n", message);
  100074:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  100077:	89 04 24             	mov    %eax,(%esp)
  10007a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10007e:	e8 bd 01 00 00       	call   100240 <cprintf>

    print_kerninfo();
  100083:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100086:	e8 55 0a 00 00       	call   100ae0 <print_kerninfo>

    grade_backtrace();
  10008b:	e8 30 00 00 00       	call   1000c0 <grade_backtrace>

    pmm_init();                 // init physical memory management
  100090:	e8 ab 30 00 00       	call   103140 <pmm_init>

    kmem_int();
  100095:	e8 a6 61 00 00       	call   106240 <kmem_int>

    pic_init();                 // init interrupt controller
  10009a:	e8 31 1c 00 00       	call   101cd0 <pic_init>
    idt_init();                 // init interrupt descriptor table
  10009f:	e8 8c 1d 00 00       	call   101e30 <idt_init>

    clock_init();               // init clock interrupt
  1000a4:	e8 a7 0f 00 00       	call   101050 <clock_init>
    intr_enable();              // enable irq interrupt
  1000a9:	e8 62 1d 00 00       	call   101e10 <intr_enable>
    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();

    /* do nothing */
    while (1);
  1000ae:	e9 fb ff ff ff       	jmp    1000ae <kern_init+0x7e>
  1000b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  1000ba:	84 00 00 00 00 00 

001000c0 <grade_backtrace>:
grade_backtrace0(int arg0, int arg1, int arg2) {
    grade_backtrace1(arg0, arg2);
}

void
grade_backtrace(void) {
  1000c0:	55                   	push   %ebp
  1000c1:	89 e5                	mov    %esp,%ebp
  1000c3:	83 ec 18             	sub    $0x18,%esp
  1000c6:	31 c0                	xor    %eax,%eax
  1000c8:	8d 0d 30 00 10 00    	lea    0x100030,%ecx
  1000ce:	ba 00 00 ff ff       	mov    $0xffff0000,%edx
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
  1000d3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1000da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1000de:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
  1000e5:	ff 
  1000e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1000e9:	89 55 f8             	mov    %edx,-0x8(%ebp)
  1000ec:	e8 9f 00 00 00       	call   100190 <grade_backtrace0>
}
  1000f1:	83 c4 18             	add    $0x18,%esp
  1000f4:	5d                   	pop    %ebp
  1000f5:	c3                   	ret    
  1000f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1000fd:	00 00 00 

00100100 <grade_backtrace2>:
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
  100100:	55                   	push   %ebp
  100101:	89 e5                	mov    %esp,%ebp
  100103:	57                   	push   %edi
  100104:	56                   	push   %esi
  100105:	83 ec 30             	sub    $0x30,%esp
  100108:	8b 45 14             	mov    0x14(%ebp),%eax
  10010b:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10010e:	8b 55 0c             	mov    0xc(%ebp),%edx
  100111:	8b 75 08             	mov    0x8(%ebp),%esi
  100114:	31 ff                	xor    %edi,%edi
  100116:	89 75 f4             	mov    %esi,-0xc(%ebp)
  100119:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10011c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10011f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    mon_backtrace(0, NULL, NULL);
  100122:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  100129:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100130:	00 
  100131:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100138:	00 
  100139:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10013c:	e8 af 0d 00 00       	call   100ef0 <mon_backtrace>
}
  100141:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100144:	83 c4 30             	add    $0x30,%esp
  100147:	5e                   	pop    %esi
  100148:	5f                   	pop    %edi
  100149:	5d                   	pop    %ebp
  10014a:	c3                   	ret    
  10014b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100150 <grade_backtrace1>:
grade_backtrace1(int arg0, int arg1) {
  100150:	55                   	push   %ebp
  100151:	89 e5                	mov    %esp,%ebp
  100153:	56                   	push   %esi
  100154:	83 ec 24             	sub    $0x24,%esp
  100157:	8b 45 0c             	mov    0xc(%ebp),%eax
  10015a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10015d:	8d 55 f4             	lea    -0xc(%ebp),%edx
  100160:	8d 75 f8             	lea    -0x8(%ebp),%esi
  100163:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100166:	89 45 f4             	mov    %eax,-0xc(%ebp)
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
  100169:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10016c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10016f:	89 04 24             	mov    %eax,(%esp)
  100172:	89 74 24 04          	mov    %esi,0x4(%esp)
  100176:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  10017a:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10017e:	e8 7d ff ff ff       	call   100100 <grade_backtrace2>
}
  100183:	83 c4 24             	add    $0x24,%esp
  100186:	5e                   	pop    %esi
  100187:	5d                   	pop    %ebp
  100188:	c3                   	ret    
  100189:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100190 <grade_backtrace0>:
grade_backtrace0(int arg0, int arg1, int arg2) {
  100190:	55                   	push   %ebp
  100191:	89 e5                	mov    %esp,%ebp
  100193:	83 ec 18             	sub    $0x18,%esp
  100196:	8b 45 10             	mov    0x10(%ebp),%eax
  100199:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10019c:	8b 55 08             	mov    0x8(%ebp),%edx
  10019f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  1001a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1001a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    grade_backtrace1(arg0, arg2);
  1001a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1001ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1001ae:	89 04 24             	mov    %eax,(%esp)
  1001b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1001b5:	e8 96 ff ff ff       	call   100150 <grade_backtrace1>
}
  1001ba:	83 c4 18             	add    $0x18,%esp
  1001bd:	5d                   	pop    %ebp
  1001be:	c3                   	ret    
  1001bf:	90                   	nop

001001c0 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
  1001c0:	55                   	push   %ebp
  1001c1:	89 e5                	mov    %esp,%ebp
  1001c3:	56                   	push   %esi
  1001c4:	83 ec 24             	sub    $0x24,%esp
  1001c7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1001ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1001cd:	8d 15 10 02 10 00    	lea    0x100210,%edx
  1001d3:	8d 75 f0             	lea    -0x10(%ebp),%esi
  1001d6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  1001d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int cnt = 0;
  1001dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
  1001e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1001e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1001e9:	89 14 24             	mov    %edx,(%esp)
  1001ec:	89 74 24 04          	mov    %esi,0x4(%esp)
  1001f0:	89 44 24 08          	mov    %eax,0x8(%esp)
  1001f4:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  1001f8:	e8 43 e4 00 00       	call   10e640 <vprintfmt>
    return cnt;
  1001fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100200:	83 c4 24             	add    $0x24,%esp
  100203:	5e                   	pop    %esi
  100204:	5d                   	pop    %ebp
  100205:	c3                   	ret    
  100206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10020d:	00 00 00 

00100210 <cputch>:
cputch(int c, int *cnt) {
  100210:	55                   	push   %ebp
  100211:	89 e5                	mov    %esp,%ebp
  100213:	83 ec 18             	sub    $0x18,%esp
  100216:	8b 45 0c             	mov    0xc(%ebp),%eax
  100219:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10021c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10021f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cons_putc(c);
  100222:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100225:	89 04 24             	mov    %eax,(%esp)
  100228:	e8 f3 11 00 00       	call   101420 <cons_putc>
    (*cnt) ++;
  10022d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100230:	8b 08                	mov    (%eax),%ecx
  100232:	83 c1 01             	add    $0x1,%ecx
  100235:	89 08                	mov    %ecx,(%eax)
}
  100237:	83 c4 18             	add    $0x18,%esp
  10023a:	5d                   	pop    %ebp
  10023b:	c3                   	ret    
  10023c:	0f 1f 40 00          	nopl   0x0(%eax)

00100240 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
  100240:	55                   	push   %ebp
  100241:	89 e5                	mov    %esp,%ebp
  100243:	83 ec 18             	sub    $0x18,%esp
  100246:	8b 45 08             	mov    0x8(%ebp),%eax
  100249:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10024c:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    int cnt;
    va_start(ap, fmt);
  10024f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cnt = vcprintf(fmt, ap);
  100252:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100255:	89 e2                	mov    %esp,%edx
  100257:	89 42 04             	mov    %eax,0x4(%edx)
  10025a:	89 0a                	mov    %ecx,(%edx)
  10025c:	e8 5f ff ff ff       	call   1001c0 <vcprintf>
  100261:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
  100264:	83 c4 18             	add    $0x18,%esp
  100267:	5d                   	pop    %ebp
  100268:	c3                   	ret    
  100269:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00100270 <cputchar>:
}

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
  100270:	55                   	push   %ebp
  100271:	89 e5                	mov    %esp,%ebp
  100273:	83 ec 08             	sub    $0x8,%esp
  100276:	8b 45 08             	mov    0x8(%ebp),%eax
  100279:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cons_putc(c);
  10027c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10027f:	89 04 24             	mov    %eax,(%esp)
  100282:	e8 99 11 00 00       	call   101420 <cons_putc>
}
  100287:	83 c4 08             	add    $0x8,%esp
  10028a:	5d                   	pop    %ebp
  10028b:	c3                   	ret    
  10028c:	0f 1f 40 00          	nopl   0x0(%eax)

00100290 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
  100290:	55                   	push   %ebp
  100291:	89 e5                	mov    %esp,%ebp
  100293:	83 ec 18             	sub    $0x18,%esp
  100296:	8b 45 08             	mov    0x8(%ebp),%eax
  100299:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int cnt = 0;
  10029c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
  1002a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1002a6:	89 c1                	mov    %eax,%ecx
  1002a8:	83 c1 01             	add    $0x1,%ecx
  1002ab:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1002ae:	8a 10                	mov    (%eax),%dl
  1002b0:	88 55 f7             	mov    %dl,-0x9(%ebp)
  1002b3:	0f be c2             	movsbl %dl,%eax
  1002b6:	83 f8 00             	cmp    $0x0,%eax
  1002b9:	0f 84 18 00 00 00    	je     1002d7 <cputs+0x47>
  1002bf:	8d 45 f8             	lea    -0x8(%ebp),%eax
        cputch(c, &cnt);
  1002c2:	0f be 4d f7          	movsbl -0x9(%ebp),%ecx
  1002c6:	89 0c 24             	mov    %ecx,(%esp)
  1002c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1002cd:	e8 3e ff ff ff       	call   100210 <cputch>
    while ((c = *str ++) != '\0') {
  1002d2:	e9 cc ff ff ff       	jmp    1002a3 <cputs+0x13>
  1002d7:	b8 0a 00 00 00       	mov    $0xa,%eax
  1002dc:	8d 4d f8             	lea    -0x8(%ebp),%ecx
    }
    cputch('\n', &cnt);
  1002df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  1002e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1002ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1002ed:	e8 1e ff ff ff       	call   100210 <cputch>
    return cnt;
  1002f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1002f5:	83 c4 18             	add    $0x18,%esp
  1002f8:	5d                   	pop    %ebp
  1002f9:	c3                   	ret    
  1002fa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100300 <getchar>:
}

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
  100300:	55                   	push   %ebp
  100301:	89 e5                	mov    %esp,%ebp
  100303:	83 ec 08             	sub    $0x8,%esp
    int c;
    while ((c = cons_getc()) == 0)
  100306:	e8 d5 14 00 00       	call   1017e0 <cons_getc>
  10030b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10030e:	83 f8 00             	cmp    $0x0,%eax
  100311:	0f 85 05 00 00 00    	jne    10031c <getchar+0x1c>
  100317:	e9 ea ff ff ff       	jmp    100306 <getchar+0x6>
        /* do nothing */;
    return c;
  10031c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10031f:	83 c4 08             	add    $0x8,%esp
  100322:	5d                   	pop    %ebp
  100323:	c3                   	ret    
  100324:	66 90                	xchg   %ax,%ax
  100326:	66 90                	xchg   %ax,%ax
  100328:	66 90                	xchg   %ax,%ax
  10032a:	66 90                	xchg   %ax,%ax
  10032c:	66 90                	xchg   %ax,%ax
  10032e:	66 90                	xchg   %ax,%ax

00100330 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
  100330:	55                   	push   %ebp
  100331:	89 e5                	mov    %esp,%ebp
  100333:	83 ec 28             	sub    $0x28,%esp
  100336:	8b 45 08             	mov    0x8(%ebp),%eax
  100339:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (prompt != NULL) {
  10033c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  100340:	0f 84 18 00 00 00    	je     10035e <readline+0x2e>
  100346:	8d 05 a0 f8 10 00    	lea    0x10f8a0,%eax
        cprintf("%s", prompt);
  10034c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10034f:	89 04 24             	mov    %eax,(%esp)
  100352:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100356:	e8 e5 fe ff ff       	call   100240 <cprintf>
  10035b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
    int i = 0, c;
  10035e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
  100365:	e8 96 ff ff ff       	call   100300 <getchar>
  10036a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
  10036d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  100371:	0f 8d 0c 00 00 00    	jge    100383 <readline+0x53>
            return NULL;
  100377:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10037e:	e9 b7 00 00 00       	jmp    10043a <readline+0x10a>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
  100383:	83 7d f0 20          	cmpl   $0x20,-0x10(%ebp)
  100387:	0f 8c 34 00 00 00    	jl     1003c1 <readline+0x91>
  10038d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100394:	0f 8d 27 00 00 00    	jge    1003c1 <readline+0x91>
            cputchar(c);
  10039a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10039d:	89 04 24             	mov    %eax,(%esp)
  1003a0:	e8 cb fe ff ff       	call   100270 <cputchar>
            buf[i ++] = c;
  1003a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1003a8:	88 c1                	mov    %al,%cl
  1003aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003ad:	89 c2                	mov    %eax,%edx
  1003af:	83 c2 01             	add    $0x1,%edx
  1003b2:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1003b5:	88 0c 05 04 3a 11 00 	mov    %cl,0x113a04(,%eax,1)
        }
  1003bc:	e9 6f 00 00 00       	jmp    100430 <readline+0x100>
        else if (c == '\b' && i > 0) {
  1003c1:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
  1003c5:	0f 85 23 00 00 00    	jne    1003ee <readline+0xbe>
  1003cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1003cf:	0f 8e 19 00 00 00    	jle    1003ee <readline+0xbe>
            cputchar(c);
  1003d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1003d8:	89 04 24             	mov    %eax,(%esp)
  1003db:	e8 90 fe ff ff       	call   100270 <cputchar>
            i --;
  1003e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1003e3:	83 c0 ff             	add    $0xffffffff,%eax
  1003e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
  1003e9:	e9 3d 00 00 00       	jmp    10042b <readline+0xfb>
        else if (c == '\n' || c == '\r') {
  1003ee:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
  1003f2:	0f 84 0a 00 00 00    	je     100402 <readline+0xd2>
  1003f8:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
  1003fc:	0f 85 24 00 00 00    	jne    100426 <readline+0xf6>
            cputchar(c);
  100402:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100405:	89 04 24             	mov    %eax,(%esp)
  100408:	e8 63 fe ff ff       	call   100270 <cputchar>
  10040d:	8d 05 04 3a 11 00    	lea    0x113a04,%eax
            buf[i] = '\0';
  100413:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100416:	c6 04 0d 04 3a 11 00 	movb   $0x0,0x113a04(,%ecx,1)
  10041d:	00 
            return buf;
  10041e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  100421:	e9 14 00 00 00       	jmp    10043a <readline+0x10a>
  100426:	e9 00 00 00 00       	jmp    10042b <readline+0xfb>
  10042b:	e9 00 00 00 00       	jmp    100430 <readline+0x100>
  100430:	e9 00 00 00 00       	jmp    100435 <readline+0x105>
    while (1) {
  100435:	e9 2b ff ff ff       	jmp    100365 <readline+0x35>
        }
    }
}
  10043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10043d:	83 c4 28             	add    $0x28,%esp
  100440:	5d                   	pop    %ebp
  100441:	c3                   	ret    
  100442:	66 90                	xchg   %ax,%ax
  100444:	66 90                	xchg   %ax,%ax
  100446:	66 90                	xchg   %ax,%ax
  100448:	66 90                	xchg   %ax,%ax
  10044a:	66 90                	xchg   %ax,%ax
  10044c:	66 90                	xchg   %ax,%ax
  10044e:	66 90                	xchg   %ax,%ax

00100450 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
  100450:	55                   	push   %ebp
  100451:	89 e5                	mov    %esp,%ebp
  100453:	83 ec 38             	sub    $0x38,%esp
  100456:	8b 45 10             	mov    0x10(%ebp),%eax
  100459:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10045c:	8b 55 08             	mov    0x8(%ebp),%edx
  10045f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100462:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100465:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (is_panic) {
  100468:	83 3d 04 3e 11 00 00 	cmpl   $0x0,0x113e04
  10046f:	0f 84 05 00 00 00    	je     10047a <__panic+0x2a>
        goto panic_dead;
  100475:	e9 57 00 00 00       	jmp    1004d1 <__panic+0x81>
  10047a:	8d 05 fd f0 10 00    	lea    0x10f0fd,%eax
  100480:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    }
    is_panic = 1;
  100483:	c7 05 04 3e 11 00 01 	movl   $0x1,0x113e04
  10048a:	00 00 00 
  10048d:	8d 55 14             	lea    0x14(%ebp),%edx

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
  100490:	89 11                	mov    %edx,(%ecx)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
  100492:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100495:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100498:	89 04 24             	mov    %eax,(%esp)
  10049b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10049f:	89 54 24 08          	mov    %edx,0x8(%esp)
  1004a3:	e8 98 fd ff ff       	call   100240 <cprintf>
    vcprintf(fmt, ap);
  1004a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1004ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1004ae:	89 0c 24             	mov    %ecx,(%esp)
  1004b1:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1004b8:	e8 03 fd ff ff       	call   1001c0 <vcprintf>
  1004bd:	8d 0d fb f0 10 00    	lea    0x10f0fb,%ecx
    cprintf("\n");
  1004c3:	89 0c 24             	mov    %ecx,(%esp)
  1004c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1004c9:	e8 72 fd ff ff       	call   100240 <cprintf>
  1004ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    va_end(ap);

panic_dead:
    intr_disable();
  1004d1:	e8 4a 19 00 00       	call   101e20 <intr_disable>
  1004d6:	31 c0                	xor    %eax,%eax
    while (1) {
        kmonitor(NULL);
  1004d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1004df:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1004e2:	e8 d9 07 00 00       	call   100cc0 <kmonitor>
    while (1) {
  1004e7:	e9 ea ff ff ff       	jmp    1004d6 <__panic+0x86>
  1004ec:	0f 1f 40 00          	nopl   0x0(%eax)

001004f0 <__warn>:
    }
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
  1004f0:	55                   	push   %ebp
  1004f1:	89 e5                	mov    %esp,%ebp
  1004f3:	56                   	push   %esi
  1004f4:	83 ec 34             	sub    $0x34,%esp
  1004f7:	8b 45 10             	mov    0x10(%ebp),%eax
  1004fa:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1004fd:	8b 55 08             	mov    0x8(%ebp),%edx
  100500:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100503:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100506:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100509:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;
    va_start(ap, fmt);
  10050c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
  10050f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100512:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100515:	89 e2                	mov    %esp,%edx
  100517:	89 4a 08             	mov    %ecx,0x8(%edx)
  10051a:	89 42 04             	mov    %eax,0x4(%edx)
  10051d:	c7 02 19 f1 10 00    	movl   $0x10f119,(%edx)
  100523:	e8 18 fd ff ff       	call   100240 <cprintf>
    vcprintf(fmt, ap);
  100528:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10052b:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10052e:	89 e6                	mov    %esp,%esi
  100530:	89 56 04             	mov    %edx,0x4(%esi)
  100533:	89 0e                	mov    %ecx,(%esi)
  100535:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100538:	e8 83 fc ff ff       	call   1001c0 <vcprintf>
    cprintf("\n");
  10053d:	89 e1                	mov    %esp,%ecx
  10053f:	c7 01 fb f0 10 00    	movl   $0x10f0fb,(%ecx)
  100545:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100548:	e8 f3 fc ff ff       	call   100240 <cprintf>
    va_end(ap);
}
  10054d:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100550:	83 c4 34             	add    $0x34,%esp
  100553:	5e                   	pop    %esi
  100554:	5d                   	pop    %ebp
  100555:	c3                   	ret    
  100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10055d:	00 00 00 

00100560 <is_kernel_panic>:

bool
is_kernel_panic(void) {
  100560:	55                   	push   %ebp
  100561:	89 e5                	mov    %esp,%ebp
    return is_panic;
  100563:	a1 04 3e 11 00       	mov    0x113e04,%eax
  100568:	5d                   	pop    %ebp
  100569:	c3                   	ret    
  10056a:	66 90                	xchg   %ax,%ax
  10056c:	66 90                	xchg   %ax,%ax
  10056e:	66 90                	xchg   %ax,%ax

00100570 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
  100570:	55                   	push   %ebp
  100571:	89 e5                	mov    %esp,%ebp
  100573:	53                   	push   %ebx
  100574:	57                   	push   %edi
  100575:	56                   	push   %esi
  100576:	83 ec 6c             	sub    $0x6c,%esp
  100579:	8b 45 0c             	mov    0xc(%ebp),%eax
  10057c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10057f:	8d 15 08 07 11 00    	lea    0x110708,%edx
  100585:	8d 35 08 07 11 00    	lea    0x110708,%esi
  10058b:	8d 3d 07 07 11 00    	lea    0x110707,%edi
  100591:	8d 1d 07 07 11 00    	lea    0x110707,%ebx
  100597:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10059a:	8d 05 37 f1 10 00    	lea    0x10f137,%eax
  1005a0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1005a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  1005a6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
  1005a9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1005ac:	89 01                	mov    %eax,(%ecx)
    info->eip_line = 0;
  1005ae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1005b1:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
    info->eip_fn_name = "<unknown>";
  1005b8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1005bb:	89 41 08             	mov    %eax,0x8(%ecx)
    info->eip_fn_namelen = 9;
  1005be:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005c1:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
  1005c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005cb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1005ce:	89 41 10             	mov    %eax,0x10(%ecx)
    info->eip_fn_narg = 0;
  1005d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1005d4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    stabs = __STAB_BEGIN__;
  1005db:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    stab_end = __STAB_END__;
  1005de:	89 7d e0             	mov    %edi,-0x20(%ebp)
    stabstr = __STABSTR_BEGIN__;
  1005e1:	89 75 dc             	mov    %esi,-0x24(%ebp)
    stabstr_end = __STABSTR_END__;
  1005e4:	89 55 d8             	mov    %edx,-0x28(%ebp)

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
  1005e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1005ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1005ed:	0f 86 10 00 00 00    	jbe    100603 <debuginfo_eip+0x93>
  1005f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1005f6:	0f be 40 ff          	movsbl -0x1(%eax),%eax
  1005fa:	83 f8 00             	cmp    $0x0,%eax
  1005fd:	0f 84 0c 00 00 00    	je     10060f <debuginfo_eip+0x9f>
        return -1;
  100603:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  10060a:	e9 f0 02 00 00       	jmp    1008ff <debuginfo_eip+0x38f>
  10060f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  100612:	8d 4d d0             	lea    -0x30(%ebp),%ecx
  100615:	ba 64 00 00 00       	mov    $0x64,%edx
  10061a:	be 0c 00 00 00       	mov    $0xc,%esi
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
  10061f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  100626:	8b 7d e0             	mov    -0x20(%ebp),%edi
  100629:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10062c:	29 df                	sub    %ebx,%edi
  10062e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  100631:	89 f8                	mov    %edi,%eax
  100633:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  100636:	99                   	cltd   
  100637:	f7 fe                	idiv   %esi
  100639:	83 e8 01             	sub    $0x1,%eax
  10063c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
  10063f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100642:	8b 75 ec             	mov    -0x14(%ebp),%esi
  100645:	89 04 24             	mov    %eax,(%esp)
  100648:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10064b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10064f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100653:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
  10065a:	00 
  10065b:	89 74 24 10          	mov    %esi,0x10(%esp)
  10065f:	e8 ac 02 00 00       	call   100910 <stab_binsearch>
    if (lfile == 0)
  100664:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  100668:	0f 85 0c 00 00 00    	jne    10067a <debuginfo_eip+0x10a>
        return -1;
  10066e:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  100675:	e9 85 02 00 00       	jmp    1008ff <debuginfo_eip+0x38f>
  10067a:	8d 45 cc             	lea    -0x34(%ebp),%eax
  10067d:	8d 4d c8             	lea    -0x38(%ebp),%ecx
  100680:	ba 24 00 00 00       	mov    $0x24,%edx

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
  100685:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  100688:	89 75 cc             	mov    %esi,-0x34(%ebp)
  10068b:	8b 75 d0             	mov    -0x30(%ebp),%esi
  10068e:	89 75 c8             	mov    %esi,-0x38(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
  100691:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  100694:	8b 7d ec             	mov    -0x14(%ebp),%edi
  100697:	89 34 24             	mov    %esi,(%esp)
  10069a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10069e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  1006a2:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
  1006a9:	00 
  1006aa:	89 7c 24 10          	mov    %edi,0x10(%esp)
  1006ae:	89 55 b0             	mov    %edx,-0x50(%ebp)
  1006b1:	e8 5a 02 00 00       	call   100910 <stab_binsearch>

    if (lfun <= rfun) {
  1006b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1006b9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
  1006bc:	0f 8f 60 00 00 00    	jg     100722 <debuginfo_eip+0x1b2>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
  1006c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1006c5:	6b c0 0c             	imul   $0xc,%eax,%eax
  1006c8:	03 45 e4             	add    -0x1c(%ebp),%eax
  1006cb:	8b 00                	mov    (%eax),%eax
  1006cd:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  1006d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1006d3:	29 d1                	sub    %edx,%ecx
  1006d5:	39 c8                	cmp    %ecx,%eax
  1006d7:	0f 83 14 00 00 00    	jae    1006f1 <debuginfo_eip+0x181>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
  1006dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1006e0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1006e3:	6b c9 0c             	imul   $0xc,%ecx,%ecx
  1006e6:	03 4d e4             	add    -0x1c(%ebp),%ecx
  1006e9:	03 01                	add    (%ecx),%eax
  1006eb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1006ee:	89 41 08             	mov    %eax,0x8(%ecx)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
  1006f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1006f4:	6b c0 0c             	imul   $0xc,%eax,%eax
  1006f7:	03 45 e4             	add    -0x1c(%ebp),%eax
  1006fa:	8b 40 08             	mov    0x8(%eax),%eax
  1006fd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100700:	89 41 10             	mov    %eax,0x10(%ecx)
        addr -= info->eip_fn_addr;
  100703:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100706:	8b 40 10             	mov    0x10(%eax),%eax
  100709:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10070c:	29 c1                	sub    %eax,%ecx
  10070e:	89 4d ec             	mov    %ecx,-0x14(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
  100711:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100714:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        rline = rfun;
  100717:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10071a:	89 45 c0             	mov    %eax,-0x40(%ebp)
    } else {
  10071d:	e9 15 00 00 00       	jmp    100737 <debuginfo_eip+0x1c7>
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
  100722:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100725:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100728:	89 41 10             	mov    %eax,0x10(%ecx)
        lline = lfile;
  10072b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10072e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        rline = rfile;
  100731:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100734:	89 45 c0             	mov    %eax,-0x40(%ebp)
  100737:	b8 3a 00 00 00       	mov    $0x3a,%eax
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
  10073c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10073f:	8b 49 08             	mov    0x8(%ecx),%ecx
  100742:	89 0c 24             	mov    %ecx,(%esp)
  100745:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
  10074c:	00 
  10074d:	89 45 ac             	mov    %eax,-0x54(%ebp)
  100750:	e8 eb d9 00 00       	call   10e140 <strfind>
  100755:	8d 4d c4             	lea    -0x3c(%ebp),%ecx
  100758:	8d 55 c0             	lea    -0x40(%ebp),%edx
  10075b:	be 44 00 00 00       	mov    $0x44,%esi
  100760:	8b 7d e8             	mov    -0x18(%ebp),%edi
  100763:	8b 7f 08             	mov    0x8(%edi),%edi
  100766:	29 f8                	sub    %edi,%eax
  100768:	8b 7d e8             	mov    -0x18(%ebp),%edi
  10076b:	89 47 0c             	mov    %eax,0xc(%edi)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
  10076e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100771:	8b 7d ec             	mov    -0x14(%ebp),%edi
  100774:	89 04 24             	mov    %eax,(%esp)
  100777:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10077b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10077f:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
  100786:	00 
  100787:	89 7c 24 10          	mov    %edi,0x10(%esp)
  10078b:	89 75 a8             	mov    %esi,-0x58(%ebp)
  10078e:	e8 7d 01 00 00       	call   100910 <stab_binsearch>
    if (lline <= rline) {
  100793:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100796:	3b 45 c0             	cmp    -0x40(%ebp),%eax
  100799:	0f 8f 18 00 00 00    	jg     1007b7 <debuginfo_eip+0x247>
        info->eip_line = stabs[rline].n_desc;
  10079f:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1007a2:	6b c0 0c             	imul   $0xc,%eax,%eax
  1007a5:	03 45 e4             	add    -0x1c(%ebp),%eax
  1007a8:	0f b7 40 06          	movzwl 0x6(%eax),%eax
  1007ac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1007af:	89 41 04             	mov    %eax,0x4(%ecx)
    } else {
  1007b2:	e9 0c 00 00 00       	jmp    1007c3 <debuginfo_eip+0x253>
        return -1;
  1007b7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  1007be:	e9 3c 01 00 00       	jmp    1008ff <debuginfo_eip+0x38f>

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
  1007c3:	e9 00 00 00 00       	jmp    1007c8 <debuginfo_eip+0x258>
  1007c8:	31 c0                	xor    %eax,%eax
  1007ca:	88 c1                	mov    %al,%cl
  1007cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1007cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
           && stabs[lline].n_type != N_SOL
  1007d2:	88 4d a7             	mov    %cl,-0x59(%ebp)
  1007d5:	0f 8c 56 00 00 00    	jl     100831 <debuginfo_eip+0x2c1>
  1007db:	31 c0                	xor    %eax,%eax
  1007dd:	88 c1                	mov    %al,%cl
  1007df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1007e2:	6b c0 0c             	imul   $0xc,%eax,%eax
  1007e5:	03 45 e4             	add    -0x1c(%ebp),%eax
  1007e8:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  1007ec:	3d 84 00 00 00       	cmp    $0x84,%eax
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
  1007f1:	88 4d a7             	mov    %cl,-0x59(%ebp)
  1007f4:	0f 84 37 00 00 00    	je     100831 <debuginfo_eip+0x2c1>
  1007fa:	b0 01                	mov    $0x1,%al
  1007fc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1007ff:	6b c9 0c             	imul   $0xc,%ecx,%ecx
  100802:	03 4d e4             	add    -0x1c(%ebp),%ecx
  100805:	0f b6 49 04          	movzbl 0x4(%ecx),%ecx
  100809:	83 f9 64             	cmp    $0x64,%ecx
  10080c:	88 45 a6             	mov    %al,-0x5a(%ebp)
  10080f:	0f 85 16 00 00 00    	jne    10082b <debuginfo_eip+0x2bb>
  100815:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100818:	6b c0 0c             	imul   $0xc,%eax,%eax
  10081b:	03 45 e4             	add    -0x1c(%ebp),%eax
  10081e:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  100822:	0f 95 c1             	setne  %cl
  100825:	80 f1 ff             	xor    $0xff,%cl
  100828:	88 4d a6             	mov    %cl,-0x5a(%ebp)
  10082b:	8a 45 a6             	mov    -0x5a(%ebp),%al
  10082e:	88 45 a7             	mov    %al,-0x59(%ebp)
  100831:	8a 45 a7             	mov    -0x59(%ebp),%al
    while (lline >= lfile
  100834:	a8 01                	test   $0x1,%al
  100836:	0f 85 05 00 00 00    	jne    100841 <debuginfo_eip+0x2d1>
  10083c:	e9 0e 00 00 00       	jmp    10084f <debuginfo_eip+0x2df>
        lline --;
  100841:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100844:	83 c0 ff             	add    $0xffffffff,%eax
  100847:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    while (lline >= lfile
  10084a:	e9 79 ff ff ff       	jmp    1007c8 <debuginfo_eip+0x258>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
  10084f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  100852:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
  100855:	0f 8c 2e 00 00 00    	jl     100889 <debuginfo_eip+0x319>
  10085b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10085e:	6b c0 0c             	imul   $0xc,%eax,%eax
  100861:	03 45 e4             	add    -0x1c(%ebp),%eax
  100864:	8b 00                	mov    (%eax),%eax
  100866:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  100869:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10086c:	29 d1                	sub    %edx,%ecx
  10086e:	39 c8                	cmp    %ecx,%eax
  100870:	0f 83 13 00 00 00    	jae    100889 <debuginfo_eip+0x319>
        info->eip_file = stabstr + stabs[lline].n_strx;
  100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100879:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10087c:	6b c9 0c             	imul   $0xc,%ecx,%ecx
  10087f:	03 4d e4             	add    -0x1c(%ebp),%ecx
  100882:	03 01                	add    (%ecx),%eax
  100884:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  100887:	89 01                	mov    %eax,(%ecx)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
  100889:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10088c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
  10088f:	0f 8d 63 00 00 00    	jge    1008f8 <debuginfo_eip+0x388>
        for (lline = lfun + 1;
  100895:	8b 45 cc             	mov    -0x34(%ebp),%eax
  100898:	83 c0 01             	add    $0x1,%eax
  10089b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10089e:	31 c0                	xor    %eax,%eax
  1008a0:	88 c1                	mov    %al,%cl
             lline < rfun && stabs[lline].n_type == N_PSYM;
  1008a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1008a5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
  1008a8:	88 4d a5             	mov    %cl,-0x5b(%ebp)
  1008ab:	0f 8d 18 00 00 00    	jge    1008c9 <debuginfo_eip+0x359>
  1008b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1008b4:	6b c0 0c             	imul   $0xc,%eax,%eax
  1008b7:	03 45 e4             	add    -0x1c(%ebp),%eax
  1008ba:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  1008be:	3d a0 00 00 00       	cmp    $0xa0,%eax
  1008c3:	0f 94 c1             	sete   %cl
  1008c6:	88 4d a5             	mov    %cl,-0x5b(%ebp)
  1008c9:	8a 45 a5             	mov    -0x5b(%ebp),%al
        for (lline = lfun + 1;
  1008cc:	a8 01                	test   $0x1,%al
  1008ce:	0f 85 05 00 00 00    	jne    1008d9 <debuginfo_eip+0x369>
  1008d4:	e9 1a 00 00 00       	jmp    1008f3 <debuginfo_eip+0x383>
             lline ++) {
            info->eip_fn_narg ++;
  1008d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1008dc:	8b 48 14             	mov    0x14(%eax),%ecx
  1008df:	83 c1 01             	add    $0x1,%ecx
  1008e2:	89 48 14             	mov    %ecx,0x14(%eax)
             lline ++) {
  1008e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1008e8:	83 c0 01             	add    $0x1,%eax
  1008eb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        for (lline = lfun + 1;
  1008ee:	e9 ab ff ff ff       	jmp    10089e <debuginfo_eip+0x32e>
        }
    }
  1008f3:	e9 00 00 00 00       	jmp    1008f8 <debuginfo_eip+0x388>
    return 0;
  1008f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
}
  1008ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100902:	83 c4 6c             	add    $0x6c,%esp
  100905:	5e                   	pop    %esi
  100906:	5f                   	pop    %edi
  100907:	5b                   	pop    %ebx
  100908:	5d                   	pop    %ebp
  100909:	c3                   	ret    
  10090a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00100910 <stab_binsearch>:
           int type, uintptr_t addr) {
  100910:	55                   	push   %ebp
  100911:	89 e5                	mov    %esp,%ebp
  100913:	57                   	push   %edi
  100914:	56                   	push   %esi
  100915:	83 ec 30             	sub    $0x30,%esp
  100918:	8b 45 18             	mov    0x18(%ebp),%eax
  10091b:	8b 4d 14             	mov    0x14(%ebp),%ecx
  10091e:	8b 55 10             	mov    0x10(%ebp),%edx
  100921:	8b 75 0c             	mov    0xc(%ebp),%esi
  100924:	8b 7d 08             	mov    0x8(%ebp),%edi
  100927:	89 7d f4             	mov    %edi,-0xc(%ebp)
  10092a:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10092d:	89 55 ec             	mov    %edx,-0x14(%ebp)
  100930:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  100933:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int l = *region_left, r = *region_right, any_matches = 0;
  100936:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100939:	8b 00                	mov    (%eax),%eax
  10093b:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10093e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100941:	8b 00                	mov    (%eax),%eax
  100943:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100946:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    while (l <= r) {
  10094d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100950:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  100953:	0f 8f 01 01 00 00    	jg     100a5a <stab_binsearch+0x14a>
  100959:	b8 02 00 00 00       	mov    $0x2,%eax
        int true_m = (l + r) / 2, m = true_m;
  10095e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100961:	03 4d dc             	add    -0x24(%ebp),%ecx
  100964:	89 45 cc             	mov    %eax,-0x34(%ebp)
  100967:	89 c8                	mov    %ecx,%eax
  100969:	99                   	cltd   
  10096a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10096d:	f7 f9                	idiv   %ecx
  10096f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  100972:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100975:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100978:	31 c0                	xor    %eax,%eax
  10097a:	88 c1                	mov    %al,%cl
        while (m >= l && stabs[m].n_type != type) {
  10097c:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10097f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  100982:	88 4d cb             	mov    %cl,-0x35(%ebp)
  100985:	0f 8c 16 00 00 00    	jl     1009a1 <stab_binsearch+0x91>
  10098b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10098e:	6b c0 0c             	imul   $0xc,%eax,%eax
  100991:	03 45 f4             	add    -0xc(%ebp),%eax
  100994:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  100998:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  10099b:	0f 95 c1             	setne  %cl
  10099e:	88 4d cb             	mov    %cl,-0x35(%ebp)
  1009a1:	8a 45 cb             	mov    -0x35(%ebp),%al
  1009a4:	a8 01                	test   $0x1,%al
  1009a6:	0f 85 05 00 00 00    	jne    1009b1 <stab_binsearch+0xa1>
  1009ac:	e9 0e 00 00 00       	jmp    1009bf <stab_binsearch+0xaf>
            m --;
  1009b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1009b4:	83 c0 ff             	add    $0xffffffff,%eax
  1009b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
        while (m >= l && stabs[m].n_type != type) {
  1009ba:	e9 b9 ff ff ff       	jmp    100978 <stab_binsearch+0x68>
        if (m < l) {    // no match in [l, m]
  1009bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1009c2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  1009c5:	0f 8d 0e 00 00 00    	jge    1009d9 <stab_binsearch+0xc9>
            l = true_m + 1;
  1009cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1009ce:	83 c0 01             	add    $0x1,%eax
  1009d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
            continue;
  1009d4:	e9 74 ff ff ff       	jmp    10094d <stab_binsearch+0x3d>
        any_matches = 1;
  1009d9:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
        if (stabs[m].n_value < addr) {
  1009e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1009e3:	6b c0 0c             	imul   $0xc,%eax,%eax
  1009e6:	03 45 f4             	add    -0xc(%ebp),%eax
  1009e9:	8b 40 08             	mov    0x8(%eax),%eax
  1009ec:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1009ef:	0f 83 16 00 00 00    	jae    100a0b <stab_binsearch+0xfb>
            *region_left = m;
  1009f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1009f8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1009fb:	89 01                	mov    %eax,(%ecx)
            l = true_m + 1;
  1009fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100a00:	83 c0 01             	add    $0x1,%eax
  100a03:	89 45 e0             	mov    %eax,-0x20(%ebp)
        } else if (stabs[m].n_value > addr) {
  100a06:	e9 4a 00 00 00       	jmp    100a55 <stab_binsearch+0x145>
  100a0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a0e:	6b c0 0c             	imul   $0xc,%eax,%eax
  100a11:	03 45 f4             	add    -0xc(%ebp),%eax
  100a14:	8b 40 08             	mov    0x8(%eax),%eax
  100a17:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  100a1a:	0f 86 19 00 00 00    	jbe    100a39 <stab_binsearch+0x129>
            *region_right = m - 1;
  100a20:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a23:	83 e8 01             	sub    $0x1,%eax
  100a26:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100a29:	89 01                	mov    %eax,(%ecx)
            r = m - 1;
  100a2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a2e:	83 e8 01             	sub    $0x1,%eax
  100a31:	89 45 dc             	mov    %eax,-0x24(%ebp)
        } else {
  100a34:	e9 17 00 00 00       	jmp    100a50 <stab_binsearch+0x140>
            *region_left = m;
  100a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a3c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100a3f:	89 01                	mov    %eax,(%ecx)
            l = m;
  100a41:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100a44:	89 45 e0             	mov    %eax,-0x20(%ebp)
            addr ++;
  100a47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100a4a:	83 c0 01             	add    $0x1,%eax
  100a4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100a50:	e9 00 00 00 00       	jmp    100a55 <stab_binsearch+0x145>
    while (l <= r) {
  100a55:	e9 f3 fe ff ff       	jmp    10094d <stab_binsearch+0x3d>
    if (!any_matches) {
  100a5a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
  100a5e:	0f 85 12 00 00 00    	jne    100a76 <stab_binsearch+0x166>
        *region_right = *region_left - 1;
  100a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a67:	8b 00                	mov    (%eax),%eax
  100a69:	83 e8 01             	sub    $0x1,%eax
  100a6c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  100a6f:	89 01                	mov    %eax,(%ecx)
    }
  100a71:	e9 5e 00 00 00       	jmp    100ad4 <stab_binsearch+0x1c4>
        l = *region_right;
  100a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100a79:	8b 00                	mov    (%eax),%eax
  100a7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100a7e:	31 c0                	xor    %eax,%eax
  100a80:	88 c1                	mov    %al,%cl
        for (; l > *region_left && stabs[l].n_type != type; l --)
  100a82:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a85:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100a88:	3b 02                	cmp    (%edx),%eax
  100a8a:	88 4d ca             	mov    %cl,-0x36(%ebp)
  100a8d:	0f 8e 16 00 00 00    	jle    100aa9 <stab_binsearch+0x199>
  100a93:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a96:	6b c0 0c             	imul   $0xc,%eax,%eax
  100a99:	03 45 f4             	add    -0xc(%ebp),%eax
  100a9c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  100aa0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  100aa3:	0f 95 c1             	setne  %cl
  100aa6:	88 4d ca             	mov    %cl,-0x36(%ebp)
  100aa9:	8a 45 ca             	mov    -0x36(%ebp),%al
  100aac:	a8 01                	test   $0x1,%al
  100aae:	0f 85 05 00 00 00    	jne    100ab9 <stab_binsearch+0x1a9>
  100ab4:	e9 13 00 00 00       	jmp    100acc <stab_binsearch+0x1bc>
  100ab9:	e9 00 00 00 00       	jmp    100abe <stab_binsearch+0x1ae>
  100abe:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100ac1:	83 c0 ff             	add    $0xffffffff,%eax
  100ac4:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100ac7:	e9 b2 ff ff ff       	jmp    100a7e <stab_binsearch+0x16e>
        *region_left = l;
  100acc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100acf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  100ad2:	89 01                	mov    %eax,(%ecx)
}
  100ad4:	83 c4 30             	add    $0x30,%esp
  100ad7:	5e                   	pop    %esi
  100ad8:	5f                   	pop    %edi
  100ad9:	5d                   	pop    %ebp
  100ada:	c3                   	ret    
  100adb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00100ae0 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
  100ae0:	55                   	push   %ebp
  100ae1:	89 e5                	mov    %esp,%ebp
  100ae3:	53                   	push   %ebx
  100ae4:	57                   	push   %edi
  100ae5:	56                   	push   %esi
  100ae6:	83 ec 2c             	sub    $0x2c,%esp
  100ae9:	8d 05 41 f1 10 00    	lea    0x10f141,%eax
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
  100aef:	89 04 24             	mov    %eax,(%esp)
  100af2:	e8 49 f7 ff ff       	call   100240 <cprintf>
  100af7:	8d 0d 5a f1 10 00    	lea    0x10f15a,%ecx
  100afd:	8d 15 30 00 10 00    	lea    0x100030,%edx
    cprintf("  entry  0x%08x (phys)\n", kern_init);
  100b03:	89 0c 24             	mov    %ecx,(%esp)
  100b06:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100b0d:	e8 2e f7 ff ff       	call   100240 <cprintf>
  100b12:	8d 0d 72 f1 10 00    	lea    0x10f172,%ecx
  100b18:	8d 15 d9 f0 10 00    	lea    0x10f0d9,%edx
    cprintf("  etext  0x%08x (phys)\n", etext);
  100b1e:	89 0c 24             	mov    %ecx,(%esp)
  100b21:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100b28:	e8 13 f7 ff ff       	call   100240 <cprintf>
  100b2d:	8d 0d 8a f1 10 00    	lea    0x10f18a,%ecx
  100b33:	8d 15 04 3a 11 00    	lea    0x113a04,%edx
    cprintf("  edata  0x%08x (phys)\n", edata);
  100b39:	89 0c 24             	mov    %ecx,(%esp)
  100b3c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
  100b43:	e8 f8 f6 ff ff       	call   100240 <cprintf>
  100b48:	8d 0d a2 f1 10 00    	lea    0x10f1a2,%ecx
  100b4e:	8d 15 3c 49 11 00    	lea    0x11493c,%edx
    cprintf("  end    0x%08x (phys)\n", end);
  100b54:	89 0c 24             	mov    %ecx,(%esp)
  100b57:	89 54 24 04          	mov    %edx,0x4(%esp)
  100b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100b5e:	e8 dd f6 ff ff       	call   100240 <cprintf>
  100b63:	8d 0d ba f1 10 00    	lea    0x10f1ba,%ecx
  100b69:	8d 15 3c 49 11 00    	lea    0x11493c,%edx
  100b6f:	8d 35 30 00 10 00    	lea    0x100030,%esi
  100b75:	29 f2                	sub    %esi,%edx
  100b77:	81 c2 ff 03 00 00    	add    $0x3ff,%edx
  100b7d:	be 00 04 00 00       	mov    $0x400,%esi
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
  100b82:	bf 30 00 10 00       	mov    $0x100030,%edi
  100b87:	bb 3c 49 11 00       	mov    $0x11493c,%ebx
  100b8c:	29 fb                	sub    %edi,%ebx
  100b8e:	89 df                	mov    %ebx,%edi
  100b90:	81 c7 ff 03 00 00    	add    $0x3ff,%edi
  100b96:	c1 ff 1f             	sar    $0x1f,%edi
  100b99:	c1 ef 16             	shr    $0x16,%edi
  100b9c:	8d bc 3b ff 03 00 00 	lea    0x3ff(%ebx,%edi,1),%edi
  100ba3:	c1 ff 0a             	sar    $0xa,%edi
  100ba6:	89 e3                	mov    %esp,%ebx
  100ba8:	89 7b 04             	mov    %edi,0x4(%ebx)
  100bab:	c7 03 ba f1 10 00    	movl   $0x10f1ba,(%ebx)
  100bb1:	89 45 e0             	mov    %eax,-0x20(%ebp)
  100bb4:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  100bb7:	89 55 d8             	mov    %edx,-0x28(%ebp)
  100bba:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  100bbd:	e8 7e f6 ff ff       	call   100240 <cprintf>
}
  100bc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100bc5:	83 c4 2c             	add    $0x2c,%esp
  100bc8:	5e                   	pop    %esi
  100bc9:	5f                   	pop    %edi
  100bca:	5b                   	pop    %ebx
  100bcb:	5d                   	pop    %ebp
  100bcc:	c3                   	ret    
  100bcd:	0f 1f 00             	nopl   (%eax)

00100bd0 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
  100bd0:	55                   	push   %ebp
  100bd1:	89 e5                	mov    %esp,%ebp
  100bd3:	57                   	push   %edi
  100bd4:	56                   	push   %esi
  100bd5:	81 ec 40 01 00 00    	sub    $0x140,%esp
  100bdb:	8b 45 08             	mov    0x8(%ebp),%eax
  100bde:	8d 4d d8             	lea    -0x28(%ebp),%ecx
  100be1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
  100be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100be7:	89 04 24             	mov    %eax,(%esp)
  100bea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100bee:	e8 7d f9 ff ff       	call   100570 <debuginfo_eip>
  100bf3:	83 f8 00             	cmp    $0x0,%eax
  100bf6:	0f 84 20 00 00 00    	je     100c1c <print_debuginfo+0x4c>
  100bfc:	8d 05 e4 f1 10 00    	lea    0x10f1e4,%eax
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
  100c02:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100c05:	89 04 24             	mov    %eax,(%esp)
  100c08:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100c0c:	e8 2f f6 ff ff       	call   100240 <cprintf>
    }
  100c11:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  100c17:	e9 8a 00 00 00       	jmp    100ca6 <print_debuginfo+0xd6>
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
  100c1c:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%ebp)
  100c23:	00 00 00 
  100c26:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  100c2c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  100c2f:	0f 8d 2d 00 00 00    	jge    100c62 <print_debuginfo+0x92>
            fnname[j] = info.eip_fn_name[j];
  100c35:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  100c3b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  100c3e:	8a 14 01             	mov    (%ecx,%eax,1),%dl
  100c41:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  100c47:	88 94 05 d8 fe ff ff 	mov    %dl,-0x128(%ebp,%eax,1)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
  100c4e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  100c54:	83 c0 01             	add    $0x1,%eax
  100c57:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
  100c5d:	e9 c4 ff ff ff       	jmp    100c26 <print_debuginfo+0x56>
  100c62:	8d 05 00 f2 10 00    	lea    0x10f200,%eax
  100c68:	8d 8d d8 fe ff ff    	lea    -0x128(%ebp),%ecx
        }
        fnname[j] = '\0';
  100c6e:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
  100c74:	c6 84 15 d8 fe ff ff 	movb   $0x0,-0x128(%ebp,%edx,1)
  100c7b:	00 
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
  100c7c:	8b 55 d8             	mov    -0x28(%ebp),%edx
  100c7f:	8b 75 dc             	mov    -0x24(%ebp),%esi
                fnname, eip - info.eip_fn_addr);
  100c82:	8b 7d f4             	mov    -0xc(%ebp),%edi
  100c85:	2b 7d e8             	sub    -0x18(%ebp),%edi
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
  100c88:	89 04 24             	mov    %eax,(%esp)
  100c8b:	89 54 24 04          	mov    %edx,0x4(%esp)
  100c8f:	89 74 24 08          	mov    %esi,0x8(%esp)
  100c93:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  100c97:	89 7c 24 10          	mov    %edi,0x10(%esp)
  100c9b:	e8 a0 f5 ff ff       	call   100240 <cprintf>
  100ca0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
    }
}
  100ca6:	81 c4 40 01 00 00    	add    $0x140,%esp
  100cac:	5e                   	pop    %esi
  100cad:	5f                   	pop    %edi
  100cae:	5d                   	pop    %ebp
  100caf:	c3                   	ret    

00100cb0 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
  100cb0:	55                   	push   %ebp
  100cb1:	89 e5                	mov    %esp,%ebp
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
}
  100cb3:	5d                   	pop    %ebp
  100cb4:	c3                   	ret    
  100cb5:	66 90                	xchg   %ax,%ax
  100cb7:	66 90                	xchg   %ax,%ax
  100cb9:	66 90                	xchg   %ax,%ax
  100cbb:	66 90                	xchg   %ax,%ax
  100cbd:	66 90                	xchg   %ax,%ax
  100cbf:	90                   	nop

00100cc0 <kmonitor>:
}

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
  100cc0:	55                   	push   %ebp
  100cc1:	89 e5                	mov    %esp,%ebp
  100cc3:	83 ec 18             	sub    $0x18,%esp
  100cc6:	8b 45 08             	mov    0x8(%ebp),%eax
  100cc9:	8d 0d 12 f2 10 00    	lea    0x10f212,%ecx
  100ccf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("Welcome to the kernel debug monitor!!\n");
  100cd2:	89 0c 24             	mov    %ecx,(%esp)
  100cd5:	e8 66 f5 ff ff       	call   100240 <cprintf>
  100cda:	8d 0d 39 f2 10 00    	lea    0x10f239,%ecx
    cprintf("Type 'help' for a list of commands.\n");
  100ce0:	89 0c 24             	mov    %ecx,(%esp)
  100ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  100ce6:	e8 55 f5 ff ff       	call   100240 <cprintf>

    if (tf != NULL) {
  100ceb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  100cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100cf2:	0f 84 0b 00 00 00    	je     100d03 <kmonitor+0x43>
        print_trapframe(tf);
  100cf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100cfb:	89 04 24             	mov    %eax,(%esp)
  100cfe:	e8 1d 13 00 00       	call   102020 <print_trapframe>
  100d03:	8d 05 5e f2 10 00    	lea    0x10f25e,%eax
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
  100d09:	89 04 24             	mov    %eax,(%esp)
  100d0c:	e8 1f f6 ff ff       	call   100330 <readline>
  100d11:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100d14:	83 f8 00             	cmp    $0x0,%eax
  100d17:	0f 84 25 00 00 00    	je     100d42 <kmonitor+0x82>
            if (runcmd(buf, tf) < 0) {
  100d1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100d20:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100d23:	89 04 24             	mov    %eax,(%esp)
  100d26:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100d2a:	e8 21 00 00 00       	call   100d50 <runcmd>
  100d2f:	83 f8 00             	cmp    $0x0,%eax
  100d32:	0f 8d 05 00 00 00    	jge    100d3d <kmonitor+0x7d>
                break;
  100d38:	e9 0a 00 00 00       	jmp    100d47 <kmonitor+0x87>
            }
        }
  100d3d:	e9 00 00 00 00       	jmp    100d42 <kmonitor+0x82>
    while (1) {
  100d42:	e9 bc ff ff ff       	jmp    100d03 <kmonitor+0x43>
    }
}
  100d47:	83 c4 18             	add    $0x18,%esp
  100d4a:	5d                   	pop    %ebp
  100d4b:	c3                   	ret    
  100d4c:	0f 1f 40 00          	nopl   0x0(%eax)

00100d50 <runcmd>:
runcmd(char *buf, struct trapframe *tf) {
  100d50:	55                   	push   %ebp
  100d51:	89 e5                	mov    %esp,%ebp
  100d53:	56                   	push   %esi
  100d54:	83 ec 64             	sub    $0x64,%esp
  100d57:	8b 45 0c             	mov    0xc(%ebp),%eax
  100d5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100d5d:	8d 55 b0             	lea    -0x50(%ebp),%edx
  100d60:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100d63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int argc = parse(buf, argv);
  100d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100d69:	89 04 24             	mov    %eax,(%esp)
  100d6c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d70:	e8 ab 01 00 00       	call   100f20 <parse>
  100d75:	89 45 ac             	mov    %eax,-0x54(%ebp)
    if (argc == 0) {
  100d78:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
  100d7c:	0f 85 0c 00 00 00    	jne    100d8e <runcmd+0x3e>
        return 0;
  100d82:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100d89:	e9 9c 00 00 00       	jmp    100e2a <runcmd+0xda>
    for (i = 0; i < NCOMMANDS; i ++) {
  100d8e:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
  100d95:	83 7d a8 03          	cmpl   $0x3,-0x58(%ebp)
  100d99:	0f 83 6c 00 00 00    	jae    100e0b <runcmd+0xbb>
  100d9f:	8d 05 20 30 11 00    	lea    0x113020,%eax
        if (strcmp(commands[i].name, argv[0]) == 0) {
  100da5:	6b 4d a8 0c          	imul   $0xc,-0x58(%ebp),%ecx
  100da9:	01 c8                	add    %ecx,%eax
  100dab:	8b 00                	mov    (%eax),%eax
  100dad:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  100db0:	89 04 24             	mov    %eax,(%esp)
  100db3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100db7:	e8 14 d2 00 00       	call   10dfd0 <strcmp>
  100dbc:	83 f8 00             	cmp    $0x0,%eax
  100dbf:	0f 85 33 00 00 00    	jne    100df8 <runcmd+0xa8>
  100dc5:	8d 45 b0             	lea    -0x50(%ebp),%eax
  100dc8:	8d 0d 20 30 11 00    	lea    0x113020,%ecx
            return commands[i].func(argc - 1, argv + 1, tf);
  100dce:	6b 55 a8 0c          	imul   $0xc,-0x58(%ebp),%edx
  100dd2:	01 d1                	add    %edx,%ecx
  100dd4:	8b 49 08             	mov    0x8(%ecx),%ecx
  100dd7:	8b 55 ac             	mov    -0x54(%ebp),%edx
  100dda:	83 ea 01             	sub    $0x1,%edx
  100ddd:	83 c0 04             	add    $0x4,%eax
  100de0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  100de3:	89 14 24             	mov    %edx,(%esp)
  100de6:	89 44 24 04          	mov    %eax,0x4(%esp)
  100dea:	89 74 24 08          	mov    %esi,0x8(%esp)
  100dee:	ff d1                	call   *%ecx
  100df0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  100df3:	e9 32 00 00 00       	jmp    100e2a <runcmd+0xda>
    }
  100df8:	e9 00 00 00 00       	jmp    100dfd <runcmd+0xad>
    for (i = 0; i < NCOMMANDS; i ++) {
  100dfd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  100e00:	83 c0 01             	add    $0x1,%eax
  100e03:	89 45 a8             	mov    %eax,-0x58(%ebp)
  100e06:	e9 8a ff ff ff       	jmp    100d95 <runcmd+0x45>
  100e0b:	8d 05 6b f2 10 00    	lea    0x10f26b,%eax
    cprintf("Unknown command '%s'\n", argv[0]);
  100e11:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  100e14:	89 04 24             	mov    %eax,(%esp)
  100e17:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  100e1b:	e8 20 f4 ff ff       	call   100240 <cprintf>
    return 0;
  100e20:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  100e27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
}
  100e2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100e2d:	83 c4 64             	add    $0x64,%esp
  100e30:	5e                   	pop    %esi
  100e31:	5d                   	pop    %ebp
  100e32:	c3                   	ret    
  100e33:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  100e3a:	84 00 00 00 00 00 

00100e40 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
  100e40:	55                   	push   %ebp
  100e41:	89 e5                	mov    %esp,%ebp
  100e43:	56                   	push   %esi
  100e44:	83 ec 24             	sub    $0x24,%esp
  100e47:	8b 45 10             	mov    0x10(%ebp),%eax
  100e4a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100e4d:	8b 55 08             	mov    0x8(%ebp),%edx
  100e50:	89 55 f8             	mov    %edx,-0x8(%ebp)
  100e53:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  100e56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
  100e59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  100e60:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
  100e64:	0f 83 40 00 00 00    	jae    100eaa <mon_help+0x6a>
  100e6a:	8d 05 62 f2 10 00    	lea    0x10f262,%eax
  100e70:	8d 0d 20 30 11 00    	lea    0x113020,%ecx
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
  100e76:	6b 55 ec 0c          	imul   $0xc,-0x14(%ebp),%edx
  100e7a:	89 ce                	mov    %ecx,%esi
  100e7c:	01 d6                	add    %edx,%esi
  100e7e:	8b 16                	mov    (%esi),%edx
  100e80:	6b 75 ec 0c          	imul   $0xc,-0x14(%ebp),%esi
  100e84:	01 f1                	add    %esi,%ecx
  100e86:	8b 49 04             	mov    0x4(%ecx),%ecx
  100e89:	89 04 24             	mov    %eax,(%esp)
  100e8c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100e90:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  100e94:	e8 a7 f3 ff ff       	call   100240 <cprintf>
  100e99:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < NCOMMANDS; i ++) {
  100e9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e9f:	83 c0 01             	add    $0x1,%eax
  100ea2:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100ea5:	e9 b6 ff ff ff       	jmp    100e60 <mon_help+0x20>
  100eaa:	31 c0                	xor    %eax,%eax
    }
    return 0;
  100eac:	83 c4 24             	add    $0x24,%esp
  100eaf:	5e                   	pop    %esi
  100eb0:	5d                   	pop    %ebp
  100eb1:	c3                   	ret    
  100eb2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  100eb9:	1f 84 00 00 00 00 00 

00100ec0 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
  100ec0:	55                   	push   %ebp
  100ec1:	89 e5                	mov    %esp,%ebp
  100ec3:	83 ec 18             	sub    $0x18,%esp
  100ec6:	8b 45 10             	mov    0x10(%ebp),%eax
  100ec9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100ecc:	8b 55 08             	mov    0x8(%ebp),%edx
  100ecf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100ed2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100ed5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    print_kerninfo();
  100ed8:	e8 03 fc ff ff       	call   100ae0 <print_kerninfo>
  100edd:	31 c0                	xor    %eax,%eax
    return 0;
  100edf:	83 c4 18             	add    $0x18,%esp
  100ee2:	5d                   	pop    %ebp
  100ee3:	c3                   	ret    
  100ee4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  100eeb:	00 00 00 00 00 

00100ef0 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
  100ef0:	55                   	push   %ebp
  100ef1:	89 e5                	mov    %esp,%ebp
  100ef3:	83 ec 18             	sub    $0x18,%esp
  100ef6:	8b 45 10             	mov    0x10(%ebp),%eax
  100ef9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100efc:	8b 55 08             	mov    0x8(%ebp),%edx
  100eff:	89 55 fc             	mov    %edx,-0x4(%ebp)
  100f02:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  100f05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    print_stackframe();
  100f08:	e8 a3 fd ff ff       	call   100cb0 <print_stackframe>
  100f0d:	31 c0                	xor    %eax,%eax
    return 0;
  100f0f:	83 c4 18             	add    $0x18,%esp
  100f12:	5d                   	pop    %ebp
  100f13:	c3                   	ret    
  100f14:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  100f1b:	00 00 00 00 00 

00100f20 <parse>:
parse(char *buf, char **argv) {
  100f20:	55                   	push   %ebp
  100f21:	89 e5                	mov    %esp,%ebp
  100f23:	83 ec 28             	sub    $0x28,%esp
  100f26:	8b 45 0c             	mov    0xc(%ebp),%eax
  100f29:	8b 4d 08             	mov    0x8(%ebp),%ecx
  100f2c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100f2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int argc = 0;
  100f32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
  100f39:	e9 00 00 00 00       	jmp    100f3e <parse+0x1e>
  100f3e:	31 c0                	xor    %eax,%eax
  100f40:	88 c1                	mov    %al,%cl
  100f42:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f45:	0f be 00             	movsbl (%eax),%eax
  100f48:	83 f8 00             	cmp    $0x0,%eax
  100f4b:	88 4d f3             	mov    %cl,-0xd(%ebp)
  100f4e:	0f 84 21 00 00 00    	je     100f75 <parse+0x55>
  100f54:	8d 05 81 f2 10 00    	lea    0x10f281,%eax
  100f5a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  100f5d:	89 04 24             	mov    %eax,(%esp)
  100f60:	0f be 01             	movsbl (%ecx),%eax
  100f63:	89 44 24 04          	mov    %eax,0x4(%esp)
  100f67:	e8 74 d1 00 00       	call   10e0e0 <strchr>
  100f6c:	83 f8 00             	cmp    $0x0,%eax
  100f6f:	0f 95 c2             	setne  %dl
  100f72:	88 55 f3             	mov    %dl,-0xd(%ebp)
  100f75:	8a 45 f3             	mov    -0xd(%ebp),%al
  100f78:	a8 01                	test   $0x1,%al
  100f7a:	0f 85 05 00 00 00    	jne    100f85 <parse+0x65>
  100f80:	e9 13 00 00 00       	jmp    100f98 <parse+0x78>
            *buf ++ = '\0';
  100f85:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f88:	89 c1                	mov    %eax,%ecx
  100f8a:	83 c1 01             	add    $0x1,%ecx
  100f8d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  100f90:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
  100f93:	e9 a6 ff ff ff       	jmp    100f3e <parse+0x1e>
        if (*buf == '\0') {
  100f98:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100f9b:	0f be 00             	movsbl (%eax),%eax
  100f9e:	83 f8 00             	cmp    $0x0,%eax
  100fa1:	0f 85 05 00 00 00    	jne    100fac <parse+0x8c>
            break;
  100fa7:	e9 99 00 00 00       	jmp    101045 <parse+0x125>
        if (argc == MAXARGS - 1) {
  100fac:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
  100fb0:	0f 85 21 00 00 00    	jne    100fd7 <parse+0xb7>
  100fb6:	8d 05 86 f2 10 00    	lea    0x10f286,%eax
  100fbc:	b9 10 00 00 00       	mov    $0x10,%ecx
            cprintf("Too many arguments (max %d).\n", MAXARGS);
  100fc1:	89 04 24             	mov    %eax,(%esp)
  100fc4:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  100fcb:	00 
  100fcc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100fcf:	e8 6c f2 ff ff       	call   100240 <cprintf>
  100fd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        argv[argc ++] = buf;
  100fd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100fda:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  100fdd:	89 ca                	mov    %ecx,%edx
  100fdf:	83 c2 01             	add    $0x1,%edx
  100fe2:	89 55 f4             	mov    %edx,-0xc(%ebp)
  100fe5:	8b 55 f8             	mov    -0x8(%ebp),%edx
  100fe8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
  100feb:	31 c0                	xor    %eax,%eax
  100fed:	88 c1                	mov    %al,%cl
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
  100fef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100ff2:	0f be 00             	movsbl (%eax),%eax
  100ff5:	83 f8 00             	cmp    $0x0,%eax
  100ff8:	88 4d e7             	mov    %cl,-0x19(%ebp)
  100ffb:	0f 84 21 00 00 00    	je     101022 <parse+0x102>
  101001:	8d 05 81 f2 10 00    	lea    0x10f281,%eax
  101007:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10100a:	89 04 24             	mov    %eax,(%esp)
  10100d:	0f be 01             	movsbl (%ecx),%eax
  101010:	89 44 24 04          	mov    %eax,0x4(%esp)
  101014:	e8 c7 d0 00 00       	call   10e0e0 <strchr>
  101019:	83 f8 00             	cmp    $0x0,%eax
  10101c:	0f 94 c2             	sete   %dl
  10101f:	88 55 e7             	mov    %dl,-0x19(%ebp)
  101022:	8a 45 e7             	mov    -0x19(%ebp),%al
  101025:	a8 01                	test   $0x1,%al
  101027:	0f 85 05 00 00 00    	jne    101032 <parse+0x112>
  10102d:	e9 0e 00 00 00       	jmp    101040 <parse+0x120>
            buf ++;
  101032:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101035:	83 c0 01             	add    $0x1,%eax
  101038:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
  10103b:	e9 ab ff ff ff       	jmp    100feb <parse+0xcb>
    while (1) {
  101040:	e9 f4 fe ff ff       	jmp    100f39 <parse+0x19>
    return argc;
  101045:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101048:	83 c4 28             	add    $0x28,%esp
  10104b:	5d                   	pop    %ebp
  10104c:	c3                   	ret    
  10104d:	66 90                	xchg   %ax,%ax
  10104f:	90                   	nop

00101050 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
  101050:	55                   	push   %ebp
  101051:	89 e5                	mov    %esp,%ebp
    // set 8253 timer-chip
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
  101053:	83 ec 18             	sub    $0x18,%esp
  101056:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
  10105c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  101060:	8a 45 f5             	mov    -0xb(%ebp),%al
  101063:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101067:	ee                   	out    %al,(%dx)
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
  101068:	66 c7 45 fa 40 00    	movw   $0x40,-0x6(%ebp)
  10106e:	c6 45 f9 9c          	movb   $0x9c,-0x7(%ebp)
  101072:	8a 45 f9             	mov    -0x7(%ebp),%al
  101075:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  101079:	ee                   	out    %al,(%dx)
    outb(IO_TIMER1, TIMER_DIV(100) / 256);
  10107a:	66 c7 45 fe 40 00    	movw   $0x40,-0x2(%ebp)
  101080:	c6 45 fd 2e          	movb   $0x2e,-0x3(%ebp)
  101084:	8a 45 fd             	mov    -0x3(%ebp),%al
  101087:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10108b:	ee                   	out    %al,(%dx)
  10108c:	8d 0d 21 f3 10 00    	lea    0x10f321,%ecx

    // initialize time counter 'ticks' to zero
    ticks = 0;
  101092:	c7 05 20 49 11 00 00 	movl   $0x0,0x114920
  101099:	00 00 00 

    cprintf("++ setup timer interrupts\n");
  10109c:	89 0c 24             	mov    %ecx,(%esp)
  10109f:	e8 9c f1 ff ff       	call   100240 <cprintf>
  1010a4:	31 c9                	xor    %ecx,%ecx
    pic_enable(IRQ_TIMER);
  1010a6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1010ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1010b0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1010b3:	e8 68 0b 00 00       	call   101c20 <pic_enable>
}
  1010b8:	83 c4 18             	add    $0x18,%esp
  1010bb:	5d                   	pop    %ebp
  1010bc:	c3                   	ret    
  1010bd:	66 90                	xchg   %ax,%ax
  1010bf:	90                   	nop

001010c0 <serial_intr>:
    return c;
}

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
  1010c0:	55                   	push   %ebp
  1010c1:	89 e5                	mov    %esp,%ebp
    if (serial_exists) {
  1010c3:	83 ec 08             	sub    $0x8,%esp
  1010c6:	83 3d 08 3e 11 00 00 	cmpl   $0x0,0x113e08
  1010cd:	0f 84 0e 00 00 00    	je     1010e1 <serial_intr+0x21>
  1010d3:	8d 05 60 11 10 00    	lea    0x101160,%eax
        cons_intr(serial_proc_data);
  1010d9:	89 04 24             	mov    %eax,(%esp)
  1010dc:	e8 0f 00 00 00       	call   1010f0 <cons_intr>
    }
}
  1010e1:	83 c4 08             	add    $0x8,%esp
  1010e4:	5d                   	pop    %ebp
  1010e5:	c3                   	ret    
  1010e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1010ed:	00 00 00 

001010f0 <cons_intr>:
cons_intr(int (*proc)(void)) {
  1010f0:	55                   	push   %ebp
  1010f1:	89 e5                	mov    %esp,%ebp
  1010f3:	83 ec 08             	sub    $0x8,%esp
  1010f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1010f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while ((c = (*proc)()) != -1) {
  1010fc:	ff 55 fc             	call   *-0x4(%ebp)
  1010ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101102:	83 f8 ff             	cmp    $0xffffffff,%eax
  101105:	0f 84 4a 00 00 00    	je     101155 <cons_intr+0x65>
        if (c != 0) {
  10110b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10110f:	0f 84 3b 00 00 00    	je     101150 <cons_intr+0x60>
            cons.buf[cons.wpos ++] = c;
  101115:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101118:	88 c1                	mov    %al,%cl
  10111a:	a1 10 40 11 00       	mov    0x114010,%eax
  10111f:	89 c2                	mov    %eax,%edx
  101121:	83 c2 01             	add    $0x1,%edx
  101124:	89 15 10 40 11 00    	mov    %edx,0x114010
  10112a:	88 0c 05 0c 3e 11 00 	mov    %cl,0x113e0c(,%eax,1)
            if (cons.wpos == CONSBUFSIZE) {
  101131:	81 3d 10 40 11 00 00 	cmpl   $0x200,0x114010
  101138:	02 00 00 
  10113b:	0f 85 0a 00 00 00    	jne    10114b <cons_intr+0x5b>
                cons.wpos = 0;
  101141:	c7 05 10 40 11 00 00 	movl   $0x0,0x114010
  101148:	00 00 00 
        }
  10114b:	e9 00 00 00 00       	jmp    101150 <cons_intr+0x60>
    while ((c = (*proc)()) != -1) {
  101150:	e9 a7 ff ff ff       	jmp    1010fc <cons_intr+0xc>
}
  101155:	83 c4 08             	add    $0x8,%esp
  101158:	5d                   	pop    %ebp
  101159:	c3                   	ret    
  10115a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101160 <serial_proc_data>:
serial_proc_data(void) {
  101160:	55                   	push   %ebp
  101161:	89 e5                	mov    %esp,%ebp
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
  101163:	83 ec 10             	sub    $0x10,%esp
  101166:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  10116c:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  101170:	ec                   	in     (%dx),%al
  101171:	88 45 f9             	mov    %al,-0x7(%ebp)
  101174:	0f b6 4d f9          	movzbl -0x7(%ebp),%ecx
  101178:	83 e1 01             	and    $0x1,%ecx
  10117b:	83 f9 00             	cmp    $0x0,%ecx
  10117e:	0f 85 0c 00 00 00    	jne    101190 <serial_proc_data+0x30>
        return -1;
  101184:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
  10118b:	e9 2c 00 00 00       	jmp    1011bc <serial_proc_data+0x5c>
    int c = inb(COM1 + COM_RX);
  101190:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
  101196:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10119a:	ec                   	in     (%dx),%al
  10119b:	88 45 fd             	mov    %al,-0x3(%ebp)
  10119e:	0f b6 4d fd          	movzbl -0x3(%ebp),%ecx
  1011a2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    if (c == 127) {
  1011a5:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
  1011a9:	0f 85 07 00 00 00    	jne    1011b6 <serial_proc_data+0x56>
        c = '\b';
  1011af:	c7 45 f0 08 00 00 00 	movl   $0x8,-0x10(%ebp)
    return c;
  1011b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1011b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
}
  1011bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1011bf:	83 c4 10             	add    $0x10,%esp
  1011c2:	5d                   	pop    %ebp
  1011c3:	c3                   	ret    
  1011c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  1011cb:	00 00 00 00 00 

001011d0 <cons_init>:
    pic_enable(IRQ_KBD);
}

/* cons_init - initializes the console devices */
void
cons_init(void) {
  1011d0:	55                   	push   %ebp
  1011d1:	89 e5                	mov    %esp,%ebp
    cga_init();
  1011d3:	83 ec 08             	sub    $0x8,%esp
  1011d6:	e8 35 00 00 00       	call   101210 <cga_init>
    serial_init();
  1011db:	e8 20 01 00 00       	call   101300 <serial_init>
    kbd_init();
  1011e0:	e8 0b 02 00 00       	call   1013f0 <kbd_init>
    if (!serial_exists) {
  1011e5:	83 3d 08 3e 11 00 00 	cmpl   $0x0,0x113e08
  1011ec:	0f 85 11 00 00 00    	jne    101203 <cons_init+0x33>
  1011f2:	8d 05 3c f3 10 00    	lea    0x10f33c,%eax
        cprintf("serial port does not exist!!\n");
  1011f8:	89 04 24             	mov    %eax,(%esp)
  1011fb:	e8 40 f0 ff ff       	call   100240 <cprintf>
  101200:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
  101203:	83 c4 08             	add    $0x8,%esp
  101206:	5d                   	pop    %ebp
  101207:	c3                   	ret    
  101208:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10120f:	00 

00101210 <cga_init>:
cga_init(void) {
  101210:	55                   	push   %ebp
  101211:	89 e5                	mov    %esp,%ebp
  101213:	83 ec 1c             	sub    $0x1c,%esp
  101216:	b8 00 80 0b c0       	mov    $0xc00b8000,%eax
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
  10121b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint16_t was = *cp;
  10121e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101221:	66 8b 08             	mov    (%eax),%cx
  101224:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
    *cp = (uint16_t) 0xA55A;
  101228:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10122b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
  101230:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101233:	66 8b 08             	mov    (%eax),%cx
  101236:	0f b7 c1             	movzwl %cx,%eax
  101239:	3d 5a a5 00 00       	cmp    $0xa55a,%eax
  10123e:	0f 84 16 00 00 00    	je     10125a <cga_init+0x4a>
  101244:	b8 00 00 0b c0       	mov    $0xc00b0000,%eax
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
  101249:	89 45 ec             	mov    %eax,-0x14(%ebp)
        addr_6845 = MONO_BASE;
  10124c:	66 c7 05 14 40 11 00 	movw   $0x3b4,0x114014
  101253:	b4 03 
    } else {
  101255:	e9 13 00 00 00       	jmp    10126d <cga_init+0x5d>
        *cp = was;
  10125a:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
  10125e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101261:	66 89 01             	mov    %ax,(%ecx)
        addr_6845 = CGA_BASE;
  101264:	66 c7 05 14 40 11 00 	movw   $0x3d4,0x114014
  10126b:	d4 03 
    outb(addr_6845, 14);
  10126d:	66 a1 14 40 11 00    	mov    0x114014,%ax
  101273:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
  101277:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  10127b:	8a 45 f1             	mov    -0xf(%ebp),%al
  10127e:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101282:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
  101283:	0f b7 0d 14 40 11 00 	movzwl 0x114014,%ecx
  10128a:	83 c1 01             	add    $0x1,%ecx
  10128d:	66 89 ca             	mov    %cx,%dx
  101290:	66 89 55 f6          	mov    %dx,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  101294:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101298:	ec                   	in     (%dx),%al
  101299:	88 45 f5             	mov    %al,-0xb(%ebp)
  10129c:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
  1012a0:	c1 e1 08             	shl    $0x8,%ecx
  1012a3:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    outb(addr_6845, 15);
  1012a6:	66 8b 15 14 40 11 00 	mov    0x114014,%dx
  1012ad:	66 89 55 fa          	mov    %dx,-0x6(%ebp)
  1012b1:	c6 45 f9 0f          	movb   $0xf,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  1012b5:	8a 45 f9             	mov    -0x7(%ebp),%al
  1012b8:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  1012bc:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
  1012bd:	0f b7 0d 14 40 11 00 	movzwl 0x114014,%ecx
  1012c4:	83 c1 01             	add    $0x1,%ecx
  1012c7:	66 89 ca             	mov    %cx,%dx
  1012ca:	66 89 55 fe          	mov    %dx,-0x2(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  1012ce:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1012d2:	ec                   	in     (%dx),%al
  1012d3:	88 45 fd             	mov    %al,-0x3(%ebp)
  1012d6:	0f b6 4d fd          	movzbl -0x3(%ebp),%ecx
  1012da:	0b 4d e4             	or     -0x1c(%ebp),%ecx
  1012dd:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    crt_buf = (uint16_t*) cp;
  1012e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1012e3:	89 0d 18 40 11 00    	mov    %ecx,0x114018
    crt_pos = pos;
  1012e9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1012ec:	66 89 ca             	mov    %cx,%dx
  1012ef:	66 89 15 1c 40 11 00 	mov    %dx,0x11401c
}
  1012f6:	83 c4 1c             	add    $0x1c,%esp
  1012f9:	5d                   	pop    %ebp
  1012fa:	c3                   	ret    
  1012fb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

00101300 <serial_init>:
serial_init(void) {
  101300:	55                   	push   %ebp
  101301:	89 e5                	mov    %esp,%ebp
    outb(COM1 + COM_FCR, 0);
  101303:	83 ec 38             	sub    $0x38,%esp
  101306:	66 c7 45 da fa 03    	movw   $0x3fa,-0x26(%ebp)
  10130c:	c6 45 d9 00          	movb   $0x0,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  101310:	8a 45 d9             	mov    -0x27(%ebp),%al
  101313:	66 8b 55 da          	mov    -0x26(%ebp),%dx
  101317:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_LCR, COM_LCR_DLAB);
  101318:	66 c7 45 de fb 03    	movw   $0x3fb,-0x22(%ebp)
  10131e:	c6 45 dd 80          	movb   $0x80,-0x23(%ebp)
  101322:	8a 45 dd             	mov    -0x23(%ebp),%al
  101325:	66 8b 55 de          	mov    -0x22(%ebp),%dx
  101329:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_DLL, (uint8_t) (115200 / 9600));
  10132a:	66 c7 45 e2 f8 03    	movw   $0x3f8,-0x1e(%ebp)
  101330:	c6 45 e1 0c          	movb   $0xc,-0x1f(%ebp)
  101334:	8a 45 e1             	mov    -0x1f(%ebp),%al
  101337:	66 8b 55 e2          	mov    -0x1e(%ebp),%dx
  10133b:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_DLM, 0);
  10133c:	66 c7 45 e6 f9 03    	movw   $0x3f9,-0x1a(%ebp)
  101342:	c6 45 e5 00          	movb   $0x0,-0x1b(%ebp)
  101346:	8a 45 e5             	mov    -0x1b(%ebp),%al
  101349:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
  10134d:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_LCR, COM_LCR_WLEN8 & ~COM_LCR_DLAB);
  10134e:	66 c7 45 ea fb 03    	movw   $0x3fb,-0x16(%ebp)
  101354:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
  101358:	8a 45 e9             	mov    -0x17(%ebp),%al
  10135b:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
  10135f:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_MCR, 0);
  101360:	66 c7 45 ee fc 03    	movw   $0x3fc,-0x12(%ebp)
  101366:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
  10136a:	8a 45 ed             	mov    -0x13(%ebp),%al
  10136d:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
  101371:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_IER, COM_IER_RDI);
  101372:	66 c7 45 f2 f9 03    	movw   $0x3f9,-0xe(%ebp)
  101378:	c6 45 f1 01          	movb   $0x1,-0xf(%ebp)
  10137c:	8a 45 f1             	mov    -0xf(%ebp),%al
  10137f:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101383:	ee                   	out    %al,(%dx)
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
  101384:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  10138a:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  10138e:	ec                   	in     (%dx),%al
  10138f:	88 45 f5             	mov    %al,-0xb(%ebp)
  101392:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
  101396:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
  10139c:	0f 95 c0             	setne  %al
  10139f:	24 01                	and    $0x1,%al
  1013a1:	0f b6 c8             	movzbl %al,%ecx
  1013a4:	89 0d 08 3e 11 00    	mov    %ecx,0x113e08
    (void) inb(COM1+COM_IIR);
  1013aa:	66 c7 45 fa fa 03    	movw   $0x3fa,-0x6(%ebp)
  1013b0:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  1013b4:	ec                   	in     (%dx),%al
  1013b5:	88 45 f9             	mov    %al,-0x7(%ebp)
    (void) inb(COM1+COM_RX);
  1013b8:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
  1013be:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1013c2:	ec                   	in     (%dx),%al
  1013c3:	88 45 fd             	mov    %al,-0x3(%ebp)
    if (serial_exists) {
  1013c6:	83 3d 08 3e 11 00 00 	cmpl   $0x0,0x113e08
  1013cd:	0f 84 14 00 00 00    	je     1013e7 <serial_init+0xe7>
  1013d3:	b8 04 00 00 00       	mov    $0x4,%eax
        pic_enable(IRQ_COM1);
  1013d8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  1013df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1013e2:	e8 39 08 00 00       	call   101c20 <pic_enable>
}
  1013e7:	83 c4 38             	add    $0x38,%esp
  1013ea:	5d                   	pop    %ebp
  1013eb:	c3                   	ret    
  1013ec:	0f 1f 40 00          	nopl   0x0(%eax)

001013f0 <kbd_init>:
kbd_init(void) {
  1013f0:	55                   	push   %ebp
  1013f1:	89 e5                	mov    %esp,%ebp
    kbd_intr();
  1013f3:	83 ec 08             	sub    $0x8,%esp
  1013f6:	e8 65 04 00 00       	call   101860 <kbd_intr>
  1013fb:	b8 01 00 00 00       	mov    $0x1,%eax
    pic_enable(IRQ_KBD);
  101400:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101407:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10140a:	e8 11 08 00 00       	call   101c20 <pic_enable>
}
  10140f:	83 c4 08             	add    $0x8,%esp
  101412:	5d                   	pop    %ebp
  101413:	c3                   	ret    
  101414:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10141b:	00 00 00 00 00 

00101420 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
  101420:	55                   	push   %ebp
  101421:	89 e5                	mov    %esp,%ebp
  101423:	83 ec 18             	sub    $0x18,%esp
  101426:	8b 45 08             	mov    0x8(%ebp),%eax
  101429:	89 45 fc             	mov    %eax,-0x4(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
  10142c:	e8 3f 00 00 00       	call   101470 <__intr_save>
  101431:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        lpt_putc(c);
  101434:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101437:	89 04 24             	mov    %eax,(%esp)
  10143a:	e8 71 00 00 00       	call   1014b0 <lpt_putc>
        cga_putc(c);
  10143f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101442:	89 04 24             	mov    %eax,(%esp)
  101445:	e8 d6 00 00 00       	call   101520 <cga_putc>
        serial_putc(c);
  10144a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10144d:	89 04 24             	mov    %eax,(%esp)
  101450:	e8 fb 02 00 00       	call   101750 <serial_putc>
    }
    local_intr_restore(intr_flag);
  101455:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101458:	89 04 24             	mov    %eax,(%esp)
  10145b:	e8 60 03 00 00       	call   1017c0 <__intr_restore>
}
  101460:	83 c4 18             	add    $0x18,%esp
  101463:	5d                   	pop    %ebp
  101464:	c3                   	ret    
  101465:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10146c:	00 00 00 00 

00101470 <__intr_save>:
#include <x86.h>
#include <intr.h>
#include <mmu.h>

static inline bool
__intr_save(void) {
  101470:	55                   	push   %ebp
  101471:	89 e5                	mov    %esp,%ebp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
  101473:	83 ec 08             	sub    $0x8,%esp
  101476:	9c                   	pushf  
  101477:	58                   	pop    %eax
  101478:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
  10147b:	8b 45 fc             	mov    -0x4(%ebp),%eax
    if (read_eflags() & FL_IF) {
  10147e:	25 00 02 00 00       	and    $0x200,%eax
  101483:	83 f8 00             	cmp    $0x0,%eax
  101486:	0f 84 11 00 00 00    	je     10149d <__intr_save+0x2d>
        intr_disable();
  10148c:	e8 8f 09 00 00       	call   101e20 <intr_disable>
        return 1;
  101491:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  101498:	e9 07 00 00 00       	jmp    1014a4 <__intr_save+0x34>
    }
    return 0;
  10149d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  1014a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1014a7:	83 c4 08             	add    $0x8,%esp
  1014aa:	5d                   	pop    %ebp
  1014ab:	c3                   	ret    
  1014ac:	0f 1f 40 00          	nopl   0x0(%eax)

001014b0 <lpt_putc>:
lpt_putc(int c) {
  1014b0:	55                   	push   %ebp
  1014b1:	89 e5                	mov    %esp,%ebp
  1014b3:	83 ec 18             	sub    $0x18,%esp
  1014b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1014b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c != '\b') {
  1014bc:	83 7d fc 08          	cmpl   $0x8,-0x4(%ebp)
  1014c0:	0f 84 10 00 00 00    	je     1014d6 <lpt_putc+0x26>
        lpt_putc_sub(c);
  1014c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1014c9:	89 04 24             	mov    %eax,(%esp)
  1014cc:	e8 af 03 00 00       	call   101880 <lpt_putc_sub>
    }
  1014d1:	e9 3c 00 00 00       	jmp    101512 <lpt_putc+0x62>
  1014d6:	b8 08 00 00 00       	mov    $0x8,%eax
        lpt_putc_sub('\b');
  1014db:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1014e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1014e5:	e8 96 03 00 00       	call   101880 <lpt_putc_sub>
  1014ea:	b8 20 00 00 00       	mov    $0x20,%eax
        lpt_putc_sub(' ');
  1014ef:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  1014f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1014f9:	e8 82 03 00 00       	call   101880 <lpt_putc_sub>
  1014fe:	b8 08 00 00 00       	mov    $0x8,%eax
        lpt_putc_sub('\b');
  101503:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  10150a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10150d:	e8 6e 03 00 00       	call   101880 <lpt_putc_sub>
}
  101512:	83 c4 18             	add    $0x18,%esp
  101515:	5d                   	pop    %ebp
  101516:	c3                   	ret    
  101517:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10151e:	00 00 

00101520 <cga_putc>:
cga_putc(int c) {
  101520:	55                   	push   %ebp
  101521:	89 e5                	mov    %esp,%ebp
  101523:	53                   	push   %ebx
  101524:	57                   	push   %edi
  101525:	56                   	push   %esi
  101526:	83 ec 4c             	sub    $0x4c,%esp
  101529:	8b 45 08             	mov    0x8(%ebp),%eax
  10152c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!(c & ~0xFF)) {
  10152f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101532:	25 00 ff ff ff       	and    $0xffffff00,%eax
  101537:	83 f8 00             	cmp    $0x0,%eax
  10153a:	0f 85 0b 00 00 00    	jne    10154b <cga_putc+0x2b>
        c |= 0x0700;
  101540:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101543:	0d 00 07 00 00       	or     $0x700,%eax
  101548:	89 45 e0             	mov    %eax,-0x20(%ebp)
    switch (c & 0xff) {
  10154b:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
  10154f:	89 c1                	mov    %eax,%ecx
  101551:	83 e9 08             	sub    $0x8,%ecx
  101554:	89 45 d8             	mov    %eax,-0x28(%ebp)
  101557:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10155a:	0f 84 2d 00 00 00    	je     10158d <cga_putc+0x6d>
  101560:	e9 00 00 00 00       	jmp    101565 <cga_putc+0x45>
  101565:	8b 45 d8             	mov    -0x28(%ebp),%eax
  101568:	83 e8 0a             	sub    $0xa,%eax
  10156b:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10156e:	0f 84 5e 00 00 00    	je     1015d2 <cga_putc+0xb2>
  101574:	e9 00 00 00 00       	jmp    101579 <cga_putc+0x59>
  101579:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10157c:	83 e8 0d             	sub    $0xd,%eax
  10157f:	89 45 cc             	mov    %eax,-0x34(%ebp)
  101582:	0f 84 5e 00 00 00    	je     1015e6 <cga_putc+0xc6>
  101588:	e9 88 00 00 00       	jmp    101615 <cga_putc+0xf5>
        if (crt_pos > 0) {
  10158d:	0f b7 05 1c 40 11 00 	movzwl 0x11401c,%eax
  101594:	83 f8 00             	cmp    $0x0,%eax
  101597:	0f 8e 30 00 00 00    	jle    1015cd <cga_putc+0xad>
            crt_pos --;
  10159d:	66 a1 1c 40 11 00    	mov    0x11401c,%ax
  1015a3:	66 83 c0 ff          	add    $0xffff,%ax
  1015a7:	66 a3 1c 40 11 00    	mov    %ax,0x11401c
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
  1015ad:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1015b0:	81 e1 00 ff ff ff    	and    $0xffffff00,%ecx
  1015b6:	83 c9 20             	or     $0x20,%ecx
  1015b9:	66 89 c8             	mov    %cx,%ax
  1015bc:	0f b7 0d 1c 40 11 00 	movzwl 0x11401c,%ecx
  1015c3:	8b 15 18 40 11 00    	mov    0x114018,%edx
  1015c9:	66 89 04 4a          	mov    %ax,(%edx,%ecx,2)
        break;
  1015cd:	e9 6b 00 00 00       	jmp    10163d <cga_putc+0x11d>
        crt_pos += CRT_COLS;
  1015d2:	0f b7 05 1c 40 11 00 	movzwl 0x11401c,%eax
  1015d9:	83 c0 50             	add    $0x50,%eax
  1015dc:	66 89 c1             	mov    %ax,%cx
  1015df:	66 89 0d 1c 40 11 00 	mov    %cx,0x11401c
  1015e6:	b8 50 00 00 00       	mov    $0x50,%eax
        crt_pos -= (crt_pos % CRT_COLS);
  1015eb:	0f b7 0d 1c 40 11 00 	movzwl 0x11401c,%ecx
  1015f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1015f5:	89 c8                	mov    %ecx,%eax
  1015f7:	99                   	cltd   
  1015f8:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  1015fb:	f7 f9                	idiv   %ecx
  1015fd:	0f b7 35 1c 40 11 00 	movzwl 0x11401c,%esi
  101604:	29 d6                	sub    %edx,%esi
  101606:	66 89 f7             	mov    %si,%di
  101609:	66 89 3d 1c 40 11 00 	mov    %di,0x11401c
        break;
  101610:	e9 28 00 00 00       	jmp    10163d <cga_putc+0x11d>
        crt_buf[crt_pos ++] = c;     // write the character
  101615:	8b 45 e0             	mov    -0x20(%ebp),%eax
  101618:	66 89 c1             	mov    %ax,%cx
  10161b:	66 8b 15 1c 40 11 00 	mov    0x11401c,%dx
  101622:	66 89 d6             	mov    %dx,%si
  101625:	66 83 c6 01          	add    $0x1,%si
  101629:	66 89 35 1c 40 11 00 	mov    %si,0x11401c
  101630:	0f b7 c2             	movzwl %dx,%eax
  101633:	8b 3d 18 40 11 00    	mov    0x114018,%edi
  101639:	66 89 0c 47          	mov    %cx,(%edi,%eax,2)
    if (crt_pos >= CRT_SIZE) {
  10163d:	0f b7 05 1c 40 11 00 	movzwl 0x11401c,%eax
  101644:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  101649:	0f 8c 76 00 00 00    	jl     1016c5 <cga_putc+0x1a5>
  10164f:	b8 00 0f 00 00       	mov    $0xf00,%eax
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
  101654:	8b 0d 18 40 11 00    	mov    0x114018,%ecx
  10165a:	8b 15 18 40 11 00    	mov    0x114018,%edx
  101660:	81 c2 a0 00 00 00    	add    $0xa0,%edx
  101666:	89 0c 24             	mov    %ecx,(%esp)
  101669:	89 54 24 04          	mov    %edx,0x4(%esp)
  10166d:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
  101674:	00 
  101675:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  101678:	e8 b3 cd 00 00       	call   10e430 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
  10167d:	c7 45 dc 80 07 00 00 	movl   $0x780,-0x24(%ebp)
  101684:	89 45 c0             	mov    %eax,-0x40(%ebp)
  101687:	81 7d dc d0 07 00 00 	cmpl   $0x7d0,-0x24(%ebp)
  10168e:	0f 8d 1d 00 00 00    	jge    1016b1 <cga_putc+0x191>
            crt_buf[i] = 0x0700 | ' ';
  101694:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101697:	8b 0d 18 40 11 00    	mov    0x114018,%ecx
  10169d:	66 c7 04 41 20 07    	movw   $0x720,(%ecx,%eax,2)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
  1016a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1016a6:	83 c0 01             	add    $0x1,%eax
  1016a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1016ac:	e9 d6 ff ff ff       	jmp    101687 <cga_putc+0x167>
        crt_pos -= CRT_COLS;
  1016b1:	0f b7 05 1c 40 11 00 	movzwl 0x11401c,%eax
  1016b8:	83 e8 50             	sub    $0x50,%eax
  1016bb:	66 89 c1             	mov    %ax,%cx
  1016be:	66 89 0d 1c 40 11 00 	mov    %cx,0x11401c
    outb(addr_6845, 14);
  1016c5:	66 a1 14 40 11 00    	mov    0x114014,%ax
  1016cb:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
  1016cf:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  1016d3:	8a 45 e5             	mov    -0x1b(%ebp),%al
  1016d6:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
  1016da:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
  1016db:	0f b7 0d 14 40 11 00 	movzwl 0x114014,%ecx
  1016e2:	83 c1 01             	add    $0x1,%ecx
  1016e5:	66 89 ca             	mov    %cx,%dx
  1016e8:	0f b7 0d 1c 40 11 00 	movzwl 0x11401c,%ecx
  1016ef:	c1 f9 08             	sar    $0x8,%ecx
  1016f2:	88 c8                	mov    %cl,%al
  1016f4:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
  1016f8:	88 45 e9             	mov    %al,-0x17(%ebp)
  1016fb:	8a 45 e9             	mov    -0x17(%ebp),%al
  1016fe:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
  101702:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
  101703:	66 8b 15 14 40 11 00 	mov    0x114014,%dx
  10170a:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
  10170e:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
  101712:	8a 45 ed             	mov    -0x13(%ebp),%al
  101715:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
  101719:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
  10171a:	0f b7 0d 14 40 11 00 	movzwl 0x114014,%ecx
  101721:	83 c1 01             	add    $0x1,%ecx
  101724:	66 89 ca             	mov    %cx,%dx
  101727:	66 8b 35 1c 40 11 00 	mov    0x11401c,%si
  10172e:	66 89 f3             	mov    %si,%bx
  101731:	88 d8                	mov    %bl,%al
  101733:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
  101737:	88 45 f1             	mov    %al,-0xf(%ebp)
  10173a:	8a 45 f1             	mov    -0xf(%ebp),%al
  10173d:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101741:	ee                   	out    %al,(%dx)
}
  101742:	83 c4 4c             	add    $0x4c,%esp
  101745:	5e                   	pop    %esi
  101746:	5f                   	pop    %edi
  101747:	5b                   	pop    %ebx
  101748:	5d                   	pop    %ebp
  101749:	c3                   	ret    
  10174a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101750 <serial_putc>:
serial_putc(int c) {
  101750:	55                   	push   %ebp
  101751:	89 e5                	mov    %esp,%ebp
  101753:	83 ec 18             	sub    $0x18,%esp
  101756:	8b 45 08             	mov    0x8(%ebp),%eax
  101759:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c != '\b') {
  10175c:	83 7d fc 08          	cmpl   $0x8,-0x4(%ebp)
  101760:	0f 84 10 00 00 00    	je     101776 <serial_putc+0x26>
        serial_putc_sub(c);
  101766:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101769:	89 04 24             	mov    %eax,(%esp)
  10176c:	e8 0f 02 00 00       	call   101980 <serial_putc_sub>
    }
  101771:	e9 3c 00 00 00       	jmp    1017b2 <serial_putc+0x62>
  101776:	b8 08 00 00 00       	mov    $0x8,%eax
        serial_putc_sub('\b');
  10177b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  101782:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101785:	e8 f6 01 00 00       	call   101980 <serial_putc_sub>
  10178a:	b8 20 00 00 00       	mov    $0x20,%eax
        serial_putc_sub(' ');
  10178f:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  101796:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101799:	e8 e2 01 00 00       	call   101980 <serial_putc_sub>
  10179e:	b8 08 00 00 00       	mov    $0x8,%eax
        serial_putc_sub('\b');
  1017a3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  1017aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1017ad:	e8 ce 01 00 00       	call   101980 <serial_putc_sub>
}
  1017b2:	83 c4 18             	add    $0x18,%esp
  1017b5:	5d                   	pop    %ebp
  1017b6:	c3                   	ret    
  1017b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1017be:	00 00 

001017c0 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
  1017c0:	55                   	push   %ebp
  1017c1:	89 e5                	mov    %esp,%ebp
  1017c3:	83 ec 08             	sub    $0x8,%esp
  1017c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1017c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (flag) {
  1017cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1017d0:	0f 84 05 00 00 00    	je     1017db <__intr_restore+0x1b>
        intr_enable();
  1017d6:	e8 35 06 00 00       	call   101e10 <intr_enable>
    }
}
  1017db:	83 c4 08             	add    $0x8,%esp
  1017de:	5d                   	pop    %ebp
  1017df:	c3                   	ret    

001017e0 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
  1017e0:	55                   	push   %ebp
  1017e1:	89 e5                	mov    %esp,%ebp
    int c = 0;
  1017e3:	83 ec 18             	sub    $0x18,%esp
  1017e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
  1017ed:	e8 7e fc ff ff       	call   101470 <__intr_save>
  1017f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
  1017f5:	e8 c6 f8 ff ff       	call   1010c0 <serial_intr>
        kbd_intr();
  1017fa:	e8 61 00 00 00       	call   101860 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
  1017ff:	a1 0c 40 11 00       	mov    0x11400c,%eax
  101804:	3b 05 10 40 11 00    	cmp    0x114010,%eax
  10180a:	0f 84 3a 00 00 00    	je     10184a <cons_getc+0x6a>
            c = cons.buf[cons.rpos ++];
  101810:	a1 0c 40 11 00       	mov    0x11400c,%eax
  101815:	89 c1                	mov    %eax,%ecx
  101817:	83 c1 01             	add    $0x1,%ecx
  10181a:	89 0d 0c 40 11 00    	mov    %ecx,0x11400c
  101820:	0f b6 04 05 0c 3e 11 	movzbl 0x113e0c(,%eax,1),%eax
  101827:	00 
  101828:	89 45 fc             	mov    %eax,-0x4(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
  10182b:	81 3d 0c 40 11 00 00 	cmpl   $0x200,0x11400c
  101832:	02 00 00 
  101835:	0f 85 0a 00 00 00    	jne    101845 <cons_getc+0x65>
                cons.rpos = 0;
  10183b:	c7 05 0c 40 11 00 00 	movl   $0x0,0x11400c
  101842:	00 00 00 
            }
        }
  101845:	e9 00 00 00 00       	jmp    10184a <cons_getc+0x6a>
    }
    local_intr_restore(intr_flag);
  10184a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10184d:	89 04 24             	mov    %eax,(%esp)
  101850:	e8 6b ff ff ff       	call   1017c0 <__intr_restore>
    return c;
  101855:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101858:	83 c4 18             	add    $0x18,%esp
  10185b:	5d                   	pop    %ebp
  10185c:	c3                   	ret    
  10185d:	0f 1f 00             	nopl   (%eax)

00101860 <kbd_intr>:
kbd_intr(void) {
  101860:	55                   	push   %ebp
  101861:	89 e5                	mov    %esp,%ebp
  101863:	83 ec 08             	sub    $0x8,%esp
  101866:	8d 05 10 1a 10 00    	lea    0x101a10,%eax
    cons_intr(kbd_proc_data);
  10186c:	89 04 24             	mov    %eax,(%esp)
  10186f:	e8 7c f8 ff ff       	call   1010f0 <cons_intr>
}
  101874:	83 c4 08             	add    $0x8,%esp
  101877:	5d                   	pop    %ebp
  101878:	c3                   	ret    
  101879:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00101880 <lpt_putc_sub>:
lpt_putc_sub(int c) {
  101880:	55                   	push   %ebp
  101881:	89 e5                	mov    %esp,%ebp
  101883:	83 ec 28             	sub    $0x28,%esp
  101886:	8b 45 08             	mov    0x8(%ebp),%eax
  101889:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
  10188c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  101893:	66 c7 45 f2 79 03    	movw   $0x379,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  101899:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  10189d:	ec                   	in     (%dx),%al
  10189e:	31 c9                	xor    %ecx,%ecx
  1018a0:	88 cc                	mov    %cl,%ah
  1018a2:	88 45 f1             	mov    %al,-0xf(%ebp)
  1018a5:	0f b6 4d f1          	movzbl -0xf(%ebp),%ecx
  1018a9:	81 e1 80 00 00 00    	and    $0x80,%ecx
  1018af:	83 f9 00             	cmp    $0x0,%ecx
  1018b2:	88 65 e7             	mov    %ah,-0x19(%ebp)
  1018b5:	0f 85 0d 00 00 00    	jne    1018c8 <lpt_putc_sub+0x48>
  1018bb:	81 7d e8 00 32 00 00 	cmpl   $0x3200,-0x18(%ebp)
  1018c2:	0f 9c c0             	setl   %al
  1018c5:	88 45 e7             	mov    %al,-0x19(%ebp)
  1018c8:	8a 45 e7             	mov    -0x19(%ebp),%al
  1018cb:	a8 01                	test   $0x1,%al
  1018cd:	0f 85 05 00 00 00    	jne    1018d8 <lpt_putc_sub+0x58>
  1018d3:	e9 13 00 00 00       	jmp    1018eb <lpt_putc_sub+0x6b>
        delay();
  1018d8:	e8 53 00 00 00       	call   101930 <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
  1018dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1018e0:	83 c0 01             	add    $0x1,%eax
  1018e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1018e6:	e9 a8 ff ff ff       	jmp    101893 <lpt_putc_sub+0x13>
    outb(LPTPORT + 0, c);
  1018eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1018ee:	88 c1                	mov    %al,%cl
  1018f0:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
  1018f6:	88 4d f5             	mov    %cl,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  1018f9:	8a 45 f5             	mov    -0xb(%ebp),%al
  1018fc:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101900:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
  101901:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
  101907:	c6 45 f9 0d          	movb   $0xd,-0x7(%ebp)
  10190b:	8a 45 f9             	mov    -0x7(%ebp),%al
  10190e:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  101912:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08);
  101913:	66 c7 45 fe 7a 03    	movw   $0x37a,-0x2(%ebp)
  101919:	c6 45 fd 08          	movb   $0x8,-0x3(%ebp)
  10191d:	8a 45 fd             	mov    -0x3(%ebp),%al
  101920:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101924:	ee                   	out    %al,(%dx)
}
  101925:	83 c4 28             	add    $0x28,%esp
  101928:	5d                   	pop    %ebp
  101929:	c3                   	ret    
  10192a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00101930 <delay>:
delay(void) {
  101930:	55                   	push   %ebp
  101931:	89 e5                	mov    %esp,%ebp
    inb(0x84);
  101933:	83 ec 10             	sub    $0x10,%esp
  101936:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  10193c:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101940:	ec                   	in     (%dx),%al
  101941:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
  101944:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
  10194a:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  10194e:	ec                   	in     (%dx),%al
  10194f:	88 45 f5             	mov    %al,-0xb(%ebp)
    inb(0x84);
  101952:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
  101958:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  10195c:	ec                   	in     (%dx),%al
  10195d:	88 45 f9             	mov    %al,-0x7(%ebp)
    inb(0x84);
  101960:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
  101966:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  10196a:	ec                   	in     (%dx),%al
  10196b:	88 45 fd             	mov    %al,-0x3(%ebp)
}
  10196e:	83 c4 10             	add    $0x10,%esp
  101971:	5d                   	pop    %ebp
  101972:	c3                   	ret    
  101973:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10197a:	84 00 00 00 00 00 

00101980 <serial_putc_sub>:
serial_putc_sub(int c) {
  101980:	55                   	push   %ebp
  101981:	89 e5                	mov    %esp,%ebp
  101983:	83 ec 18             	sub    $0x18,%esp
  101986:	8b 45 08             	mov    0x8(%ebp),%eax
  101989:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
  10198c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101993:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
  101999:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  10199d:	ec                   	in     (%dx),%al
  10199e:	31 c9                	xor    %ecx,%ecx
  1019a0:	88 cc                	mov    %cl,%ah
  1019a2:	88 45 f9             	mov    %al,-0x7(%ebp)
  1019a5:	0f b6 4d f9          	movzbl -0x7(%ebp),%ecx
  1019a9:	83 e1 20             	and    $0x20,%ecx
  1019ac:	83 f9 00             	cmp    $0x0,%ecx
  1019af:	88 65 ef             	mov    %ah,-0x11(%ebp)
  1019b2:	0f 85 0d 00 00 00    	jne    1019c5 <serial_putc_sub+0x45>
  1019b8:	81 7d f0 00 32 00 00 	cmpl   $0x3200,-0x10(%ebp)
  1019bf:	0f 9c c0             	setl   %al
  1019c2:	88 45 ef             	mov    %al,-0x11(%ebp)
  1019c5:	8a 45 ef             	mov    -0x11(%ebp),%al
  1019c8:	a8 01                	test   $0x1,%al
  1019ca:	0f 85 05 00 00 00    	jne    1019d5 <serial_putc_sub+0x55>
  1019d0:	e9 13 00 00 00       	jmp    1019e8 <serial_putc_sub+0x68>
        delay();
  1019d5:	e8 56 ff ff ff       	call   101930 <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
  1019da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1019dd:	83 c0 01             	add    $0x1,%eax
  1019e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1019e3:	e9 ab ff ff ff       	jmp    101993 <serial_putc_sub+0x13>
    outb(COM1 + COM_TX, c);
  1019e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1019eb:	88 c1                	mov    %al,%cl
  1019ed:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
  1019f3:	88 4d fd             	mov    %cl,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  1019f6:	8a 45 fd             	mov    -0x3(%ebp),%al
  1019f9:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  1019fd:	ee                   	out    %al,(%dx)
}
  1019fe:	83 c4 18             	add    $0x18,%esp
  101a01:	5d                   	pop    %ebp
  101a02:	c3                   	ret    
  101a03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  101a0a:	84 00 00 00 00 00 

00101a10 <kbd_proc_data>:
kbd_proc_data(void) {
  101a10:	55                   	push   %ebp
  101a11:	89 e5                	mov    %esp,%ebp
    if ((inb(KBSTATP) & KBS_DIB) == 0) {
  101a13:	83 ec 28             	sub    $0x28,%esp
  101a16:	66 c7 45 f6 64 00    	movw   $0x64,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
  101a1c:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101a20:	ec                   	in     (%dx),%al
  101a21:	88 45 f5             	mov    %al,-0xb(%ebp)
  101a24:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
  101a28:	83 e1 01             	and    $0x1,%ecx
  101a2b:	83 f9 00             	cmp    $0x0,%ecx
  101a2e:	0f 85 0c 00 00 00    	jne    101a40 <kbd_proc_data+0x30>
        return -1;
  101a34:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
  101a3b:	e9 d4 01 00 00       	jmp    101c14 <kbd_proc_data+0x204>
    data = inb(KBDATAP);
  101a40:	66 c7 45 fa 60 00    	movw   $0x60,-0x6(%ebp)
  101a46:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  101a4a:	ec                   	in     (%dx),%al
  101a4b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
  101a4e:	8a 45 f9             	mov    -0x7(%ebp),%al
  101a51:	88 45 eb             	mov    %al,-0x15(%ebp)
    if (data == 0xE0) {
  101a54:	0f b6 4d eb          	movzbl -0x15(%ebp),%ecx
  101a58:	81 f9 e0 00 00 00    	cmp    $0xe0,%ecx
  101a5e:	0f 85 19 00 00 00    	jne    101a7d <kbd_proc_data+0x6d>
        shift |= E0ESC;
  101a64:	a1 20 40 11 00       	mov    0x114020,%eax
  101a69:	83 c8 40             	or     $0x40,%eax
  101a6c:	a3 20 40 11 00       	mov    %eax,0x114020
        return 0;
  101a71:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101a78:	e9 97 01 00 00       	jmp    101c14 <kbd_proc_data+0x204>
    } else if (data & 0x80) {
  101a7d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101a81:	25 80 00 00 00       	and    $0x80,%eax
  101a86:	83 f8 00             	cmp    $0x0,%eax
  101a89:	0f 84 58 00 00 00    	je     101ae7 <kbd_proc_data+0xd7>
        data = (shift & E0ESC ? data : data & 0x7F);
  101a8f:	a1 20 40 11 00       	mov    0x114020,%eax
  101a94:	83 e0 40             	and    $0x40,%eax
  101a97:	83 f8 00             	cmp    $0x0,%eax
  101a9a:	0f 84 0c 00 00 00    	je     101aac <kbd_proc_data+0x9c>
  101aa0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101aa4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101aa7:	e9 0a 00 00 00       	jmp    101ab6 <kbd_proc_data+0xa6>
  101aac:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101ab0:	83 e0 7f             	and    $0x7f,%eax
  101ab3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  101ab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101ab9:	88 c1                	mov    %al,%cl
  101abb:	88 4d eb             	mov    %cl,-0x15(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
  101abe:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101ac2:	0f b6 04 05 44 30 11 	movzbl 0x113044(,%eax,1),%eax
  101ac9:	00 
  101aca:	83 c8 40             	or     $0x40,%eax
  101acd:	83 f0 ff             	xor    $0xffffffff,%eax
  101ad0:	23 05 20 40 11 00    	and    0x114020,%eax
  101ad6:	a3 20 40 11 00       	mov    %eax,0x114020
        return 0;
  101adb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101ae2:	e9 2d 01 00 00       	jmp    101c14 <kbd_proc_data+0x204>
    } else if (shift & E0ESC) {
  101ae7:	a1 20 40 11 00       	mov    0x114020,%eax
  101aec:	83 e0 40             	and    $0x40,%eax
  101aef:	83 f8 00             	cmp    $0x0,%eax
  101af2:	0f 84 1b 00 00 00    	je     101b13 <kbd_proc_data+0x103>
        data |= 0x80;
  101af8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101afc:	0d 80 00 00 00       	or     $0x80,%eax
  101b01:	88 c1                	mov    %al,%cl
  101b03:	88 4d eb             	mov    %cl,-0x15(%ebp)
        shift &= ~E0ESC;
  101b06:	a1 20 40 11 00       	mov    0x114020,%eax
  101b0b:	83 e0 bf             	and    $0xffffffbf,%eax
  101b0e:	a3 20 40 11 00       	mov    %eax,0x114020
  101b13:	e9 00 00 00 00       	jmp    101b18 <kbd_proc_data+0x108>
  101b18:	e9 00 00 00 00       	jmp    101b1d <kbd_proc_data+0x10d>
    shift |= shiftcode[data];
  101b1d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101b21:	0f b6 04 05 44 30 11 	movzbl 0x113044(,%eax,1),%eax
  101b28:	00 
  101b29:	0b 05 20 40 11 00    	or     0x114020,%eax
  101b2f:	a3 20 40 11 00       	mov    %eax,0x114020
    shift ^= togglecode[data];
  101b34:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101b38:	0f b6 04 05 44 31 11 	movzbl 0x113144(,%eax,1),%eax
  101b3f:	00 
  101b40:	33 05 20 40 11 00    	xor    0x114020,%eax
  101b46:	a3 20 40 11 00       	mov    %eax,0x114020
    c = charcode[shift & (CTL | SHIFT)][data];
  101b4b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
  101b4f:	8b 0d 20 40 11 00    	mov    0x114020,%ecx
  101b55:	83 e1 03             	and    $0x3,%ecx
  101b58:	8b 0c 8d 44 32 11 00 	mov    0x113244(,%ecx,4),%ecx
  101b5f:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
  101b63:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (shift & CAPSLOCK) {
  101b66:	a1 20 40 11 00       	mov    0x114020,%eax
  101b6b:	83 e0 08             	and    $0x8,%eax
  101b6e:	83 f8 00             	cmp    $0x0,%eax
  101b71:	0f 84 51 00 00 00    	je     101bc8 <kbd_proc_data+0x1b8>
  101b77:	b8 61 00 00 00       	mov    $0x61,%eax
        if ('a' <= c && c <= 'z')
  101b7c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  101b7f:	0f 8f 18 00 00 00    	jg     101b9d <kbd_proc_data+0x18d>
  101b85:	83 7d ec 7a          	cmpl   $0x7a,-0x14(%ebp)
  101b89:	0f 8f 0e 00 00 00    	jg     101b9d <kbd_proc_data+0x18d>
            c += 'A' - 'a';
  101b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b92:	83 c0 e0             	add    $0xffffffe0,%eax
  101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101b98:	e9 26 00 00 00       	jmp    101bc3 <kbd_proc_data+0x1b3>
  101b9d:	b8 41 00 00 00       	mov    $0x41,%eax
        else if ('A' <= c && c <= 'Z')
  101ba2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  101ba5:	0f 8f 13 00 00 00    	jg     101bbe <kbd_proc_data+0x1ae>
  101bab:	83 7d ec 5a          	cmpl   $0x5a,-0x14(%ebp)
  101baf:	0f 8f 09 00 00 00    	jg     101bbe <kbd_proc_data+0x1ae>
            c += 'a' - 'A';
  101bb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101bb8:	83 c0 20             	add    $0x20,%eax
  101bbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
  101bbe:	e9 00 00 00 00       	jmp    101bc3 <kbd_proc_data+0x1b3>
    }
  101bc3:	e9 00 00 00 00       	jmp    101bc8 <kbd_proc_data+0x1b8>
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
  101bc8:	a1 20 40 11 00       	mov    0x114020,%eax
  101bcd:	83 f0 ff             	xor    $0xffffffff,%eax
  101bd0:	83 e0 06             	and    $0x6,%eax
  101bd3:	83 f8 00             	cmp    $0x0,%eax
  101bd6:	0f 85 32 00 00 00    	jne    101c0e <kbd_proc_data+0x1fe>
  101bdc:	81 7d ec e9 00 00 00 	cmpl   $0xe9,-0x14(%ebp)
  101be3:	0f 85 25 00 00 00    	jne    101c0e <kbd_proc_data+0x1fe>
  101be9:	8d 05 5a f3 10 00    	lea    0x10f35a,%eax
        cprintf("Rebooting!\n");
  101bef:	89 04 24             	mov    %eax,(%esp)
  101bf2:	e8 49 e6 ff ff       	call   100240 <cprintf>
        outb(0x92, 0x3); // courtesy of Chris Frost
  101bf7:	66 c7 45 fe 92 00    	movw   $0x92,-0x2(%ebp)
  101bfd:	c6 45 fd 03          	movb   $0x3,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
  101c01:	8a 4d fd             	mov    -0x3(%ebp),%cl
  101c04:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101c08:	89 45 e0             	mov    %eax,-0x20(%ebp)
  101c0b:	88 c8                	mov    %cl,%al
  101c0d:	ee                   	out    %al,(%dx)
    return c;
  101c0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101c11:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
  101c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101c17:	83 c4 28             	add    $0x28,%esp
  101c1a:	5d                   	pop    %ebp
  101c1b:	c3                   	ret    
  101c1c:	66 90                	xchg   %ax,%ax
  101c1e:	66 90                	xchg   %ax,%ax

00101c20 <pic_enable>:
        outb(IO_PIC2 + 1, mask >> 8);
    }
}

void
pic_enable(unsigned int irq) {
  101c20:	55                   	push   %ebp
  101c21:	89 e5                	mov    %esp,%ebp
  101c23:	56                   	push   %esi
  101c24:	83 ec 14             	sub    $0x14,%esp
  101c27:	8b 45 08             	mov    0x8(%ebp),%eax
  101c2a:	b9 01 00 00 00       	mov    $0x1,%ecx
  101c2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pic_setmask(irq_mask & ~(1 << irq));
  101c32:	0f b7 05 54 35 11 00 	movzwl 0x113554,%eax
  101c39:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101c3c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  101c3f:	89 d1                	mov    %edx,%ecx
  101c41:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101c44:	d3 e2                	shl    %cl,%edx
  101c46:	83 f2 ff             	xor    $0xffffffff,%edx
  101c49:	21 d0                	and    %edx,%eax
  101c4b:	66 89 c6             	mov    %ax,%si
  101c4e:	0f b7 c6             	movzwl %si,%eax
  101c51:	89 04 24             	mov    %eax,(%esp)
  101c54:	e8 07 00 00 00       	call   101c60 <pic_setmask>
}
  101c59:	83 c4 14             	add    $0x14,%esp
  101c5c:	5e                   	pop    %esi
  101c5d:	5d                   	pop    %ebp
  101c5e:	c3                   	ret    
  101c5f:	90                   	nop

00101c60 <pic_setmask>:
pic_setmask(uint16_t mask) {
  101c60:	55                   	push   %ebp
  101c61:	89 e5                	mov    %esp,%ebp
  101c63:	53                   	push   %ebx
  101c64:	56                   	push   %esi
  101c65:	83 ec 0c             	sub    $0xc,%esp
  101c68:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  101c6c:	66 89 c1             	mov    %ax,%cx
  101c6f:	66 89 4d ee          	mov    %cx,-0x12(%ebp)
    irq_mask = mask;
  101c73:	66 8b 4d ee          	mov    -0x12(%ebp),%cx
  101c77:	66 89 0d 54 35 11 00 	mov    %cx,0x113554
    if (did_init) {
  101c7e:	83 3d 24 40 11 00 00 	cmpl   $0x0,0x114024
  101c85:	0f 84 33 00 00 00    	je     101cbe <pic_setmask+0x5e>
        outb(IO_PIC1 + 1, mask);
  101c8b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
  101c8f:	88 c1                	mov    %al,%cl
  101c91:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
  101c97:	88 4d f1             	mov    %cl,-0xf(%ebp)
  101c9a:	8a 45 f1             	mov    -0xf(%ebp),%al
  101c9d:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101ca1:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
  101ca2:	0f b7 75 ee          	movzwl -0x12(%ebp),%esi
  101ca6:	c1 fe 08             	sar    $0x8,%esi
  101ca9:	89 f3                	mov    %esi,%ebx
  101cab:	88 d8                	mov    %bl,%al
  101cad:	66 c7 45 f6 a1 00    	movw   $0xa1,-0xa(%ebp)
  101cb3:	88 45 f5             	mov    %al,-0xb(%ebp)
  101cb6:	8a 45 f5             	mov    -0xb(%ebp),%al
  101cb9:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101cbd:	ee                   	out    %al,(%dx)
}
  101cbe:	83 c4 0c             	add    $0xc,%esp
  101cc1:	5e                   	pop    %esi
  101cc2:	5b                   	pop    %ebx
  101cc3:	5d                   	pop    %ebp
  101cc4:	c3                   	ret    
  101cc5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  101ccc:	00 00 00 00 

00101cd0 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
  101cd0:	55                   	push   %ebp
  101cd1:	89 e5                	mov    %esp,%ebp
    did_init = 1;
  101cd3:	83 ec 48             	sub    $0x48,%esp
  101cd6:	c7 05 24 40 11 00 01 	movl   $0x1,0x114024
  101cdd:	00 00 00 

    // mask all interrupts
    outb(IO_PIC1 + 1, 0xFF);
  101ce0:	66 c7 45 ca 21 00    	movw   $0x21,-0x36(%ebp)
  101ce6:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
  101cea:	8a 45 c9             	mov    -0x37(%ebp),%al
  101ced:	66 8b 55 ca          	mov    -0x36(%ebp),%dx
  101cf1:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, 0xFF);
  101cf2:	66 c7 45 ce a1 00    	movw   $0xa1,-0x32(%ebp)
  101cf8:	c6 45 cd ff          	movb   $0xff,-0x33(%ebp)
  101cfc:	8a 45 cd             	mov    -0x33(%ebp),%al
  101cff:	66 8b 55 ce          	mov    -0x32(%ebp),%dx
  101d03:	ee                   	out    %al,(%dx)

    // ICW1:  0001g0hi
    //    g:  0 = edge triggering, 1 = level triggering
    //    h:  0 = cascaded PICs, 1 = master only
    //    i:  0 = no ICW4, 1 = ICW4 required
    outb(IO_PIC1, 0x11);
  101d04:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
  101d0a:	c6 45 d1 11          	movb   $0x11,-0x2f(%ebp)
  101d0e:	8a 45 d1             	mov    -0x2f(%ebp),%al
  101d11:	66 8b 55 d2          	mov    -0x2e(%ebp),%dx
  101d15:	ee                   	out    %al,(%dx)

    // ICW2:  Vector offset
    outb(IO_PIC1 + 1, IRQ_OFFSET);
  101d16:	66 c7 45 d6 21 00    	movw   $0x21,-0x2a(%ebp)
  101d1c:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
  101d20:	8a 45 d5             	mov    -0x2b(%ebp),%al
  101d23:	66 8b 55 d6          	mov    -0x2a(%ebp),%dx
  101d27:	ee                   	out    %al,(%dx)

    // ICW3:  (master PIC) bit mask of IR lines connected to slaves
    //        (slave PIC) 3-bit # of slave's connection to master
    outb(IO_PIC1 + 1, 1 << IRQ_SLAVE);
  101d28:	66 c7 45 da 21 00    	movw   $0x21,-0x26(%ebp)
  101d2e:	c6 45 d9 04          	movb   $0x4,-0x27(%ebp)
  101d32:	8a 45 d9             	mov    -0x27(%ebp),%al
  101d35:	66 8b 55 da          	mov    -0x26(%ebp),%dx
  101d39:	ee                   	out    %al,(%dx)
    //    m:  0 = slave PIC, 1 = master PIC
    //        (ignored when b is 0, as the master/slave role
    //         can be hardwired).
    //    a:  1 = Automatic EOI mode
    //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
    outb(IO_PIC1 + 1, 0x3);
  101d3a:	66 c7 45 de 21 00    	movw   $0x21,-0x22(%ebp)
  101d40:	c6 45 dd 03          	movb   $0x3,-0x23(%ebp)
  101d44:	8a 45 dd             	mov    -0x23(%ebp),%al
  101d47:	66 8b 55 de          	mov    -0x22(%ebp),%dx
  101d4b:	ee                   	out    %al,(%dx)

    // Set up slave (8259A-2)
    outb(IO_PIC2, 0x11);    // ICW1
  101d4c:	66 c7 45 e2 a0 00    	movw   $0xa0,-0x1e(%ebp)
  101d52:	c6 45 e1 11          	movb   $0x11,-0x1f(%ebp)
  101d56:	8a 45 e1             	mov    -0x1f(%ebp),%al
  101d59:	66 8b 55 e2          	mov    -0x1e(%ebp),%dx
  101d5d:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, IRQ_OFFSET + 8);  // ICW2
  101d5e:	66 c7 45 e6 a1 00    	movw   $0xa1,-0x1a(%ebp)
  101d64:	c6 45 e5 28          	movb   $0x28,-0x1b(%ebp)
  101d68:	8a 45 e5             	mov    -0x1b(%ebp),%al
  101d6b:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
  101d6f:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, IRQ_SLAVE);       // ICW3
  101d70:	66 c7 45 ea a1 00    	movw   $0xa1,-0x16(%ebp)
  101d76:	c6 45 e9 02          	movb   $0x2,-0x17(%ebp)
  101d7a:	8a 45 e9             	mov    -0x17(%ebp),%al
  101d7d:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
  101d81:	ee                   	out    %al,(%dx)
    // NB Automatic EOI mode doesn't tend to work on the slave.
    // Linux source code says it's "to be investigated".
    outb(IO_PIC2 + 1, 0x3);             // ICW4
  101d82:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
  101d88:	c6 45 ed 03          	movb   $0x3,-0x13(%ebp)
  101d8c:	8a 45 ed             	mov    -0x13(%ebp),%al
  101d8f:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
  101d93:	ee                   	out    %al,(%dx)

    // OCW3:  0ef01prs
    //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
    //    p:  0 = no polling, 1 = polling mode
    //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
    outb(IO_PIC1, 0x68);    // clear specific mask
  101d94:	66 c7 45 f2 20 00    	movw   $0x20,-0xe(%ebp)
  101d9a:	c6 45 f1 68          	movb   $0x68,-0xf(%ebp)
  101d9e:	8a 45 f1             	mov    -0xf(%ebp),%al
  101da1:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
  101da5:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default
  101da6:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
  101dac:	c6 45 f5 0a          	movb   $0xa,-0xb(%ebp)
  101db0:	8a 45 f5             	mov    -0xb(%ebp),%al
  101db3:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
  101db7:	ee                   	out    %al,(%dx)

    outb(IO_PIC2, 0x68);    // OCW3
  101db8:	66 c7 45 fa a0 00    	movw   $0xa0,-0x6(%ebp)
  101dbe:	c6 45 f9 68          	movb   $0x68,-0x7(%ebp)
  101dc2:	8a 45 f9             	mov    -0x7(%ebp),%al
  101dc5:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
  101dc9:	ee                   	out    %al,(%dx)
    outb(IO_PIC2, 0x0a);    // OCW3
  101dca:	66 c7 45 fe a0 00    	movw   $0xa0,-0x2(%ebp)
  101dd0:	c6 45 fd 0a          	movb   $0xa,-0x3(%ebp)
  101dd4:	8a 45 fd             	mov    -0x3(%ebp),%al
  101dd7:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
  101ddb:	ee                   	out    %al,(%dx)

    if (irq_mask != 0xFFFF) {
  101ddc:	0f b7 0d 54 35 11 00 	movzwl 0x113554,%ecx
  101de3:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
  101de9:	0f 84 0f 00 00 00    	je     101dfe <pic_init+0x12e>
        pic_setmask(irq_mask);
  101def:	0f b7 05 54 35 11 00 	movzwl 0x113554,%eax
  101df6:	89 04 24             	mov    %eax,(%esp)
  101df9:	e8 62 fe ff ff       	call   101c60 <pic_setmask>
    }
}
  101dfe:	83 c4 48             	add    $0x48,%esp
  101e01:	5d                   	pop    %ebp
  101e02:	c3                   	ret    
  101e03:	66 90                	xchg   %ax,%ax
  101e05:	66 90                	xchg   %ax,%ax
  101e07:	66 90                	xchg   %ax,%ax
  101e09:	66 90                	xchg   %ax,%ax
  101e0b:	66 90                	xchg   %ax,%ax
  101e0d:	66 90                	xchg   %ax,%ax
  101e0f:	90                   	nop

00101e10 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
  101e10:	55                   	push   %ebp
  101e11:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
  101e13:	fb                   	sti    
    sti();
}
  101e14:	5d                   	pop    %ebp
  101e15:	c3                   	ret    
  101e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  101e1d:	00 00 00 

00101e20 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
  101e20:	55                   	push   %ebp
  101e21:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
  101e23:	fa                   	cli    
    cli();
}
  101e24:	5d                   	pop    %ebp
  101e25:	c3                   	ret    
  101e26:	66 90                	xchg   %ax,%ax
  101e28:	66 90                	xchg   %ax,%ax
  101e2a:	66 90                	xchg   %ax,%ax
  101e2c:	66 90                	xchg   %ax,%ax
  101e2e:	66 90                	xchg   %ax,%ax

00101e30 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
  101e30:	55                   	push   %ebp
  101e31:	89 e5                	mov    %esp,%ebp
      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    extern uintptr_t __vectors[];
    for (int i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
  101e33:	56                   	push   %esi
  101e34:	83 ec 08             	sub    $0x8,%esp
  101e37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101e3e:	81 7d f4 00 01 00 00 	cmpl   $0x100,-0xc(%ebp)
  101e45:	0f 83 22 01 00 00    	jae    101f6d <idt_init+0x13d>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
  101e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e4e:	66 8b 0c 85 c0 35 11 	mov    0x1135c0(,%eax,4),%cx
  101e55:	00 
  101e56:	66 89 0c c5 28 40 11 	mov    %cx,0x114028(,%eax,8)
  101e5d:	00 
  101e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e61:	66 c7 04 c5 2a 40 11 	movw   $0x8,0x11402a(,%eax,8)
  101e68:	00 08 00 
  101e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e6e:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101e75:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101e7c:	83 e6 e0             	and    $0xffffffe0,%esi
  101e7f:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101e86:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e90:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101e97:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101e9e:	81 e6 1f ff ff ff    	and    $0xffffff1f,%esi
  101ea4:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101eab:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101eb5:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101ebc:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101ec3:	81 e6 ff f0 ff ff    	and    $0xfffff0ff,%esi
  101ec9:	81 ce 00 0e 00 00    	or     $0xe00,%esi
  101ecf:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101ed6:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ee0:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101ee7:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101eee:	81 e6 ff ef ff ff    	and    $0xffffefff,%esi
  101ef4:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101efb:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f05:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101f0c:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101f13:	81 e6 ff 9f ff ff    	and    $0xffff9fff,%esi
  101f19:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101f20:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f2a:	8b 14 c5 28 40 11 00 	mov    0x114028(,%eax,8),%edx
  101f31:	8b 34 c5 2c 40 11 00 	mov    0x11402c(,%eax,8),%esi
  101f38:	81 ce 00 80 00 00    	or     $0x8000,%esi
  101f3e:	89 14 c5 28 40 11 00 	mov    %edx,0x114028(,%eax,8)
  101f45:	89 34 c5 2c 40 11 00 	mov    %esi,0x11402c(,%eax,8)
  101f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f4f:	66 8b 0c 85 c2 35 11 	mov    0x1135c2(,%eax,4),%cx
  101f56:	00 
  101f57:	66 89 0c c5 2e 40 11 	mov    %cx,0x11402e(,%eax,8)
  101f5e:	00 
    for (int i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
  101f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101f62:	83 c0 01             	add    $0x1,%eax
  101f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
  101f68:	e9 d1 fe ff ff       	jmp    101e3e <idt_init+0xe>
  101f6d:	8d 05 58 35 11 00    	lea    0x113558,%eax
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
  101f73:	66 8b 0d c0 37 11 00 	mov    0x1137c0,%cx
  101f7a:	66 89 0d 28 44 11 00 	mov    %cx,0x114428
  101f81:	66 c7 05 2a 44 11 00 	movw   $0x8,0x11442a
  101f88:	08 00 
  101f8a:	8a 15 2c 44 11 00    	mov    0x11442c,%dl
  101f90:	80 e2 e0             	and    $0xe0,%dl
  101f93:	88 15 2c 44 11 00    	mov    %dl,0x11442c
  101f99:	c6 05 2c 44 11 00 00 	movb   $0x0,0x11442c
  101fa0:	8a 15 2d 44 11 00    	mov    0x11442d,%dl
  101fa6:	80 ca 0f             	or     $0xf,%dl
  101fa9:	88 15 2d 44 11 00    	mov    %dl,0x11442d
  101faf:	80 e2 ef             	and    $0xef,%dl
  101fb2:	88 15 2d 44 11 00    	mov    %dl,0x11442d
  101fb8:	80 ca 60             	or     $0x60,%dl
  101fbb:	88 15 2d 44 11 00    	mov    %dl,0x11442d
  101fc1:	c6 05 2d 44 11 00 ef 	movb   $0xef,0x11442d
  101fc8:	66 8b 0d c2 37 11 00 	mov    0x1137c2,%cx
  101fcf:	66 89 0d 2e 44 11 00 	mov    %cx,0x11442e
    lidt(&idt_pd);
  101fd6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
  101fd9:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101fdc:	0f 01 18             	lidtl  (%eax)
}
  101fdf:	83 c4 08             	add    $0x8,%esp
  101fe2:	5e                   	pop    %esi
  101fe3:	5d                   	pop    %ebp
  101fe4:	c3                   	ret    
  101fe5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  101fec:	00 00 00 00 

00101ff0 <trap_in_kernel>:
    return "(unknown trap)";
}

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
  101ff0:	55                   	push   %ebp
  101ff1:	89 e5                	mov    %esp,%ebp
  101ff3:	50                   	push   %eax
  101ff4:	8b 45 08             	mov    0x8(%ebp),%eax
  101ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
  101ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101ffd:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
  102001:	83 f8 08             	cmp    $0x8,%eax
  102004:	0f 94 c1             	sete   %cl
  102007:	80 e1 01             	and    $0x1,%cl
  10200a:	0f b6 c1             	movzbl %cl,%eax
  10200d:	83 c4 04             	add    $0x4,%esp
  102010:	5d                   	pop    %ebp
  102011:	c3                   	ret    
  102012:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  102019:	1f 84 00 00 00 00 00 

00102020 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
  102020:	55                   	push   %ebp
  102021:	89 e5                	mov    %esp,%ebp
  102023:	83 ec 58             	sub    $0x58,%esp
  102026:	8b 45 08             	mov    0x8(%ebp),%eax
  102029:	8d 0d 66 f3 10 00    	lea    0x10f366,%ecx
  10202f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("trapframe at %p\n", tf);
  102032:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102035:	89 0c 24             	mov    %ecx,(%esp)
  102038:	89 44 24 04          	mov    %eax,0x4(%esp)
  10203c:	e8 ff e1 ff ff       	call   100240 <cprintf>
    print_regs(&tf->tf_regs);
  102041:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102044:	89 0c 24             	mov    %ecx,(%esp)
  102047:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10204a:	e8 01 02 00 00       	call   102250 <print_regs>
  10204f:	8d 05 77 f3 10 00    	lea    0x10f377,%eax
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
  102055:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102058:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
  10205c:	89 04 24             	mov    %eax,(%esp)
  10205f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102063:	e8 d8 e1 ff ff       	call   100240 <cprintf>
  102068:	8d 0d 8a f3 10 00    	lea    0x10f38a,%ecx
    cprintf("  es   0x----%04x\n", tf->tf_es);
  10206e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102071:	0f b7 52 28          	movzwl 0x28(%edx),%edx
  102075:	89 0c 24             	mov    %ecx,(%esp)
  102078:	89 54 24 04          	mov    %edx,0x4(%esp)
  10207c:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10207f:	e8 bc e1 ff ff       	call   100240 <cprintf>
  102084:	8d 0d 9d f3 10 00    	lea    0x10f39d,%ecx
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
  10208a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10208d:	0f b7 52 24          	movzwl 0x24(%edx),%edx
  102091:	89 0c 24             	mov    %ecx,(%esp)
  102094:	89 54 24 04          	mov    %edx,0x4(%esp)
  102098:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10209b:	e8 a0 e1 ff ff       	call   100240 <cprintf>
  1020a0:	8d 0d b0 f3 10 00    	lea    0x10f3b0,%ecx
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
  1020a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020a9:	0f b7 52 20          	movzwl 0x20(%edx),%edx
  1020ad:	89 0c 24             	mov    %ecx,(%esp)
  1020b0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1020b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1020b7:	e8 84 e1 ff ff       	call   100240 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
  1020bc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1020bf:	8b 49 30             	mov    0x30(%ecx),%ecx
  1020c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020c5:	8b 52 30             	mov    0x30(%edx),%edx
  1020c8:	89 14 24             	mov    %edx,(%esp)
  1020cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1020ce:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1020d1:	e8 6a 02 00 00       	call   102340 <trapname>
  1020d6:	8d 0d c3 f3 10 00    	lea    0x10f3c3,%ecx
  1020dc:	89 0c 24             	mov    %ecx,(%esp)
  1020df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1020e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1020e6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1020ea:	e8 51 e1 ff ff       	call   100240 <cprintf>
  1020ef:	8d 0d d5 f3 10 00    	lea    0x10f3d5,%ecx
    cprintf("  err  0x%08x\n", tf->tf_err);
  1020f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1020f8:	8b 52 34             	mov    0x34(%edx),%edx
  1020fb:	89 0c 24             	mov    %ecx,(%esp)
  1020fe:	89 54 24 04          	mov    %edx,0x4(%esp)
  102102:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102105:	e8 36 e1 ff ff       	call   100240 <cprintf>
  10210a:	8d 0d e4 f3 10 00    	lea    0x10f3e4,%ecx
    cprintf("  eip  0x%08x\n", tf->tf_eip);
  102110:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102113:	8b 52 38             	mov    0x38(%edx),%edx
  102116:	89 0c 24             	mov    %ecx,(%esp)
  102119:	89 54 24 04          	mov    %edx,0x4(%esp)
  10211d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  102120:	e8 1b e1 ff ff       	call   100240 <cprintf>
  102125:	8d 0d f3 f3 10 00    	lea    0x10f3f3,%ecx
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
  10212b:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10212e:	0f b7 52 3c          	movzwl 0x3c(%edx),%edx
  102132:	89 0c 24             	mov    %ecx,(%esp)
  102135:	89 54 24 04          	mov    %edx,0x4(%esp)
  102139:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10213c:	e8 ff e0 ff ff       	call   100240 <cprintf>
  102141:	8d 0d 06 f4 10 00    	lea    0x10f406,%ecx
    cprintf("  flag 0x%08x ", tf->tf_eflags);
  102147:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10214a:	8b 52 40             	mov    0x40(%edx),%edx
  10214d:	89 0c 24             	mov    %ecx,(%esp)
  102150:	89 54 24 04          	mov    %edx,0x4(%esp)
  102154:	89 45 cc             	mov    %eax,-0x34(%ebp)
  102157:	e8 e4 e0 ff ff       	call   100240 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
  10215c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  102163:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  10216a:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10216d:	83 7d f8 18          	cmpl   $0x18,-0x8(%ebp)
  102171:	0f 83 5e 00 00 00    	jae    1021d5 <print_trapframe+0x1b5>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
  102177:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10217a:	8b 40 40             	mov    0x40(%eax),%eax
  10217d:	23 45 f4             	and    -0xc(%ebp),%eax
  102180:	83 f8 00             	cmp    $0x0,%eax
  102183:	0f 84 30 00 00 00    	je     1021b9 <print_trapframe+0x199>
  102189:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10218c:	83 3c 85 60 35 11 00 	cmpl   $0x0,0x113560(,%eax,4)
  102193:	00 
  102194:	0f 84 1f 00 00 00    	je     1021b9 <print_trapframe+0x199>
  10219a:	8d 05 15 f4 10 00    	lea    0x10f415,%eax
            cprintf("%s,", IA32flags[i]);
  1021a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1021a3:	8b 0c 8d 60 35 11 00 	mov    0x113560(,%ecx,4),%ecx
  1021aa:	89 04 24             	mov    %eax,(%esp)
  1021ad:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021b1:	e8 8a e0 ff ff       	call   100240 <cprintf>
  1021b6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        }
    }
  1021b9:	e9 00 00 00 00       	jmp    1021be <print_trapframe+0x19e>
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
  1021be:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1021c1:	83 c0 01             	add    $0x1,%eax
  1021c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1021c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1021ca:	c1 e0 01             	shl    $0x1,%eax
  1021cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1021d0:	e9 98 ff ff ff       	jmp    10216d <print_trapframe+0x14d>
  1021d5:	8d 05 19 f4 10 00    	lea    0x10f419,%eax
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
  1021db:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1021de:	8b 49 40             	mov    0x40(%ecx),%ecx
  1021e1:	81 e1 00 30 00 00    	and    $0x3000,%ecx
  1021e7:	c1 e9 0c             	shr    $0xc,%ecx
  1021ea:	89 04 24             	mov    %eax,(%esp)
  1021ed:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1021f1:	e8 4a e0 ff ff       	call   100240 <cprintf>

    if (!trap_in_kernel(tf)) {
  1021f6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1021f9:	89 0c 24             	mov    %ecx,(%esp)
  1021fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1021ff:	e8 ec fd ff ff       	call   101ff0 <trap_in_kernel>
  102204:	83 f8 00             	cmp    $0x0,%eax
  102207:	0f 85 37 00 00 00    	jne    102244 <print_trapframe+0x224>
  10220d:	8d 05 22 f4 10 00    	lea    0x10f422,%eax
        cprintf("  esp  0x%08x\n", tf->tf_esp);
  102213:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  102216:	8b 49 44             	mov    0x44(%ecx),%ecx
  102219:	89 04 24             	mov    %eax,(%esp)
  10221c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  102220:	e8 1b e0 ff ff       	call   100240 <cprintf>
  102225:	8d 0d 31 f4 10 00    	lea    0x10f431,%ecx
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
  10222b:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10222e:	0f b7 52 48          	movzwl 0x48(%edx),%edx
  102232:	89 0c 24             	mov    %ecx,(%esp)
  102235:	89 54 24 04          	mov    %edx,0x4(%esp)
  102239:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10223c:	e8 ff df ff ff       	call   100240 <cprintf>
  102241:	89 45 b8             	mov    %eax,-0x48(%ebp)
    }
}
  102244:	83 c4 58             	add    $0x58,%esp
  102247:	5d                   	pop    %ebp
  102248:	c3                   	ret    
  102249:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

00102250 <print_regs>:

void
print_regs(struct pushregs *regs) {
  102250:	55                   	push   %ebp
  102251:	89 e5                	mov    %esp,%ebp
  102253:	83 ec 38             	sub    $0x38,%esp
  102256:	8b 45 08             	mov    0x8(%ebp),%eax
  102259:	8d 0d 44 f4 10 00    	lea    0x10f444,%ecx
  10225f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("  edi  0x%08x\n", regs->reg_edi);
  102262:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102265:	8b 00                	mov    (%eax),%eax
  102267:	89 0c 24             	mov    %ecx,(%esp)
  10226a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10226e:	e8 cd df ff ff       	call   100240 <cprintf>
  102273:	8d 0d 53 f4 10 00    	lea    0x10f453,%ecx
    cprintf("  esi  0x%08x\n", regs->reg_esi);
  102279:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10227c:	8b 52 04             	mov    0x4(%edx),%edx
  10227f:	89 0c 24             	mov    %ecx,(%esp)
  102282:	89 54 24 04          	mov    %edx,0x4(%esp)
  102286:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102289:	e8 b2 df ff ff       	call   100240 <cprintf>
  10228e:	8d 0d 62 f4 10 00    	lea    0x10f462,%ecx
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
  102294:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102297:	8b 52 08             	mov    0x8(%edx),%edx
  10229a:	89 0c 24             	mov    %ecx,(%esp)
  10229d:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1022a4:	e8 97 df ff ff       	call   100240 <cprintf>
  1022a9:	8d 0d 71 f4 10 00    	lea    0x10f471,%ecx
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
  1022af:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1022b2:	8b 52 0c             	mov    0xc(%edx),%edx
  1022b5:	89 0c 24             	mov    %ecx,(%esp)
  1022b8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1022bf:	e8 7c df ff ff       	call   100240 <cprintf>
  1022c4:	8d 0d 80 f4 10 00    	lea    0x10f480,%ecx
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
  1022ca:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1022cd:	8b 52 10             	mov    0x10(%edx),%edx
  1022d0:	89 0c 24             	mov    %ecx,(%esp)
  1022d3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1022da:	e8 61 df ff ff       	call   100240 <cprintf>
  1022df:	8d 0d 8f f4 10 00    	lea    0x10f48f,%ecx
    cprintf("  edx  0x%08x\n", regs->reg_edx);
  1022e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1022e8:	8b 52 14             	mov    0x14(%edx),%edx
  1022eb:	89 0c 24             	mov    %ecx,(%esp)
  1022ee:	89 54 24 04          	mov    %edx,0x4(%esp)
  1022f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1022f5:	e8 46 df ff ff       	call   100240 <cprintf>
  1022fa:	8d 0d 9e f4 10 00    	lea    0x10f49e,%ecx
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
  102300:	8b 55 fc             	mov    -0x4(%ebp),%edx
  102303:	8b 52 18             	mov    0x18(%edx),%edx
  102306:	89 0c 24             	mov    %ecx,(%esp)
  102309:	89 54 24 04          	mov    %edx,0x4(%esp)
  10230d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102310:	e8 2b df ff ff       	call   100240 <cprintf>
  102315:	8d 0d ad f4 10 00    	lea    0x10f4ad,%ecx
    cprintf("  eax  0x%08x\n", regs->reg_eax);
  10231b:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10231e:	8b 52 1c             	mov    0x1c(%edx),%edx
  102321:	89 0c 24             	mov    %ecx,(%esp)
  102324:	89 54 24 04          	mov    %edx,0x4(%esp)
  102328:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10232b:	e8 10 df ff ff       	call   100240 <cprintf>
}
  102330:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102333:	83 c4 38             	add    $0x38,%esp
  102336:	5d                   	pop    %ebp
  102337:	c3                   	ret    
  102338:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10233f:	00 

00102340 <trapname>:
trapname(int trapno) {
  102340:	55                   	push   %ebp
  102341:	89 e5                	mov    %esp,%ebp
  102343:	83 ec 08             	sub    $0x8,%esp
  102346:	8b 45 08             	mov    0x8(%ebp),%eax
  102349:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
  10234c:	83 7d f8 14          	cmpl   $0x14,-0x8(%ebp)
  102350:	0f 83 12 00 00 00    	jae    102368 <trapname+0x28>
        return excnames[trapno];
  102356:	8b 45 f8             	mov    -0x8(%ebp),%eax
  102359:	8b 04 85 a8 f6 10 00 	mov    0x10f6a8(,%eax,4),%eax
  102360:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102363:	e9 2b 00 00 00       	jmp    102393 <trapname+0x53>
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
  102368:	83 7d f8 20          	cmpl   $0x20,-0x8(%ebp)
  10236c:	0f 8c 18 00 00 00    	jl     10238a <trapname+0x4a>
  102372:	83 7d f8 30          	cmpl   $0x30,-0x8(%ebp)
  102376:	0f 8d 0e 00 00 00    	jge    10238a <trapname+0x4a>
  10237c:	8d 05 0e f6 10 00    	lea    0x10f60e,%eax
        return "Hardware Interrupt";
  102382:	89 45 fc             	mov    %eax,-0x4(%ebp)
  102385:	e9 09 00 00 00       	jmp    102393 <trapname+0x53>
  10238a:	8d 05 a6 f5 10 00    	lea    0x10f5a6,%eax
    return "(unknown trap)";
  102390:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
  102393:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102396:	83 c4 08             	add    $0x8,%esp
  102399:	5d                   	pop    %ebp
  10239a:	c3                   	ret    
  10239b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

001023a0 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
  1023a0:	55                   	push   %ebp
  1023a1:	89 e5                	mov    %esp,%ebp
  1023a3:	83 ec 08             	sub    $0x8,%esp
  1023a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1023a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // dispatch based on what type of trap occurred
    trap_dispatch(tf);
  1023ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1023af:	89 04 24             	mov    %eax,(%esp)
  1023b2:	e8 09 00 00 00       	call   1023c0 <trap_dispatch>
}
  1023b7:	83 c4 08             	add    $0x8,%esp
  1023ba:	5d                   	pop    %ebp
  1023bb:	c3                   	ret    
  1023bc:	0f 1f 40 00          	nopl   0x0(%eax)

001023c0 <trap_dispatch>:
trap_dispatch(struct trapframe *tf) {
  1023c0:	55                   	push   %ebp
  1023c1:	89 e5                	mov    %esp,%ebp
  1023c3:	56                   	push   %esi
  1023c4:	83 ec 44             	sub    $0x44,%esp
  1023c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1023ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
    switch (tf->tf_trapno) {
  1023cd:	8b 40 30             	mov    0x30(%eax),%eax
  1023d0:	89 c1                	mov    %eax,%ecx
  1023d2:	83 e9 20             	sub    $0x20,%ecx
  1023d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1023d8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1023db:	0f 84 5b 00 00 00    	je     10243c <trap_dispatch+0x7c>
  1023e1:	e9 00 00 00 00       	jmp    1023e6 <trap_dispatch+0x26>
  1023e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1023e9:	83 e8 21             	sub    $0x21,%eax
  1023ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1023ef:	0f 84 a8 00 00 00    	je     10249d <trap_dispatch+0xdd>
  1023f5:	e9 00 00 00 00       	jmp    1023fa <trap_dispatch+0x3a>
  1023fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1023fd:	83 e8 24             	sub    $0x24,%eax
  102400:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  102403:	0f 84 64 00 00 00    	je     10246d <trap_dispatch+0xad>
  102409:	e9 00 00 00 00       	jmp    10240e <trap_dispatch+0x4e>
  10240e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102411:	83 c0 d2             	add    $0xffffffd2,%eax
  102414:	83 e8 02             	sub    $0x2,%eax
  102417:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10241a:	0f 82 b2 00 00 00    	jb     1024d2 <trap_dispatch+0x112>
  102420:	e9 00 00 00 00       	jmp    102425 <trap_dispatch+0x65>
  102425:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102428:	83 c0 88             	add    $0xffffff88,%eax
  10242b:	83 e8 02             	sub    $0x2,%eax
  10242e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102431:	0f 82 96 00 00 00    	jb     1024cd <trap_dispatch+0x10d>
  102437:	e9 9b 00 00 00       	jmp    1024d7 <trap_dispatch+0x117>
        tick_count++;
  10243c:	a1 28 48 11 00       	mov    0x114828,%eax
  102441:	83 c0 01             	add    $0x1,%eax
  102444:	a3 28 48 11 00       	mov    %eax,0x114828
        if (tick_count == TICK_NUM) {
  102449:	83 3d 28 48 11 00 64 	cmpl   $0x64,0x114828
  102450:	0f 85 12 00 00 00    	jne    102468 <trap_dispatch+0xa8>
            tick_count -= TICK_NUM;
  102456:	a1 28 48 11 00       	mov    0x114828,%eax
  10245b:	83 e8 64             	sub    $0x64,%eax
  10245e:	a3 28 48 11 00       	mov    %eax,0x114828
            print_ticks();
  102463:	e8 c8 00 00 00       	call   102530 <print_ticks>
        break;
  102468:	e9 b5 00 00 00       	jmp    102522 <trap_dispatch+0x162>
        c = cons_getc();
  10246d:	e8 6e f3 ff ff       	call   1017e0 <cons_getc>
  102472:	8d 0d 50 f6 10 00    	lea    0x10f650,%ecx
  102478:	88 c2                	mov    %al,%dl
  10247a:	88 55 f7             	mov    %dl,-0x9(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
  10247d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  102481:	0f be 75 f7          	movsbl -0x9(%ebp),%esi
  102485:	89 0c 24             	mov    %ecx,(%esp)
  102488:	89 44 24 04          	mov    %eax,0x4(%esp)
  10248c:	89 74 24 08          	mov    %esi,0x8(%esp)
  102490:	e8 ab dd ff ff       	call   100240 <cprintf>
        break;
  102495:	89 45 d8             	mov    %eax,-0x28(%ebp)
  102498:	e9 85 00 00 00       	jmp    102522 <trap_dispatch+0x162>
        c = cons_getc();
  10249d:	e8 3e f3 ff ff       	call   1017e0 <cons_getc>
  1024a2:	8d 0d 62 f6 10 00    	lea    0x10f662,%ecx
  1024a8:	88 c2                	mov    %al,%dl
  1024aa:	88 55 f7             	mov    %dl,-0x9(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
  1024ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  1024b1:	0f be 75 f7          	movsbl -0x9(%ebp),%esi
  1024b5:	89 0c 24             	mov    %ecx,(%esp)
  1024b8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1024bc:	89 74 24 08          	mov    %esi,0x8(%esp)
  1024c0:	e8 7b dd ff ff       	call   100240 <cprintf>
        break;
  1024c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1024c8:	e9 55 00 00 00       	jmp    102522 <trap_dispatch+0x162>
        break;
  1024cd:	e9 50 00 00 00       	jmp    102522 <trap_dispatch+0x162>
        break;
  1024d2:	e9 4b 00 00 00       	jmp    102522 <trap_dispatch+0x162>
        if ((tf->tf_cs & 3) == 0) {
  1024d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024da:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
  1024de:	83 e0 03             	and    $0x3,%eax
  1024e1:	83 f8 00             	cmp    $0x0,%eax
  1024e4:	0f 85 33 00 00 00    	jne    10251d <trap_dispatch+0x15d>
            print_trapframe(tf);
  1024ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1024ed:	89 04 24             	mov    %eax,(%esp)
  1024f0:	e8 2b fb ff ff       	call   102020 <print_trapframe>
  1024f5:	8d 05 71 f6 10 00    	lea    0x10f671,%eax
  1024fb:	b9 b8 00 00 00       	mov    $0xb8,%ecx
  102500:	8d 15 82 f6 10 00    	lea    0x10f682,%edx
            panic("unexpected trap in kernel.\n");
  102506:	89 04 24             	mov    %eax,(%esp)
  102509:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
  102510:	00 
  102511:	89 54 24 08          	mov    %edx,0x8(%esp)
  102515:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  102518:	e8 33 df ff ff       	call   100450 <__panic>
    }
  10251d:	e9 00 00 00 00       	jmp    102522 <trap_dispatch+0x162>
}
  102522:	83 c4 44             	add    $0x44,%esp
  102525:	5e                   	pop    %esi
  102526:	5d                   	pop    %ebp
  102527:	c3                   	ret    
  102528:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10252f:	00 

00102530 <print_ticks>:
static void print_ticks() {
  102530:	55                   	push   %ebp
  102531:	89 e5                	mov    %esp,%ebp
  102533:	83 ec 18             	sub    $0x18,%esp
  102536:	8d 05 9e f6 10 00    	lea    0x10f69e,%eax
  10253c:	b9 64 00 00 00       	mov    $0x64,%ecx
    cprintf("%d ticks\n",TICK_NUM);
  102541:	89 04 24             	mov    %eax,(%esp)
  102544:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
  10254b:	00 
  10254c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10254f:	e8 ec dc ff ff       	call   100240 <cprintf>
}
  102554:	89 45 f8             	mov    %eax,-0x8(%ebp)
  102557:	83 c4 18             	add    $0x18,%esp
  10255a:	5d                   	pop    %ebp
  10255b:	c3                   	ret    

0010255c <vector0>:
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
  pushl $0
  10255c:	6a 00                	push   $0x0
  jmp __alltraps
  10255e:	6a 00                	push   $0x0
.globl vector1
  102560:	e9 67 0a 00 00       	jmp    102fcc <__alltraps>

00102565 <vector1>:
vector1:
  pushl $0
  pushl $1
  102565:	6a 00                	push   $0x0
  jmp __alltraps
  102567:	6a 01                	push   $0x1
.globl vector2
  102569:	e9 5e 0a 00 00       	jmp    102fcc <__alltraps>

0010256e <vector2>:
vector2:
  pushl $0
  pushl $2
  10256e:	6a 00                	push   $0x0
  jmp __alltraps
  102570:	6a 02                	push   $0x2
.globl vector3
  102572:	e9 55 0a 00 00       	jmp    102fcc <__alltraps>

00102577 <vector3>:
vector3:
  pushl $0
  pushl $3
  102577:	6a 00                	push   $0x0
  jmp __alltraps
  102579:	6a 03                	push   $0x3
.globl vector4
  10257b:	e9 4c 0a 00 00       	jmp    102fcc <__alltraps>

00102580 <vector4>:
vector4:
  pushl $0
  pushl $4
  102580:	6a 00                	push   $0x0
  jmp __alltraps
  102582:	6a 04                	push   $0x4
.globl vector5
  102584:	e9 43 0a 00 00       	jmp    102fcc <__alltraps>

00102589 <vector5>:
vector5:
  pushl $0
  pushl $5
  102589:	6a 00                	push   $0x0
  jmp __alltraps
  10258b:	6a 05                	push   $0x5
.globl vector6
  10258d:	e9 3a 0a 00 00       	jmp    102fcc <__alltraps>

00102592 <vector6>:
vector6:
  pushl $0
  pushl $6
  102592:	6a 00                	push   $0x0
  jmp __alltraps
  102594:	6a 06                	push   $0x6
.globl vector7
  102596:	e9 31 0a 00 00       	jmp    102fcc <__alltraps>

0010259b <vector7>:
vector7:
  pushl $0
  pushl $7
  10259b:	6a 00                	push   $0x0
  jmp __alltraps
  10259d:	6a 07                	push   $0x7
.globl vector8
  10259f:	e9 28 0a 00 00       	jmp    102fcc <__alltraps>

001025a4 <vector8>:
vector8:
  pushl $8
  jmp __alltraps
  1025a4:	6a 08                	push   $0x8
.globl vector9
  1025a6:	e9 21 0a 00 00       	jmp    102fcc <__alltraps>

001025ab <vector9>:
vector9:
  pushl $9
  jmp __alltraps
  1025ab:	6a 09                	push   $0x9
.globl vector10
  1025ad:	e9 1a 0a 00 00       	jmp    102fcc <__alltraps>

001025b2 <vector10>:
vector10:
  pushl $10
  jmp __alltraps
  1025b2:	6a 0a                	push   $0xa
.globl vector11
  1025b4:	e9 13 0a 00 00       	jmp    102fcc <__alltraps>

001025b9 <vector11>:
vector11:
  pushl $11
  jmp __alltraps
  1025b9:	6a 0b                	push   $0xb
.globl vector12
  1025bb:	e9 0c 0a 00 00       	jmp    102fcc <__alltraps>

001025c0 <vector12>:
vector12:
  pushl $12
  jmp __alltraps
  1025c0:	6a 0c                	push   $0xc
.globl vector13
  1025c2:	e9 05 0a 00 00       	jmp    102fcc <__alltraps>

001025c7 <vector13>:
vector13:
  pushl $13
  jmp __alltraps
  1025c7:	6a 0d                	push   $0xd
.globl vector14
  1025c9:	e9 fe 09 00 00       	jmp    102fcc <__alltraps>

001025ce <vector14>:
vector14:
  pushl $14
  jmp __alltraps
  1025ce:	6a 0e                	push   $0xe
.globl vector15
  1025d0:	e9 f7 09 00 00       	jmp    102fcc <__alltraps>

001025d5 <vector15>:
vector15:
  pushl $0
  pushl $15
  1025d5:	6a 00                	push   $0x0
  jmp __alltraps
  1025d7:	6a 0f                	push   $0xf
.globl vector16
  1025d9:	e9 ee 09 00 00       	jmp    102fcc <__alltraps>

001025de <vector16>:
vector16:
  pushl $0
  pushl $16
  1025de:	6a 00                	push   $0x0
  jmp __alltraps
  1025e0:	6a 10                	push   $0x10
.globl vector17
  1025e2:	e9 e5 09 00 00       	jmp    102fcc <__alltraps>

001025e7 <vector17>:
vector17:
  pushl $17
  jmp __alltraps
  1025e7:	6a 11                	push   $0x11
.globl vector18
  1025e9:	e9 de 09 00 00       	jmp    102fcc <__alltraps>

001025ee <vector18>:
vector18:
  pushl $0
  pushl $18
  1025ee:	6a 00                	push   $0x0
  jmp __alltraps
  1025f0:	6a 12                	push   $0x12
.globl vector19
  1025f2:	e9 d5 09 00 00       	jmp    102fcc <__alltraps>

001025f7 <vector19>:
vector19:
  pushl $0
  pushl $19
  1025f7:	6a 00                	push   $0x0
  jmp __alltraps
  1025f9:	6a 13                	push   $0x13
.globl vector20
  1025fb:	e9 cc 09 00 00       	jmp    102fcc <__alltraps>

00102600 <vector20>:
vector20:
  pushl $0
  pushl $20
  102600:	6a 00                	push   $0x0
  jmp __alltraps
  102602:	6a 14                	push   $0x14
.globl vector21
  102604:	e9 c3 09 00 00       	jmp    102fcc <__alltraps>

00102609 <vector21>:
vector21:
  pushl $0
  pushl $21
  102609:	6a 00                	push   $0x0
  jmp __alltraps
  10260b:	6a 15                	push   $0x15
.globl vector22
  10260d:	e9 ba 09 00 00       	jmp    102fcc <__alltraps>

00102612 <vector22>:
vector22:
  pushl $0
  pushl $22
  102612:	6a 00                	push   $0x0
  jmp __alltraps
  102614:	6a 16                	push   $0x16
.globl vector23
  102616:	e9 b1 09 00 00       	jmp    102fcc <__alltraps>

0010261b <vector23>:
vector23:
  pushl $0
  pushl $23
  10261b:	6a 00                	push   $0x0
  jmp __alltraps
  10261d:	6a 17                	push   $0x17
.globl vector24
  10261f:	e9 a8 09 00 00       	jmp    102fcc <__alltraps>

00102624 <vector24>:
vector24:
  pushl $0
  pushl $24
  102624:	6a 00                	push   $0x0
  jmp __alltraps
  102626:	6a 18                	push   $0x18
.globl vector25
  102628:	e9 9f 09 00 00       	jmp    102fcc <__alltraps>

0010262d <vector25>:
vector25:
  pushl $0
  pushl $25
  10262d:	6a 00                	push   $0x0
  jmp __alltraps
  10262f:	6a 19                	push   $0x19
.globl vector26
  102631:	e9 96 09 00 00       	jmp    102fcc <__alltraps>

00102636 <vector26>:
vector26:
  pushl $0
  pushl $26
  102636:	6a 00                	push   $0x0
  jmp __alltraps
  102638:	6a 1a                	push   $0x1a
.globl vector27
  10263a:	e9 8d 09 00 00       	jmp    102fcc <__alltraps>

0010263f <vector27>:
vector27:
  pushl $0
  pushl $27
  10263f:	6a 00                	push   $0x0
  jmp __alltraps
  102641:	6a 1b                	push   $0x1b
.globl vector28
  102643:	e9 84 09 00 00       	jmp    102fcc <__alltraps>

00102648 <vector28>:
vector28:
  pushl $0
  pushl $28
  102648:	6a 00                	push   $0x0
  jmp __alltraps
  10264a:	6a 1c                	push   $0x1c
.globl vector29
  10264c:	e9 7b 09 00 00       	jmp    102fcc <__alltraps>

00102651 <vector29>:
vector29:
  pushl $0
  pushl $29
  102651:	6a 00                	push   $0x0
  jmp __alltraps
  102653:	6a 1d                	push   $0x1d
.globl vector30
  102655:	e9 72 09 00 00       	jmp    102fcc <__alltraps>

0010265a <vector30>:
vector30:
  pushl $0
  pushl $30
  10265a:	6a 00                	push   $0x0
  jmp __alltraps
  10265c:	6a 1e                	push   $0x1e
.globl vector31
  10265e:	e9 69 09 00 00       	jmp    102fcc <__alltraps>

00102663 <vector31>:
vector31:
  pushl $0
  pushl $31
  102663:	6a 00                	push   $0x0
  jmp __alltraps
  102665:	6a 1f                	push   $0x1f
.globl vector32
  102667:	e9 60 09 00 00       	jmp    102fcc <__alltraps>

0010266c <vector32>:
vector32:
  pushl $0
  pushl $32
  10266c:	6a 00                	push   $0x0
  jmp __alltraps
  10266e:	6a 20                	push   $0x20
.globl vector33
  102670:	e9 57 09 00 00       	jmp    102fcc <__alltraps>

00102675 <vector33>:
vector33:
  pushl $0
  pushl $33
  102675:	6a 00                	push   $0x0
  jmp __alltraps
  102677:	6a 21                	push   $0x21
.globl vector34
  102679:	e9 4e 09 00 00       	jmp    102fcc <__alltraps>

0010267e <vector34>:
vector34:
  pushl $0
  pushl $34
  10267e:	6a 00                	push   $0x0
  jmp __alltraps
  102680:	6a 22                	push   $0x22
.globl vector35
  102682:	e9 45 09 00 00       	jmp    102fcc <__alltraps>

00102687 <vector35>:
vector35:
  pushl $0
  pushl $35
  102687:	6a 00                	push   $0x0
  jmp __alltraps
  102689:	6a 23                	push   $0x23
.globl vector36
  10268b:	e9 3c 09 00 00       	jmp    102fcc <__alltraps>

00102690 <vector36>:
vector36:
  pushl $0
  pushl $36
  102690:	6a 00                	push   $0x0
  jmp __alltraps
  102692:	6a 24                	push   $0x24
.globl vector37
  102694:	e9 33 09 00 00       	jmp    102fcc <__alltraps>

00102699 <vector37>:
vector37:
  pushl $0
  pushl $37
  102699:	6a 00                	push   $0x0
  jmp __alltraps
  10269b:	6a 25                	push   $0x25
.globl vector38
  10269d:	e9 2a 09 00 00       	jmp    102fcc <__alltraps>

001026a2 <vector38>:
vector38:
  pushl $0
  pushl $38
  1026a2:	6a 00                	push   $0x0
  jmp __alltraps
  1026a4:	6a 26                	push   $0x26
.globl vector39
  1026a6:	e9 21 09 00 00       	jmp    102fcc <__alltraps>

001026ab <vector39>:
vector39:
  pushl $0
  pushl $39
  1026ab:	6a 00                	push   $0x0
  jmp __alltraps
  1026ad:	6a 27                	push   $0x27
.globl vector40
  1026af:	e9 18 09 00 00       	jmp    102fcc <__alltraps>

001026b4 <vector40>:
vector40:
  pushl $0
  pushl $40
  1026b4:	6a 00                	push   $0x0
  jmp __alltraps
  1026b6:	6a 28                	push   $0x28
.globl vector41
  1026b8:	e9 0f 09 00 00       	jmp    102fcc <__alltraps>

001026bd <vector41>:
vector41:
  pushl $0
  pushl $41
  1026bd:	6a 00                	push   $0x0
  jmp __alltraps
  1026bf:	6a 29                	push   $0x29
.globl vector42
  1026c1:	e9 06 09 00 00       	jmp    102fcc <__alltraps>

001026c6 <vector42>:
vector42:
  pushl $0
  pushl $42
  1026c6:	6a 00                	push   $0x0
  jmp __alltraps
  1026c8:	6a 2a                	push   $0x2a
.globl vector43
  1026ca:	e9 fd 08 00 00       	jmp    102fcc <__alltraps>

001026cf <vector43>:
vector43:
  pushl $0
  pushl $43
  1026cf:	6a 00                	push   $0x0
  jmp __alltraps
  1026d1:	6a 2b                	push   $0x2b
.globl vector44
  1026d3:	e9 f4 08 00 00       	jmp    102fcc <__alltraps>

001026d8 <vector44>:
vector44:
  pushl $0
  pushl $44
  1026d8:	6a 00                	push   $0x0
  jmp __alltraps
  1026da:	6a 2c                	push   $0x2c
.globl vector45
  1026dc:	e9 eb 08 00 00       	jmp    102fcc <__alltraps>

001026e1 <vector45>:
vector45:
  pushl $0
  pushl $45
  1026e1:	6a 00                	push   $0x0
  jmp __alltraps
  1026e3:	6a 2d                	push   $0x2d
.globl vector46
  1026e5:	e9 e2 08 00 00       	jmp    102fcc <__alltraps>

001026ea <vector46>:
vector46:
  pushl $0
  pushl $46
  1026ea:	6a 00                	push   $0x0
  jmp __alltraps
  1026ec:	6a 2e                	push   $0x2e
.globl vector47
  1026ee:	e9 d9 08 00 00       	jmp    102fcc <__alltraps>

001026f3 <vector47>:
vector47:
  pushl $0
  pushl $47
  1026f3:	6a 00                	push   $0x0
  jmp __alltraps
  1026f5:	6a 2f                	push   $0x2f
.globl vector48
  1026f7:	e9 d0 08 00 00       	jmp    102fcc <__alltraps>

001026fc <vector48>:
vector48:
  pushl $0
  pushl $48
  1026fc:	6a 00                	push   $0x0
  jmp __alltraps
  1026fe:	6a 30                	push   $0x30
.globl vector49
  102700:	e9 c7 08 00 00       	jmp    102fcc <__alltraps>

00102705 <vector49>:
vector49:
  pushl $0
  pushl $49
  102705:	6a 00                	push   $0x0
  jmp __alltraps
  102707:	6a 31                	push   $0x31
.globl vector50
  102709:	e9 be 08 00 00       	jmp    102fcc <__alltraps>

0010270e <vector50>:
vector50:
  pushl $0
  pushl $50
  10270e:	6a 00                	push   $0x0
  jmp __alltraps
  102710:	6a 32                	push   $0x32
.globl vector51
  102712:	e9 b5 08 00 00       	jmp    102fcc <__alltraps>

00102717 <vector51>:
vector51:
  pushl $0
  pushl $51
  102717:	6a 00                	push   $0x0
  jmp __alltraps
  102719:	6a 33                	push   $0x33
.globl vector52
  10271b:	e9 ac 08 00 00       	jmp    102fcc <__alltraps>

00102720 <vector52>:
vector52:
  pushl $0
  pushl $52
  102720:	6a 00                	push   $0x0
  jmp __alltraps
  102722:	6a 34                	push   $0x34
.globl vector53
  102724:	e9 a3 08 00 00       	jmp    102fcc <__alltraps>

00102729 <vector53>:
vector53:
  pushl $0
  pushl $53
  102729:	6a 00                	push   $0x0
  jmp __alltraps
  10272b:	6a 35                	push   $0x35
.globl vector54
  10272d:	e9 9a 08 00 00       	jmp    102fcc <__alltraps>

00102732 <vector54>:
vector54:
  pushl $0
  pushl $54
  102732:	6a 00                	push   $0x0
  jmp __alltraps
  102734:	6a 36                	push   $0x36
.globl vector55
  102736:	e9 91 08 00 00       	jmp    102fcc <__alltraps>

0010273b <vector55>:
vector55:
  pushl $0
  pushl $55
  10273b:	6a 00                	push   $0x0
  jmp __alltraps
  10273d:	6a 37                	push   $0x37
.globl vector56
  10273f:	e9 88 08 00 00       	jmp    102fcc <__alltraps>

00102744 <vector56>:
vector56:
  pushl $0
  pushl $56
  102744:	6a 00                	push   $0x0
  jmp __alltraps
  102746:	6a 38                	push   $0x38
.globl vector57
  102748:	e9 7f 08 00 00       	jmp    102fcc <__alltraps>

0010274d <vector57>:
vector57:
  pushl $0
  pushl $57
  10274d:	6a 00                	push   $0x0
  jmp __alltraps
  10274f:	6a 39                	push   $0x39
.globl vector58
  102751:	e9 76 08 00 00       	jmp    102fcc <__alltraps>

00102756 <vector58>:
vector58:
  pushl $0
  pushl $58
  102756:	6a 00                	push   $0x0
  jmp __alltraps
  102758:	6a 3a                	push   $0x3a
.globl vector59
  10275a:	e9 6d 08 00 00       	jmp    102fcc <__alltraps>

0010275f <vector59>:
vector59:
  pushl $0
  pushl $59
  10275f:	6a 00                	push   $0x0
  jmp __alltraps
  102761:	6a 3b                	push   $0x3b
.globl vector60
  102763:	e9 64 08 00 00       	jmp    102fcc <__alltraps>

00102768 <vector60>:
vector60:
  pushl $0
  pushl $60
  102768:	6a 00                	push   $0x0
  jmp __alltraps
  10276a:	6a 3c                	push   $0x3c
.globl vector61
  10276c:	e9 5b 08 00 00       	jmp    102fcc <__alltraps>

00102771 <vector61>:
vector61:
  pushl $0
  pushl $61
  102771:	6a 00                	push   $0x0
  jmp __alltraps
  102773:	6a 3d                	push   $0x3d
.globl vector62
  102775:	e9 52 08 00 00       	jmp    102fcc <__alltraps>

0010277a <vector62>:
vector62:
  pushl $0
  pushl $62
  10277a:	6a 00                	push   $0x0
  jmp __alltraps
  10277c:	6a 3e                	push   $0x3e
.globl vector63
  10277e:	e9 49 08 00 00       	jmp    102fcc <__alltraps>

00102783 <vector63>:
vector63:
  pushl $0
  pushl $63
  102783:	6a 00                	push   $0x0
  jmp __alltraps
  102785:	6a 3f                	push   $0x3f
.globl vector64
  102787:	e9 40 08 00 00       	jmp    102fcc <__alltraps>

0010278c <vector64>:
vector64:
  pushl $0
  pushl $64
  10278c:	6a 00                	push   $0x0
  jmp __alltraps
  10278e:	6a 40                	push   $0x40
.globl vector65
  102790:	e9 37 08 00 00       	jmp    102fcc <__alltraps>

00102795 <vector65>:
vector65:
  pushl $0
  pushl $65
  102795:	6a 00                	push   $0x0
  jmp __alltraps
  102797:	6a 41                	push   $0x41
.globl vector66
  102799:	e9 2e 08 00 00       	jmp    102fcc <__alltraps>

0010279e <vector66>:
vector66:
  pushl $0
  pushl $66
  10279e:	6a 00                	push   $0x0
  jmp __alltraps
  1027a0:	6a 42                	push   $0x42
.globl vector67
  1027a2:	e9 25 08 00 00       	jmp    102fcc <__alltraps>

001027a7 <vector67>:
vector67:
  pushl $0
  pushl $67
  1027a7:	6a 00                	push   $0x0
  jmp __alltraps
  1027a9:	6a 43                	push   $0x43
.globl vector68
  1027ab:	e9 1c 08 00 00       	jmp    102fcc <__alltraps>

001027b0 <vector68>:
vector68:
  pushl $0
  pushl $68
  1027b0:	6a 00                	push   $0x0
  jmp __alltraps
  1027b2:	6a 44                	push   $0x44
.globl vector69
  1027b4:	e9 13 08 00 00       	jmp    102fcc <__alltraps>

001027b9 <vector69>:
vector69:
  pushl $0
  pushl $69
  1027b9:	6a 00                	push   $0x0
  jmp __alltraps
  1027bb:	6a 45                	push   $0x45
.globl vector70
  1027bd:	e9 0a 08 00 00       	jmp    102fcc <__alltraps>

001027c2 <vector70>:
vector70:
  pushl $0
  pushl $70
  1027c2:	6a 00                	push   $0x0
  jmp __alltraps
  1027c4:	6a 46                	push   $0x46
.globl vector71
  1027c6:	e9 01 08 00 00       	jmp    102fcc <__alltraps>

001027cb <vector71>:
vector71:
  pushl $0
  pushl $71
  1027cb:	6a 00                	push   $0x0
  jmp __alltraps
  1027cd:	6a 47                	push   $0x47
.globl vector72
  1027cf:	e9 f8 07 00 00       	jmp    102fcc <__alltraps>

001027d4 <vector72>:
vector72:
  pushl $0
  pushl $72
  1027d4:	6a 00                	push   $0x0
  jmp __alltraps
  1027d6:	6a 48                	push   $0x48
.globl vector73
  1027d8:	e9 ef 07 00 00       	jmp    102fcc <__alltraps>

001027dd <vector73>:
vector73:
  pushl $0
  pushl $73
  1027dd:	6a 00                	push   $0x0
  jmp __alltraps
  1027df:	6a 49                	push   $0x49
.globl vector74
  1027e1:	e9 e6 07 00 00       	jmp    102fcc <__alltraps>

001027e6 <vector74>:
vector74:
  pushl $0
  pushl $74
  1027e6:	6a 00                	push   $0x0
  jmp __alltraps
  1027e8:	6a 4a                	push   $0x4a
.globl vector75
  1027ea:	e9 dd 07 00 00       	jmp    102fcc <__alltraps>

001027ef <vector75>:
vector75:
  pushl $0
  pushl $75
  1027ef:	6a 00                	push   $0x0
  jmp __alltraps
  1027f1:	6a 4b                	push   $0x4b
.globl vector76
  1027f3:	e9 d4 07 00 00       	jmp    102fcc <__alltraps>

001027f8 <vector76>:
vector76:
  pushl $0
  pushl $76
  1027f8:	6a 00                	push   $0x0
  jmp __alltraps
  1027fa:	6a 4c                	push   $0x4c
.globl vector77
  1027fc:	e9 cb 07 00 00       	jmp    102fcc <__alltraps>

00102801 <vector77>:
vector77:
  pushl $0
  pushl $77
  102801:	6a 00                	push   $0x0
  jmp __alltraps
  102803:	6a 4d                	push   $0x4d
.globl vector78
  102805:	e9 c2 07 00 00       	jmp    102fcc <__alltraps>

0010280a <vector78>:
vector78:
  pushl $0
  pushl $78
  10280a:	6a 00                	push   $0x0
  jmp __alltraps
  10280c:	6a 4e                	push   $0x4e
.globl vector79
  10280e:	e9 b9 07 00 00       	jmp    102fcc <__alltraps>

00102813 <vector79>:
vector79:
  pushl $0
  pushl $79
  102813:	6a 00                	push   $0x0
  jmp __alltraps
  102815:	6a 4f                	push   $0x4f
.globl vector80
  102817:	e9 b0 07 00 00       	jmp    102fcc <__alltraps>

0010281c <vector80>:
vector80:
  pushl $0
  pushl $80
  10281c:	6a 00                	push   $0x0
  jmp __alltraps
  10281e:	6a 50                	push   $0x50
.globl vector81
  102820:	e9 a7 07 00 00       	jmp    102fcc <__alltraps>

00102825 <vector81>:
vector81:
  pushl $0
  pushl $81
  102825:	6a 00                	push   $0x0
  jmp __alltraps
  102827:	6a 51                	push   $0x51
.globl vector82
  102829:	e9 9e 07 00 00       	jmp    102fcc <__alltraps>

0010282e <vector82>:
vector82:
  pushl $0
  pushl $82
  10282e:	6a 00                	push   $0x0
  jmp __alltraps
  102830:	6a 52                	push   $0x52
.globl vector83
  102832:	e9 95 07 00 00       	jmp    102fcc <__alltraps>

00102837 <vector83>:
vector83:
  pushl $0
  pushl $83
  102837:	6a 00                	push   $0x0
  jmp __alltraps
  102839:	6a 53                	push   $0x53
.globl vector84
  10283b:	e9 8c 07 00 00       	jmp    102fcc <__alltraps>

00102840 <vector84>:
vector84:
  pushl $0
  pushl $84
  102840:	6a 00                	push   $0x0
  jmp __alltraps
  102842:	6a 54                	push   $0x54
.globl vector85
  102844:	e9 83 07 00 00       	jmp    102fcc <__alltraps>

00102849 <vector85>:
vector85:
  pushl $0
  pushl $85
  102849:	6a 00                	push   $0x0
  jmp __alltraps
  10284b:	6a 55                	push   $0x55
.globl vector86
  10284d:	e9 7a 07 00 00       	jmp    102fcc <__alltraps>

00102852 <vector86>:
vector86:
  pushl $0
  pushl $86
  102852:	6a 00                	push   $0x0
  jmp __alltraps
  102854:	6a 56                	push   $0x56
.globl vector87
  102856:	e9 71 07 00 00       	jmp    102fcc <__alltraps>

0010285b <vector87>:
vector87:
  pushl $0
  pushl $87
  10285b:	6a 00                	push   $0x0
  jmp __alltraps
  10285d:	6a 57                	push   $0x57
.globl vector88
  10285f:	e9 68 07 00 00       	jmp    102fcc <__alltraps>

00102864 <vector88>:
vector88:
  pushl $0
  pushl $88
  102864:	6a 00                	push   $0x0
  jmp __alltraps
  102866:	6a 58                	push   $0x58
.globl vector89
  102868:	e9 5f 07 00 00       	jmp    102fcc <__alltraps>

0010286d <vector89>:
vector89:
  pushl $0
  pushl $89
  10286d:	6a 00                	push   $0x0
  jmp __alltraps
  10286f:	6a 59                	push   $0x59
.globl vector90
  102871:	e9 56 07 00 00       	jmp    102fcc <__alltraps>

00102876 <vector90>:
vector90:
  pushl $0
  pushl $90
  102876:	6a 00                	push   $0x0
  jmp __alltraps
  102878:	6a 5a                	push   $0x5a
.globl vector91
  10287a:	e9 4d 07 00 00       	jmp    102fcc <__alltraps>

0010287f <vector91>:
vector91:
  pushl $0
  pushl $91
  10287f:	6a 00                	push   $0x0
  jmp __alltraps
  102881:	6a 5b                	push   $0x5b
.globl vector92
  102883:	e9 44 07 00 00       	jmp    102fcc <__alltraps>

00102888 <vector92>:
vector92:
  pushl $0
  pushl $92
  102888:	6a 00                	push   $0x0
  jmp __alltraps
  10288a:	6a 5c                	push   $0x5c
.globl vector93
  10288c:	e9 3b 07 00 00       	jmp    102fcc <__alltraps>

00102891 <vector93>:
vector93:
  pushl $0
  pushl $93
  102891:	6a 00                	push   $0x0
  jmp __alltraps
  102893:	6a 5d                	push   $0x5d
.globl vector94
  102895:	e9 32 07 00 00       	jmp    102fcc <__alltraps>

0010289a <vector94>:
vector94:
  pushl $0
  pushl $94
  10289a:	6a 00                	push   $0x0
  jmp __alltraps
  10289c:	6a 5e                	push   $0x5e
.globl vector95
  10289e:	e9 29 07 00 00       	jmp    102fcc <__alltraps>

001028a3 <vector95>:
vector95:
  pushl $0
  pushl $95
  1028a3:	6a 00                	push   $0x0
  jmp __alltraps
  1028a5:	6a 5f                	push   $0x5f
.globl vector96
  1028a7:	e9 20 07 00 00       	jmp    102fcc <__alltraps>

001028ac <vector96>:
vector96:
  pushl $0
  pushl $96
  1028ac:	6a 00                	push   $0x0
  jmp __alltraps
  1028ae:	6a 60                	push   $0x60
.globl vector97
  1028b0:	e9 17 07 00 00       	jmp    102fcc <__alltraps>

001028b5 <vector97>:
vector97:
  pushl $0
  pushl $97
  1028b5:	6a 00                	push   $0x0
  jmp __alltraps
  1028b7:	6a 61                	push   $0x61
.globl vector98
  1028b9:	e9 0e 07 00 00       	jmp    102fcc <__alltraps>

001028be <vector98>:
vector98:
  pushl $0
  pushl $98
  1028be:	6a 00                	push   $0x0
  jmp __alltraps
  1028c0:	6a 62                	push   $0x62
.globl vector99
  1028c2:	e9 05 07 00 00       	jmp    102fcc <__alltraps>

001028c7 <vector99>:
vector99:
  pushl $0
  pushl $99
  1028c7:	6a 00                	push   $0x0
  jmp __alltraps
  1028c9:	6a 63                	push   $0x63
.globl vector100
  1028cb:	e9 fc 06 00 00       	jmp    102fcc <__alltraps>

001028d0 <vector100>:
vector100:
  pushl $0
  pushl $100
  1028d0:	6a 00                	push   $0x0
  jmp __alltraps
  1028d2:	6a 64                	push   $0x64
.globl vector101
  1028d4:	e9 f3 06 00 00       	jmp    102fcc <__alltraps>

001028d9 <vector101>:
vector101:
  pushl $0
  pushl $101
  1028d9:	6a 00                	push   $0x0
  jmp __alltraps
  1028db:	6a 65                	push   $0x65
.globl vector102
  1028dd:	e9 ea 06 00 00       	jmp    102fcc <__alltraps>

001028e2 <vector102>:
vector102:
  pushl $0
  pushl $102
  1028e2:	6a 00                	push   $0x0
  jmp __alltraps
  1028e4:	6a 66                	push   $0x66
.globl vector103
  1028e6:	e9 e1 06 00 00       	jmp    102fcc <__alltraps>

001028eb <vector103>:
vector103:
  pushl $0
  pushl $103
  1028eb:	6a 00                	push   $0x0
  jmp __alltraps
  1028ed:	6a 67                	push   $0x67
.globl vector104
  1028ef:	e9 d8 06 00 00       	jmp    102fcc <__alltraps>

001028f4 <vector104>:
vector104:
  pushl $0
  pushl $104
  1028f4:	6a 00                	push   $0x0
  jmp __alltraps
  1028f6:	6a 68                	push   $0x68
.globl vector105
  1028f8:	e9 cf 06 00 00       	jmp    102fcc <__alltraps>

001028fd <vector105>:
vector105:
  pushl $0
  pushl $105
  1028fd:	6a 00                	push   $0x0
  jmp __alltraps
  1028ff:	6a 69                	push   $0x69
.globl vector106
  102901:	e9 c6 06 00 00       	jmp    102fcc <__alltraps>

00102906 <vector106>:
vector106:
  pushl $0
  pushl $106
  102906:	6a 00                	push   $0x0
  jmp __alltraps
  102908:	6a 6a                	push   $0x6a
.globl vector107
  10290a:	e9 bd 06 00 00       	jmp    102fcc <__alltraps>

0010290f <vector107>:
vector107:
  pushl $0
  pushl $107
  10290f:	6a 00                	push   $0x0
  jmp __alltraps
  102911:	6a 6b                	push   $0x6b
.globl vector108
  102913:	e9 b4 06 00 00       	jmp    102fcc <__alltraps>

00102918 <vector108>:
vector108:
  pushl $0
  pushl $108
  102918:	6a 00                	push   $0x0
  jmp __alltraps
  10291a:	6a 6c                	push   $0x6c
.globl vector109
  10291c:	e9 ab 06 00 00       	jmp    102fcc <__alltraps>

00102921 <vector109>:
vector109:
  pushl $0
  pushl $109
  102921:	6a 00                	push   $0x0
  jmp __alltraps
  102923:	6a 6d                	push   $0x6d
.globl vector110
  102925:	e9 a2 06 00 00       	jmp    102fcc <__alltraps>

0010292a <vector110>:
vector110:
  pushl $0
  pushl $110
  10292a:	6a 00                	push   $0x0
  jmp __alltraps
  10292c:	6a 6e                	push   $0x6e
.globl vector111
  10292e:	e9 99 06 00 00       	jmp    102fcc <__alltraps>

00102933 <vector111>:
vector111:
  pushl $0
  pushl $111
  102933:	6a 00                	push   $0x0
  jmp __alltraps
  102935:	6a 6f                	push   $0x6f
.globl vector112
  102937:	e9 90 06 00 00       	jmp    102fcc <__alltraps>

0010293c <vector112>:
vector112:
  pushl $0
  pushl $112
  10293c:	6a 00                	push   $0x0
  jmp __alltraps
  10293e:	6a 70                	push   $0x70
.globl vector113
  102940:	e9 87 06 00 00       	jmp    102fcc <__alltraps>

00102945 <vector113>:
vector113:
  pushl $0
  pushl $113
  102945:	6a 00                	push   $0x0
  jmp __alltraps
  102947:	6a 71                	push   $0x71
.globl vector114
  102949:	e9 7e 06 00 00       	jmp    102fcc <__alltraps>

0010294e <vector114>:
vector114:
  pushl $0
  pushl $114
  10294e:	6a 00                	push   $0x0
  jmp __alltraps
  102950:	6a 72                	push   $0x72
.globl vector115
  102952:	e9 75 06 00 00       	jmp    102fcc <__alltraps>

00102957 <vector115>:
vector115:
  pushl $0
  pushl $115
  102957:	6a 00                	push   $0x0
  jmp __alltraps
  102959:	6a 73                	push   $0x73
.globl vector116
  10295b:	e9 6c 06 00 00       	jmp    102fcc <__alltraps>

00102960 <vector116>:
vector116:
  pushl $0
  pushl $116
  102960:	6a 00                	push   $0x0
  jmp __alltraps
  102962:	6a 74                	push   $0x74
.globl vector117
  102964:	e9 63 06 00 00       	jmp    102fcc <__alltraps>

00102969 <vector117>:
vector117:
  pushl $0
  pushl $117
  102969:	6a 00                	push   $0x0
  jmp __alltraps
  10296b:	6a 75                	push   $0x75
.globl vector118
  10296d:	e9 5a 06 00 00       	jmp    102fcc <__alltraps>

00102972 <vector118>:
vector118:
  pushl $0
  pushl $118
  102972:	6a 00                	push   $0x0
  jmp __alltraps
  102974:	6a 76                	push   $0x76
.globl vector119
  102976:	e9 51 06 00 00       	jmp    102fcc <__alltraps>

0010297b <vector119>:
vector119:
  pushl $0
  pushl $119
  10297b:	6a 00                	push   $0x0
  jmp __alltraps
  10297d:	6a 77                	push   $0x77
.globl vector120
  10297f:	e9 48 06 00 00       	jmp    102fcc <__alltraps>

00102984 <vector120>:
vector120:
  pushl $0
  pushl $120
  102984:	6a 00                	push   $0x0
  jmp __alltraps
  102986:	6a 78                	push   $0x78
.globl vector121
  102988:	e9 3f 06 00 00       	jmp    102fcc <__alltraps>

0010298d <vector121>:
vector121:
  pushl $0
  pushl $121
  10298d:	6a 00                	push   $0x0
  jmp __alltraps
  10298f:	6a 79                	push   $0x79
.globl vector122
  102991:	e9 36 06 00 00       	jmp    102fcc <__alltraps>

00102996 <vector122>:
vector122:
  pushl $0
  pushl $122
  102996:	6a 00                	push   $0x0
  jmp __alltraps
  102998:	6a 7a                	push   $0x7a
.globl vector123
  10299a:	e9 2d 06 00 00       	jmp    102fcc <__alltraps>

0010299f <vector123>:
vector123:
  pushl $0
  pushl $123
  10299f:	6a 00                	push   $0x0
  jmp __alltraps
  1029a1:	6a 7b                	push   $0x7b
.globl vector124
  1029a3:	e9 24 06 00 00       	jmp    102fcc <__alltraps>

001029a8 <vector124>:
vector124:
  pushl $0
  pushl $124
  1029a8:	6a 00                	push   $0x0
  jmp __alltraps
  1029aa:	6a 7c                	push   $0x7c
.globl vector125
  1029ac:	e9 1b 06 00 00       	jmp    102fcc <__alltraps>

001029b1 <vector125>:
vector125:
  pushl $0
  pushl $125
  1029b1:	6a 00                	push   $0x0
  jmp __alltraps
  1029b3:	6a 7d                	push   $0x7d
.globl vector126
  1029b5:	e9 12 06 00 00       	jmp    102fcc <__alltraps>

001029ba <vector126>:
vector126:
  pushl $0
  pushl $126
  1029ba:	6a 00                	push   $0x0
  jmp __alltraps
  1029bc:	6a 7e                	push   $0x7e
.globl vector127
  1029be:	e9 09 06 00 00       	jmp    102fcc <__alltraps>

001029c3 <vector127>:
vector127:
  pushl $0
  pushl $127
  1029c3:	6a 00                	push   $0x0
  jmp __alltraps
  1029c5:	6a 7f                	push   $0x7f
.globl vector128
  1029c7:	e9 00 06 00 00       	jmp    102fcc <__alltraps>

001029cc <vector128>:
vector128:
  pushl $0
  pushl $128
  1029cc:	6a 00                	push   $0x0
  jmp __alltraps
  1029ce:	68 80 00 00 00       	push   $0x80
.globl vector129
  1029d3:	e9 f4 05 00 00       	jmp    102fcc <__alltraps>

001029d8 <vector129>:
vector129:
  pushl $0
  pushl $129
  1029d8:	6a 00                	push   $0x0
  jmp __alltraps
  1029da:	68 81 00 00 00       	push   $0x81
.globl vector130
  1029df:	e9 e8 05 00 00       	jmp    102fcc <__alltraps>

001029e4 <vector130>:
vector130:
  pushl $0
  pushl $130
  1029e4:	6a 00                	push   $0x0
  jmp __alltraps
  1029e6:	68 82 00 00 00       	push   $0x82
.globl vector131
  1029eb:	e9 dc 05 00 00       	jmp    102fcc <__alltraps>

001029f0 <vector131>:
vector131:
  pushl $0
  pushl $131
  1029f0:	6a 00                	push   $0x0
  jmp __alltraps
  1029f2:	68 83 00 00 00       	push   $0x83
.globl vector132
  1029f7:	e9 d0 05 00 00       	jmp    102fcc <__alltraps>

001029fc <vector132>:
vector132:
  pushl $0
  pushl $132
  1029fc:	6a 00                	push   $0x0
  jmp __alltraps
  1029fe:	68 84 00 00 00       	push   $0x84
.globl vector133
  102a03:	e9 c4 05 00 00       	jmp    102fcc <__alltraps>

00102a08 <vector133>:
vector133:
  pushl $0
  pushl $133
  102a08:	6a 00                	push   $0x0
  jmp __alltraps
  102a0a:	68 85 00 00 00       	push   $0x85
.globl vector134
  102a0f:	e9 b8 05 00 00       	jmp    102fcc <__alltraps>

00102a14 <vector134>:
vector134:
  pushl $0
  pushl $134
  102a14:	6a 00                	push   $0x0
  jmp __alltraps
  102a16:	68 86 00 00 00       	push   $0x86
.globl vector135
  102a1b:	e9 ac 05 00 00       	jmp    102fcc <__alltraps>

00102a20 <vector135>:
vector135:
  pushl $0
  pushl $135
  102a20:	6a 00                	push   $0x0
  jmp __alltraps
  102a22:	68 87 00 00 00       	push   $0x87
.globl vector136
  102a27:	e9 a0 05 00 00       	jmp    102fcc <__alltraps>

00102a2c <vector136>:
vector136:
  pushl $0
  pushl $136
  102a2c:	6a 00                	push   $0x0
  jmp __alltraps
  102a2e:	68 88 00 00 00       	push   $0x88
.globl vector137
  102a33:	e9 94 05 00 00       	jmp    102fcc <__alltraps>

00102a38 <vector137>:
vector137:
  pushl $0
  pushl $137
  102a38:	6a 00                	push   $0x0
  jmp __alltraps
  102a3a:	68 89 00 00 00       	push   $0x89
.globl vector138
  102a3f:	e9 88 05 00 00       	jmp    102fcc <__alltraps>

00102a44 <vector138>:
vector138:
  pushl $0
  pushl $138
  102a44:	6a 00                	push   $0x0
  jmp __alltraps
  102a46:	68 8a 00 00 00       	push   $0x8a
.globl vector139
  102a4b:	e9 7c 05 00 00       	jmp    102fcc <__alltraps>

00102a50 <vector139>:
vector139:
  pushl $0
  pushl $139
  102a50:	6a 00                	push   $0x0
  jmp __alltraps
  102a52:	68 8b 00 00 00       	push   $0x8b
.globl vector140
  102a57:	e9 70 05 00 00       	jmp    102fcc <__alltraps>

00102a5c <vector140>:
vector140:
  pushl $0
  pushl $140
  102a5c:	6a 00                	push   $0x0
  jmp __alltraps
  102a5e:	68 8c 00 00 00       	push   $0x8c
.globl vector141
  102a63:	e9 64 05 00 00       	jmp    102fcc <__alltraps>

00102a68 <vector141>:
vector141:
  pushl $0
  pushl $141
  102a68:	6a 00                	push   $0x0
  jmp __alltraps
  102a6a:	68 8d 00 00 00       	push   $0x8d
.globl vector142
  102a6f:	e9 58 05 00 00       	jmp    102fcc <__alltraps>

00102a74 <vector142>:
vector142:
  pushl $0
  pushl $142
  102a74:	6a 00                	push   $0x0
  jmp __alltraps
  102a76:	68 8e 00 00 00       	push   $0x8e
.globl vector143
  102a7b:	e9 4c 05 00 00       	jmp    102fcc <__alltraps>

00102a80 <vector143>:
vector143:
  pushl $0
  pushl $143
  102a80:	6a 00                	push   $0x0
  jmp __alltraps
  102a82:	68 8f 00 00 00       	push   $0x8f
.globl vector144
  102a87:	e9 40 05 00 00       	jmp    102fcc <__alltraps>

00102a8c <vector144>:
vector144:
  pushl $0
  pushl $144
  102a8c:	6a 00                	push   $0x0
  jmp __alltraps
  102a8e:	68 90 00 00 00       	push   $0x90
.globl vector145
  102a93:	e9 34 05 00 00       	jmp    102fcc <__alltraps>

00102a98 <vector145>:
vector145:
  pushl $0
  pushl $145
  102a98:	6a 00                	push   $0x0
  jmp __alltraps
  102a9a:	68 91 00 00 00       	push   $0x91
.globl vector146
  102a9f:	e9 28 05 00 00       	jmp    102fcc <__alltraps>

00102aa4 <vector146>:
vector146:
  pushl $0
  pushl $146
  102aa4:	6a 00                	push   $0x0
  jmp __alltraps
  102aa6:	68 92 00 00 00       	push   $0x92
.globl vector147
  102aab:	e9 1c 05 00 00       	jmp    102fcc <__alltraps>

00102ab0 <vector147>:
vector147:
  pushl $0
  pushl $147
  102ab0:	6a 00                	push   $0x0
  jmp __alltraps
  102ab2:	68 93 00 00 00       	push   $0x93
.globl vector148
  102ab7:	e9 10 05 00 00       	jmp    102fcc <__alltraps>

00102abc <vector148>:
vector148:
  pushl $0
  pushl $148
  102abc:	6a 00                	push   $0x0
  jmp __alltraps
  102abe:	68 94 00 00 00       	push   $0x94
.globl vector149
  102ac3:	e9 04 05 00 00       	jmp    102fcc <__alltraps>

00102ac8 <vector149>:
vector149:
  pushl $0
  pushl $149
  102ac8:	6a 00                	push   $0x0
  jmp __alltraps
  102aca:	68 95 00 00 00       	push   $0x95
.globl vector150
  102acf:	e9 f8 04 00 00       	jmp    102fcc <__alltraps>

00102ad4 <vector150>:
vector150:
  pushl $0
  pushl $150
  102ad4:	6a 00                	push   $0x0
  jmp __alltraps
  102ad6:	68 96 00 00 00       	push   $0x96
.globl vector151
  102adb:	e9 ec 04 00 00       	jmp    102fcc <__alltraps>

00102ae0 <vector151>:
vector151:
  pushl $0
  pushl $151
  102ae0:	6a 00                	push   $0x0
  jmp __alltraps
  102ae2:	68 97 00 00 00       	push   $0x97
.globl vector152
  102ae7:	e9 e0 04 00 00       	jmp    102fcc <__alltraps>

00102aec <vector152>:
vector152:
  pushl $0
  pushl $152
  102aec:	6a 00                	push   $0x0
  jmp __alltraps
  102aee:	68 98 00 00 00       	push   $0x98
.globl vector153
  102af3:	e9 d4 04 00 00       	jmp    102fcc <__alltraps>

00102af8 <vector153>:
vector153:
  pushl $0
  pushl $153
  102af8:	6a 00                	push   $0x0
  jmp __alltraps
  102afa:	68 99 00 00 00       	push   $0x99
.globl vector154
  102aff:	e9 c8 04 00 00       	jmp    102fcc <__alltraps>

00102b04 <vector154>:
vector154:
  pushl $0
  pushl $154
  102b04:	6a 00                	push   $0x0
  jmp __alltraps
  102b06:	68 9a 00 00 00       	push   $0x9a
.globl vector155
  102b0b:	e9 bc 04 00 00       	jmp    102fcc <__alltraps>

00102b10 <vector155>:
vector155:
  pushl $0
  pushl $155
  102b10:	6a 00                	push   $0x0
  jmp __alltraps
  102b12:	68 9b 00 00 00       	push   $0x9b
.globl vector156
  102b17:	e9 b0 04 00 00       	jmp    102fcc <__alltraps>

00102b1c <vector156>:
vector156:
  pushl $0
  pushl $156
  102b1c:	6a 00                	push   $0x0
  jmp __alltraps
  102b1e:	68 9c 00 00 00       	push   $0x9c
.globl vector157
  102b23:	e9 a4 04 00 00       	jmp    102fcc <__alltraps>

00102b28 <vector157>:
vector157:
  pushl $0
  pushl $157
  102b28:	6a 00                	push   $0x0
  jmp __alltraps
  102b2a:	68 9d 00 00 00       	push   $0x9d
.globl vector158
  102b2f:	e9 98 04 00 00       	jmp    102fcc <__alltraps>

00102b34 <vector158>:
vector158:
  pushl $0
  pushl $158
  102b34:	6a 00                	push   $0x0
  jmp __alltraps
  102b36:	68 9e 00 00 00       	push   $0x9e
.globl vector159
  102b3b:	e9 8c 04 00 00       	jmp    102fcc <__alltraps>

00102b40 <vector159>:
vector159:
  pushl $0
  pushl $159
  102b40:	6a 00                	push   $0x0
  jmp __alltraps
  102b42:	68 9f 00 00 00       	push   $0x9f
.globl vector160
  102b47:	e9 80 04 00 00       	jmp    102fcc <__alltraps>

00102b4c <vector160>:
vector160:
  pushl $0
  pushl $160
  102b4c:	6a 00                	push   $0x0
  jmp __alltraps
  102b4e:	68 a0 00 00 00       	push   $0xa0
.globl vector161
  102b53:	e9 74 04 00 00       	jmp    102fcc <__alltraps>

00102b58 <vector161>:
vector161:
  pushl $0
  pushl $161
  102b58:	6a 00                	push   $0x0
  jmp __alltraps
  102b5a:	68 a1 00 00 00       	push   $0xa1
.globl vector162
  102b5f:	e9 68 04 00 00       	jmp    102fcc <__alltraps>

00102b64 <vector162>:
vector162:
  pushl $0
  pushl $162
  102b64:	6a 00                	push   $0x0
  jmp __alltraps
  102b66:	68 a2 00 00 00       	push   $0xa2
.globl vector163
  102b6b:	e9 5c 04 00 00       	jmp    102fcc <__alltraps>

00102b70 <vector163>:
vector163:
  pushl $0
  pushl $163
  102b70:	6a 00                	push   $0x0
  jmp __alltraps
  102b72:	68 a3 00 00 00       	push   $0xa3
.globl vector164
  102b77:	e9 50 04 00 00       	jmp    102fcc <__alltraps>

00102b7c <vector164>:
vector164:
  pushl $0
  pushl $164
  102b7c:	6a 00                	push   $0x0
  jmp __alltraps
  102b7e:	68 a4 00 00 00       	push   $0xa4
.globl vector165
  102b83:	e9 44 04 00 00       	jmp    102fcc <__alltraps>

00102b88 <vector165>:
vector165:
  pushl $0
  pushl $165
  102b88:	6a 00                	push   $0x0
  jmp __alltraps
  102b8a:	68 a5 00 00 00       	push   $0xa5
.globl vector166
  102b8f:	e9 38 04 00 00       	jmp    102fcc <__alltraps>

00102b94 <vector166>:
vector166:
  pushl $0
  pushl $166
  102b94:	6a 00                	push   $0x0
  jmp __alltraps
  102b96:	68 a6 00 00 00       	push   $0xa6
.globl vector167
  102b9b:	e9 2c 04 00 00       	jmp    102fcc <__alltraps>

00102ba0 <vector167>:
vector167:
  pushl $0
  pushl $167
  102ba0:	6a 00                	push   $0x0
  jmp __alltraps
  102ba2:	68 a7 00 00 00       	push   $0xa7
.globl vector168
  102ba7:	e9 20 04 00 00       	jmp    102fcc <__alltraps>

00102bac <vector168>:
vector168:
  pushl $0
  pushl $168
  102bac:	6a 00                	push   $0x0
  jmp __alltraps
  102bae:	68 a8 00 00 00       	push   $0xa8
.globl vector169
  102bb3:	e9 14 04 00 00       	jmp    102fcc <__alltraps>

00102bb8 <vector169>:
vector169:
  pushl $0
  pushl $169
  102bb8:	6a 00                	push   $0x0
  jmp __alltraps
  102bba:	68 a9 00 00 00       	push   $0xa9
.globl vector170
  102bbf:	e9 08 04 00 00       	jmp    102fcc <__alltraps>

00102bc4 <vector170>:
vector170:
  pushl $0
  pushl $170
  102bc4:	6a 00                	push   $0x0
  jmp __alltraps
  102bc6:	68 aa 00 00 00       	push   $0xaa
.globl vector171
  102bcb:	e9 fc 03 00 00       	jmp    102fcc <__alltraps>

00102bd0 <vector171>:
vector171:
  pushl $0
  pushl $171
  102bd0:	6a 00                	push   $0x0
  jmp __alltraps
  102bd2:	68 ab 00 00 00       	push   $0xab
.globl vector172
  102bd7:	e9 f0 03 00 00       	jmp    102fcc <__alltraps>

00102bdc <vector172>:
vector172:
  pushl $0
  pushl $172
  102bdc:	6a 00                	push   $0x0
  jmp __alltraps
  102bde:	68 ac 00 00 00       	push   $0xac
.globl vector173
  102be3:	e9 e4 03 00 00       	jmp    102fcc <__alltraps>

00102be8 <vector173>:
vector173:
  pushl $0
  pushl $173
  102be8:	6a 00                	push   $0x0
  jmp __alltraps
  102bea:	68 ad 00 00 00       	push   $0xad
.globl vector174
  102bef:	e9 d8 03 00 00       	jmp    102fcc <__alltraps>

00102bf4 <vector174>:
vector174:
  pushl $0
  pushl $174
  102bf4:	6a 00                	push   $0x0
  jmp __alltraps
  102bf6:	68 ae 00 00 00       	push   $0xae
.globl vector175
  102bfb:	e9 cc 03 00 00       	jmp    102fcc <__alltraps>

00102c00 <vector175>:
vector175:
  pushl $0
  pushl $175
  102c00:	6a 00                	push   $0x0
  jmp __alltraps
  102c02:	68 af 00 00 00       	push   $0xaf
.globl vector176
  102c07:	e9 c0 03 00 00       	jmp    102fcc <__alltraps>

00102c0c <vector176>:
vector176:
  pushl $0
  pushl $176
  102c0c:	6a 00                	push   $0x0
  jmp __alltraps
  102c0e:	68 b0 00 00 00       	push   $0xb0
.globl vector177
  102c13:	e9 b4 03 00 00       	jmp    102fcc <__alltraps>

00102c18 <vector177>:
vector177:
  pushl $0
  pushl $177
  102c18:	6a 00                	push   $0x0
  jmp __alltraps
  102c1a:	68 b1 00 00 00       	push   $0xb1
.globl vector178
  102c1f:	e9 a8 03 00 00       	jmp    102fcc <__alltraps>

00102c24 <vector178>:
vector178:
  pushl $0
  pushl $178
  102c24:	6a 00                	push   $0x0
  jmp __alltraps
  102c26:	68 b2 00 00 00       	push   $0xb2
.globl vector179
  102c2b:	e9 9c 03 00 00       	jmp    102fcc <__alltraps>

00102c30 <vector179>:
vector179:
  pushl $0
  pushl $179
  102c30:	6a 00                	push   $0x0
  jmp __alltraps
  102c32:	68 b3 00 00 00       	push   $0xb3
.globl vector180
  102c37:	e9 90 03 00 00       	jmp    102fcc <__alltraps>

00102c3c <vector180>:
vector180:
  pushl $0
  pushl $180
  102c3c:	6a 00                	push   $0x0
  jmp __alltraps
  102c3e:	68 b4 00 00 00       	push   $0xb4
.globl vector181
  102c43:	e9 84 03 00 00       	jmp    102fcc <__alltraps>

00102c48 <vector181>:
vector181:
  pushl $0
  pushl $181
  102c48:	6a 00                	push   $0x0
  jmp __alltraps
  102c4a:	68 b5 00 00 00       	push   $0xb5
.globl vector182
  102c4f:	e9 78 03 00 00       	jmp    102fcc <__alltraps>

00102c54 <vector182>:
vector182:
  pushl $0
  pushl $182
  102c54:	6a 00                	push   $0x0
  jmp __alltraps
  102c56:	68 b6 00 00 00       	push   $0xb6
.globl vector183
  102c5b:	e9 6c 03 00 00       	jmp    102fcc <__alltraps>

00102c60 <vector183>:
vector183:
  pushl $0
  pushl $183
  102c60:	6a 00                	push   $0x0
  jmp __alltraps
  102c62:	68 b7 00 00 00       	push   $0xb7
.globl vector184
  102c67:	e9 60 03 00 00       	jmp    102fcc <__alltraps>

00102c6c <vector184>:
vector184:
  pushl $0
  pushl $184
  102c6c:	6a 00                	push   $0x0
  jmp __alltraps
  102c6e:	68 b8 00 00 00       	push   $0xb8
.globl vector185
  102c73:	e9 54 03 00 00       	jmp    102fcc <__alltraps>

00102c78 <vector185>:
vector185:
  pushl $0
  pushl $185
  102c78:	6a 00                	push   $0x0
  jmp __alltraps
  102c7a:	68 b9 00 00 00       	push   $0xb9
.globl vector186
  102c7f:	e9 48 03 00 00       	jmp    102fcc <__alltraps>

00102c84 <vector186>:
vector186:
  pushl $0
  pushl $186
  102c84:	6a 00                	push   $0x0
  jmp __alltraps
  102c86:	68 ba 00 00 00       	push   $0xba
.globl vector187
  102c8b:	e9 3c 03 00 00       	jmp    102fcc <__alltraps>

00102c90 <vector187>:
vector187:
  pushl $0
  pushl $187
  102c90:	6a 00                	push   $0x0
  jmp __alltraps
  102c92:	68 bb 00 00 00       	push   $0xbb
.globl vector188
  102c97:	e9 30 03 00 00       	jmp    102fcc <__alltraps>

00102c9c <vector188>:
vector188:
  pushl $0
  pushl $188
  102c9c:	6a 00                	push   $0x0
  jmp __alltraps
  102c9e:	68 bc 00 00 00       	push   $0xbc
.globl vector189
  102ca3:	e9 24 03 00 00       	jmp    102fcc <__alltraps>

00102ca8 <vector189>:
vector189:
  pushl $0
  pushl $189
  102ca8:	6a 00                	push   $0x0
  jmp __alltraps
  102caa:	68 bd 00 00 00       	push   $0xbd
.globl vector190
  102caf:	e9 18 03 00 00       	jmp    102fcc <__alltraps>

00102cb4 <vector190>:
vector190:
  pushl $0
  pushl $190
  102cb4:	6a 00                	push   $0x0
  jmp __alltraps
  102cb6:	68 be 00 00 00       	push   $0xbe
.globl vector191
  102cbb:	e9 0c 03 00 00       	jmp    102fcc <__alltraps>

00102cc0 <vector191>:
vector191:
  pushl $0
  pushl $191
  102cc0:	6a 00                	push   $0x0
  jmp __alltraps
  102cc2:	68 bf 00 00 00       	push   $0xbf
.globl vector192
  102cc7:	e9 00 03 00 00       	jmp    102fcc <__alltraps>

00102ccc <vector192>:
vector192:
  pushl $0
  pushl $192
  102ccc:	6a 00                	push   $0x0
  jmp __alltraps
  102cce:	68 c0 00 00 00       	push   $0xc0
.globl vector193
  102cd3:	e9 f4 02 00 00       	jmp    102fcc <__alltraps>

00102cd8 <vector193>:
vector193:
  pushl $0
  pushl $193
  102cd8:	6a 00                	push   $0x0
  jmp __alltraps
  102cda:	68 c1 00 00 00       	push   $0xc1
.globl vector194
  102cdf:	e9 e8 02 00 00       	jmp    102fcc <__alltraps>

00102ce4 <vector194>:
vector194:
  pushl $0
  pushl $194
  102ce4:	6a 00                	push   $0x0
  jmp __alltraps
  102ce6:	68 c2 00 00 00       	push   $0xc2
.globl vector195
  102ceb:	e9 dc 02 00 00       	jmp    102fcc <__alltraps>

00102cf0 <vector195>:
vector195:
  pushl $0
  pushl $195
  102cf0:	6a 00                	push   $0x0
  jmp __alltraps
  102cf2:	68 c3 00 00 00       	push   $0xc3
.globl vector196
  102cf7:	e9 d0 02 00 00       	jmp    102fcc <__alltraps>

00102cfc <vector196>:
vector196:
  pushl $0
  pushl $196
  102cfc:	6a 00                	push   $0x0
  jmp __alltraps
  102cfe:	68 c4 00 00 00       	push   $0xc4
.globl vector197
  102d03:	e9 c4 02 00 00       	jmp    102fcc <__alltraps>

00102d08 <vector197>:
vector197:
  pushl $0
  pushl $197
  102d08:	6a 00                	push   $0x0
  jmp __alltraps
  102d0a:	68 c5 00 00 00       	push   $0xc5
.globl vector198
  102d0f:	e9 b8 02 00 00       	jmp    102fcc <__alltraps>

00102d14 <vector198>:
vector198:
  pushl $0
  pushl $198
  102d14:	6a 00                	push   $0x0
  jmp __alltraps
  102d16:	68 c6 00 00 00       	push   $0xc6
.globl vector199
  102d1b:	e9 ac 02 00 00       	jmp    102fcc <__alltraps>

00102d20 <vector199>:
vector199:
  pushl $0
  pushl $199
  102d20:	6a 00                	push   $0x0
  jmp __alltraps
  102d22:	68 c7 00 00 00       	push   $0xc7
.globl vector200
  102d27:	e9 a0 02 00 00       	jmp    102fcc <__alltraps>

00102d2c <vector200>:
vector200:
  pushl $0
  pushl $200
  102d2c:	6a 00                	push   $0x0
  jmp __alltraps
  102d2e:	68 c8 00 00 00       	push   $0xc8
.globl vector201
  102d33:	e9 94 02 00 00       	jmp    102fcc <__alltraps>

00102d38 <vector201>:
vector201:
  pushl $0
  pushl $201
  102d38:	6a 00                	push   $0x0
  jmp __alltraps
  102d3a:	68 c9 00 00 00       	push   $0xc9
.globl vector202
  102d3f:	e9 88 02 00 00       	jmp    102fcc <__alltraps>

00102d44 <vector202>:
vector202:
  pushl $0
  pushl $202
  102d44:	6a 00                	push   $0x0
  jmp __alltraps
  102d46:	68 ca 00 00 00       	push   $0xca
.globl vector203
  102d4b:	e9 7c 02 00 00       	jmp    102fcc <__alltraps>

00102d50 <vector203>:
vector203:
  pushl $0
  pushl $203
  102d50:	6a 00                	push   $0x0
  jmp __alltraps
  102d52:	68 cb 00 00 00       	push   $0xcb
.globl vector204
  102d57:	e9 70 02 00 00       	jmp    102fcc <__alltraps>

00102d5c <vector204>:
vector204:
  pushl $0
  pushl $204
  102d5c:	6a 00                	push   $0x0
  jmp __alltraps
  102d5e:	68 cc 00 00 00       	push   $0xcc
.globl vector205
  102d63:	e9 64 02 00 00       	jmp    102fcc <__alltraps>

00102d68 <vector205>:
vector205:
  pushl $0
  pushl $205
  102d68:	6a 00                	push   $0x0
  jmp __alltraps
  102d6a:	68 cd 00 00 00       	push   $0xcd
.globl vector206
  102d6f:	e9 58 02 00 00       	jmp    102fcc <__alltraps>

00102d74 <vector206>:
vector206:
  pushl $0
  pushl $206
  102d74:	6a 00                	push   $0x0
  jmp __alltraps
  102d76:	68 ce 00 00 00       	push   $0xce
.globl vector207
  102d7b:	e9 4c 02 00 00       	jmp    102fcc <__alltraps>

00102d80 <vector207>:
vector207:
  pushl $0
  pushl $207
  102d80:	6a 00                	push   $0x0
  jmp __alltraps
  102d82:	68 cf 00 00 00       	push   $0xcf
.globl vector208
  102d87:	e9 40 02 00 00       	jmp    102fcc <__alltraps>

00102d8c <vector208>:
vector208:
  pushl $0
  pushl $208
  102d8c:	6a 00                	push   $0x0
  jmp __alltraps
  102d8e:	68 d0 00 00 00       	push   $0xd0
.globl vector209
  102d93:	e9 34 02 00 00       	jmp    102fcc <__alltraps>

00102d98 <vector209>:
vector209:
  pushl $0
  pushl $209
  102d98:	6a 00                	push   $0x0
  jmp __alltraps
  102d9a:	68 d1 00 00 00       	push   $0xd1
.globl vector210
  102d9f:	e9 28 02 00 00       	jmp    102fcc <__alltraps>

00102da4 <vector210>:
vector210:
  pushl $0
  pushl $210
  102da4:	6a 00                	push   $0x0
  jmp __alltraps
  102da6:	68 d2 00 00 00       	push   $0xd2
.globl vector211
  102dab:	e9 1c 02 00 00       	jmp    102fcc <__alltraps>

00102db0 <vector211>:
vector211:
  pushl $0
  pushl $211
  102db0:	6a 00                	push   $0x0
  jmp __alltraps
  102db2:	68 d3 00 00 00       	push   $0xd3
.globl vector212
  102db7:	e9 10 02 00 00       	jmp    102fcc <__alltraps>

00102dbc <vector212>:
vector212:
  pushl $0
  pushl $212
  102dbc:	6a 00                	push   $0x0
  jmp __alltraps
  102dbe:	68 d4 00 00 00       	push   $0xd4
.globl vector213
  102dc3:	e9 04 02 00 00       	jmp    102fcc <__alltraps>

00102dc8 <vector213>:
vector213:
  pushl $0
  pushl $213
  102dc8:	6a 00                	push   $0x0
  jmp __alltraps
  102dca:	68 d5 00 00 00       	push   $0xd5
.globl vector214
  102dcf:	e9 f8 01 00 00       	jmp    102fcc <__alltraps>

00102dd4 <vector214>:
vector214:
  pushl $0
  pushl $214
  102dd4:	6a 00                	push   $0x0
  jmp __alltraps
  102dd6:	68 d6 00 00 00       	push   $0xd6
.globl vector215
  102ddb:	e9 ec 01 00 00       	jmp    102fcc <__alltraps>

00102de0 <vector215>:
vector215:
  pushl $0
  pushl $215
  102de0:	6a 00                	push   $0x0
  jmp __alltraps
  102de2:	68 d7 00 00 00       	push   $0xd7
.globl vector216
  102de7:	e9 e0 01 00 00       	jmp    102fcc <__alltraps>

00102dec <vector216>:
vector216:
  pushl $0
  pushl $216
  102dec:	6a 00                	push   $0x0
  jmp __alltraps
  102dee:	68 d8 00 00 00       	push   $0xd8
.globl vector217
  102df3:	e9 d4 01 00 00       	jmp    102fcc <__alltraps>

00102df8 <vector217>:
vector217:
  pushl $0
  pushl $217
  102df8:	6a 00                	push   $0x0
  jmp __alltraps
  102dfa:	68 d9 00 00 00       	push   $0xd9
.globl vector218
  102dff:	e9 c8 01 00 00       	jmp    102fcc <__alltraps>

00102e04 <vector218>:
vector218:
  pushl $0
  pushl $218
  102e04:	6a 00                	push   $0x0
  jmp __alltraps
  102e06:	68 da 00 00 00       	push   $0xda
.globl vector219
  102e0b:	e9 bc 01 00 00       	jmp    102fcc <__alltraps>

00102e10 <vector219>:
vector219:
  pushl $0
  pushl $219
  102e10:	6a 00                	push   $0x0
  jmp __alltraps
  102e12:	68 db 00 00 00       	push   $0xdb
.globl vector220
  102e17:	e9 b0 01 00 00       	jmp    102fcc <__alltraps>

00102e1c <vector220>:
vector220:
  pushl $0
  pushl $220
  102e1c:	6a 00                	push   $0x0
  jmp __alltraps
  102e1e:	68 dc 00 00 00       	push   $0xdc
.globl vector221
  102e23:	e9 a4 01 00 00       	jmp    102fcc <__alltraps>

00102e28 <vector221>:
vector221:
  pushl $0
  pushl $221
  102e28:	6a 00                	push   $0x0
  jmp __alltraps
  102e2a:	68 dd 00 00 00       	push   $0xdd
.globl vector222
  102e2f:	e9 98 01 00 00       	jmp    102fcc <__alltraps>

00102e34 <vector222>:
vector222:
  pushl $0
  pushl $222
  102e34:	6a 00                	push   $0x0
  jmp __alltraps
  102e36:	68 de 00 00 00       	push   $0xde
.globl vector223
  102e3b:	e9 8c 01 00 00       	jmp    102fcc <__alltraps>

00102e40 <vector223>:
vector223:
  pushl $0
  pushl $223
  102e40:	6a 00                	push   $0x0
  jmp __alltraps
  102e42:	68 df 00 00 00       	push   $0xdf
.globl vector224
  102e47:	e9 80 01 00 00       	jmp    102fcc <__alltraps>

00102e4c <vector224>:
vector224:
  pushl $0
  pushl $224
  102e4c:	6a 00                	push   $0x0
  jmp __alltraps
  102e4e:	68 e0 00 00 00       	push   $0xe0
.globl vector225
  102e53:	e9 74 01 00 00       	jmp    102fcc <__alltraps>

00102e58 <vector225>:
vector225:
  pushl $0
  pushl $225
  102e58:	6a 00                	push   $0x0
  jmp __alltraps
  102e5a:	68 e1 00 00 00       	push   $0xe1
.globl vector226
  102e5f:	e9 68 01 00 00       	jmp    102fcc <__alltraps>

00102e64 <vector226>:
vector226:
  pushl $0
  pushl $226
  102e64:	6a 00                	push   $0x0
  jmp __alltraps
  102e66:	68 e2 00 00 00       	push   $0xe2
.globl vector227
  102e6b:	e9 5c 01 00 00       	jmp    102fcc <__alltraps>

00102e70 <vector227>:
vector227:
  pushl $0
  pushl $227
  102e70:	6a 00                	push   $0x0
  jmp __alltraps
  102e72:	68 e3 00 00 00       	push   $0xe3
.globl vector228
  102e77:	e9 50 01 00 00       	jmp    102fcc <__alltraps>

00102e7c <vector228>:
vector228:
  pushl $0
  pushl $228
  102e7c:	6a 00                	push   $0x0
  jmp __alltraps
  102e7e:	68 e4 00 00 00       	push   $0xe4
.globl vector229
  102e83:	e9 44 01 00 00       	jmp    102fcc <__alltraps>

00102e88 <vector229>:
vector229:
  pushl $0
  pushl $229
  102e88:	6a 00                	push   $0x0
  jmp __alltraps
  102e8a:	68 e5 00 00 00       	push   $0xe5
.globl vector230
  102e8f:	e9 38 01 00 00       	jmp    102fcc <__alltraps>

00102e94 <vector230>:
vector230:
  pushl $0
  pushl $230
  102e94:	6a 00                	push   $0x0
  jmp __alltraps
  102e96:	68 e6 00 00 00       	push   $0xe6
.globl vector231
  102e9b:	e9 2c 01 00 00       	jmp    102fcc <__alltraps>

00102ea0 <vector231>:
vector231:
  pushl $0
  pushl $231
  102ea0:	6a 00                	push   $0x0
  jmp __alltraps
  102ea2:	68 e7 00 00 00       	push   $0xe7
.globl vector232
  102ea7:	e9 20 01 00 00       	jmp    102fcc <__alltraps>

00102eac <vector232>:
vector232:
  pushl $0
  pushl $232
  102eac:	6a 00                	push   $0x0
  jmp __alltraps
  102eae:	68 e8 00 00 00       	push   $0xe8
.globl vector233
  102eb3:	e9 14 01 00 00       	jmp    102fcc <__alltraps>

00102eb8 <vector233>:
vector233:
  pushl $0
  pushl $233
  102eb8:	6a 00                	push   $0x0
  jmp __alltraps
  102eba:	68 e9 00 00 00       	push   $0xe9
.globl vector234
  102ebf:	e9 08 01 00 00       	jmp    102fcc <__alltraps>

00102ec4 <vector234>:
vector234:
  pushl $0
  pushl $234
  102ec4:	6a 00                	push   $0x0
  jmp __alltraps
  102ec6:	68 ea 00 00 00       	push   $0xea
.globl vector235
  102ecb:	e9 fc 00 00 00       	jmp    102fcc <__alltraps>

00102ed0 <vector235>:
vector235:
  pushl $0
  pushl $235
  102ed0:	6a 00                	push   $0x0
  jmp __alltraps
  102ed2:	68 eb 00 00 00       	push   $0xeb
.globl vector236
  102ed7:	e9 f0 00 00 00       	jmp    102fcc <__alltraps>

00102edc <vector236>:
vector236:
  pushl $0
  pushl $236
  102edc:	6a 00                	push   $0x0
  jmp __alltraps
  102ede:	68 ec 00 00 00       	push   $0xec
.globl vector237
  102ee3:	e9 e4 00 00 00       	jmp    102fcc <__alltraps>

00102ee8 <vector237>:
vector237:
  pushl $0
  pushl $237
  102ee8:	6a 00                	push   $0x0
  jmp __alltraps
  102eea:	68 ed 00 00 00       	push   $0xed
.globl vector238
  102eef:	e9 d8 00 00 00       	jmp    102fcc <__alltraps>

00102ef4 <vector238>:
vector238:
  pushl $0
  pushl $238
  102ef4:	6a 00                	push   $0x0
  jmp __alltraps
  102ef6:	68 ee 00 00 00       	push   $0xee
.globl vector239
  102efb:	e9 cc 00 00 00       	jmp    102fcc <__alltraps>

00102f00 <vector239>:
vector239:
  pushl $0
  pushl $239
  102f00:	6a 00                	push   $0x0
  jmp __alltraps
  102f02:	68 ef 00 00 00       	push   $0xef
.globl vector240
  102f07:	e9 c0 00 00 00       	jmp    102fcc <__alltraps>

00102f0c <vector240>:
vector240:
  pushl $0
  pushl $240
  102f0c:	6a 00                	push   $0x0
  jmp __alltraps
  102f0e:	68 f0 00 00 00       	push   $0xf0
.globl vector241
  102f13:	e9 b4 00 00 00       	jmp    102fcc <__alltraps>

00102f18 <vector241>:
vector241:
  pushl $0
  pushl $241
  102f18:	6a 00                	push   $0x0
  jmp __alltraps
  102f1a:	68 f1 00 00 00       	push   $0xf1
.globl vector242
  102f1f:	e9 a8 00 00 00       	jmp    102fcc <__alltraps>

00102f24 <vector242>:
vector242:
  pushl $0
  pushl $242
  102f24:	6a 00                	push   $0x0
  jmp __alltraps
  102f26:	68 f2 00 00 00       	push   $0xf2
.globl vector243
  102f2b:	e9 9c 00 00 00       	jmp    102fcc <__alltraps>

00102f30 <vector243>:
vector243:
  pushl $0
  pushl $243
  102f30:	6a 00                	push   $0x0
  jmp __alltraps
  102f32:	68 f3 00 00 00       	push   $0xf3
.globl vector244
  102f37:	e9 90 00 00 00       	jmp    102fcc <__alltraps>

00102f3c <vector244>:
vector244:
  pushl $0
  pushl $244
  102f3c:	6a 00                	push   $0x0
  jmp __alltraps
  102f3e:	68 f4 00 00 00       	push   $0xf4
.globl vector245
  102f43:	e9 84 00 00 00       	jmp    102fcc <__alltraps>

00102f48 <vector245>:
vector245:
  pushl $0
  pushl $245
  102f48:	6a 00                	push   $0x0
  jmp __alltraps
  102f4a:	68 f5 00 00 00       	push   $0xf5
.globl vector246
  102f4f:	e9 78 00 00 00       	jmp    102fcc <__alltraps>

00102f54 <vector246>:
vector246:
  pushl $0
  pushl $246
  102f54:	6a 00                	push   $0x0
  jmp __alltraps
  102f56:	68 f6 00 00 00       	push   $0xf6
.globl vector247
  102f5b:	e9 6c 00 00 00       	jmp    102fcc <__alltraps>

00102f60 <vector247>:
vector247:
  pushl $0
  pushl $247
  102f60:	6a 00                	push   $0x0
  jmp __alltraps
  102f62:	68 f7 00 00 00       	push   $0xf7
.globl vector248
  102f67:	e9 60 00 00 00       	jmp    102fcc <__alltraps>

00102f6c <vector248>:
vector248:
  pushl $0
  pushl $248
  102f6c:	6a 00                	push   $0x0
  jmp __alltraps
  102f6e:	68 f8 00 00 00       	push   $0xf8
.globl vector249
  102f73:	e9 54 00 00 00       	jmp    102fcc <__alltraps>

00102f78 <vector249>:
vector249:
  pushl $0
  pushl $249
  102f78:	6a 00                	push   $0x0
  jmp __alltraps
  102f7a:	68 f9 00 00 00       	push   $0xf9
.globl vector250
  102f7f:	e9 48 00 00 00       	jmp    102fcc <__alltraps>

00102f84 <vector250>:
vector250:
  pushl $0
  pushl $250
  102f84:	6a 00                	push   $0x0
  jmp __alltraps
  102f86:	68 fa 00 00 00       	push   $0xfa
.globl vector251
  102f8b:	e9 3c 00 00 00       	jmp    102fcc <__alltraps>

00102f90 <vector251>:
vector251:
  pushl $0
  pushl $251
  102f90:	6a 00                	push   $0x0
  jmp __alltraps
  102f92:	68 fb 00 00 00       	push   $0xfb
.globl vector252
  102f97:	e9 30 00 00 00       	jmp    102fcc <__alltraps>

00102f9c <vector252>:
vector252:
  pushl $0
  pushl $252
  102f9c:	6a 00                	push   $0x0
  jmp __alltraps
  102f9e:	68 fc 00 00 00       	push   $0xfc
.globl vector253
  102fa3:	e9 24 00 00 00       	jmp    102fcc <__alltraps>

00102fa8 <vector253>:
vector253:
  pushl $0
  pushl $253
  102fa8:	6a 00                	push   $0x0
  jmp __alltraps
  102faa:	68 fd 00 00 00       	push   $0xfd
.globl vector254
  102faf:	e9 18 00 00 00       	jmp    102fcc <__alltraps>

00102fb4 <vector254>:
vector254:
  pushl $0
  pushl $254
  102fb4:	6a 00                	push   $0x0
  jmp __alltraps
  102fb6:	68 fe 00 00 00       	push   $0xfe
.globl vector255
  102fbb:	e9 0c 00 00 00       	jmp    102fcc <__alltraps>

00102fc0 <vector255>:
vector255:
  pushl $0
  pushl $255
  102fc0:	6a 00                	push   $0x0
  jmp __alltraps
  102fc2:	68 ff 00 00 00       	push   $0xff

  102fc7:	e9 00 00 00 00       	jmp    102fcc <__alltraps>

00102fcc <__alltraps>:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
    pushl %es
    pushl %fs
    pushl %gs
  102fcc:	1e                   	push   %ds
    pushal
  102fcd:	06                   	push   %es

  102fce:	0f a0                	push   %fs
    # load GD_KDATA into %ds and %es to set up data segments for kernel
  102fd0:	0f a8                	push   %gs
    movl $GD_KDATA, %eax
  102fd2:	60                   	pusha  
    movw %ax, %ds
    movw %ax, %es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
  102fd3:	b8 10 00 00 00       	mov    $0x10,%eax
    pushl %esp
  102fd8:	66 8e d8             	mov    %ax,%ds

  102fdb:	66 8e c0             	mov    %ax,%es
    # call trap(tf), where tf=%esp
    call trap

    # pop the pushed stack pointer
  102fde:	54                   	push   %esp
    popl %esp

    # return falls through to trapret...
.globl __trapret
  102fdf:	e8 bc f3 ff ff       	call   1023a0 <trap>
__trapret:
    # restore registers from stack
    popal

  102fe4:	5c                   	pop    %esp

00102fe5 <__trapret>:
    popl %fs
    popl %es
    popl %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
  102fe5:	61                   	popa   
    iret

  102fe6:	0f a9                	pop    %gs
  102fe8:	0f a1                	pop    %fs
  102fea:	07                   	pop    %es
  102feb:	1f                   	pop    %ds
  102fec:	83 c4 08             	add    $0x8,%esp
  102fef:	cf                   	iret   

00102ff0 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
  102ff0:	55                   	push   %ebp
  102ff1:	89 e5                	mov    %esp,%ebp
  102ff3:	50                   	push   %eax
  102ff4:	8b 45 08             	mov    0x8(%ebp),%eax
  102ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    ts.ts_esp0 = esp0;
  102ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  102ffd:	a3 38 48 11 00       	mov    %eax,0x114838
}
  103002:	83 c4 04             	add    $0x4,%esp
  103005:	5d                   	pop    %ebp
  103006:	c3                   	ret    
  103007:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10300e:	00 00 

00103010 <alloc_pages>:
    pmm_manager->init_memmap(base, n);
}

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
  103010:	55                   	push   %ebp
  103011:	89 e5                	mov    %esp,%ebp
  103013:	83 ec 18             	sub    $0x18,%esp
  103016:	8b 45 08             	mov    0x8(%ebp),%eax
  103019:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct Page *page=NULL;
  10301c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
  103023:	e8 38 00 00 00       	call   103060 <__intr_save>
  103028:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        page = pmm_manager->alloc_pages(n);
  10302b:	a1 24 49 11 00       	mov    0x114924,%eax
  103030:	8b 40 0c             	mov    0xc(%eax),%eax
  103033:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  103036:	89 0c 24             	mov    %ecx,(%esp)
  103039:	ff d0                	call   *%eax
  10303b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
    local_intr_restore(intr_flag);
  10303e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103041:	89 04 24             	mov    %eax,(%esp)
  103044:	e8 57 00 00 00       	call   1030a0 <__intr_restore>
    return page;
  103049:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10304c:	83 c4 18             	add    $0x18,%esp
  10304f:	5d                   	pop    %ebp
  103050:	c3                   	ret    
  103051:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  103058:	0f 1f 84 00 00 00 00 
  10305f:	00 

00103060 <__intr_save>:
__intr_save(void) {
  103060:	55                   	push   %ebp
  103061:	89 e5                	mov    %esp,%ebp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
  103063:	83 ec 08             	sub    $0x8,%esp
  103066:	9c                   	pushf  
  103067:	58                   	pop    %eax
  103068:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
  10306b:	8b 45 fc             	mov    -0x4(%ebp),%eax
    if (read_eflags() & FL_IF) {
  10306e:	25 00 02 00 00       	and    $0x200,%eax
  103073:	83 f8 00             	cmp    $0x0,%eax
  103076:	0f 84 11 00 00 00    	je     10308d <__intr_save+0x2d>
        intr_disable();
  10307c:	e8 9f ed ff ff       	call   101e20 <intr_disable>
        return 1;
  103081:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  103088:	e9 07 00 00 00       	jmp    103094 <__intr_save+0x34>
    return 0;
  10308d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  103094:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103097:	83 c4 08             	add    $0x8,%esp
  10309a:	5d                   	pop    %ebp
  10309b:	c3                   	ret    
  10309c:	0f 1f 40 00          	nopl   0x0(%eax)

001030a0 <__intr_restore>:
__intr_restore(bool flag) {
  1030a0:	55                   	push   %ebp
  1030a1:	89 e5                	mov    %esp,%ebp
  1030a3:	83 ec 08             	sub    $0x8,%esp
  1030a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1030a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (flag) {
  1030ac:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1030b0:	0f 84 05 00 00 00    	je     1030bb <__intr_restore+0x1b>
        intr_enable();
  1030b6:	e8 55 ed ff ff       	call   101e10 <intr_enable>
}
  1030bb:	83 c4 08             	add    $0x8,%esp
  1030be:	5d                   	pop    %ebp
  1030bf:	c3                   	ret    

001030c0 <free_pages>:
}

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
  1030c0:	55                   	push   %ebp
  1030c1:	89 e5                	mov    %esp,%ebp
  1030c3:	83 ec 18             	sub    $0x18,%esp
  1030c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1030c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1030cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1030cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
  1030d2:	e8 89 ff ff ff       	call   103060 <__intr_save>
  1030d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
  1030da:	a1 24 49 11 00       	mov    0x114924,%eax
  1030df:	8b 40 10             	mov    0x10(%eax),%eax
  1030e2:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1030e5:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1030e8:	89 0c 24             	mov    %ecx,(%esp)
  1030eb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1030ef:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
  1030f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1030f4:	89 04 24             	mov    %eax,(%esp)
  1030f7:	e8 a4 ff ff ff       	call   1030a0 <__intr_restore>
}
  1030fc:	83 c4 18             	add    $0x18,%esp
  1030ff:	5d                   	pop    %ebp
  103100:	c3                   	ret    
  103101:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  103108:	0f 1f 84 00 00 00 00 
  10310f:	00 

00103110 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
  103110:	55                   	push   %ebp
  103111:	89 e5                	mov    %esp,%ebp
  103113:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
  103116:	e8 45 ff ff ff       	call   103060 <__intr_save>
  10311b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
  10311e:	a1 24 49 11 00       	mov    0x114924,%eax
  103123:	ff 50 14             	call   *0x14(%eax)
  103126:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
    local_intr_restore(intr_flag);
  103129:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10312c:	89 04 24             	mov    %eax,(%esp)
  10312f:	e8 6c ff ff ff       	call   1030a0 <__intr_restore>
    return ret;
  103134:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103137:	83 c4 18             	add    $0x18,%esp
  10313a:	5d                   	pop    %ebp
  10313b:	c3                   	ret    
  10313c:	0f 1f 40 00          	nopl   0x0(%eax)

00103140 <pmm_init>:
}

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
  103140:	55                   	push   %ebp
  103141:	89 e5                	mov    %esp,%ebp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
  103143:	53                   	push   %ebx
  103144:	57                   	push   %edi
  103145:	56                   	push   %esi
  103146:	83 ec 4c             	sub    $0x4c,%esp
  103149:	e8 92 01 00 00       	call   1032e0 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
  10314e:	e8 cd 01 00 00       	call   103320 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
  103153:	e8 88 06 00 00       	call   1037e0 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
  103158:	e8 b3 06 00 00       	call   103810 <boot_alloc_page>
  10315d:	31 c9                	xor    %ecx,%ecx
  10315f:	ba 00 10 00 00       	mov    $0x1000,%edx
  103164:	a3 30 48 11 00       	mov    %eax,0x114830
    memset(boot_pgdir, 0, PGSIZE);
  103169:	a1 30 48 11 00       	mov    0x114830,%eax
  10316e:	89 04 24             	mov    %eax,(%esp)
  103171:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103178:	00 
  103179:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103180:	00 
  103181:	89 55 e0             	mov    %edx,-0x20(%ebp)
  103184:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  103187:	e8 54 b2 00 00       	call   10e3e0 <memset>
    boot_cr3 = PADDR(boot_pgdir);
  10318c:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  103192:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  103195:	81 7d f0 00 00 00 c0 	cmpl   $0xc0000000,-0x10(%ebp)
  10319c:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10319f:	0f 83 2f 00 00 00    	jae    1031d4 <pmm_init+0x94>
  1031a5:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1031ab:	b9 31 01 00 00       	mov    $0x131,%ecx
  1031b0:	8d 15 0e f7 10 00    	lea    0x10f70e,%edx
  1031b6:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1031b9:	89 04 24             	mov    %eax,(%esp)
  1031bc:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
  1031c3:	00 
  1031c4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1031c8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1031cc:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  1031cf:	e8 7c d2 ff ff       	call   100450 <__panic>
  1031d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1031d7:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
  1031dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1031df:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1031e2:	a3 28 49 11 00       	mov    %eax,0x114928

    check_pgdir();
  1031e7:	e8 84 06 00 00       	call   103870 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
  1031ec:	a1 30 48 11 00       	mov    0x114830,%eax
  1031f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1031f4:	81 7d e8 00 00 00 c0 	cmpl   $0xc0000000,-0x18(%ebp)
  1031fb:	0f 83 2f 00 00 00    	jae    103230 <pmm_init+0xf0>
  103201:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103207:	b9 39 01 00 00       	mov    $0x139,%ecx
  10320c:	8d 15 0e f7 10 00    	lea    0x10f70e,%edx
  103212:	8b 75 e8             	mov    -0x18(%ebp),%esi
  103215:	89 04 24             	mov    %eax,(%esp)
  103218:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
  10321f:	00 
  103220:	89 54 24 08          	mov    %edx,0x8(%esp)
  103224:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103228:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10322b:	e8 20 d2 ff ff       	call   100450 <__panic>
  103230:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
  103235:	b9 00 00 00 38       	mov    $0x38000000,%ecx
  10323a:	31 d2                	xor    %edx,%edx
  10323c:	be 02 00 00 00       	mov    $0x2,%esi
  103241:	8b 7d e8             	mov    -0x18(%ebp),%edi
  103244:	81 ef 00 00 00 c0    	sub    $0xc0000000,%edi
  10324a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10324d:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  103250:	83 cf 01             	or     $0x1,%edi
  103253:	83 cf 02             	or     $0x2,%edi
  103256:	8b 1d 30 48 11 00    	mov    0x114830,%ebx
  10325c:	89 bb ac 0f 00 00    	mov    %edi,0xfac(%ebx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
  103262:	8b 3d 30 48 11 00    	mov    0x114830,%edi
  103268:	89 3c 24             	mov    %edi,(%esp)
  10326b:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
  103272:	c0 
  103273:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
  10327a:	38 
  10327b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  103282:	00 
  103283:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
  10328a:	00 
  10328b:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10328e:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  103291:	89 55 c4             	mov    %edx,-0x3c(%ebp)
  103294:	89 75 c0             	mov    %esi,-0x40(%ebp)
  103297:	e8 04 10 00 00       	call   1042a0 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
  10329c:	a1 30 48 11 00       	mov    0x114830,%eax
  1032a1:	8b 80 00 0c 00 00    	mov    0xc00(%eax),%eax
  1032a7:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  1032ad:	89 01                	mov    %eax,(%ecx)

    enable_paging();
  1032af:	e8 8c 11 00 00       	call   104440 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
  1032b4:	e8 d7 11 00 00       	call   104490 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
  1032b9:	a1 30 48 11 00       	mov    0x114830,%eax
  1032be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
  1032c4:	e8 b7 12 00 00       	call   104580 <check_boot_pgdir>

    print_pgdir();
  1032c9:	e8 e2 17 00 00       	call   104ab0 <print_pgdir>

}
  1032ce:	83 c4 4c             	add    $0x4c,%esp
  1032d1:	5e                   	pop    %esi
  1032d2:	5f                   	pop    %edi
  1032d3:	5b                   	pop    %ebx
  1032d4:	5d                   	pop    %ebp
  1032d5:	c3                   	ret    
  1032d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1032dd:	00 00 00 

001032e0 <init_pmm_manager>:
init_pmm_manager(void) {
  1032e0:	55                   	push   %ebp
  1032e1:	89 e5                	mov    %esp,%ebp
  1032e3:	83 ec 18             	sub    $0x18,%esp
  1032e6:	8d 05 f7 f7 10 00    	lea    0x10f7f7,%eax
  1032ec:	8d 0d 20 04 11 00    	lea    0x110420,%ecx
    pmm_manager = &buddy_pmm_manager;
  1032f2:	89 0d 24 49 11 00    	mov    %ecx,0x114924
    cprintf("memory management: %s\n", pmm_manager->name);
  1032f8:	8b 0d 24 49 11 00    	mov    0x114924,%ecx
  1032fe:	8b 09                	mov    (%ecx),%ecx
  103300:	89 04 24             	mov    %eax,(%esp)
  103303:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  103307:	e8 34 cf ff ff       	call   100240 <cprintf>
    pmm_manager->init();
  10330c:	8b 0d 24 49 11 00    	mov    0x114924,%ecx
  103312:	89 45 fc             	mov    %eax,-0x4(%ebp)
  103315:	ff 51 04             	call   *0x4(%ecx)
}
  103318:	83 c4 18             	add    $0x18,%esp
  10331b:	5d                   	pop    %ebp
  10331c:	c3                   	ret    
  10331d:	0f 1f 00             	nopl   (%eax)

00103320 <page_init>:
page_init(void) {
  103320:	55                   	push   %ebp
  103321:	89 e5                	mov    %esp,%ebp
  103323:	53                   	push   %ebx
  103324:	57                   	push   %edi
  103325:	56                   	push   %esi
  103326:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
  10332c:	8d 05 0e f8 10 00    	lea    0x10f80e,%eax
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
  103332:	c7 45 e8 00 80 00 c0 	movl   $0xc0008000,-0x18(%ebp)
    uint64_t maxpa = 0;
  103339:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  103340:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    cprintf("e820map:\n");
  103347:	89 04 24             	mov    %eax,(%esp)
  10334a:	e8 f1 ce ff ff       	call   100240 <cprintf>
    for (i = 0; i < memmap->nr_map; i ++) {
  10334f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  103356:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  10335c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10335f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  103362:	3b 01                	cmp    (%ecx),%eax
  103364:	0f 8d 5b 01 00 00    	jge    1034c5 <page_init+0x1a5>
  10336a:	8d 05 18 f8 10 00    	lea    0x10f818,%eax
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
  103370:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  103373:	8b 55 e8             	mov    -0x18(%ebp),%edx
  103376:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
  103379:	8b 74 8a 04          	mov    0x4(%edx,%ecx,4),%esi
  10337d:	8b 4c 8a 08          	mov    0x8(%edx,%ecx,4),%ecx
  103381:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  103384:	89 75 d0             	mov    %esi,-0x30(%ebp)
  103387:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10338a:	8b 7d e8             	mov    -0x18(%ebp),%edi
  10338d:	8d 14 92             	lea    (%edx,%edx,4),%edx
  103390:	8b 5c 97 10          	mov    0x10(%edi,%edx,4),%ebx
  103394:	8b 54 97 0c          	mov    0xc(%edi,%edx,4),%edx
  103398:	01 d6                	add    %edx,%esi
  10339a:	11 d9                	adc    %ebx,%ecx
  10339c:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10339f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
  1033a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1033a5:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1033a8:	8d 14 92             	lea    (%edx,%edx,4),%edx
  1033ab:	8b 5c 97 10          	mov    0x10(%edi,%edx,4),%ebx
  1033af:	8b 54 97 0c          	mov    0xc(%edi,%edx,4),%edx
  1033b3:	8b 7d d0             	mov    -0x30(%ebp),%edi
  1033b6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  1033bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1033bf:	83 c6 ff             	add    $0xffffffff,%esi
  1033c2:	83 d1 ff             	adc    $0xffffffff,%ecx
  1033c5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  1033cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1033ce:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1033d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1033d7:	83 c0 04             	add    $0x4,%eax
  1033da:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  1033e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
  1033e6:	6b c0 14             	imul   $0x14,%eax,%eax
  1033e9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  1033ef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
  1033f5:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
  1033fb:	8b 8d 58 ff ff ff    	mov    -0xa8(%ebp),%ecx
  103401:	01 c8                	add    %ecx,%eax
  103403:	8b 40 10             	mov    0x10(%eax),%eax
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
  103406:	89 e1                	mov    %esp,%ecx
  103408:	89 41 1c             	mov    %eax,0x1c(%ecx)
  10340b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
  103411:	89 41 18             	mov    %eax,0x18(%ecx)
  103414:	89 71 14             	mov    %esi,0x14(%ecx)
  103417:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
  10341d:	89 71 10             	mov    %esi,0x10(%ecx)
  103420:	89 79 0c             	mov    %edi,0xc(%ecx)
  103423:	89 59 08             	mov    %ebx,0x8(%ecx)
  103426:	89 51 04             	mov    %edx,0x4(%ecx)
  103429:	c7 01 18 f8 10 00    	movl   $0x10f818,(%ecx)
  10342f:	e8 0c ce ff ff       	call   100240 <cprintf>
        if (memmap->map[i].type == E820_ARM) {
  103434:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  103437:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10343a:	83 c2 04             	add    $0x4,%edx
  10343d:	6b c9 14             	imul   $0x14,%ecx,%ecx
  103440:	01 ca                	add    %ecx,%edx
  103442:	83 7a 10 01          	cmpl   $0x1,0x10(%edx)
  103446:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  10344c:	0f 85 60 00 00 00    	jne    1034b2 <page_init+0x192>
            if (maxpa < end && begin < KMEMSIZE) {
  103452:	8b 45 e0             	mov    -0x20(%ebp),%eax
  103455:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  103458:	8b 55 c8             	mov    -0x38(%ebp),%edx
  10345b:	8b 75 cc             	mov    -0x34(%ebp),%esi
  10345e:	29 d0                	sub    %edx,%eax
  103460:	19 f1                	sbb    %esi,%ecx
  103462:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  103468:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  10346e:	0f 83 39 00 00 00    	jae    1034ad <page_init+0x18d>
  103474:	e9 00 00 00 00       	jmp    103479 <page_init+0x159>
  103479:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10347c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10347f:	31 d2                	xor    %edx,%edx
  103481:	be ff ff ff 37       	mov    $0x37ffffff,%esi
  103486:	29 c6                	sub    %eax,%esi
  103488:	19 ca                	sbb    %ecx,%edx
  10348a:	89 b5 44 ff ff ff    	mov    %esi,-0xbc(%ebp)
  103490:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%ebp)
  103496:	0f 82 11 00 00 00    	jb     1034ad <page_init+0x18d>
  10349c:	e9 00 00 00 00       	jmp    1034a1 <page_init+0x181>
                maxpa = end;
  1034a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1034a4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1034a7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1034aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
  1034ad:	e9 00 00 00 00       	jmp    1034b2 <page_init+0x192>
    }
  1034b2:	e9 00 00 00 00       	jmp    1034b7 <page_init+0x197>
    for (i = 0; i < memmap->nr_map; i ++) {
  1034b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1034ba:	83 c0 01             	add    $0x1,%eax
  1034bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1034c0:	e9 97 fe ff ff       	jmp    10335c <page_init+0x3c>
    if (maxpa > KMEMSIZE) {
  1034c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1034c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1034cb:	2d 01 00 00 38       	sub    $0x38000001,%eax
  1034d0:	83 d9 00             	sbb    $0x0,%ecx
  1034d3:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  1034d9:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
  1034df:	0f 82 13 00 00 00    	jb     1034f8 <page_init+0x1d8>
  1034e5:	e9 00 00 00 00       	jmp    1034ea <page_init+0x1ca>
        maxpa = KMEMSIZE;
  1034ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  1034f1:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
  1034f8:	8d 05 3c 49 11 00    	lea    0x11493c,%eax
    npage = maxpa / PGSIZE;
  1034fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  103501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  103504:	0f a4 ca 14          	shld   $0x14,%ecx,%edx
  103508:	89 15 2c 48 11 00    	mov    %edx,0x11482c
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
  10350e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
  103515:	03 45 c4             	add    -0x3c(%ebp),%eax
  103518:	83 e8 01             	sub    $0x1,%eax
  10351b:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10351e:	8b 45 bc             	mov    -0x44(%ebp),%eax
  103521:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  103524:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  10352a:	89 c8                	mov    %ecx,%eax
  10352c:	31 d2                	xor    %edx,%edx
  10352e:	f7 75 c4             	divl   -0x3c(%ebp)
  103531:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
  103537:	29 d1                	sub    %edx,%ecx
  103539:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10353c:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  10353f:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  103542:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  103545:	89 0d 2c 49 11 00    	mov    %ecx,0x11492c
    for (i = 0; i < npage; i ++) {
  10354b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  103552:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103555:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  10355b:	0f 83 2f 00 00 00    	jae    103590 <page_init+0x270>
        SetPageReserved(pages + i);
  103561:	a1 2c 49 11 00       	mov    0x11492c,%eax
  103566:	6b 4d dc 14          	imul   $0x14,-0x24(%ebp),%ecx
  10356a:	01 c8                	add    %ecx,%eax
  10356c:	83 c0 04             	add    $0x4,%eax
  10356f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  103576:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  103579:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10357c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10357f:	0f ab 08             	bts    %ecx,(%eax)
    for (i = 0; i < npage; i ++) {
  103582:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103585:	83 c0 01             	add    $0x1,%eax
  103588:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10358b:	e9 c2 ff ff ff       	jmp    103552 <page_init+0x232>
    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
  103590:	a1 2c 49 11 00       	mov    0x11492c,%eax
  103595:	6b 0d 2c 48 11 00 14 	imul   $0x14,0x11482c,%ecx
  10359c:	01 c8                	add    %ecx,%eax
  10359e:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1035a1:	81 7d b0 00 00 00 c0 	cmpl   $0xc0000000,-0x50(%ebp)
  1035a8:	0f 83 32 00 00 00    	jae    1035e0 <page_init+0x2c0>
  1035ae:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1035b4:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  1035b9:	8d 15 0e f7 10 00    	lea    0x10f70e,%edx
  1035bf:	8b 75 b0             	mov    -0x50(%ebp),%esi
  1035c2:	89 04 24             	mov    %eax,(%esp)
  1035c5:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
  1035cc:	00 
  1035cd:	89 54 24 08          	mov    %edx,0x8(%esp)
  1035d1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1035d5:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%ebp)
  1035db:	e8 70 ce ff ff       	call   100450 <__panic>
  1035e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
  1035e3:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
  1035e8:	89 45 ac             	mov    %eax,-0x54(%ebp)
  1035eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
  1035ee:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
  1035f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1035f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1035fb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1035fe:	3b 01                	cmp    (%ecx),%eax
  103600:	0f 8d c6 01 00 00    	jge    1037cc <page_init+0x4ac>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
  103606:	8b 45 dc             	mov    -0x24(%ebp),%eax
  103609:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10360c:	8d 04 80             	lea    (%eax,%eax,4),%eax
  10360f:	8b 54 81 04          	mov    0x4(%ecx,%eax,4),%edx
  103613:	8b 44 81 08          	mov    0x8(%ecx,%eax,4),%eax
  103617:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10361a:	89 55 a0             	mov    %edx,-0x60(%ebp)
  10361d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  103620:	8b 75 e8             	mov    -0x18(%ebp),%esi
  103623:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
  103626:	8b 7c 8e 10          	mov    0x10(%esi,%ecx,4),%edi
  10362a:	8b 4c 8e 0c          	mov    0xc(%esi,%ecx,4),%ecx
  10362e:	01 ca                	add    %ecx,%edx
  103630:	11 f8                	adc    %edi,%eax
  103632:	89 55 98             	mov    %edx,-0x68(%ebp)
  103635:	89 45 9c             	mov    %eax,-0x64(%ebp)
        if (memmap->map[i].type == E820_ARM) {
  103638:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10363b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10363e:	83 c1 04             	add    $0x4,%ecx
  103641:	6b c0 14             	imul   $0x14,%eax,%eax
  103644:	01 c1                	add    %eax,%ecx
  103646:	83 79 10 01          	cmpl   $0x1,0x10(%ecx)
  10364a:	0f 85 69 01 00 00    	jne    1037b9 <page_init+0x499>
            if (begin < freemem) {
  103650:	8b 45 a0             	mov    -0x60(%ebp),%eax
  103653:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  103656:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  103659:	29 d0                	sub    %edx,%eax
  10365b:	83 d9 00             	sbb    $0x0,%ecx
  10365e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  103664:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
  10366a:	0f 83 12 00 00 00    	jae    103682 <page_init+0x362>
  103670:	e9 00 00 00 00       	jmp    103675 <page_init+0x355>
                begin = freemem;
  103675:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  103678:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10367b:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
            if (end > KMEMSIZE) {
  103682:	8b 45 98             	mov    -0x68(%ebp),%eax
  103685:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  103688:	2d 01 00 00 38       	sub    $0x38000001,%eax
  10368d:	83 d9 00             	sbb    $0x0,%ecx
  103690:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  103696:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%ebp)
  10369c:	0f 82 13 00 00 00    	jb     1036b5 <page_init+0x395>
  1036a2:	e9 00 00 00 00       	jmp    1036a7 <page_init+0x387>
                end = KMEMSIZE;
  1036a7:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
  1036ae:	c7 45 98 00 00 00 38 	movl   $0x38000000,-0x68(%ebp)
            if (begin < end) {
  1036b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
  1036b8:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  1036bb:	8b 55 98             	mov    -0x68(%ebp),%edx
  1036be:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1036c1:	29 d0                	sub    %edx,%eax
  1036c3:	19 f1                	sbb    %esi,%ecx
  1036c5:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%ebp)
  1036cb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  1036d1:	0f 83 dd 00 00 00    	jae    1037b4 <page_init+0x494>
  1036d7:	e9 00 00 00 00       	jmp    1036dc <page_init+0x3bc>
                begin = ROUNDUP(begin, PGSIZE);
  1036dc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
  1036e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
  1036e6:	89 c1                	mov    %eax,%ecx
  1036e8:	81 c1 ff 0f 00 00    	add    $0xfff,%ecx
  1036ee:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  1036f1:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1036f4:	31 f6                	xor    %esi,%esi
  1036f6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
  1036fc:	89 c8                	mov    %ecx,%eax
  1036fe:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
  103704:	89 f2                	mov    %esi,%edx
  103706:	8b 8d 10 ff ff ff    	mov    -0xf0(%ebp),%ecx
  10370c:	f7 f1                	div    %ecx
  10370e:	f7 da                	neg    %edx
  103710:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
  103716:	8d 8c 10 ff 0f 00 00 	lea    0xfff(%eax,%edx,1),%ecx
  10371d:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  103720:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  103723:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)
  10372a:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  10372d:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
  103734:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  103737:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  10373d:	89 ca                	mov    %ecx,%edx
  10373f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  103745:	29 d1                	sub    %edx,%ecx
  103747:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  10374d:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%ebp)
  103754:	00 00 00 
  103757:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  10375a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
                if (begin < end) {
  103761:	8b 55 a0             	mov    -0x60(%ebp),%edx
  103764:	8b 75 a4             	mov    -0x5c(%ebp),%esi
  103767:	29 ca                	sub    %ecx,%edx
  103769:	83 de 00             	sbb    $0x0,%esi
  10376c:	89 95 0c ff ff ff    	mov    %edx,-0xf4(%ebp)
  103772:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
  103778:	0f 83 31 00 00 00    	jae    1037af <page_init+0x48f>
  10377e:	e9 00 00 00 00       	jmp    103783 <page_init+0x463>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
  103783:	8b 45 a0             	mov    -0x60(%ebp),%eax
  103786:	89 e1                	mov    %esp,%ecx
  103788:	89 01                	mov    %eax,(%ecx)
  10378a:	e8 71 1c 00 00       	call   105400 <pa2page>
  10378f:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  103792:	8b 55 9c             	mov    -0x64(%ebp),%edx
  103795:	8b 75 a0             	mov    -0x60(%ebp),%esi
  103798:	8b 7d a4             	mov    -0x5c(%ebp),%edi
  10379b:	29 f1                	sub    %esi,%ecx
  10379d:	19 fa                	sbb    %edi,%edx
  10379f:	0f a4 ca 14          	shld   $0x14,%ecx,%edx
  1037a3:	89 04 24             	mov    %eax,(%esp)
  1037a6:	89 54 24 04          	mov    %edx,0x4(%esp)
  1037aa:	e8 21 1c 00 00       	call   1053d0 <init_memmap>
            }
  1037af:	e9 00 00 00 00       	jmp    1037b4 <page_init+0x494>
        }
  1037b4:	e9 00 00 00 00       	jmp    1037b9 <page_init+0x499>
    }
  1037b9:	e9 00 00 00 00       	jmp    1037be <page_init+0x49e>
    for (i = 0; i < memmap->nr_map; i ++) {
  1037be:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1037c1:	83 c0 01             	add    $0x1,%eax
  1037c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1037c7:	e9 2c fe ff ff       	jmp    1035f8 <page_init+0x2d8>
}
  1037cc:	81 c4 0c 01 00 00    	add    $0x10c,%esp
  1037d2:	5e                   	pop    %esi
  1037d3:	5f                   	pop    %edi
  1037d4:	5b                   	pop    %ebx
  1037d5:	5d                   	pop    %ebp
  1037d6:	c3                   	ret    
  1037d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  1037de:	00 00 

001037e0 <check_alloc_page>:
        invlpg((void *)la);
    }
}

static void
check_alloc_page(void) {
  1037e0:	55                   	push   %ebp
  1037e1:	89 e5                	mov    %esp,%ebp
    pmm_manager->check();
  1037e3:	83 ec 08             	sub    $0x8,%esp
  1037e6:	a1 24 49 11 00       	mov    0x114924,%eax
  1037eb:	ff 50 18             	call   *0x18(%eax)
  1037ee:	8d 05 e8 f8 10 00    	lea    0x10f8e8,%eax
    cprintf("check_alloc_page() succeeded!\n");
  1037f4:	89 04 24             	mov    %eax,(%esp)
  1037f7:	e8 44 ca ff ff       	call   100240 <cprintf>
}
  1037fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1037ff:	83 c4 08             	add    $0x8,%esp
  103802:	5d                   	pop    %ebp
  103803:	c3                   	ret    
  103804:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10380b:	00 00 00 00 00 

00103810 <boot_alloc_page>:
boot_alloc_page(void) {
  103810:	55                   	push   %ebp
  103811:	89 e5                	mov    %esp,%ebp
  103813:	83 ec 18             	sub    $0x18,%esp
  103816:	b8 01 00 00 00       	mov    $0x1,%eax
    struct Page *p = alloc_page();
  10381b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103822:	89 45 f8             	mov    %eax,-0x8(%ebp)
  103825:	e8 e6 f7 ff ff       	call   103010 <alloc_pages>
  10382a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (p == NULL) {
  10382d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  103831:	0f 85 28 00 00 00    	jne    10385f <boot_alloc_page+0x4f>
  103837:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  10383d:	b9 17 01 00 00       	mov    $0x117,%ecx
  103842:	8d 15 75 f8 10 00    	lea    0x10f875,%edx
        panic("boot_alloc_page failed.\n");
  103848:	89 04 24             	mov    %eax,(%esp)
  10384b:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
  103852:	00 
  103853:	89 54 24 08          	mov    %edx,0x8(%esp)
  103857:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10385a:	e8 f1 cb ff ff       	call   100450 <__panic>
    return page2kva(p);
  10385f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103862:	89 04 24             	mov    %eax,(%esp)
  103865:	e8 f6 1b 00 00       	call   105460 <page2kva>
  10386a:	83 c4 18             	add    $0x18,%esp
  10386d:	5d                   	pop    %ebp
  10386e:	c3                   	ret    
  10386f:	90                   	nop

00103870 <check_pgdir>:

static void
check_pgdir(void) {
  103870:	55                   	push   %ebp
  103871:	89 e5                	mov    %esp,%ebp
  103873:	56                   	push   %esi
  103874:	81 ec e4 00 00 00    	sub    $0xe4,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
  10387a:	81 3d 2c 48 11 00 00 	cmpl   $0x38000,0x11482c
  103881:	80 03 00 
  103884:	0f 86 32 00 00 00    	jbe    1038bc <check_pgdir+0x4c>
  10388a:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103890:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
  103895:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10389b:	8d 35 07 f9 10 00    	lea    0x10f907,%esi
  1038a1:	89 04 24             	mov    %eax,(%esp)
  1038a4:	c7 44 24 04 f7 01 00 	movl   $0x1f7,0x4(%esp)
  1038ab:	00 
  1038ac:	89 54 24 08          	mov    %edx,0x8(%esp)
  1038b0:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1038b4:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  1038b7:	e8 94 cb ff ff       	call   100450 <__panic>
  1038bc:	e9 00 00 00 00       	jmp    1038c1 <check_pgdir+0x51>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
  1038c1:	e9 00 00 00 00       	jmp    1038c6 <check_pgdir+0x56>
  1038c6:	83 3d 30 48 11 00 00 	cmpl   $0x0,0x114830
  1038cd:	0f 84 13 00 00 00    	je     1038e6 <check_pgdir+0x76>
  1038d3:	a1 30 48 11 00       	mov    0x114830,%eax
  1038d8:	25 ff 0f 00 00       	and    $0xfff,%eax
  1038dd:	83 f8 00             	cmp    $0x0,%eax
  1038e0:	0f 84 32 00 00 00    	je     103918 <check_pgdir+0xa8>
  1038e6:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1038ec:	b9 f8 01 00 00       	mov    $0x1f8,%ecx
  1038f1:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1038f7:	8d 35 22 f9 10 00    	lea    0x10f922,%esi
  1038fd:	89 04 24             	mov    %eax,(%esp)
  103900:	c7 44 24 04 f8 01 00 	movl   $0x1f8,0x4(%esp)
  103907:	00 
  103908:	89 54 24 08          	mov    %edx,0x8(%esp)
  10390c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103910:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  103913:	e8 38 cb ff ff       	call   100450 <__panic>
  103918:	e9 00 00 00 00       	jmp    10391d <check_pgdir+0xad>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
  10391d:	e9 00 00 00 00       	jmp    103922 <check_pgdir+0xb2>
  103922:	31 c0                	xor    %eax,%eax
  103924:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  10392a:	89 0c 24             	mov    %ecx,(%esp)
  10392d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103934:	00 
  103935:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10393c:	00 
  10393d:	89 45 d8             	mov    %eax,-0x28(%ebp)
  103940:	e8 2b 15 00 00       	call   104e70 <get_page>
  103945:	83 f8 00             	cmp    $0x0,%eax
  103948:	0f 84 32 00 00 00    	je     103980 <check_pgdir+0x110>
  10394e:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103954:	b9 f9 01 00 00       	mov    $0x1f9,%ecx
  103959:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10395f:	8d 35 59 f9 10 00    	lea    0x10f959,%esi
  103965:	89 04 24             	mov    %eax,(%esp)
  103968:	c7 44 24 04 f9 01 00 	movl   $0x1f9,0x4(%esp)
  10396f:	00 
  103970:	89 54 24 08          	mov    %edx,0x8(%esp)
  103974:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103978:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10397b:	e8 d0 ca ff ff       	call   100450 <__panic>
  103980:	e9 00 00 00 00       	jmp    103985 <check_pgdir+0x115>
  103985:	b8 01 00 00 00       	mov    $0x1,%eax

    struct Page *p1, *p2;
    p1 = alloc_page();
  10398a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103991:	89 45 d0             	mov    %eax,-0x30(%ebp)
  103994:	e8 77 f6 ff ff       	call   103010 <alloc_pages>
  103999:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10399c:	31 c0                	xor    %eax,%eax
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
  10399e:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  1039a4:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1039a7:	89 0c 24             	mov    %ecx,(%esp)
  1039aa:	89 54 24 04          	mov    %edx,0x4(%esp)
  1039ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1039b5:	00 
  1039b6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  1039bd:	00 
  1039be:	89 45 cc             	mov    %eax,-0x34(%ebp)
  1039c1:	e8 8a 16 00 00       	call   105050 <page_insert>
  1039c6:	83 f8 00             	cmp    $0x0,%eax
  1039c9:	0f 84 32 00 00 00    	je     103a01 <check_pgdir+0x191>
  1039cf:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1039d5:	b9 fd 01 00 00       	mov    $0x1fd,%ecx
  1039da:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1039e0:	8d 35 81 f9 10 00    	lea    0x10f981,%esi
  1039e6:	89 04 24             	mov    %eax,(%esp)
  1039e9:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
  1039f0:	00 
  1039f1:	89 54 24 08          	mov    %edx,0x8(%esp)
  1039f5:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1039f9:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  1039fc:	e8 4f ca ff ff       	call   100450 <__panic>
  103a01:	e9 00 00 00 00       	jmp    103a06 <check_pgdir+0x196>
  103a06:	31 c0                	xor    %eax,%eax

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
  103a08:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  103a0e:	89 0c 24             	mov    %ecx,(%esp)
  103a11:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  103a18:	00 
  103a19:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103a20:	00 
  103a21:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  103a24:	e8 37 12 00 00       	call   104c60 <get_pte>
  103a29:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103a2c:	83 f8 00             	cmp    $0x0,%eax
  103a2f:	0f 85 32 00 00 00    	jne    103a67 <check_pgdir+0x1f7>
  103a35:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103a3b:	b9 00 02 00 00       	mov    $0x200,%ecx
  103a40:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103a46:	8d 35 aa f9 10 00    	lea    0x10f9aa,%esi
  103a4c:	89 04 24             	mov    %eax,(%esp)
  103a4f:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
  103a56:	00 
  103a57:	89 54 24 08          	mov    %edx,0x8(%esp)
  103a5b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103a5f:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  103a62:	e8 e9 c9 ff ff       	call   100450 <__panic>
  103a67:	e9 00 00 00 00       	jmp    103a6c <check_pgdir+0x1fc>
    assert(pte2page(*ptep) == p1);
  103a6c:	e9 00 00 00 00       	jmp    103a71 <check_pgdir+0x201>
  103a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103a74:	8b 00                	mov    (%eax),%eax
  103a76:	89 04 24             	mov    %eax,(%esp)
  103a79:	e8 82 14 00 00       	call   104f00 <pte2page>
  103a7e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103a81:	0f 84 32 00 00 00    	je     103ab9 <check_pgdir+0x249>
  103a87:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103a8d:	b9 01 02 00 00       	mov    $0x201,%ecx
  103a92:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103a98:	8d 35 d7 f9 10 00    	lea    0x10f9d7,%esi
  103a9e:	89 04 24             	mov    %eax,(%esp)
  103aa1:	c7 44 24 04 01 02 00 	movl   $0x201,0x4(%esp)
  103aa8:	00 
  103aa9:	89 54 24 08          	mov    %edx,0x8(%esp)
  103aad:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103ab1:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  103ab4:	e8 97 c9 ff ff       	call   100450 <__panic>
  103ab9:	e9 00 00 00 00       	jmp    103abe <check_pgdir+0x24e>
    assert(page_ref(p1) == 1);
  103abe:	e9 00 00 00 00       	jmp    103ac3 <check_pgdir+0x253>
  103ac3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ac6:	89 04 24             	mov    %eax,(%esp)
  103ac9:	e8 92 1a 00 00       	call   105560 <page_ref>
  103ace:	83 f8 01             	cmp    $0x1,%eax
  103ad1:	0f 84 32 00 00 00    	je     103b09 <check_pgdir+0x299>
  103ad7:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103add:	b9 02 02 00 00       	mov    $0x202,%ecx
  103ae2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103ae8:	8d 35 ed f9 10 00    	lea    0x10f9ed,%esi
  103aee:	89 04 24             	mov    %eax,(%esp)
  103af1:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
  103af8:	00 
  103af9:	89 54 24 08          	mov    %edx,0x8(%esp)
  103afd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103b01:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  103b04:	e8 47 c9 ff ff       	call   100450 <__panic>
  103b09:	e9 00 00 00 00       	jmp    103b0e <check_pgdir+0x29e>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
  103b0e:	a1 30 48 11 00       	mov    0x114830,%eax
  103b13:	8b 00                	mov    (%eax),%eax
  103b15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  103b1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  103b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b20:	c1 e8 0c             	shr    $0xc,%eax
  103b23:	89 45 e8             	mov    %eax,-0x18(%ebp)
  103b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
  103b29:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  103b2f:	0f 82 2f 00 00 00    	jb     103b64 <check_pgdir+0x2f4>
  103b35:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103b3b:	b9 04 02 00 00       	mov    $0x204,%ecx
  103b40:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  103b46:	8b 75 ec             	mov    -0x14(%ebp),%esi
  103b49:	89 04 24             	mov    %eax,(%esp)
  103b4c:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
  103b53:	00 
  103b54:	89 54 24 08          	mov    %edx,0x8(%esp)
  103b58:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103b5c:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  103b5f:	e8 ec c8 ff ff       	call   100450 <__panic>
  103b64:	8b 45 ec             	mov    -0x14(%ebp),%eax
  103b67:	05 00 00 00 c0       	add    $0xc0000000,%eax
  103b6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  103b6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  103b72:	83 c0 04             	add    $0x4,%eax
  103b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103b78:	b8 00 10 00 00       	mov    $0x1000,%eax
  103b7d:	31 c9                	xor    %ecx,%ecx
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
  103b7f:	8b 15 30 48 11 00    	mov    0x114830,%edx
  103b85:	89 14 24             	mov    %edx,(%esp)
  103b88:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  103b8f:	00 
  103b90:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103b97:	00 
  103b98:	89 45 b0             	mov    %eax,-0x50(%ebp)
  103b9b:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  103b9e:	e8 bd 10 00 00       	call   104c60 <get_pte>
  103ba3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  103ba6:	0f 84 32 00 00 00    	je     103bde <check_pgdir+0x36e>
  103bac:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103bb2:	b9 05 02 00 00       	mov    $0x205,%ecx
  103bb7:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103bbd:	8d 35 ff f9 10 00    	lea    0x10f9ff,%esi
  103bc3:	89 04 24             	mov    %eax,(%esp)
  103bc6:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
  103bcd:	00 
  103bce:	89 54 24 08          	mov    %edx,0x8(%esp)
  103bd2:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103bd6:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  103bd9:	e8 72 c8 ff ff       	call   100450 <__panic>
  103bde:	e9 00 00 00 00       	jmp    103be3 <check_pgdir+0x373>
  103be3:	b8 01 00 00 00       	mov    $0x1,%eax

    p2 = alloc_page();
  103be8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  103bef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  103bf2:	e8 19 f4 ff ff       	call   103010 <alloc_pages>
  103bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103bfa:	b8 00 10 00 00       	mov    $0x1000,%eax
  103bff:	b9 06 00 00 00       	mov    $0x6,%ecx
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
  103c04:	8b 15 30 48 11 00    	mov    0x114830,%edx
  103c0a:	8b 75 f4             	mov    -0xc(%ebp),%esi
  103c0d:	89 14 24             	mov    %edx,(%esp)
  103c10:	89 74 24 04          	mov    %esi,0x4(%esp)
  103c14:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103c1b:	00 
  103c1c:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  103c23:	00 
  103c24:	89 45 a0             	mov    %eax,-0x60(%ebp)
  103c27:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  103c2a:	e8 21 14 00 00       	call   105050 <page_insert>
  103c2f:	83 f8 00             	cmp    $0x0,%eax
  103c32:	0f 84 32 00 00 00    	je     103c6a <check_pgdir+0x3fa>
  103c38:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103c3e:	b9 08 02 00 00       	mov    $0x208,%ecx
  103c43:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103c49:	8d 35 26 fa 10 00    	lea    0x10fa26,%esi
  103c4f:	89 04 24             	mov    %eax,(%esp)
  103c52:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
  103c59:	00 
  103c5a:	89 54 24 08          	mov    %edx,0x8(%esp)
  103c5e:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103c62:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  103c65:	e8 e6 c7 ff ff       	call   100450 <__panic>
  103c6a:	e9 00 00 00 00       	jmp    103c6f <check_pgdir+0x3ff>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
  103c6f:	e9 00 00 00 00       	jmp    103c74 <check_pgdir+0x404>
  103c74:	b8 00 10 00 00       	mov    $0x1000,%eax
  103c79:	31 c9                	xor    %ecx,%ecx
  103c7b:	8b 15 30 48 11 00    	mov    0x114830,%edx
  103c81:	89 14 24             	mov    %edx,(%esp)
  103c84:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  103c8b:	00 
  103c8c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103c93:	00 
  103c94:	89 45 94             	mov    %eax,-0x6c(%ebp)
  103c97:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  103c9a:	e8 c1 0f 00 00       	call   104c60 <get_pte>
  103c9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103ca2:	83 f8 00             	cmp    $0x0,%eax
  103ca5:	0f 85 32 00 00 00    	jne    103cdd <check_pgdir+0x46d>
  103cab:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103cb1:	b9 09 02 00 00       	mov    $0x209,%ecx
  103cb6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103cbc:	8d 35 5e fa 10 00    	lea    0x10fa5e,%esi
  103cc2:	89 04 24             	mov    %eax,(%esp)
  103cc5:	c7 44 24 04 09 02 00 	movl   $0x209,0x4(%esp)
  103ccc:	00 
  103ccd:	89 54 24 08          	mov    %edx,0x8(%esp)
  103cd1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103cd5:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
  103cd8:	e8 73 c7 ff ff       	call   100450 <__panic>
  103cdd:	e9 00 00 00 00       	jmp    103ce2 <check_pgdir+0x472>
    assert(*ptep & PTE_U);
  103ce2:	e9 00 00 00 00       	jmp    103ce7 <check_pgdir+0x477>
  103ce7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103cea:	8b 00                	mov    (%eax),%eax
  103cec:	83 e0 04             	and    $0x4,%eax
  103cef:	83 f8 00             	cmp    $0x0,%eax
  103cf2:	0f 85 32 00 00 00    	jne    103d2a <check_pgdir+0x4ba>
  103cf8:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103cfe:	b9 0a 02 00 00       	mov    $0x20a,%ecx
  103d03:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103d09:	8d 35 8e fa 10 00    	lea    0x10fa8e,%esi
  103d0f:	89 04 24             	mov    %eax,(%esp)
  103d12:	c7 44 24 04 0a 02 00 	movl   $0x20a,0x4(%esp)
  103d19:	00 
  103d1a:	89 54 24 08          	mov    %edx,0x8(%esp)
  103d1e:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103d22:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  103d25:	e8 26 c7 ff ff       	call   100450 <__panic>
  103d2a:	e9 00 00 00 00       	jmp    103d2f <check_pgdir+0x4bf>
    assert(*ptep & PTE_W);
  103d2f:	e9 00 00 00 00       	jmp    103d34 <check_pgdir+0x4c4>
  103d34:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103d37:	8b 00                	mov    (%eax),%eax
  103d39:	83 e0 02             	and    $0x2,%eax
  103d3c:	83 f8 00             	cmp    $0x0,%eax
  103d3f:	0f 85 32 00 00 00    	jne    103d77 <check_pgdir+0x507>
  103d45:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103d4b:	b9 0b 02 00 00       	mov    $0x20b,%ecx
  103d50:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103d56:	8d 35 9c fa 10 00    	lea    0x10fa9c,%esi
  103d5c:	89 04 24             	mov    %eax,(%esp)
  103d5f:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
  103d66:	00 
  103d67:	89 54 24 08          	mov    %edx,0x8(%esp)
  103d6b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103d6f:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  103d72:	e8 d9 c6 ff ff       	call   100450 <__panic>
  103d77:	e9 00 00 00 00       	jmp    103d7c <check_pgdir+0x50c>
    assert(boot_pgdir[0] & PTE_U);
  103d7c:	e9 00 00 00 00       	jmp    103d81 <check_pgdir+0x511>
  103d81:	a1 30 48 11 00       	mov    0x114830,%eax
  103d86:	8b 00                	mov    (%eax),%eax
  103d88:	83 e0 04             	and    $0x4,%eax
  103d8b:	83 f8 00             	cmp    $0x0,%eax
  103d8e:	0f 85 32 00 00 00    	jne    103dc6 <check_pgdir+0x556>
  103d94:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103d9a:	b9 0c 02 00 00       	mov    $0x20c,%ecx
  103d9f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103da5:	8d 35 aa fa 10 00    	lea    0x10faaa,%esi
  103dab:	89 04 24             	mov    %eax,(%esp)
  103dae:	c7 44 24 04 0c 02 00 	movl   $0x20c,0x4(%esp)
  103db5:	00 
  103db6:	89 54 24 08          	mov    %edx,0x8(%esp)
  103dba:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103dbe:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  103dc1:	e8 8a c6 ff ff       	call   100450 <__panic>
  103dc6:	e9 00 00 00 00       	jmp    103dcb <check_pgdir+0x55b>
    assert(page_ref(p2) == 1);
  103dcb:	e9 00 00 00 00       	jmp    103dd0 <check_pgdir+0x560>
  103dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103dd3:	89 04 24             	mov    %eax,(%esp)
  103dd6:	e8 85 17 00 00       	call   105560 <page_ref>
  103ddb:	83 f8 01             	cmp    $0x1,%eax
  103dde:	0f 84 35 00 00 00    	je     103e19 <check_pgdir+0x5a9>
  103de4:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103dea:	b9 0d 02 00 00       	mov    $0x20d,%ecx
  103def:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103df5:	8d 35 c0 fa 10 00    	lea    0x10fac0,%esi
  103dfb:	89 04 24             	mov    %eax,(%esp)
  103dfe:	c7 44 24 04 0d 02 00 	movl   $0x20d,0x4(%esp)
  103e05:	00 
  103e06:	89 54 24 08          	mov    %edx,0x8(%esp)
  103e0a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103e0e:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  103e14:	e8 37 c6 ff ff       	call   100450 <__panic>
  103e19:	e9 00 00 00 00       	jmp    103e1e <check_pgdir+0x5ae>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
  103e1e:	e9 00 00 00 00       	jmp    103e23 <check_pgdir+0x5b3>
  103e23:	b8 00 10 00 00       	mov    $0x1000,%eax
  103e28:	31 c9                	xor    %ecx,%ecx
  103e2a:	8b 15 30 48 11 00    	mov    0x114830,%edx
  103e30:	8b 75 f8             	mov    -0x8(%ebp),%esi
  103e33:	89 14 24             	mov    %edx,(%esp)
  103e36:	89 74 24 04          	mov    %esi,0x4(%esp)
  103e3a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  103e41:	00 
  103e42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  103e49:	00 
  103e4a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  103e50:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  103e56:	e8 f5 11 00 00       	call   105050 <page_insert>
  103e5b:	83 f8 00             	cmp    $0x0,%eax
  103e5e:	0f 84 35 00 00 00    	je     103e99 <check_pgdir+0x629>
  103e64:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103e6a:	b9 0f 02 00 00       	mov    $0x20f,%ecx
  103e6f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103e75:	8d 35 d2 fa 10 00    	lea    0x10fad2,%esi
  103e7b:	89 04 24             	mov    %eax,(%esp)
  103e7e:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
  103e85:	00 
  103e86:	89 54 24 08          	mov    %edx,0x8(%esp)
  103e8a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103e8e:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  103e94:	e8 b7 c5 ff ff       	call   100450 <__panic>
  103e99:	e9 00 00 00 00       	jmp    103e9e <check_pgdir+0x62e>
    assert(page_ref(p1) == 2);
  103e9e:	e9 00 00 00 00       	jmp    103ea3 <check_pgdir+0x633>
  103ea3:	8b 45 f8             	mov    -0x8(%ebp),%eax
  103ea6:	89 04 24             	mov    %eax,(%esp)
  103ea9:	e8 b2 16 00 00       	call   105560 <page_ref>
  103eae:	83 f8 02             	cmp    $0x2,%eax
  103eb1:	0f 84 35 00 00 00    	je     103eec <check_pgdir+0x67c>
  103eb7:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103ebd:	b9 10 02 00 00       	mov    $0x210,%ecx
  103ec2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103ec8:	8d 35 fe fa 10 00    	lea    0x10fafe,%esi
  103ece:	89 04 24             	mov    %eax,(%esp)
  103ed1:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
  103ed8:	00 
  103ed9:	89 54 24 08          	mov    %edx,0x8(%esp)
  103edd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103ee1:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  103ee7:	e8 64 c5 ff ff       	call   100450 <__panic>
  103eec:	e9 00 00 00 00       	jmp    103ef1 <check_pgdir+0x681>
    assert(page_ref(p2) == 0);
  103ef1:	e9 00 00 00 00       	jmp    103ef6 <check_pgdir+0x686>
  103ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ef9:	89 04 24             	mov    %eax,(%esp)
  103efc:	e8 5f 16 00 00       	call   105560 <page_ref>
  103f01:	83 f8 00             	cmp    $0x0,%eax
  103f04:	0f 84 35 00 00 00    	je     103f3f <check_pgdir+0x6cf>
  103f0a:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103f10:	b9 11 02 00 00       	mov    $0x211,%ecx
  103f15:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103f1b:	8d 35 07 06 11 00    	lea    0x110607,%esi
  103f21:	89 04 24             	mov    %eax,(%esp)
  103f24:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
  103f2b:	00 
  103f2c:	89 54 24 08          	mov    %edx,0x8(%esp)
  103f30:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103f34:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  103f3a:	e8 11 c5 ff ff       	call   100450 <__panic>
  103f3f:	e9 00 00 00 00       	jmp    103f44 <check_pgdir+0x6d4>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
  103f44:	e9 00 00 00 00       	jmp    103f49 <check_pgdir+0x6d9>
  103f49:	b8 00 10 00 00       	mov    $0x1000,%eax
  103f4e:	31 c9                	xor    %ecx,%ecx
  103f50:	8b 15 30 48 11 00    	mov    0x114830,%edx
  103f56:	89 14 24             	mov    %edx,(%esp)
  103f59:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  103f60:	00 
  103f61:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  103f68:	00 
  103f69:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  103f6f:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  103f75:	e8 e6 0c 00 00       	call   104c60 <get_pte>
  103f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
  103f7d:	83 f8 00             	cmp    $0x0,%eax
  103f80:	0f 85 35 00 00 00    	jne    103fbb <check_pgdir+0x74b>
  103f86:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103f8c:	b9 12 02 00 00       	mov    $0x212,%ecx
  103f91:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103f97:	8d 35 5e fa 10 00    	lea    0x10fa5e,%esi
  103f9d:	89 04 24             	mov    %eax,(%esp)
  103fa0:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
  103fa7:	00 
  103fa8:	89 54 24 08          	mov    %edx,0x8(%esp)
  103fac:	89 74 24 0c          	mov    %esi,0xc(%esp)
  103fb0:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
  103fb6:	e8 95 c4 ff ff       	call   100450 <__panic>
  103fbb:	e9 00 00 00 00       	jmp    103fc0 <check_pgdir+0x750>
    assert(pte2page(*ptep) == p1);
  103fc0:	e9 00 00 00 00       	jmp    103fc5 <check_pgdir+0x755>
  103fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  103fc8:	8b 00                	mov    (%eax),%eax
  103fca:	89 04 24             	mov    %eax,(%esp)
  103fcd:	e8 2e 0f 00 00       	call   104f00 <pte2page>
  103fd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  103fd5:	0f 84 35 00 00 00    	je     104010 <check_pgdir+0x7a0>
  103fdb:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  103fe1:	b9 13 02 00 00       	mov    $0x213,%ecx
  103fe6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  103fec:	8d 35 d7 f9 10 00    	lea    0x10f9d7,%esi
  103ff2:	89 04 24             	mov    %eax,(%esp)
  103ff5:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
  103ffc:	00 
  103ffd:	89 54 24 08          	mov    %edx,0x8(%esp)
  104001:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104005:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
  10400b:	e8 40 c4 ff ff       	call   100450 <__panic>
  104010:	e9 00 00 00 00       	jmp    104015 <check_pgdir+0x7a5>
    assert((*ptep & PTE_U) == 0);
  104015:	e9 00 00 00 00       	jmp    10401a <check_pgdir+0x7aa>
  10401a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10401d:	8b 00                	mov    (%eax),%eax
  10401f:	83 e0 04             	and    $0x4,%eax
  104022:	83 f8 00             	cmp    $0x0,%eax
  104025:	0f 84 35 00 00 00    	je     104060 <check_pgdir+0x7f0>
  10402b:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104031:	b9 14 02 00 00       	mov    $0x214,%ecx
  104036:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10403c:	8d 35 10 fb 10 00    	lea    0x10fb10,%esi
  104042:	89 04 24             	mov    %eax,(%esp)
  104045:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
  10404c:	00 
  10404d:	89 54 24 08          	mov    %edx,0x8(%esp)
  104051:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104055:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
  10405b:	e8 f0 c3 ff ff       	call   100450 <__panic>
  104060:	e9 00 00 00 00       	jmp    104065 <check_pgdir+0x7f5>
  104065:	31 c0                	xor    %eax,%eax

    page_remove(boot_pgdir, 0x0);
  104067:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  10406d:	89 0c 24             	mov    %ecx,(%esp)
  104070:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104077:	00 
  104078:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  10407e:	e8 dd 0e 00 00       	call   104f60 <page_remove>
    assert(page_ref(p1) == 1);
  104083:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104086:	89 04 24             	mov    %eax,(%esp)
  104089:	e8 d2 14 00 00       	call   105560 <page_ref>
  10408e:	83 f8 01             	cmp    $0x1,%eax
  104091:	0f 84 35 00 00 00    	je     1040cc <check_pgdir+0x85c>
  104097:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  10409d:	b9 17 02 00 00       	mov    $0x217,%ecx
  1040a2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1040a8:	8d 35 ed f9 10 00    	lea    0x10f9ed,%esi
  1040ae:	89 04 24             	mov    %eax,(%esp)
  1040b1:	c7 44 24 04 17 02 00 	movl   $0x217,0x4(%esp)
  1040b8:	00 
  1040b9:	89 54 24 08          	mov    %edx,0x8(%esp)
  1040bd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1040c1:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  1040c7:	e8 84 c3 ff ff       	call   100450 <__panic>
  1040cc:	e9 00 00 00 00       	jmp    1040d1 <check_pgdir+0x861>
    assert(page_ref(p2) == 0);
  1040d1:	e9 00 00 00 00       	jmp    1040d6 <check_pgdir+0x866>
  1040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040d9:	89 04 24             	mov    %eax,(%esp)
  1040dc:	e8 7f 14 00 00       	call   105560 <page_ref>
  1040e1:	83 f8 00             	cmp    $0x0,%eax
  1040e4:	0f 84 35 00 00 00    	je     10411f <check_pgdir+0x8af>
  1040ea:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1040f0:	b9 18 02 00 00       	mov    $0x218,%ecx
  1040f5:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1040fb:	8d 35 07 06 11 00    	lea    0x110607,%esi
  104101:	89 04 24             	mov    %eax,(%esp)
  104104:	c7 44 24 04 18 02 00 	movl   $0x218,0x4(%esp)
  10410b:	00 
  10410c:	89 54 24 08          	mov    %edx,0x8(%esp)
  104110:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104114:	89 8d 48 ff ff ff    	mov    %ecx,-0xb8(%ebp)
  10411a:	e8 31 c3 ff ff       	call   100450 <__panic>
  10411f:	e9 00 00 00 00       	jmp    104124 <check_pgdir+0x8b4>
  104124:	b8 00 10 00 00       	mov    $0x1000,%eax

    page_remove(boot_pgdir, PGSIZE);
  104129:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  10412f:	89 0c 24             	mov    %ecx,(%esp)
  104132:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  104139:	00 
  10413a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  104140:	e8 1b 0e 00 00       	call   104f60 <page_remove>
    assert(page_ref(p1) == 0);
  104145:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104148:	89 04 24             	mov    %eax,(%esp)
  10414b:	e8 10 14 00 00       	call   105560 <page_ref>
  104150:	83 f8 00             	cmp    $0x0,%eax
  104153:	0f 84 35 00 00 00    	je     10418e <check_pgdir+0x91e>
  104159:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  10415f:	b9 1b 02 00 00       	mov    $0x21b,%ecx
  104164:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10416a:	8d 35 25 fb 10 00    	lea    0x10fb25,%esi
  104170:	89 04 24             	mov    %eax,(%esp)
  104173:	c7 44 24 04 1b 02 00 	movl   $0x21b,0x4(%esp)
  10417a:	00 
  10417b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10417f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104183:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
  104189:	e8 c2 c2 ff ff       	call   100450 <__panic>
  10418e:	e9 00 00 00 00       	jmp    104193 <check_pgdir+0x923>
    assert(page_ref(p2) == 0);
  104193:	e9 00 00 00 00       	jmp    104198 <check_pgdir+0x928>
  104198:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10419b:	89 04 24             	mov    %eax,(%esp)
  10419e:	e8 bd 13 00 00       	call   105560 <page_ref>
  1041a3:	83 f8 00             	cmp    $0x0,%eax
  1041a6:	0f 84 35 00 00 00    	je     1041e1 <check_pgdir+0x971>
  1041ac:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1041b2:	b9 1c 02 00 00       	mov    $0x21c,%ecx
  1041b7:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1041bd:	8d 35 07 06 11 00    	lea    0x110607,%esi
  1041c3:	89 04 24             	mov    %eax,(%esp)
  1041c6:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
  1041cd:	00 
  1041ce:	89 54 24 08          	mov    %edx,0x8(%esp)
  1041d2:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1041d6:	89 8d 3c ff ff ff    	mov    %ecx,-0xc4(%ebp)
  1041dc:	e8 6f c2 ff ff       	call   100450 <__panic>
  1041e1:	e9 00 00 00 00       	jmp    1041e6 <check_pgdir+0x976>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
  1041e6:	e9 00 00 00 00       	jmp    1041eb <check_pgdir+0x97b>
  1041eb:	a1 30 48 11 00       	mov    0x114830,%eax
  1041f0:	8b 00                	mov    (%eax),%eax
  1041f2:	89 04 24             	mov    %eax,(%esp)
  1041f5:	e8 86 13 00 00       	call   105580 <pde2page>
  1041fa:	89 04 24             	mov    %eax,(%esp)
  1041fd:	e8 5e 13 00 00       	call   105560 <page_ref>
  104202:	83 f8 01             	cmp    $0x1,%eax
  104205:	0f 84 35 00 00 00    	je     104240 <check_pgdir+0x9d0>
  10420b:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104211:	b9 1e 02 00 00       	mov    $0x21e,%ecx
  104216:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10421c:	8d 35 37 fb 10 00    	lea    0x10fb37,%esi
  104222:	89 04 24             	mov    %eax,(%esp)
  104225:	c7 44 24 04 1e 02 00 	movl   $0x21e,0x4(%esp)
  10422c:	00 
  10422d:	89 54 24 08          	mov    %edx,0x8(%esp)
  104231:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104235:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
  10423b:	e8 10 c2 ff ff       	call   100450 <__panic>
  104240:	e9 00 00 00 00       	jmp    104245 <check_pgdir+0x9d5>
    free_page(pde2page(boot_pgdir[0]));
  104245:	a1 30 48 11 00       	mov    0x114830,%eax
  10424a:	8b 00                	mov    (%eax),%eax
  10424c:	89 04 24             	mov    %eax,(%esp)
  10424f:	e8 2c 13 00 00       	call   105580 <pde2page>
  104254:	b9 01 00 00 00       	mov    $0x1,%ecx
  104259:	89 04 24             	mov    %eax,(%esp)
  10425c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104263:	00 
  104264:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
  10426a:	e8 51 ee ff ff       	call   1030c0 <free_pages>
  10426f:	8d 05 5e fb 10 00    	lea    0x10fb5e,%eax
    boot_pgdir[0] = 0;
  104275:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  10427b:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)

    cprintf("check_pgdir() succeeded!\n");
  104281:	89 04 24             	mov    %eax,(%esp)
  104284:	e8 b7 bf ff ff       	call   100240 <cprintf>
}
  104289:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  10428f:	81 c4 e4 00 00 00    	add    $0xe4,%esp
  104295:	5e                   	pop    %esi
  104296:	5d                   	pop    %ebp
  104297:	c3                   	ret    
  104298:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10429f:	00 

001042a0 <boot_map_segment>:
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
  1042a0:	55                   	push   %ebp
  1042a1:	89 e5                	mov    %esp,%ebp
  1042a3:	57                   	push   %edi
  1042a4:	56                   	push   %esi
  1042a5:	83 ec 60             	sub    $0x60,%esp
  1042a8:	8b 45 18             	mov    0x18(%ebp),%eax
  1042ab:	8b 4d 14             	mov    0x14(%ebp),%ecx
  1042ae:	8b 55 10             	mov    0x10(%ebp),%edx
  1042b1:	8b 75 0c             	mov    0xc(%ebp),%esi
  1042b4:	8b 7d 08             	mov    0x8(%ebp),%edi
  1042b7:	89 7d f4             	mov    %edi,-0xc(%ebp)
  1042ba:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1042bd:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1042c0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1042c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(PGOFF(la) == PGOFF(pa));
  1042c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1042c9:	25 ff 0f 00 00       	and    $0xfff,%eax
  1042ce:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1042d1:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  1042d7:	39 c8                	cmp    %ecx,%eax
  1042d9:	0f 84 32 00 00 00    	je     104311 <boot_map_segment+0x71>
  1042df:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1042e5:	b9 05 01 00 00       	mov    $0x105,%ecx
  1042ea:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1042f0:	8d 35 a3 f8 10 00    	lea    0x10f8a3,%esi
  1042f6:	89 04 24             	mov    %eax,(%esp)
  1042f9:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
  104300:	00 
  104301:	89 54 24 08          	mov    %edx,0x8(%esp)
  104305:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104309:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10430c:	e8 3f c1 ff ff       	call   100450 <__panic>
  104311:	e9 00 00 00 00       	jmp    104316 <boot_map_segment+0x76>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
  104316:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
  10431d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104320:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104323:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  104329:	01 c8                	add    %ecx,%eax
  10432b:	03 45 dc             	add    -0x24(%ebp),%eax
  10432e:	83 e8 01             	sub    $0x1,%eax
  104331:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  104334:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104337:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10433a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10433d:	89 c8                	mov    %ecx,%eax
  10433f:	31 d2                	xor    %edx,%edx
  104341:	f7 75 dc             	divl   -0x24(%ebp)
  104344:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  104347:	29 d1                	sub    %edx,%ecx
  104349:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10434c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10434f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  104352:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104355:	c1 e9 0c             	shr    $0xc,%ecx
  104358:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
  10435b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10435e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  104361:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  104364:	8b 55 cc             	mov    -0x34(%ebp),%edx
  104367:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  10436d:	29 d1                	sub    %edx,%ecx
  10436f:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  104372:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  104375:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
  104378:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10437b:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  10437e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  104381:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  104384:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  10438a:	29 d1                	sub    %edx,%ecx
  10438c:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10438f:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  104392:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
  104395:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  104399:	0f 86 98 00 00 00    	jbe    104437 <boot_map_segment+0x197>
  10439f:	b8 01 00 00 00       	mov    $0x1,%eax
        pte_t *ptep = get_pte(pgdir, la, 1);
  1043a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1043a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1043aa:	89 0c 24             	mov    %ecx,(%esp)
  1043ad:	89 54 24 04          	mov    %edx,0x4(%esp)
  1043b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  1043b8:	00 
  1043b9:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1043bc:	e8 9f 08 00 00       	call   104c60 <get_pte>
  1043c1:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(ptep != NULL);
  1043c4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
  1043c8:	0f 85 32 00 00 00    	jne    104400 <boot_map_segment+0x160>
  1043ce:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1043d4:	b9 0b 01 00 00       	mov    $0x10b,%ecx
  1043d9:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1043df:	8d 35 ba f8 10 00    	lea    0x10f8ba,%esi
  1043e5:	89 04 24             	mov    %eax,(%esp)
  1043e8:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
  1043ef:	00 
  1043f0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1043f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1043f8:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  1043fb:	e8 50 c0 ff ff       	call   100450 <__panic>
  104400:	e9 00 00 00 00       	jmp    104405 <boot_map_segment+0x165>
        *ptep = pa | PTE_P | perm;
  104405:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104408:	83 c8 01             	or     $0x1,%eax
  10440b:	0b 45 e4             	or     -0x1c(%ebp),%eax
  10440e:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  104411:	89 01                	mov    %eax,(%ecx)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
  104413:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104416:	83 c0 ff             	add    $0xffffffff,%eax
  104419:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10441c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10441f:	05 00 10 00 00       	add    $0x1000,%eax
  104424:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104427:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10442a:	05 00 10 00 00       	add    $0x1000,%eax
  10442f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104432:	e9 5e ff ff ff       	jmp    104395 <boot_map_segment+0xf5>
}
  104437:	83 c4 60             	add    $0x60,%esp
  10443a:	5e                   	pop    %esi
  10443b:	5f                   	pop    %edi
  10443c:	5d                   	pop    %ebp
  10443d:	c3                   	ret    
  10443e:	66 90                	xchg   %ax,%ax

00104440 <enable_paging>:
enable_paging(void) {
  104440:	55                   	push   %ebp
  104441:	89 e5                	mov    %esp,%ebp
    lcr3(boot_cr3);
  104443:	83 ec 10             	sub    $0x10,%esp
  104446:	a1 28 49 11 00       	mov    0x114928,%eax
  10444b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
  10444e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104451:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
  104454:	0f 20 c0             	mov    %cr0,%eax
  104457:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return cr0;
  10445a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    uint32_t cr0 = rcr0();
  10445d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
  104460:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104463:	0d 2f 00 05 80       	or     $0x8005002f,%eax
  104468:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
  10446b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10446e:	83 e0 f3             	and    $0xfffffff3,%eax
  104471:	89 45 f0             	mov    %eax,-0x10(%ebp)
    lcr0(cr0);
  104474:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104477:	89 45 fc             	mov    %eax,-0x4(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
  10447a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10447d:	0f 22 c0             	mov    %eax,%cr0
}
  104480:	83 c4 10             	add    $0x10,%esp
  104483:	5d                   	pop    %ebp
  104484:	c3                   	ret    
  104485:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10448c:	00 00 00 00 

00104490 <gdt_init>:
gdt_init(void) {
  104490:	55                   	push   %ebp
  104491:	89 e5                	mov    %esp,%ebp
  104493:	53                   	push   %ebx
  104494:	57                   	push   %edi
  104495:	56                   	push   %esi
  104496:	83 ec 1c             	sub    $0x1c,%esp
  104499:	8d 05 c0 39 11 00    	lea    0x1139c0,%eax
    load_esp0((uintptr_t)bootstacktop);
  10449f:	89 e1                	mov    %esp,%ecx
  1044a1:	c7 01 00 30 11 00    	movl   $0x113000,(%ecx)
  1044a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1044aa:	e8 41 eb ff ff       	call   102ff0 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
  1044af:	66 c7 05 3c 48 11 00 	movw   $0x10,0x11483c
  1044b6:	10 00 
  1044b8:	b8 34 48 11 00       	mov    $0x114834,%eax
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
  1044bd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1044c0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1044c3:	66 c7 45 e8 68 00    	movw   $0x68,-0x18(%ebp)
  1044c9:	89 c2                	mov    %eax,%edx
  1044cb:	c1 e2 10             	shl    $0x10,%edx
  1044ce:	83 ca 68             	or     $0x68,%edx
  1044d1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1044d4:	89 55 e8             	mov    %edx,-0x18(%ebp)
  1044d7:	81 e1 00 ff ff ff    	and    $0xffffff00,%ecx
  1044dd:	89 c6                	mov    %eax,%esi
  1044df:	c1 ee 10             	shr    $0x10,%esi
  1044e2:	89 f3                	mov    %esi,%ebx
  1044e4:	0f b6 f3             	movzbl %bl,%esi
  1044e7:	09 f1                	or     %esi,%ecx
  1044e9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1044ec:	89 55 e8             	mov    %edx,-0x18(%ebp)
  1044ef:	81 e1 ff f0 ff ff    	and    $0xfffff0ff,%ecx
  1044f5:	81 c9 00 09 00 00    	or     $0x900,%ecx
  1044fb:	89 55 e8             	mov    %edx,-0x18(%ebp)
  1044fe:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  104501:	8a 5d ed             	mov    -0x13(%ebp),%bl
  104504:	88 df                	mov    %bl,%bh
  104506:	80 e7 ef             	and    $0xef,%bh
  104509:	88 7d ed             	mov    %bh,-0x13(%ebp)
  10450c:	80 e3 8f             	and    $0x8f,%bl
  10450f:	88 5d ed             	mov    %bl,-0x13(%ebp)
  104512:	80 cb 80             	or     $0x80,%bl
  104515:	88 5d ed             	mov    %bl,-0x13(%ebp)
  104518:	8a 5d ee             	mov    -0x12(%ebp),%bl
  10451b:	88 df                	mov    %bl,%bh
  10451d:	80 e7 f0             	and    $0xf0,%bh
  104520:	88 7d ee             	mov    %bh,-0x12(%ebp)
  104523:	88 df                	mov    %bl,%bh
  104525:	80 e7 e0             	and    $0xe0,%bh
  104528:	88 7d ee             	mov    %bh,-0x12(%ebp)
  10452b:	80 e3 c0             	and    $0xc0,%bl
  10452e:	88 5d ee             	mov    %bl,-0x12(%ebp)
  104531:	80 cb 40             	or     $0x40,%bl
  104534:	88 5d ee             	mov    %bl,-0x12(%ebp)
  104537:	c6 45 ee 40          	movb   $0x40,-0x12(%ebp)
  10453b:	c1 e8 18             	shr    $0x18,%eax
  10453e:	88 c3                	mov    %al,%bl
  104540:	88 5d ef             	mov    %bl,-0x11(%ebp)
  104543:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104546:	a3 f0 39 11 00       	mov    %eax,0x1139f0
  10454b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10454e:	a3 f4 39 11 00       	mov    %eax,0x1139f4
    lgdt(&gdt_pd);
  104553:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104556:	89 04 24             	mov    %eax,(%esp)
  104559:	e8 82 0f 00 00       	call   1054e0 <lgdt>
    ltr(GD_TSS);
  10455e:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
  104564:	66 8b 7d f2          	mov    -0xe(%ebp),%di
  104568:	0f 00 df             	ltr    %di
}
  10456b:	83 c4 1c             	add    $0x1c,%esp
  10456e:	5e                   	pop    %esi
  10456f:	5f                   	pop    %edi
  104570:	5b                   	pop    %ebx
  104571:	5d                   	pop    %ebp
  104572:	c3                   	ret    
  104573:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10457a:	84 00 00 00 00 00 

00104580 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
  104580:	55                   	push   %ebp
  104581:	89 e5                	mov    %esp,%ebp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
  104583:	56                   	push   %esi
  104584:	81 ec 94 00 00 00    	sub    $0x94,%esp
  10458a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  104591:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104594:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  10459a:	0f 83 2c 01 00 00    	jae    1046cc <check_boot_pgdir+0x14c>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
  1045a0:	e9 00 00 00 00       	jmp    1045a5 <check_boot_pgdir+0x25>
  1045a5:	a1 30 48 11 00       	mov    0x114830,%eax
  1045aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1045ad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1045b0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1045b3:	c1 e9 0c             	shr    $0xc,%ecx
  1045b6:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  1045b9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1045bc:	3b 0d 2c 48 11 00    	cmp    0x11482c,%ecx
  1045c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1045c5:	0f 82 2f 00 00 00    	jb     1045fa <check_boot_pgdir+0x7a>
  1045cb:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1045d1:	b9 2a 02 00 00       	mov    $0x22a,%ecx
  1045d6:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  1045dc:	8b 75 f0             	mov    -0x10(%ebp),%esi
  1045df:	89 04 24             	mov    %eax,(%esp)
  1045e2:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
  1045e9:	00 
  1045ea:	89 54 24 08          	mov    %edx,0x8(%esp)
  1045ee:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1045f2:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  1045f5:	e8 56 be ff ff       	call   100450 <__panic>
  1045fa:	31 c0                	xor    %eax,%eax
  1045fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1045ff:	81 c1 00 00 00 c0    	add    $0xc0000000,%ecx
  104605:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  104608:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10460b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10460e:	89 14 24             	mov    %edx,(%esp)
  104611:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104615:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10461c:	00 
  10461d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  104620:	e8 3b 06 00 00       	call   104c60 <get_pte>
  104625:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104628:	83 f8 00             	cmp    $0x0,%eax
  10462b:	0f 85 32 00 00 00    	jne    104663 <check_boot_pgdir+0xe3>
  104631:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104637:	b9 2a 02 00 00       	mov    $0x22a,%ecx
  10463c:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104642:	8d 35 78 fb 10 00    	lea    0x10fb78,%esi
  104648:	89 04 24             	mov    %eax,(%esp)
  10464b:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
  104652:	00 
  104653:	89 54 24 08          	mov    %edx,0x8(%esp)
  104657:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10465b:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  10465e:	e8 ed bd ff ff       	call   100450 <__panic>
  104663:	e9 00 00 00 00       	jmp    104668 <check_boot_pgdir+0xe8>
        assert(PTE_ADDR(*ptep) == i);
  104668:	e9 00 00 00 00       	jmp    10466d <check_boot_pgdir+0xed>
  10466d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104670:	8b 00                	mov    (%eax),%eax
  104672:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104677:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10467a:	0f 84 32 00 00 00    	je     1046b2 <check_boot_pgdir+0x132>
  104680:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104686:	b9 2b 02 00 00       	mov    $0x22b,%ecx
  10468b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104691:	8d 35 b5 fb 10 00    	lea    0x10fbb5,%esi
  104697:	89 04 24             	mov    %eax,(%esp)
  10469a:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
  1046a1:	00 
  1046a2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1046a6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1046aa:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  1046ad:	e8 9e bd ff ff       	call   100450 <__panic>
  1046b2:	e9 00 00 00 00       	jmp    1046b7 <check_boot_pgdir+0x137>
    }
  1046b7:	e9 00 00 00 00       	jmp    1046bc <check_boot_pgdir+0x13c>
    for (i = 0; i < npage; i += PGSIZE) {
  1046bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1046bf:	05 00 10 00 00       	add    $0x1000,%eax
  1046c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1046c7:	e9 c5 fe ff ff       	jmp    104591 <check_boot_pgdir+0x11>

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
  1046cc:	e9 00 00 00 00       	jmp    1046d1 <check_boot_pgdir+0x151>
  1046d1:	a1 30 48 11 00       	mov    0x114830,%eax
  1046d6:	8b 80 ac 0f 00 00    	mov    0xfac(%eax),%eax
  1046dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1046e1:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  1046e7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1046ea:	81 7d e4 00 00 00 c0 	cmpl   $0xc0000000,-0x1c(%ebp)
  1046f1:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1046f4:	0f 83 2f 00 00 00    	jae    104729 <check_boot_pgdir+0x1a9>
  1046fa:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104700:	b9 2e 02 00 00       	mov    $0x22e,%ecx
  104705:	8d 15 0e f7 10 00    	lea    0x10f70e,%edx
  10470b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10470e:	89 04 24             	mov    %eax,(%esp)
  104711:	c7 44 24 04 2e 02 00 	movl   $0x22e,0x4(%esp)
  104718:	00 
  104719:	89 54 24 08          	mov    %edx,0x8(%esp)
  10471d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104721:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  104724:	e8 27 bd ff ff       	call   100450 <__panic>
  104729:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10472c:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
  104731:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104734:	8b 45 c0             	mov    -0x40(%ebp),%eax
  104737:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  10473a:	0f 84 32 00 00 00    	je     104772 <check_boot_pgdir+0x1f2>
  104740:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104746:	b9 2e 02 00 00       	mov    $0x22e,%ecx
  10474b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104751:	8d 35 ca fb 10 00    	lea    0x10fbca,%esi
  104757:	89 04 24             	mov    %eax,(%esp)
  10475a:	c7 44 24 04 2e 02 00 	movl   $0x22e,0x4(%esp)
  104761:	00 
  104762:	89 54 24 08          	mov    %edx,0x8(%esp)
  104766:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10476a:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10476d:	e8 de bc ff ff       	call   100450 <__panic>
  104772:	e9 00 00 00 00       	jmp    104777 <check_boot_pgdir+0x1f7>

    assert(boot_pgdir[0] == 0);
  104777:	e9 00 00 00 00       	jmp    10477c <check_boot_pgdir+0x1fc>
  10477c:	a1 30 48 11 00       	mov    0x114830,%eax
  104781:	83 38 00             	cmpl   $0x0,(%eax)
  104784:	0f 84 32 00 00 00    	je     1047bc <check_boot_pgdir+0x23c>
  10478a:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104790:	b9 30 02 00 00       	mov    $0x230,%ecx
  104795:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10479b:	8d 35 fe fb 10 00    	lea    0x10fbfe,%esi
  1047a1:	89 04 24             	mov    %eax,(%esp)
  1047a4:	c7 44 24 04 30 02 00 	movl   $0x230,0x4(%esp)
  1047ab:	00 
  1047ac:	89 54 24 08          	mov    %edx,0x8(%esp)
  1047b0:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1047b4:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1047b7:	e8 94 bc ff ff       	call   100450 <__panic>
  1047bc:	e9 00 00 00 00       	jmp    1047c1 <check_boot_pgdir+0x241>
  1047c1:	b8 01 00 00 00       	mov    $0x1,%eax

    struct Page *p;
    p = alloc_page();
  1047c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1047cd:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1047d0:	e8 3b e8 ff ff       	call   103010 <alloc_pages>
  1047d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1047d8:	b8 00 01 00 00       	mov    $0x100,%eax
  1047dd:	b9 02 00 00 00       	mov    $0x2,%ecx
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
  1047e2:	8b 15 30 48 11 00    	mov    0x114830,%edx
  1047e8:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1047eb:	89 14 24             	mov    %edx,(%esp)
  1047ee:	89 74 24 04          	mov    %esi,0x4(%esp)
  1047f2:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
  1047f9:	00 
  1047fa:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
  104801:	00 
  104802:	89 45 ac             	mov    %eax,-0x54(%ebp)
  104805:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  104808:	e8 43 08 00 00       	call   105050 <page_insert>
  10480d:	83 f8 00             	cmp    $0x0,%eax
  104810:	0f 84 32 00 00 00    	je     104848 <check_boot_pgdir+0x2c8>
  104816:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  10481c:	b9 34 02 00 00       	mov    $0x234,%ecx
  104821:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104827:	8d 35 11 fc 10 00    	lea    0x10fc11,%esi
  10482d:	89 04 24             	mov    %eax,(%esp)
  104830:	c7 44 24 04 34 02 00 	movl   $0x234,0x4(%esp)
  104837:	00 
  104838:	89 54 24 08          	mov    %edx,0x8(%esp)
  10483c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104840:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  104843:	e8 08 bc ff ff       	call   100450 <__panic>
  104848:	e9 00 00 00 00       	jmp    10484d <check_boot_pgdir+0x2cd>
    assert(page_ref(p) == 1);
  10484d:	e9 00 00 00 00       	jmp    104852 <check_boot_pgdir+0x2d2>
  104852:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104855:	89 04 24             	mov    %eax,(%esp)
  104858:	e8 03 0d 00 00       	call   105560 <page_ref>
  10485d:	83 f8 01             	cmp    $0x1,%eax
  104860:	0f 84 32 00 00 00    	je     104898 <check_boot_pgdir+0x318>
  104866:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  10486c:	b9 35 02 00 00       	mov    $0x235,%ecx
  104871:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104877:	8d 35 3f fc 10 00    	lea    0x10fc3f,%esi
  10487d:	89 04 24             	mov    %eax,(%esp)
  104880:	c7 44 24 04 35 02 00 	movl   $0x235,0x4(%esp)
  104887:	00 
  104888:	89 54 24 08          	mov    %edx,0x8(%esp)
  10488c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104890:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  104893:	e8 b8 bb ff ff       	call   100450 <__panic>
  104898:	e9 00 00 00 00       	jmp    10489d <check_boot_pgdir+0x31d>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
  10489d:	e9 00 00 00 00       	jmp    1048a2 <check_boot_pgdir+0x322>
  1048a2:	b8 00 11 00 00       	mov    $0x1100,%eax
  1048a7:	b9 02 00 00 00       	mov    $0x2,%ecx
  1048ac:	8b 15 30 48 11 00    	mov    0x114830,%edx
  1048b2:	8b 75 dc             	mov    -0x24(%ebp),%esi
  1048b5:	89 14 24             	mov    %edx,(%esp)
  1048b8:	89 74 24 04          	mov    %esi,0x4(%esp)
  1048bc:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
  1048c3:	00 
  1048c4:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
  1048cb:	00 
  1048cc:	89 45 9c             	mov    %eax,-0x64(%ebp)
  1048cf:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  1048d2:	e8 79 07 00 00       	call   105050 <page_insert>
  1048d7:	83 f8 00             	cmp    $0x0,%eax
  1048da:	0f 84 32 00 00 00    	je     104912 <check_boot_pgdir+0x392>
  1048e0:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1048e6:	b9 36 02 00 00       	mov    $0x236,%ecx
  1048eb:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1048f1:	8d 35 50 fc 10 00    	lea    0x10fc50,%esi
  1048f7:	89 04 24             	mov    %eax,(%esp)
  1048fa:	c7 44 24 04 36 02 00 	movl   $0x236,0x4(%esp)
  104901:	00 
  104902:	89 54 24 08          	mov    %edx,0x8(%esp)
  104906:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10490a:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  10490d:	e8 3e bb ff ff       	call   100450 <__panic>
  104912:	e9 00 00 00 00       	jmp    104917 <check_boot_pgdir+0x397>
    assert(page_ref(p) == 2);
  104917:	e9 00 00 00 00       	jmp    10491c <check_boot_pgdir+0x39c>
  10491c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10491f:	89 04 24             	mov    %eax,(%esp)
  104922:	e8 39 0c 00 00       	call   105560 <page_ref>
  104927:	83 f8 02             	cmp    $0x2,%eax
  10492a:	0f 84 32 00 00 00    	je     104962 <check_boot_pgdir+0x3e2>
  104930:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104936:	b9 37 02 00 00       	mov    $0x237,%ecx
  10493b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104941:	8d 35 87 fc 10 00    	lea    0x10fc87,%esi
  104947:	89 04 24             	mov    %eax,(%esp)
  10494a:	c7 44 24 04 37 02 00 	movl   $0x237,0x4(%esp)
  104951:	00 
  104952:	89 54 24 08          	mov    %edx,0x8(%esp)
  104956:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10495a:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  10495d:	e8 ee ba ff ff       	call   100450 <__panic>
  104962:	e9 00 00 00 00       	jmp    104967 <check_boot_pgdir+0x3e7>
  104967:	b8 00 01 00 00       	mov    $0x100,%eax
  10496c:	8d 0d 98 fc 10 00    	lea    0x10fc98,%ecx

    const char *str = "ucore: Hello world!!";
  104972:	89 4d d8             	mov    %ecx,-0x28(%ebp)
    strcpy((void *)0x100, str);
  104975:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  104978:	89 04 24             	mov    %eax,(%esp)
  10497b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10497f:	e8 8c 95 00 00       	call   10df10 <strcpy>
  104984:	89 45 8c             	mov    %eax,-0x74(%ebp)
  104987:	b8 00 01 00 00       	mov    $0x100,%eax
  10498c:	b9 00 11 00 00       	mov    $0x1100,%ecx
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
  104991:	89 04 24             	mov    %eax,(%esp)
  104994:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104998:	e8 33 96 00 00       	call   10dfd0 <strcmp>
  10499d:	83 f8 00             	cmp    $0x0,%eax
  1049a0:	0f 84 32 00 00 00    	je     1049d8 <check_boot_pgdir+0x458>
  1049a6:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1049ac:	b9 3b 02 00 00       	mov    $0x23b,%ecx
  1049b1:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1049b7:	8d 35 ad fc 10 00    	lea    0x10fcad,%esi
  1049bd:	89 04 24             	mov    %eax,(%esp)
  1049c0:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
  1049c7:	00 
  1049c8:	89 54 24 08          	mov    %edx,0x8(%esp)
  1049cc:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1049d0:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  1049d3:	e8 78 ba ff ff       	call   100450 <__panic>
  1049d8:	e9 00 00 00 00       	jmp    1049dd <check_boot_pgdir+0x45d>

    *(char *)(page2kva(p) + 0x100) = '\0';
  1049dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1049e0:	89 04 24             	mov    %eax,(%esp)
  1049e3:	e8 78 0a 00 00       	call   105460 <page2kva>
  1049e8:	c6 80 00 01 00 00 00 	movb   $0x0,0x100(%eax)
  1049ef:	b8 00 01 00 00       	mov    $0x100,%eax
    assert(strlen((const char *)0x100) == 0);
  1049f4:	89 04 24             	mov    %eax,(%esp)
  1049f7:	e8 64 94 00 00       	call   10de60 <strlen>
  1049fc:	83 f8 00             	cmp    $0x0,%eax
  1049ff:	0f 84 32 00 00 00    	je     104a37 <check_boot_pgdir+0x4b7>
  104a05:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104a0b:	b9 3e 02 00 00       	mov    $0x23e,%ecx
  104a10:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  104a16:	8d 35 e2 fc 10 00    	lea    0x10fce2,%esi
  104a1c:	89 04 24             	mov    %eax,(%esp)
  104a1f:	c7 44 24 04 3e 02 00 	movl   $0x23e,0x4(%esp)
  104a26:	00 
  104a27:	89 54 24 08          	mov    %edx,0x8(%esp)
  104a2b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104a2f:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  104a32:	e8 19 ba ff ff       	call   100450 <__panic>
  104a37:	e9 00 00 00 00       	jmp    104a3c <check_boot_pgdir+0x4bc>
  104a3c:	b8 01 00 00 00       	mov    $0x1,%eax

    free_page(p);
  104a41:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  104a44:	89 0c 24             	mov    %ecx,(%esp)
  104a47:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104a4e:	00 
  104a4f:	89 45 80             	mov    %eax,-0x80(%ebp)
  104a52:	e8 69 e6 ff ff       	call   1030c0 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
  104a57:	a1 30 48 11 00       	mov    0x114830,%eax
  104a5c:	8b 00                	mov    (%eax),%eax
  104a5e:	89 04 24             	mov    %eax,(%esp)
  104a61:	e8 1a 0b 00 00       	call   105580 <pde2page>
  104a66:	b9 01 00 00 00       	mov    $0x1,%ecx
  104a6b:	89 04 24             	mov    %eax,(%esp)
  104a6e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104a75:	00 
  104a76:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  104a7c:	e8 3f e6 ff ff       	call   1030c0 <free_pages>
  104a81:	8d 05 03 fd 10 00    	lea    0x10fd03,%eax
    boot_pgdir[0] = 0;
  104a87:	8b 0d 30 48 11 00    	mov    0x114830,%ecx
  104a8d:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)

    cprintf("check_boot_pgdir() succeeded!\n");
  104a93:	89 04 24             	mov    %eax,(%esp)
  104a96:	e8 a5 b7 ff ff       	call   100240 <cprintf>
}
  104a9b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  104aa1:	81 c4 94 00 00 00    	add    $0x94,%esp
  104aa7:	5e                   	pop    %esi
  104aa8:	5d                   	pop    %ebp
  104aa9:	c3                   	ret    
  104aaa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00104ab0 <print_pgdir>:
    return 0;
}

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
  104ab0:	55                   	push   %ebp
  104ab1:	89 e5                	mov    %esp,%ebp
  104ab3:	53                   	push   %ebx
  104ab4:	57                   	push   %edi
  104ab5:	56                   	push   %esi
  104ab6:	83 ec 6c             	sub    $0x6c,%esp
  104ab9:	8d 05 55 f7 10 00    	lea    0x10f755,%eax
    cprintf("-------------------- BEGIN --------------------\n");
  104abf:	89 04 24             	mov    %eax,(%esp)
  104ac2:	e8 79 b7 ff ff       	call   100240 <cprintf>
    size_t left, right = 0, perm;
  104ac7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  104ace:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104ad1:	31 c0                	xor    %eax,%eax
  104ad3:	b9 00 04 00 00       	mov    $0x400,%ecx
  104ad8:	8d 55 f0             	lea    -0x10(%ebp),%edx
  104adb:	8d 75 ec             	lea    -0x14(%ebp),%esi
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
  104ade:	8b 7d ec             	mov    -0x14(%ebp),%edi
  104ae1:	8b 1d fc f6 10 00    	mov    0x10f6fc,%ebx
  104ae7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  104aee:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
  104af5:	00 
  104af6:	89 7c 24 08          	mov    %edi,0x8(%esp)
  104afa:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  104afe:	89 54 24 10          	mov    %edx,0x10(%esp)
  104b02:	89 74 24 14          	mov    %esi,0x14(%esp)
  104b06:	89 45 d8             	mov    %eax,-0x28(%ebp)
  104b09:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  104b0c:	e8 0f 07 00 00       	call   105220 <get_pgtable_items>
  104b11:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104b14:	83 f8 00             	cmp    $0x0,%eax
  104b17:	0f 84 1c 01 00 00    	je     104c39 <print_pgdir+0x189>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
  104b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104b20:	2b 45 f0             	sub    -0x10(%ebp),%eax
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
  104b23:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104b26:	c1 e1 16             	shl    $0x16,%ecx
  104b29:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104b2c:	c1 e2 16             	shl    $0x16,%edx
  104b2f:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104b32:	2b 75 f0             	sub    -0x10(%ebp),%esi
  104b35:	c1 e6 16             	shl    $0x16,%esi
  104b38:	8b 7d e8             	mov    -0x18(%ebp),%edi
  104b3b:	89 3c 24             	mov    %edi,(%esp)
  104b3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
  104b41:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  104b44:	89 55 c8             	mov    %edx,-0x38(%ebp)
  104b47:	89 75 c4             	mov    %esi,-0x3c(%ebp)
  104b4a:	e8 11 08 00 00       	call   105360 <perm2str>
  104b4f:	8d 0d 86 f7 10 00    	lea    0x10f786,%ecx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
  104b55:	89 0c 24             	mov    %ecx,(%esp)
  104b58:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  104b5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104b5f:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  104b62:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  104b66:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  104b69:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  104b6d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  104b70:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  104b74:	89 44 24 14          	mov    %eax,0x14(%esp)
  104b78:	e8 c3 b6 ff ff       	call   100240 <cprintf>
        size_t l, r = left * NPTEENTRY;
  104b7d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104b80:	c1 e1 0a             	shl    $0xa,%ecx
  104b83:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  104b86:	89 45 c0             	mov    %eax,-0x40(%ebp)
  104b89:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  104b8c:	8d 4d e0             	lea    -0x20(%ebp),%ecx
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
  104b8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104b92:	c1 e2 0a             	shl    $0xa,%edx
  104b95:	8b 75 ec             	mov    -0x14(%ebp),%esi
  104b98:	c1 e6 0a             	shl    $0xa,%esi
  104b9b:	8b 7d e0             	mov    -0x20(%ebp),%edi
  104b9e:	8b 1d f8 f6 10 00    	mov    0x10f6f8,%ebx
  104ba4:	89 14 24             	mov    %edx,(%esp)
  104ba7:	89 74 24 04          	mov    %esi,0x4(%esp)
  104bab:	89 7c 24 08          	mov    %edi,0x8(%esp)
  104baf:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  104bb3:	89 44 24 10          	mov    %eax,0x10(%esp)
  104bb7:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  104bbb:	e8 60 06 00 00       	call   105220 <get_pgtable_items>
  104bc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104bc3:	83 f8 00             	cmp    $0x0,%eax
  104bc6:	0f 84 68 00 00 00    	je     104c34 <print_pgdir+0x184>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
  104bcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104bcf:	2b 45 e4             	sub    -0x1c(%ebp),%eax
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
  104bd2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104bd5:	c1 e1 0c             	shl    $0xc,%ecx
  104bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104bdb:	c1 e2 0c             	shl    $0xc,%edx
  104bde:	8b 75 e0             	mov    -0x20(%ebp),%esi
  104be1:	2b 75 e4             	sub    -0x1c(%ebp),%esi
  104be4:	c1 e6 0c             	shl    $0xc,%esi
  104be7:	8b 7d e8             	mov    -0x18(%ebp),%edi
  104bea:	89 3c 24             	mov    %edi,(%esp)
  104bed:	89 45 bc             	mov    %eax,-0x44(%ebp)
  104bf0:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  104bf3:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  104bf6:	89 75 b0             	mov    %esi,-0x50(%ebp)
  104bf9:	e8 62 07 00 00       	call   105360 <perm2str>
  104bfe:	8d 0d a3 f7 10 00    	lea    0x10f7a3,%ecx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
  104c04:	89 0c 24             	mov    %ecx,(%esp)
  104c07:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  104c0a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104c0e:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  104c11:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  104c15:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  104c18:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  104c1c:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  104c1f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  104c23:	89 44 24 14          	mov    %eax,0x14(%esp)
  104c27:	e8 14 b6 ff ff       	call   100240 <cprintf>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
  104c2c:	89 45 ac             	mov    %eax,-0x54(%ebp)
  104c2f:	e9 55 ff ff ff       	jmp    104b89 <print_pgdir+0xd9>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
  104c34:	e9 98 fe ff ff       	jmp    104ad1 <print_pgdir+0x21>
  104c39:	8d 05 c6 f7 10 00    	lea    0x10f7c6,%eax
        }
    }
    cprintf("--------------------- END ---------------------\n");
  104c3f:	89 04 24             	mov    %eax,(%esp)
  104c42:	e8 f9 b5 ff ff       	call   100240 <cprintf>
}
  104c47:	89 45 a8             	mov    %eax,-0x58(%ebp)
  104c4a:	83 c4 6c             	add    $0x6c,%esp
  104c4d:	5e                   	pop    %esi
  104c4e:	5f                   	pop    %edi
  104c4f:	5b                   	pop    %ebx
  104c50:	5d                   	pop    %ebp
  104c51:	c3                   	ret    
  104c52:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  104c59:	1f 84 00 00 00 00 00 

00104c60 <get_pte>:
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
  104c60:	55                   	push   %ebp
  104c61:	89 e5                	mov    %esp,%ebp
  104c63:	56                   	push   %esi
  104c64:	83 ec 64             	sub    $0x64,%esp
  104c67:	8b 45 10             	mov    0x10(%ebp),%eax
  104c6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104c6d:	8b 55 08             	mov    0x8(%ebp),%edx
  104c70:	89 55 f4             	mov    %edx,-0xc(%ebp)
  104c73:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!(pgdir[PDX(la)] & PTE_P)) {
  104c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104c7c:	c1 e8 16             	shr    $0x16,%eax
  104c7f:	25 ff 03 00 00       	and    $0x3ff,%eax
  104c84:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104c87:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  104c8a:	83 e0 01             	and    $0x1,%eax
  104c8d:	83 f8 00             	cmp    $0x0,%eax
  104c90:	0f 85 07 01 00 00    	jne    104d9d <get_pte+0x13d>
        if (!create || (page = alloc_page()) == NULL)
  104c96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  104c9a:	0f 84 20 00 00 00    	je     104cc0 <get_pte+0x60>
  104ca0:	b8 01 00 00 00       	mov    $0x1,%eax
  104ca5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  104cac:	89 45 c8             	mov    %eax,-0x38(%ebp)
  104caf:	e8 5c e3 ff ff       	call   103010 <alloc_pages>
  104cb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
  104cb7:	83 f8 00             	cmp    $0x0,%eax
  104cba:	0f 85 0c 00 00 00    	jne    104ccc <get_pte+0x6c>
            return NULL;
  104cc0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  104cc7:	e9 53 01 00 00       	jmp    104e1f <get_pte+0x1bf>
  104ccc:	b8 01 00 00 00       	mov    $0x1,%eax
        set_page_ref(page, 1);
  104cd1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  104cd4:	89 0c 24             	mov    %ecx,(%esp)
  104cd7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104cde:	00 
  104cdf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  104ce2:	e8 49 01 00 00       	call   104e30 <set_page_ref>
        uintptr_t pa = page2pa(page);
  104ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104cea:	89 04 24             	mov    %eax,(%esp)
  104ced:	e8 5e 01 00 00       	call   104e50 <page2pa>
  104cf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
  104cf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  104cf8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  104cfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  104cfe:	c1 e8 0c             	shr    $0xc,%eax
  104d01:	89 45 dc             	mov    %eax,-0x24(%ebp)
  104d04:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104d07:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  104d0d:	0f 82 2f 00 00 00    	jb     104d42 <get_pte+0xe2>
  104d13:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104d19:	b9 86 01 00 00       	mov    $0x186,%ecx
  104d1e:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  104d24:	8b 75 e0             	mov    -0x20(%ebp),%esi
  104d27:	89 04 24             	mov    %eax,(%esp)
  104d2a:	c7 44 24 04 86 01 00 	movl   $0x186,0x4(%esp)
  104d31:	00 
  104d32:	89 54 24 08          	mov    %edx,0x8(%esp)
  104d36:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104d3a:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  104d3d:	e8 0e b7 ff ff       	call   100450 <__panic>
  104d42:	31 c0                	xor    %eax,%eax
  104d44:	b9 00 10 00 00       	mov    $0x1000,%ecx
  104d49:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104d4c:	81 c2 00 00 00 c0    	add    $0xc0000000,%edx
  104d52:	89 55 d8             	mov    %edx,-0x28(%ebp)
  104d55:	8b 55 d8             	mov    -0x28(%ebp),%edx
  104d58:	89 14 24             	mov    %edx,(%esp)
  104d5b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  104d62:	00 
  104d63:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  104d6a:	00 
  104d6b:	89 45 bc             	mov    %eax,-0x44(%ebp)
  104d6e:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  104d71:	e8 6a 96 00 00       	call   10e3e0 <memset>
        pgdir[PDX(la)] = (pa & ~0xFFF) | PTE_P | PTE_W | PTE_U;
  104d76:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  104d79:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
  104d7f:	83 c9 01             	or     $0x1,%ecx
  104d82:	83 c9 02             	or     $0x2,%ecx
  104d85:	83 c9 04             	or     $0x4,%ecx
  104d88:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104d8b:	c1 ea 16             	shr    $0x16,%edx
  104d8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  104d94:	8b 75 f4             	mov    -0xc(%ebp),%esi
  104d97:	89 0c 96             	mov    %ecx,(%esi,%edx,4)
  104d9a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    return (pte_t *)KADDR(PDE_ADDR(pgdir[PDX(la)])) + PTX(la);
  104d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104da0:	c1 e8 16             	shr    $0x16,%eax
  104da3:	25 ff 03 00 00       	and    $0x3ff,%eax
  104da8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  104dab:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  104dae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104db3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  104db6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104db9:	c1 e8 0c             	shr    $0xc,%eax
  104dbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
  104dbf:	8b 45 d0             	mov    -0x30(%ebp),%eax
  104dc2:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  104dc8:	0f 82 2f 00 00 00    	jb     104dfd <get_pte+0x19d>
  104dce:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  104dd4:	b9 89 01 00 00       	mov    $0x189,%ecx
  104dd9:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  104ddf:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  104de2:	89 04 24             	mov    %eax,(%esp)
  104de5:	c7 44 24 04 89 01 00 	movl   $0x189,0x4(%esp)
  104dec:	00 
  104ded:	89 54 24 08          	mov    %edx,0x8(%esp)
  104df1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  104df5:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  104df8:	e8 53 b6 ff ff       	call   100450 <__panic>
  104dfd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  104e00:	05 00 00 00 c0       	add    $0xc0000000,%eax
  104e05:	89 45 cc             	mov    %eax,-0x34(%ebp)
  104e08:	8b 45 cc             	mov    -0x34(%ebp),%eax
  104e0b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e0e:	c1 e9 0c             	shr    $0xc,%ecx
  104e11:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
  104e17:	c1 e1 02             	shl    $0x2,%ecx
  104e1a:	01 c8                	add    %ecx,%eax
  104e1c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  104e1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e22:	83 c4 64             	add    $0x64,%esp
  104e25:	5e                   	pop    %esi
  104e26:	5d                   	pop    %ebp
  104e27:	c3                   	ret    
  104e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  104e2f:	00 

00104e30 <set_page_ref>:
page_ref(struct Page *page) {
    return page->ref;
}

static inline void
set_page_ref(struct Page *page, int val) {
  104e30:	55                   	push   %ebp
  104e31:	89 e5                	mov    %esp,%ebp
  104e33:	83 ec 08             	sub    $0x8,%esp
  104e36:	8b 45 0c             	mov    0xc(%ebp),%eax
  104e39:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104e3c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  104e3f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
  104e42:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104e45:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  104e48:	89 01                	mov    %eax,(%ecx)
}
  104e4a:	83 c4 08             	add    $0x8,%esp
  104e4d:	5d                   	pop    %ebp
  104e4e:	c3                   	ret    
  104e4f:	90                   	nop

00104e50 <page2pa>:
page2pa(struct Page *page) {
  104e50:	55                   	push   %ebp
  104e51:	89 e5                	mov    %esp,%ebp
  104e53:	83 ec 08             	sub    $0x8,%esp
  104e56:	8b 45 08             	mov    0x8(%ebp),%eax
  104e59:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
  104e5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104e5f:	89 04 24             	mov    %eax,(%esp)
  104e62:	e8 c9 06 00 00       	call   105530 <page2ppn>
  104e67:	c1 e0 0c             	shl    $0xc,%eax
  104e6a:	83 c4 08             	add    $0x8,%esp
  104e6d:	5d                   	pop    %ebp
  104e6e:	c3                   	ret    
  104e6f:	90                   	nop

00104e70 <get_page>:
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
  104e70:	55                   	push   %ebp
  104e71:	89 e5                	mov    %esp,%ebp
  104e73:	56                   	push   %esi
  104e74:	83 ec 24             	sub    $0x24,%esp
  104e77:	8b 45 10             	mov    0x10(%ebp),%eax
  104e7a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104e7d:	8b 55 08             	mov    0x8(%ebp),%edx
  104e80:	31 f6                	xor    %esi,%esi
  104e82:	89 55 f4             	mov    %edx,-0xc(%ebp)
  104e85:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  104e88:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 0);
  104e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104e8e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  104e91:	89 04 24             	mov    %eax,(%esp)
  104e94:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104e98:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  104e9f:	00 
  104ea0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  104ea3:	e8 b8 fd ff ff       	call   104c60 <get_pte>
  104ea8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (ptep_store != NULL) {
  104eab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  104eaf:	0f 84 08 00 00 00    	je     104ebd <get_page+0x4d>
        *ptep_store = ptep;
  104eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104eb8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  104ebb:	89 01                	mov    %eax,(%ecx)
    if (ptep != NULL && *ptep & PTE_P) {
  104ebd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  104ec1:	0f 84 26 00 00 00    	je     104eed <get_page+0x7d>
  104ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104eca:	8b 00                	mov    (%eax),%eax
  104ecc:	83 e0 01             	and    $0x1,%eax
  104ecf:	83 f8 00             	cmp    $0x0,%eax
  104ed2:	0f 84 15 00 00 00    	je     104eed <get_page+0x7d>
        return pte2page(*ptep);
  104ed8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104edb:	8b 00                	mov    (%eax),%eax
  104edd:	89 04 24             	mov    %eax,(%esp)
  104ee0:	e8 1b 00 00 00       	call   104f00 <pte2page>
  104ee5:	89 45 f8             	mov    %eax,-0x8(%ebp)
  104ee8:	e9 07 00 00 00       	jmp    104ef4 <get_page+0x84>
    return NULL;
  104eed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
  104ef4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  104ef7:	83 c4 24             	add    $0x24,%esp
  104efa:	5e                   	pop    %esi
  104efb:	5d                   	pop    %ebp
  104efc:	c3                   	ret    
  104efd:	0f 1f 00             	nopl   (%eax)

00104f00 <pte2page>:
pte2page(pte_t pte) {
  104f00:	55                   	push   %ebp
  104f01:	89 e5                	mov    %esp,%ebp
  104f03:	83 ec 18             	sub    $0x18,%esp
  104f06:	8b 45 08             	mov    0x8(%ebp),%eax
  104f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (!(pte & PTE_P)) {
  104f0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f0f:	83 e0 01             	and    $0x1,%eax
  104f12:	83 f8 00             	cmp    $0x0,%eax
  104f15:	0f 85 28 00 00 00    	jne    104f43 <pte2page+0x43>
  104f1b:	8d 05 48 f8 10 00    	lea    0x10f848,%eax
  104f21:	b9 6c 00 00 00       	mov    $0x6c,%ecx
  104f26:	8d 15 c7 f8 10 00    	lea    0x10f8c7,%edx
        panic("pte2page called with invalid pte");
  104f2c:	89 04 24             	mov    %eax,(%esp)
  104f2f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
  104f36:	00 
  104f37:	89 54 24 08          	mov    %edx,0x8(%esp)
  104f3b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104f3e:	e8 0d b5 ff ff       	call   100450 <__panic>
    return pa2page(PTE_ADDR(pte));
  104f43:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  104f4b:	89 04 24             	mov    %eax,(%esp)
  104f4e:	e8 ad 04 00 00       	call   105400 <pa2page>
  104f53:	83 c4 18             	add    $0x18,%esp
  104f56:	5d                   	pop    %ebp
  104f57:	c3                   	ret    
  104f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  104f5f:	00 

00104f60 <page_remove>:
page_remove(pde_t *pgdir, uintptr_t la) {
  104f60:	55                   	push   %ebp
  104f61:	89 e5                	mov    %esp,%ebp
  104f63:	83 ec 28             	sub    $0x28,%esp
  104f66:	8b 45 0c             	mov    0xc(%ebp),%eax
  104f69:	8b 4d 08             	mov    0x8(%ebp),%ecx
  104f6c:	31 d2                	xor    %edx,%edx
  104f6e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  104f71:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 0);
  104f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104f77:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104f7a:	89 04 24             	mov    %eax,(%esp)
  104f7d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104f81:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  104f88:	00 
  104f89:	89 55 f0             	mov    %edx,-0x10(%ebp)
  104f8c:	e8 cf fc ff ff       	call   104c60 <get_pte>
  104f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
  104f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  104f98:	0f 84 19 00 00 00    	je     104fb7 <page_remove+0x57>
        page_remove_pte(pgdir, la, ptep);
  104f9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  104fa1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  104fa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104fa7:	89 04 24             	mov    %eax,(%esp)
  104faa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  104fae:	89 54 24 08          	mov    %edx,0x8(%esp)
  104fb2:	e8 09 00 00 00       	call   104fc0 <page_remove_pte>
}
  104fb7:	83 c4 28             	add    $0x28,%esp
  104fba:	5d                   	pop    %ebp
  104fbb:	c3                   	ret    
  104fbc:	0f 1f 40 00          	nopl   0x0(%eax)

00104fc0 <page_remove_pte>:
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
  104fc0:	55                   	push   %ebp
  104fc1:	89 e5                	mov    %esp,%ebp
  104fc3:	83 ec 28             	sub    $0x28,%esp
  104fc6:	8b 45 10             	mov    0x10(%ebp),%eax
  104fc9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  104fcc:	8b 55 08             	mov    0x8(%ebp),%edx
  104fcf:	89 55 fc             	mov    %edx,-0x4(%ebp)
  104fd2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (*ptep & PTE_P) {
  104fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fdb:	8b 00                	mov    (%eax),%eax
  104fdd:	83 e0 01             	and    $0x1,%eax
  104fe0:	83 f8 00             	cmp    $0x0,%eax
  104fe3:	0f 84 5a 00 00 00    	je     105043 <page_remove_pte+0x83>
        struct Page *page = pte2page(*ptep);
  104fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104fec:	8b 00                	mov    (%eax),%eax
  104fee:	89 04 24             	mov    %eax,(%esp)
  104ff1:	e8 0a ff ff ff       	call   104f00 <pte2page>
  104ff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (page_ref_dec(page) == 0)
  104ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104ffc:	89 04 24             	mov    %eax,(%esp)
  104fff:	e8 6c 01 00 00       	call   105170 <page_ref_dec>
  105004:	83 f8 00             	cmp    $0x0,%eax
  105007:	0f 85 1b 00 00 00    	jne    105028 <page_remove_pte+0x68>
  10500d:	b8 01 00 00 00       	mov    $0x1,%eax
            free_page(page);
  105012:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105015:	89 0c 24             	mov    %ecx,(%esp)
  105018:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10501f:	00 
  105020:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105023:	e8 98 e0 ff ff       	call   1030c0 <free_pages>
        *ptep = 0;
  105028:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10502b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
  105031:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105034:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105037:	89 04 24             	mov    %eax,(%esp)
  10503a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10503e:	e8 4d 01 00 00       	call   105190 <tlb_invalidate>
}
  105043:	83 c4 28             	add    $0x28,%esp
  105046:	5d                   	pop    %ebp
  105047:	c3                   	ret    
  105048:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10504f:	00 

00105050 <page_insert>:
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
  105050:	55                   	push   %ebp
  105051:	89 e5                	mov    %esp,%ebp
  105053:	57                   	push   %edi
  105054:	56                   	push   %esi
  105055:	83 ec 40             	sub    $0x40,%esp
  105058:	8b 45 14             	mov    0x14(%ebp),%eax
  10505b:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10505e:	8b 55 0c             	mov    0xc(%ebp),%edx
  105061:	8b 75 08             	mov    0x8(%ebp),%esi
  105064:	bf 01 00 00 00       	mov    $0x1,%edi
  105069:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10506c:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10506f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  105072:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 1);
  105075:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105078:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10507b:	89 04 24             	mov    %eax,(%esp)
  10507e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105082:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  105089:	00 
  10508a:	89 7d d8             	mov    %edi,-0x28(%ebp)
  10508d:	e8 ce fb ff ff       	call   104c60 <get_pte>
  105092:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (ptep == NULL) {
  105095:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  105099:	0f 85 0c 00 00 00    	jne    1050ab <page_insert+0x5b>
        return -E_NO_MEM;
  10509f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
  1050a6:	e9 9b 00 00 00       	jmp    105146 <page_insert+0xf6>
    page_ref_inc(page);
  1050ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050ae:	89 04 24             	mov    %eax,(%esp)
  1050b1:	e8 9a 00 00 00       	call   105150 <page_ref_inc>
    if (*ptep & PTE_P) {
  1050b6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1050b9:	8b 09                	mov    (%ecx),%ecx
  1050bb:	83 e1 01             	and    $0x1,%ecx
  1050be:	83 f9 00             	cmp    $0x0,%ecx
  1050c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1050c4:	0f 84 4d 00 00 00    	je     105117 <page_insert+0xc7>
        struct Page *p = pte2page(*ptep);
  1050ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1050cd:	8b 00                	mov    (%eax),%eax
  1050cf:	89 04 24             	mov    %eax,(%esp)
  1050d2:	e8 29 fe ff ff       	call   104f00 <pte2page>
  1050d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (p == page) {
  1050da:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1050dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1050e0:	0f 85 13 00 00 00    	jne    1050f9 <page_insert+0xa9>
            page_ref_dec(page);
  1050e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1050e9:	89 04 24             	mov    %eax,(%esp)
  1050ec:	e8 7f 00 00 00       	call   105170 <page_ref_dec>
        }
  1050f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
  1050f4:	e9 19 00 00 00       	jmp    105112 <page_insert+0xc2>
            page_remove_pte(pgdir, la, ptep);
  1050f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1050fc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1050ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
  105102:	89 04 24             	mov    %eax,(%esp)
  105105:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105109:	89 54 24 08          	mov    %edx,0x8(%esp)
  10510d:	e8 ae fe ff ff       	call   104fc0 <page_remove_pte>
    }
  105112:	e9 00 00 00 00       	jmp    105117 <page_insert+0xc7>
    *ptep = page2pa(page) | PTE_P | perm;
  105117:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10511a:	89 04 24             	mov    %eax,(%esp)
  10511d:	e8 2e fd ff ff       	call   104e50 <page2pa>
  105122:	83 c8 01             	or     $0x1,%eax
  105125:	0b 45 e4             	or     -0x1c(%ebp),%eax
  105128:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10512b:	89 01                	mov    %eax,(%ecx)
    tlb_invalidate(pgdir, la);
  10512d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105130:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  105133:	89 04 24             	mov    %eax,(%esp)
  105136:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10513a:	e8 51 00 00 00       	call   105190 <tlb_invalidate>
    return 0;
  10513f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}
  105146:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105149:	83 c4 40             	add    $0x40,%esp
  10514c:	5e                   	pop    %esi
  10514d:	5f                   	pop    %edi
  10514e:	5d                   	pop    %ebp
  10514f:	c3                   	ret    

00105150 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
  105150:	55                   	push   %ebp
  105151:	89 e5                	mov    %esp,%ebp
  105153:	50                   	push   %eax
  105154:	8b 45 08             	mov    0x8(%ebp),%eax
  105157:	89 45 fc             	mov    %eax,-0x4(%ebp)
    page->ref += 1;
  10515a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10515d:	8b 08                	mov    (%eax),%ecx
  10515f:	83 c1 01             	add    $0x1,%ecx
  105162:	89 08                	mov    %ecx,(%eax)
    return page->ref;
  105164:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105167:	8b 00                	mov    (%eax),%eax
  105169:	83 c4 04             	add    $0x4,%esp
  10516c:	5d                   	pop    %ebp
  10516d:	c3                   	ret    
  10516e:	66 90                	xchg   %ax,%ax

00105170 <page_ref_dec>:
}

static inline int
page_ref_dec(struct Page *page) {
  105170:	55                   	push   %ebp
  105171:	89 e5                	mov    %esp,%ebp
  105173:	50                   	push   %eax
  105174:	8b 45 08             	mov    0x8(%ebp),%eax
  105177:	89 45 fc             	mov    %eax,-0x4(%ebp)
    page->ref -= 1;
  10517a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10517d:	8b 08                	mov    (%eax),%ecx
  10517f:	83 e9 01             	sub    $0x1,%ecx
  105182:	89 08                	mov    %ecx,(%eax)
    return page->ref;
  105184:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105187:	8b 00                	mov    (%eax),%eax
  105189:	83 c4 04             	add    $0x4,%esp
  10518c:	5d                   	pop    %ebp
  10518d:	c3                   	ret    
  10518e:	66 90                	xchg   %ax,%ax

00105190 <tlb_invalidate>:
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
  105190:	55                   	push   %ebp
  105191:	89 e5                	mov    %esp,%ebp
  105193:	56                   	push   %esi
  105194:	83 ec 34             	sub    $0x34,%esp
  105197:	8b 45 0c             	mov    0xc(%ebp),%eax
  10519a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10519d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1051a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
  1051a3:	0f 20 d8             	mov    %cr3,%eax
  1051a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr3;
  1051a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
  1051ac:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1051af:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1051b2:	81 7d e8 00 00 00 c0 	cmpl   $0xc0000000,-0x18(%ebp)
  1051b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1051bc:	0f 83 2f 00 00 00    	jae    1051f1 <tlb_invalidate+0x61>
  1051c2:	8d 05 00 f7 10 00    	lea    0x10f700,%eax
  1051c8:	b9 ea 01 00 00       	mov    $0x1ea,%ecx
  1051cd:	8d 15 0e f7 10 00    	lea    0x10f70e,%edx
  1051d3:	8b 75 e8             	mov    -0x18(%ebp),%esi
  1051d6:	89 04 24             	mov    %eax,(%esp)
  1051d9:	c7 44 24 04 ea 01 00 	movl   $0x1ea,0x4(%esp)
  1051e0:	00 
  1051e1:	89 54 24 08          	mov    %edx,0x8(%esp)
  1051e5:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1051e9:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1051ec:	e8 5f b2 ff ff       	call   100450 <__panic>
  1051f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051f4:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
  1051f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1051fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1051ff:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  105202:	0f 85 0c 00 00 00    	jne    105214 <tlb_invalidate+0x84>
        invlpg((void *)la);
  105208:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10520b:	89 45 f8             	mov    %eax,-0x8(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
  10520e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105211:	0f 01 38             	invlpg (%eax)
}
  105214:	83 c4 34             	add    $0x34,%esp
  105217:	5e                   	pop    %esi
  105218:	5d                   	pop    %ebp
  105219:	c3                   	ret    
  10521a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105220 <get_pgtable_items>:
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
  105220:	55                   	push   %ebp
  105221:	89 e5                	mov    %esp,%ebp
  105223:	53                   	push   %ebx
  105224:	57                   	push   %edi
  105225:	56                   	push   %esi
  105226:	83 ec 24             	sub    $0x24,%esp
  105229:	8b 45 1c             	mov    0x1c(%ebp),%eax
  10522c:	8b 4d 18             	mov    0x18(%ebp),%ecx
  10522f:	8b 55 14             	mov    0x14(%ebp),%edx
  105232:	8b 75 10             	mov    0x10(%ebp),%esi
  105235:	8b 7d 0c             	mov    0xc(%ebp),%edi
  105238:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10523b:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  10523e:	89 7d e8             	mov    %edi,-0x18(%ebp)
  105241:	89 75 e4             	mov    %esi,-0x1c(%ebp)
  105244:	89 55 e0             	mov    %edx,-0x20(%ebp)
  105247:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  10524a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (start >= right) {
  10524d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105250:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  105253:	0f 82 0c 00 00 00    	jb     105265 <get_pgtable_items+0x45>
        return 0;
  105259:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105260:	e9 ed 00 00 00       	jmp    105352 <get_pgtable_items+0x132>
    while (start < right && !(table[start] & PTE_P)) {
  105265:	e9 00 00 00 00       	jmp    10526a <get_pgtable_items+0x4a>
  10526a:	31 c0                	xor    %eax,%eax
  10526c:	88 c1                	mov    %al,%cl
  10526e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105271:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  105274:	88 4d d3             	mov    %cl,-0x2d(%ebp)
  105277:	0f 83 18 00 00 00    	jae    105295 <get_pgtable_items+0x75>
  10527d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105280:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105283:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105286:	83 e0 01             	and    $0x1,%eax
  105289:	83 f8 00             	cmp    $0x0,%eax
  10528c:	0f 95 c2             	setne  %dl
  10528f:	80 f2 ff             	xor    $0xff,%dl
  105292:	88 55 d3             	mov    %dl,-0x2d(%ebp)
  105295:	8a 45 d3             	mov    -0x2d(%ebp),%al
  105298:	a8 01                	test   $0x1,%al
  10529a:	0f 85 05 00 00 00    	jne    1052a5 <get_pgtable_items+0x85>
  1052a0:	e9 0e 00 00 00       	jmp    1052b3 <get_pgtable_items+0x93>
        start ++;
  1052a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052a8:	83 c0 01             	add    $0x1,%eax
  1052ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
  1052ae:	e9 b7 ff ff ff       	jmp    10526a <get_pgtable_items+0x4a>
    if (start < right) {
  1052b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052b6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1052b9:	0f 83 8c 00 00 00    	jae    10534b <get_pgtable_items+0x12b>
        if (left_store != NULL) {
  1052bf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  1052c3:	0f 84 08 00 00 00    	je     1052d1 <get_pgtable_items+0xb1>
            *left_store = start;
  1052c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052cc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1052cf:	89 01                	mov    %eax,(%ecx)
        int perm = (table[start ++] & PTE_USER);
  1052d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052d4:	89 c1                	mov    %eax,%ecx
  1052d6:	83 c1 01             	add    $0x1,%ecx
  1052d9:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  1052dc:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1052df:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  1052e2:	83 e0 07             	and    $0x7,%eax
  1052e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1052e8:	31 c0                	xor    %eax,%eax
  1052ea:	88 c1                	mov    %al,%cl
        while (start < right && (table[start] & PTE_USER) == perm) {
  1052ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052ef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  1052f2:	88 4d d2             	mov    %cl,-0x2e(%ebp)
  1052f5:	0f 83 15 00 00 00    	jae    105310 <get_pgtable_items+0xf0>
  1052fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1052fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105301:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  105304:	83 e0 07             	and    $0x7,%eax
  105307:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
  10530a:	0f 94 c2             	sete   %dl
  10530d:	88 55 d2             	mov    %dl,-0x2e(%ebp)
  105310:	8a 45 d2             	mov    -0x2e(%ebp),%al
  105313:	a8 01                	test   $0x1,%al
  105315:	0f 85 05 00 00 00    	jne    105320 <get_pgtable_items+0x100>
  10531b:	e9 0e 00 00 00       	jmp    10532e <get_pgtable_items+0x10e>
            start ++;
  105320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105323:	83 c0 01             	add    $0x1,%eax
  105326:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
  105329:	e9 ba ff ff ff       	jmp    1052e8 <get_pgtable_items+0xc8>
        if (right_store != NULL) {
  10532e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
  105332:	0f 84 08 00 00 00    	je     105340 <get_pgtable_items+0x120>
            *right_store = start;
  105338:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10533b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10533e:	89 01                	mov    %eax,(%ecx)
        return perm;
  105340:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105343:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105346:	e9 07 00 00 00       	jmp    105352 <get_pgtable_items+0x132>
    return 0;
  10534b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
}
  105352:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105355:	83 c4 24             	add    $0x24,%esp
  105358:	5e                   	pop    %esi
  105359:	5f                   	pop    %edi
  10535a:	5b                   	pop    %ebx
  10535b:	5d                   	pop    %ebp
  10535c:	c3                   	ret    
  10535d:	0f 1f 00             	nopl   (%eax)

00105360 <perm2str>:
perm2str(int perm) {
  105360:	55                   	push   %ebp
  105361:	89 e5                	mov    %esp,%ebp
  105363:	53                   	push   %ebx
  105364:	57                   	push   %edi
  105365:	56                   	push   %esi
  105366:	50                   	push   %eax
  105367:	8b 45 08             	mov    0x8(%ebp),%eax
  10536a:	8d 0d 9c 48 11 00    	lea    0x11489c,%ecx
  105370:	ba 2d 00 00 00       	mov    $0x2d,%edx
  105375:	be 77 00 00 00       	mov    $0x77,%esi
  10537a:	bf 75 00 00 00       	mov    $0x75,%edi
  10537f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    str[0] = (perm & PTE_U) ? 'u' : '-';
  105382:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105385:	83 e0 04             	and    $0x4,%eax
  105388:	83 f8 00             	cmp    $0x0,%eax
  10538b:	89 d0                	mov    %edx,%eax
  10538d:	0f 45 c7             	cmovne %edi,%eax
  105390:	88 c3                	mov    %al,%bl
  105392:	88 1d 9c 48 11 00    	mov    %bl,0x11489c
    str[1] = 'r';
  105398:	c6 05 9d 48 11 00 72 	movb   $0x72,0x11489d
    str[2] = (perm & PTE_W) ? 'w' : '-';
  10539f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1053a2:	83 e0 02             	and    $0x2,%eax
  1053a5:	83 f8 00             	cmp    $0x0,%eax
  1053a8:	0f 45 d6             	cmovne %esi,%edx
  1053ab:	88 d3                	mov    %dl,%bl
  1053ad:	88 1d 9e 48 11 00    	mov    %bl,0x11489e
    str[3] = '\0';
  1053b3:	c6 05 9f 48 11 00 00 	movb   $0x0,0x11489f
    return str;
  1053ba:	89 c8                	mov    %ecx,%eax
  1053bc:	83 c4 04             	add    $0x4,%esp
  1053bf:	5e                   	pop    %esi
  1053c0:	5f                   	pop    %edi
  1053c1:	5b                   	pop    %ebx
  1053c2:	5d                   	pop    %ebp
  1053c3:	c3                   	ret    
  1053c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  1053cb:	00 00 00 00 00 

001053d0 <init_memmap>:
init_memmap(struct Page *base, size_t n) {
  1053d0:	55                   	push   %ebp
  1053d1:	89 e5                	mov    %esp,%ebp
  1053d3:	83 ec 18             	sub    $0x18,%esp
  1053d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1053d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1053dc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1053df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pmm_manager->init_memmap(base, n);
  1053e2:	a1 24 49 11 00       	mov    0x114924,%eax
  1053e7:	8b 40 08             	mov    0x8(%eax),%eax
  1053ea:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1053ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1053f0:	89 0c 24             	mov    %ecx,(%esp)
  1053f3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1053f7:	ff d0                	call   *%eax
}
  1053f9:	83 c4 18             	add    $0x18,%esp
  1053fc:	5d                   	pop    %ebp
  1053fd:	c3                   	ret    
  1053fe:	66 90                	xchg   %ax,%ax

00105400 <pa2page>:
pa2page(uintptr_t pa) {
  105400:	55                   	push   %ebp
  105401:	89 e5                	mov    %esp,%ebp
  105403:	83 ec 18             	sub    $0x18,%esp
  105406:	8b 45 08             	mov    0x8(%ebp),%eax
  105409:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (PPN(pa) >= npage) {
  10540c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10540f:	c1 e8 0c             	shr    $0xc,%eax
  105412:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  105418:	0f 82 28 00 00 00    	jb     105446 <pa2page+0x46>
  10541e:	8d 05 48 f8 10 00    	lea    0x10f848,%eax
  105424:	b9 5a 00 00 00       	mov    $0x5a,%ecx
  105429:	8d 15 56 f8 10 00    	lea    0x10f856,%edx
        panic("pa2page called with invalid pa");
  10542f:	89 04 24             	mov    %eax,(%esp)
  105432:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
  105439:	00 
  10543a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10543e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105441:	e8 0a b0 ff ff       	call   100450 <__panic>
    return &pages[PPN(pa)];
  105446:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105449:	c1 e8 0c             	shr    $0xc,%eax
  10544c:	6b c0 14             	imul   $0x14,%eax,%eax
  10544f:	03 05 2c 49 11 00    	add    0x11492c,%eax
  105455:	83 c4 18             	add    $0x18,%esp
  105458:	5d                   	pop    %ebp
  105459:	c3                   	ret    
  10545a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105460 <page2kva>:
page2kva(struct Page *page) {
  105460:	55                   	push   %ebp
  105461:	89 e5                	mov    %esp,%ebp
  105463:	56                   	push   %esi
  105464:	83 ec 24             	sub    $0x24,%esp
  105467:	8b 45 08             	mov    0x8(%ebp),%eax
  10546a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return KADDR(page2pa(page));
  10546d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105470:	89 04 24             	mov    %eax,(%esp)
  105473:	e8 d8 f9 ff ff       	call   104e50 <page2pa>
  105478:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10547b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10547e:	c1 e8 0c             	shr    $0xc,%eax
  105481:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105484:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105487:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  10548d:	0f 82 2f 00 00 00    	jb     1054c2 <page2kva+0x62>
  105493:	8d 05 48 f8 10 00    	lea    0x10f848,%eax
  105499:	b9 61 00 00 00       	mov    $0x61,%ecx
  10549e:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  1054a4:	8b 75 f4             	mov    -0xc(%ebp),%esi
  1054a7:	89 04 24             	mov    %eax,(%esp)
  1054aa:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
  1054b1:	00 
  1054b2:	89 54 24 08          	mov    %edx,0x8(%esp)
  1054b6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1054ba:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1054bd:	e8 8e af ff ff       	call   100450 <__panic>
  1054c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1054c5:	05 00 00 00 c0       	add    $0xc0000000,%eax
  1054ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1054cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1054d0:	83 c4 24             	add    $0x24,%esp
  1054d3:	5e                   	pop    %esi
  1054d4:	5d                   	pop    %ebp
  1054d5:	c3                   	ret    
  1054d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  1054dd:	00 00 00 

001054e0 <lgdt>:
lgdt(struct pseudodesc *pd) {
  1054e0:	55                   	push   %ebp
  1054e1:	89 e5                	mov    %esp,%ebp
  1054e3:	50                   	push   %eax
  1054e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1054e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    asm volatile ("lgdt (%0)" :: "r" (pd));
  1054ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1054ed:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
  1054f0:	b8 23 00 00 00       	mov    $0x23,%eax
  1054f5:	66 8e e8             	mov    %ax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
  1054f8:	b8 23 00 00 00       	mov    $0x23,%eax
  1054fd:	66 8e e0             	mov    %ax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
  105500:	b8 10 00 00 00       	mov    $0x10,%eax
  105505:	66 8e c0             	mov    %ax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
  105508:	b8 10 00 00 00       	mov    $0x10,%eax
  10550d:	66 8e d8             	mov    %ax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
  105510:	b8 10 00 00 00       	mov    $0x10,%eax
  105515:	66 8e d0             	mov    %ax,%ss
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
  105518:	ea 1f 55 10 00 08 00 	ljmp   $0x8,$0x10551f
}
  10551f:	83 c4 04             	add    $0x4,%esp
  105522:	5d                   	pop    %ebp
  105523:	c3                   	ret    
  105524:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10552b:	00 00 00 00 00 

00105530 <page2ppn>:
page2ppn(struct Page *page) {
  105530:	55                   	push   %ebp
  105531:	89 e5                	mov    %esp,%ebp
  105533:	50                   	push   %eax
  105534:	8b 45 08             	mov    0x8(%ebp),%eax
  105537:	b9 14 00 00 00       	mov    $0x14,%ecx
  10553c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
  10553f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105542:	8b 15 2c 49 11 00    	mov    0x11492c,%edx
  105548:	29 d0                	sub    %edx,%eax
  10554a:	99                   	cltd   
  10554b:	f7 f9                	idiv   %ecx
  10554d:	83 c4 04             	add    $0x4,%esp
  105550:	5d                   	pop    %ebp
  105551:	c3                   	ret    
  105552:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  105559:	1f 84 00 00 00 00 00 

00105560 <page_ref>:
page_ref(struct Page *page) {
  105560:	55                   	push   %ebp
  105561:	89 e5                	mov    %esp,%ebp
  105563:	50                   	push   %eax
  105564:	8b 45 08             	mov    0x8(%ebp),%eax
  105567:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
  10556a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10556d:	8b 00                	mov    (%eax),%eax
  10556f:	83 c4 04             	add    $0x4,%esp
  105572:	5d                   	pop    %ebp
  105573:	c3                   	ret    
  105574:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10557b:	00 00 00 00 00 

00105580 <pde2page>:
pde2page(pde_t pde) {
  105580:	55                   	push   %ebp
  105581:	89 e5                	mov    %esp,%ebp
  105583:	83 ec 08             	sub    $0x8,%esp
  105586:	8b 45 08             	mov    0x8(%ebp),%eax
  105589:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return pa2page(PDE_ADDR(pde));
  10558c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10558f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105594:	89 04 24             	mov    %eax,(%esp)
  105597:	e8 64 fe ff ff       	call   105400 <pa2page>
  10559c:	83 c4 08             	add    $0x8,%esp
  10559f:	5d                   	pop    %ebp
  1055a0:	c3                   	ret    
  1055a1:	66 90                	xchg   %ax,%ax
  1055a3:	66 90                	xchg   %ax,%ax
  1055a5:	66 90                	xchg   %ax,%ax
  1055a7:	66 90                	xchg   %ax,%ax
  1055a9:	66 90                	xchg   %ax,%ax
  1055ab:	66 90                	xchg   %ax,%ax
  1055ad:	66 90                	xchg   %ax,%ax
  1055af:	90                   	nop

001055b0 <kmem_sized_index>:
    list_del(&(page->page_link));
    free_page(page);
}

int 
kmem_sized_index(size_t size) {
  1055b0:	55                   	push   %ebp
  1055b1:	89 e5                	mov    %esp,%ebp
  1055b3:	83 ec 28             	sub    $0x28,%esp
  1055b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1055b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // Round up 
    size_t rsize = ROUNDUP(size, 2);
  1055bc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
  1055c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1055c6:	03 45 f4             	add    -0xc(%ebp),%eax
  1055c9:	83 e8 01             	sub    $0x1,%eax
  1055cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
  1055cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1055d2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1055d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
  1055d8:	89 c8                	mov    %ecx,%eax
  1055da:	31 d2                	xor    %edx,%edx
  1055dc:	f7 75 f4             	divl   -0xc(%ebp)
  1055df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  1055e2:	29 d1                	sub    %edx,%ecx
  1055e4:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1055e7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1055ea:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1055ed:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1055f0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    if (rsize < SIZED_CACHE_MIN)
  1055f3:	83 7d f8 10          	cmpl   $0x10,-0x8(%ebp)
  1055f7:	0f 83 07 00 00 00    	jae    105604 <kmem_sized_index+0x54>
        rsize = SIZED_CACHE_MIN;
  1055fd:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%ebp)
    // Find index
    int index = 0;
  105604:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (int t = rsize / 32; t; t /= 2)
  10560b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10560e:	c1 e8 05             	shr    $0x5,%eax
  105611:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105614:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  105618:	0f 84 24 00 00 00    	je     105642 <kmem_sized_index+0x92>
        index ++;
  10561e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105621:	83 c0 01             	add    $0x1,%eax
  105624:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105627:	b8 02 00 00 00       	mov    $0x2,%eax
    for (int t = rsize / 32; t; t /= 2)
  10562c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10562f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105632:	89 c8                	mov    %ecx,%eax
  105634:	99                   	cltd   
  105635:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105638:	f7 f9                	idiv   %ecx
  10563a:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10563d:	e9 d2 ff ff ff       	jmp    105614 <kmem_sized_index+0x64>
    return index;
  105642:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105645:	83 c4 28             	add    $0x28,%esp
  105648:	5d                   	pop    %ebp
  105649:	c3                   	ret    
  10564a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00105650 <kmem_cache_create>:

// kmem_cache_create - create a kmem_cache
struct kmem_cache_t *
kmem_cache_create(const char *name, size_t size,
                       void (*ctor)(void*, struct kmem_cache_t *, size_t),
                       void (*dtor)(void*, struct kmem_cache_t *, size_t)) {
  105650:	55                   	push   %ebp
  105651:	89 e5                	mov    %esp,%ebp
  105653:	53                   	push   %ebx
  105654:	57                   	push   %edi
  105655:	56                   	push   %esi
  105656:	83 ec 5c             	sub    $0x5c,%esp
  105659:	8b 45 14             	mov    0x14(%ebp),%eax
  10565c:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10565f:	8b 55 0c             	mov    0xc(%ebp),%edx
  105662:	8b 75 08             	mov    0x8(%ebp),%esi
  105665:	89 75 c8             	mov    %esi,-0x38(%ebp)
  105668:	89 55 c4             	mov    %edx,-0x3c(%ebp)
  10566b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10566e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    assert(size <= (PGSIZE - 2));
  105671:	81 7d c4 fe 0f 00 00 	cmpl   $0xffe,-0x3c(%ebp)
  105678:	0f 86 32 00 00 00    	jbe    1056b0 <kmem_cache_create+0x60>
  10567e:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  105684:	b9 ba 00 00 00       	mov    $0xba,%ecx
  105689:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10568f:	8d 35 31 fd 10 00    	lea    0x10fd31,%esi
  105695:	89 04 24             	mov    %eax,(%esp)
  105698:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
  10569f:	00 
  1056a0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1056a4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1056a8:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1056ab:	e8 a0 ad ff ff       	call   100450 <__panic>
  1056b0:	e9 00 00 00 00       	jmp    1056b5 <kmem_cache_create+0x65>
  1056b5:	8d 05 a0 48 11 00    	lea    0x1148a0,%eax
    struct kmem_cache_t *cachep = kmem_cache_alloc(&(cache_cache));
  1056bb:	89 04 24             	mov    %eax,(%esp)
  1056be:	e8 1d 01 00 00       	call   1057e0 <kmem_cache_alloc>
  1056c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
    if (cachep != NULL) {
  1056c6:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  1056ca:	0f 84 fe 00 00 00    	je     1057ce <kmem_cache_create+0x17e>
  1056d0:	b8 10 00 00 00       	mov    $0x10,%eax
  1056d5:	b9 00 10 00 00       	mov    $0x1000,%ecx
        cachep->objsize = size;
  1056da:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1056dd:	66 89 d6             	mov    %dx,%si
  1056e0:	8b 55 b8             	mov    -0x48(%ebp),%edx
  1056e3:	66 89 72 18          	mov    %si,0x18(%edx)
        cachep->num = PGSIZE / (sizeof(int16_t) + size);
  1056e7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1056ea:	83 c2 02             	add    $0x2,%edx
  1056ed:	89 45 b0             	mov    %eax,-0x50(%ebp)
  1056f0:	89 c8                	mov    %ecx,%eax
  1056f2:	31 c9                	xor    %ecx,%ecx
  1056f4:	89 55 ac             	mov    %edx,-0x54(%ebp)
  1056f7:	89 ca                	mov    %ecx,%edx
  1056f9:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1056fc:	f7 f1                	div    %ecx
  1056fe:	66 89 c6             	mov    %ax,%si
  105701:	8b 45 b8             	mov    -0x48(%ebp),%eax
  105704:	66 89 70 1a          	mov    %si,0x1a(%eax)
        cachep->ctor = ctor;
  105708:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10570b:	8b 7d b8             	mov    -0x48(%ebp),%edi
  10570e:	89 47 1c             	mov    %eax,0x1c(%edi)
        cachep->dtor = dtor;
  105711:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105714:	8b 7d b8             	mov    -0x48(%ebp),%edi
  105717:	89 47 20             	mov    %eax,0x20(%edi)
        memcpy(cachep->name, name, CACHE_NAMELEN);
  10571a:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10571d:	83 c0 24             	add    $0x24,%eax
  105720:	8b 7d c8             	mov    -0x38(%ebp),%edi
  105723:	89 04 24             	mov    %eax,(%esp)
  105726:	89 7c 24 04          	mov    %edi,0x4(%esp)
  10572a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  105731:	00 
  105732:	e8 b9 8d 00 00       	call   10e4f0 <memcpy>
  105737:	8d 0d dc 48 11 00    	lea    0x1148dc,%ecx
        list_init(&(cachep->slabs_full));
  10573d:	8b 7d b8             	mov    -0x48(%ebp),%edi
  105740:	89 7d cc             	mov    %edi,-0x34(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
  105743:	8b 7d cc             	mov    -0x34(%ebp),%edi
  105746:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  105749:	89 7b 04             	mov    %edi,0x4(%ebx)
  10574c:	8b 5d cc             	mov    -0x34(%ebp),%ebx
  10574f:	89 3b                	mov    %edi,(%ebx)
        list_init(&(cachep->slabs_partial));
  105751:	8b 7d b8             	mov    -0x48(%ebp),%edi
  105754:	83 c7 08             	add    $0x8,%edi
  105757:	89 7d f0             	mov    %edi,-0x10(%ebp)
  10575a:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10575d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  105760:	89 7b 04             	mov    %edi,0x4(%ebx)
  105763:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  105766:	89 3b                	mov    %edi,(%ebx)
        list_init(&(cachep->slabs_free));
  105768:	8b 7d b8             	mov    -0x48(%ebp),%edi
  10576b:	83 c7 10             	add    $0x10,%edi
  10576e:	89 7d ec             	mov    %edi,-0x14(%ebp)
  105771:	8b 7d ec             	mov    -0x14(%ebp),%edi
  105774:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  105777:	89 7b 04             	mov    %edi,0x4(%ebx)
  10577a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  10577d:	89 3b                	mov    %edi,(%ebx)
        list_add(&(cache_chain), &(cachep->cache_link));
  10577f:	8b 7d b8             	mov    -0x48(%ebp),%edi
  105782:	83 c7 34             	add    $0x34,%edi
  105785:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  105788:	89 7d d0             	mov    %edi,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add(list_entry_t *listelm, list_entry_t *elm) {
    list_add_after(listelm, elm);
  10578b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10578e:	8b 7d d0             	mov    -0x30(%ebp),%edi
  105791:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  105794:	89 7d d8             	mov    %edi,-0x28(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
  105797:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10579a:	8b 7d dc             	mov    -0x24(%ebp),%edi
  10579d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  1057a0:	8b 5b 04             	mov    0x4(%ebx),%ebx
  1057a3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  1057a6:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  1057a9:	89 5d e0             	mov    %ebx,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
  1057ac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1057af:	8b 7d e0             	mov    -0x20(%ebp),%edi
  1057b2:	89 0f                	mov    %ecx,(%edi)
  1057b4:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  1057b7:	89 4f 04             	mov    %ecx,0x4(%edi)
    elm->next = next;
  1057ba:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  1057bd:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1057c0:	89 4f 04             	mov    %ecx,0x4(%edi)
    elm->prev = prev;
  1057c3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1057c6:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1057c9:	89 0f                	mov    %ecx,(%edi)
  1057cb:	89 45 a8             	mov    %eax,-0x58(%ebp)
    }
    return cachep;
  1057ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1057d1:	83 c4 5c             	add    $0x5c,%esp
  1057d4:	5e                   	pop    %esi
  1057d5:	5f                   	pop    %edi
  1057d6:	5b                   	pop    %ebx
  1057d7:	5d                   	pop    %ebp
  1057d8:	c3                   	ret    
  1057d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

001057e0 <kmem_cache_alloc>:
    kmem_cache_free(&(cache_cache), cachep);
}   

// kmem_cache_alloc - allocate an object
void *
kmem_cache_alloc(struct kmem_cache_t *cachep) {
  1057e0:	55                   	push   %ebp
  1057e1:	89 e5                	mov    %esp,%ebp
  1057e3:	56                   	push   %esi
  1057e4:	81 ec 84 00 00 00    	sub    $0x84,%esp
  1057ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1057ed:	89 45 a0             	mov    %eax,-0x60(%ebp)
    list_entry_t *le = NULL;
  1057f0:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
    // Find in partial list 
    if (!list_empty(&(cachep->slabs_partial)))
  1057f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
  1057fa:	83 c0 08             	add    $0x8,%eax
  1057fd:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return list->next == list;
  105800:	8b 45 a8             	mov    -0x58(%ebp),%eax
  105803:	8b 40 04             	mov    0x4(%eax),%eax
  105806:	3b 45 a8             	cmp    -0x58(%ebp),%eax
  105809:	0f 94 c1             	sete   %cl
  10580c:	80 e1 01             	and    $0x1,%cl
  10580f:	0f b6 c1             	movzbl %cl,%eax
  105812:	83 f8 00             	cmp    $0x0,%eax
  105815:	0f 85 17 00 00 00    	jne    105832 <kmem_cache_alloc+0x52>
        le = list_next(&(cachep->slabs_partial));
  10581b:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10581e:	83 c0 08             	add    $0x8,%eax
  105821:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
  105824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105827:	8b 40 04             	mov    0x4(%eax),%eax
  10582a:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10582d:	e9 56 00 00 00       	jmp    105888 <kmem_cache_alloc+0xa8>
    // Find in empty list 
    else {
        if (list_empty(&(cachep->slabs_free)) && kmem_cache_grow(cachep) == NULL)
  105832:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105835:	83 c0 10             	add    $0x10,%eax
  105838:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return list->next == list;
  10583b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10583e:	8b 40 04             	mov    0x4(%eax),%eax
  105841:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  105844:	0f 94 c1             	sete   %cl
  105847:	80 e1 01             	and    $0x1,%cl
  10584a:	0f b6 c1             	movzbl %cl,%eax
  10584d:	83 f8 00             	cmp    $0x0,%eax
  105850:	0f 84 20 00 00 00    	je     105876 <kmem_cache_alloc+0x96>
  105856:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105859:	89 04 24             	mov    %eax,(%esp)
  10585c:	e8 7f 05 00 00       	call   105de0 <kmem_cache_grow>
  105861:	83 f8 00             	cmp    $0x0,%eax
  105864:	0f 85 0c 00 00 00    	jne    105876 <kmem_cache_alloc+0x96>
            return NULL;
  10586a:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
  105871:	e9 6a 01 00 00       	jmp    1059e0 <kmem_cache_alloc+0x200>
        le = list_next(&(cachep->slabs_free));
  105876:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105879:	83 c0 10             	add    $0x10,%eax
  10587c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return listelm->next;
  10587f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105882:	8b 40 04             	mov    0x4(%eax),%eax
  105885:	89 45 9c             	mov    %eax,-0x64(%ebp)
  105888:	31 c0                	xor    %eax,%eax
  10588a:	89 c1                	mov    %eax,%ecx
  10588c:	83 c1 0c             	add    $0xc,%ecx
  10588f:	29 c8                	sub    %ecx,%eax
    }
    // Alloc 
    list_del(le);
  105891:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105894:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
  105897:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10589a:	8b 09                	mov    (%ecx),%ecx
  10589c:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10589f:	8b 52 04             	mov    0x4(%edx),%edx
  1058a2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  1058a5:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
  1058a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1058ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1058ae:	89 4a 04             	mov    %ecx,0x4(%edx)
    next->prev = prev;
  1058b1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1058b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1058b7:	89 0a                	mov    %ecx,(%edx)
    struct slab_t *slab = le2slab(le, page_link);
  1058b9:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  1058bc:	01 c1                	add    %eax,%ecx
  1058be:	89 4d 98             	mov    %ecx,-0x68(%ebp)
    void *kva = slab2kva(slab);
  1058c1:	8b 45 98             	mov    -0x68(%ebp),%eax
  1058c4:	89 04 24             	mov    %eax,(%esp)
  1058c7:	e8 94 06 00 00       	call   105f60 <page2kva>
  1058cc:	89 45 94             	mov    %eax,-0x6c(%ebp)
    int16_t *bufctl = kva;
  1058cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1058d2:	89 45 90             	mov    %eax,-0x70(%ebp)
    void *buf = bufctl + cachep->num;
  1058d5:	8b 45 90             	mov    -0x70(%ebp),%eax
  1058d8:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  1058db:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  1058df:	c1 e1 01             	shl    $0x1,%ecx
  1058e2:	01 c8                	add    %ecx,%eax
  1058e4:	89 45 8c             	mov    %eax,-0x74(%ebp)
    void *objp = buf + slab->free * cachep->objsize;
  1058e7:	8b 45 8c             	mov    -0x74(%ebp),%eax
  1058ea:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  1058ed:	0f b7 49 0a          	movzwl 0xa(%ecx),%ecx
  1058f1:	8b 55 a0             	mov    -0x60(%ebp),%edx
  1058f4:	0f b7 52 18          	movzwl 0x18(%edx),%edx
  1058f8:	0f af ca             	imul   %edx,%ecx
  1058fb:	01 c8                	add    %ecx,%eax
  1058fd:	89 45 88             	mov    %eax,-0x78(%ebp)
    // Update slab
    slab->inuse ++;
  105900:	8b 45 98             	mov    -0x68(%ebp),%eax
  105903:	66 8b 70 08          	mov    0x8(%eax),%si
  105907:	66 83 c6 01          	add    $0x1,%si
  10590b:	66 89 70 08          	mov    %si,0x8(%eax)
    slab->free = bufctl[slab->free];
  10590f:	8b 45 98             	mov    -0x68(%ebp),%eax
  105912:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
  105916:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  105919:	66 8b 34 41          	mov    (%ecx,%eax,2),%si
  10591d:	8b 45 98             	mov    -0x68(%ebp),%eax
  105920:	66 89 70 0a          	mov    %si,0xa(%eax)
    if (slab->inuse == cachep->num)
  105924:	8b 45 98             	mov    -0x68(%ebp),%eax
  105927:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  10592b:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  10592e:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  105932:	39 c8                	cmp    %ecx,%eax
  105934:	0f 85 51 00 00 00    	jne    10598b <kmem_cache_alloc+0x1ab>
        list_add(&(cachep->slabs_full), le);
  10593a:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10593d:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105940:	89 45 cc             	mov    %eax,-0x34(%ebp)
  105943:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    list_add_after(listelm, elm);
  105946:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105949:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10594c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10594f:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    __list_add(elm, listelm, listelm->next);
  105952:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105955:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  105958:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10595b:	8b 52 04             	mov    0x4(%edx),%edx
  10595e:	89 45 e0             	mov    %eax,-0x20(%ebp)
  105961:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  105964:	89 55 d8             	mov    %edx,-0x28(%ebp)
    prev->next = next->prev = elm;
  105967:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10596a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10596d:	89 01                	mov    %eax,(%ecx)
  10596f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105972:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  105975:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105978:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10597b:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10597e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105981:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105984:	89 01                	mov    %eax,(%ecx)
  105986:	e9 4f 00 00 00       	jmp    1059da <kmem_cache_alloc+0x1fa>
    else 
        list_add(&(cachep->slabs_partial), le);
  10598b:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10598e:	83 c0 08             	add    $0x8,%eax
  105991:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105994:	89 45 b0             	mov    %eax,-0x50(%ebp)
  105997:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    list_add_after(listelm, elm);
  10599a:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10599d:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  1059a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1059a3:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    __list_add(elm, listelm, listelm->next);
  1059a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  1059a9:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  1059ac:	8b 55 b8             	mov    -0x48(%ebp),%edx
  1059af:	8b 52 04             	mov    0x4(%edx),%edx
  1059b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1059b5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  1059b8:	89 55 bc             	mov    %edx,-0x44(%ebp)
    prev->next = next->prev = elm;
  1059bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1059be:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  1059c1:	89 01                	mov    %eax,(%ecx)
  1059c3:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  1059c6:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  1059c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
  1059cc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1059cf:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  1059d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1059d5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  1059d8:	89 01                	mov    %eax,(%ecx)
    return objp;
  1059da:	8b 45 88             	mov    -0x78(%ebp),%eax
  1059dd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
}
  1059e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  1059e3:	81 c4 84 00 00 00    	add    $0x84,%esp
  1059e9:	5e                   	pop    %esi
  1059ea:	5d                   	pop    %ebp
  1059eb:	c3                   	ret    
  1059ec:	0f 1f 40 00          	nopl   0x0(%eax)

001059f0 <kmem_cache_destroy>:
kmem_cache_destroy(struct kmem_cache_t *cachep) {
  1059f0:	55                   	push   %ebp
  1059f1:	89 e5                	mov    %esp,%ebp
  1059f3:	83 ec 38             	sub    $0x38,%esp
  1059f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1059f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    head = &(cachep->slabs_full);
  1059fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1059ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
  105a02:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105a05:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
  105a08:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105a0b:	8b 40 04             	mov    0x4(%eax),%eax
  105a0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
  105a11:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105a14:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  105a17:	0f 84 37 00 00 00    	je     105a54 <kmem_cache_destroy+0x64>
  105a1d:	31 c0                	xor    %eax,%eax
  105a1f:	89 c1                	mov    %eax,%ecx
  105a21:	83 c1 0c             	add    $0xc,%ecx
  105a24:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
  105a26:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105a29:	89 4d d8             	mov    %ecx,-0x28(%ebp)
        le = list_next(le);
  105a2c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105a2f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105a32:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105a35:	8b 49 04             	mov    0x4(%ecx),%ecx
  105a38:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
  105a3b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105a3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
  105a41:	01 c2                	add    %eax,%edx
  105a43:	89 0c 24             	mov    %ecx,(%esp)
  105a46:	89 54 24 04          	mov    %edx,0x4(%esp)
  105a4a:	e8 e1 00 00 00       	call   105b30 <kmem_slab_destroy>
    while (le != head) {
  105a4f:	e9 bd ff ff ff       	jmp    105a11 <kmem_cache_destroy+0x21>
    head = &(cachep->slabs_partial);
  105a54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105a57:	83 c0 08             	add    $0x8,%eax
  105a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
  105a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105a60:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a66:	8b 40 04             	mov    0x4(%eax),%eax
  105a69:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
  105a6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105a6f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  105a72:	0f 84 37 00 00 00    	je     105aaf <kmem_cache_destroy+0xbf>
  105a78:	31 c0                	xor    %eax,%eax
  105a7a:	89 c1                	mov    %eax,%ecx
  105a7c:	83 c1 0c             	add    $0xc,%ecx
  105a7f:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
  105a81:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105a84:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
        le = list_next(le);
  105a87:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105a8a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  105a8d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  105a90:	8b 49 04             	mov    0x4(%ecx),%ecx
  105a93:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
  105a96:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105a99:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  105a9c:	01 c2                	add    %eax,%edx
  105a9e:	89 0c 24             	mov    %ecx,(%esp)
  105aa1:	89 54 24 04          	mov    %edx,0x4(%esp)
  105aa5:	e8 86 00 00 00       	call   105b30 <kmem_slab_destroy>
    while (le != head) {
  105aaa:	e9 bd ff ff ff       	jmp    105a6c <kmem_cache_destroy+0x7c>
    head = &(cachep->slabs_free);
  105aaf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105ab2:	83 c0 10             	add    $0x10,%eax
  105ab5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
  105ab8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105abb:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105abe:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105ac1:	8b 40 04             	mov    0x4(%eax),%eax
  105ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
  105ac7:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105aca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  105acd:	0f 84 37 00 00 00    	je     105b0a <kmem_cache_destroy+0x11a>
  105ad3:	31 c0                	xor    %eax,%eax
  105ad5:	89 c1                	mov    %eax,%ecx
  105ad7:	83 c1 0c             	add    $0xc,%ecx
  105ada:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
  105adc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105adf:	89 4d d0             	mov    %ecx,-0x30(%ebp)
        le = list_next(le);
  105ae2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105ae5:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105ae8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105aeb:	8b 49 04             	mov    0x4(%ecx),%ecx
  105aee:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
  105af1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105af4:	8b 55 d0             	mov    -0x30(%ebp),%edx
  105af7:	01 c2                	add    %eax,%edx
  105af9:	89 0c 24             	mov    %ecx,(%esp)
  105afc:	89 54 24 04          	mov    %edx,0x4(%esp)
  105b00:	e8 2b 00 00 00       	call   105b30 <kmem_slab_destroy>
    while (le != head) {
  105b05:	e9 bd ff ff ff       	jmp    105ac7 <kmem_cache_destroy+0xd7>
  105b0a:	8d 05 a0 48 11 00    	lea    0x1148a0,%eax
    kmem_cache_free(&(cache_cache), cachep);
  105b10:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105b13:	89 04 24             	mov    %eax,(%esp)
  105b16:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  105b1a:	e8 21 01 00 00       	call   105c40 <kmem_cache_free>
}   
  105b1f:	83 c4 38             	add    $0x38,%esp
  105b22:	5d                   	pop    %ebp
  105b23:	c3                   	ret    
  105b24:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  105b2b:	00 00 00 00 00 

00105b30 <kmem_slab_destroy>:
kmem_slab_destroy(struct kmem_cache_t *cachep, struct slab_t *slab) {
  105b30:	55                   	push   %ebp
  105b31:	89 e5                	mov    %esp,%ebp
  105b33:	56                   	push   %esi
  105b34:	83 ec 34             	sub    $0x34,%esp
  105b37:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105b3d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  105b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct Page *page = (struct Page *) slab;
  105b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105b46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int16_t *bufctl = page2kva(page);
  105b49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105b4c:	89 04 24             	mov    %eax,(%esp)
  105b4f:	e8 0c 04 00 00       	call   105f60 <page2kva>
  105b54:	89 45 e0             	mov    %eax,-0x20(%ebp)
    void *buf = bufctl + cachep->num;
  105b57:	8b 45 e0             	mov    -0x20(%ebp),%eax
  105b5a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105b5d:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  105b61:	c1 e1 01             	shl    $0x1,%ecx
  105b64:	01 c8                	add    %ecx,%eax
  105b66:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (cachep->dtor)
  105b69:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105b6c:	83 78 20 00          	cmpl   $0x0,0x20(%eax)
  105b70:	0f 84 5e 00 00 00    	je     105bd4 <kmem_slab_destroy+0xa4>
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
  105b76:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105b79:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105b7c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105b7f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105b85:	0f b7 52 18          	movzwl 0x18(%edx),%edx
  105b89:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105b8c:	0f b7 76 1a          	movzwl 0x1a(%esi),%esi
  105b90:	0f af d6             	imul   %esi,%edx
  105b93:	01 d1                	add    %edx,%ecx
  105b95:	39 c8                	cmp    %ecx,%eax
  105b97:	0f 83 32 00 00 00    	jae    105bcf <kmem_slab_destroy+0x9f>
            cachep->dtor(p, cachep, cachep->objsize);
  105b9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105ba0:	8b 40 20             	mov    0x20(%eax),%eax
  105ba3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105ba6:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105ba9:	8b 75 ec             	mov    -0x14(%ebp),%esi
  105bac:	0f b7 76 18          	movzwl 0x18(%esi),%esi
  105bb0:	89 0c 24             	mov    %ecx,(%esp)
  105bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
  105bb7:	89 74 24 08          	mov    %esi,0x8(%esp)
  105bbb:	ff d0                	call   *%eax
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
  105bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105bc0:	0f b7 40 18          	movzwl 0x18(%eax),%eax
  105bc4:	03 45 d8             	add    -0x28(%ebp),%eax
  105bc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
  105bca:	e9 ad ff ff ff       	jmp    105b7c <kmem_slab_destroy+0x4c>
            cachep->dtor(p, cachep, cachep->objsize);
  105bcf:	e9 00 00 00 00       	jmp    105bd4 <kmem_slab_destroy+0xa4>
  105bd4:	b8 01 00 00 00       	mov    $0x1,%eax
    page->property = page->flags = 0;
  105bd9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105bdc:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
  105be3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105be6:	c7 41 08 00 00 00 00 	movl   $0x0,0x8(%ecx)
    list_del(&(page->page_link));
  105bed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105bf0:	83 c1 0c             	add    $0xc,%ecx
  105bf3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    __list_del(listelm->prev, listelm->next);
  105bf6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105bf9:	8b 09                	mov    (%ecx),%ecx
  105bfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105bfe:	8b 52 04             	mov    0x4(%edx),%edx
  105c01:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  105c04:	89 55 f4             	mov    %edx,-0xc(%ebp)
    prev->next = next;
  105c07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105c0a:	8b 55 f8             	mov    -0x8(%ebp),%edx
  105c0d:	89 4a 04             	mov    %ecx,0x4(%edx)
    next->prev = prev;
  105c10:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105c13:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105c16:	89 0a                	mov    %ecx,(%edx)
    free_page(page);
  105c18:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  105c1b:	89 0c 24             	mov    %ecx,(%esp)
  105c1e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  105c25:	00 
  105c26:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  105c29:	e8 92 d4 ff ff       	call   1030c0 <free_pages>
}
  105c2e:	83 c4 34             	add    $0x34,%esp
  105c31:	5e                   	pop    %esi
  105c32:	5d                   	pop    %ebp
  105c33:	c3                   	ret    
  105c34:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  105c3b:	00 00 00 00 00 

00105c40 <kmem_cache_free>:
    return objp;
}

// kmem_cache_free - free an object
void 
kmem_cache_free(struct kmem_cache_t *cachep, void *objp) {
  105c40:	55                   	push   %ebp
  105c41:	89 e5                	mov    %esp,%ebp
  105c43:	56                   	push   %esi
  105c44:	83 ec 74             	sub    $0x74,%esp
  105c47:	8b 45 0c             	mov    0xc(%ebp),%eax
  105c4a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  105c4d:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  105c50:	89 45 b0             	mov    %eax,-0x50(%ebp)
    // Get slab of object 
    void *base = page2kva(pages);
  105c53:	a1 2c 49 11 00       	mov    0x11492c,%eax
  105c58:	89 04 24             	mov    %eax,(%esp)
  105c5b:	e8 00 03 00 00       	call   105f60 <page2kva>
  105c60:	b9 00 10 00 00       	mov    $0x1000,%ecx
  105c65:	89 45 ac             	mov    %eax,-0x54(%ebp)
    void *kva = ROUNDDOWN(objp, PGSIZE);
  105c68:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105c6b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  105c6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  105c71:	8b 55 a4             	mov    -0x5c(%ebp),%edx
  105c74:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  105c7a:	29 d0                	sub    %edx,%eax
  105c7c:	89 45 a0             	mov    %eax,-0x60(%ebp)
  105c7f:	8b 45 a0             	mov    -0x60(%ebp),%eax
  105c82:	89 45 a8             	mov    %eax,-0x58(%ebp)
    struct slab_t *slab = (struct slab_t *) &pages[(kva-base)/PGSIZE];
  105c85:	8b 45 a8             	mov    -0x58(%ebp),%eax
  105c88:	8b 55 ac             	mov    -0x54(%ebp),%edx
  105c8b:	29 d0                	sub    %edx,%eax
  105c8d:	99                   	cltd   
  105c8e:	f7 f9                	idiv   %ecx
  105c90:	6b c0 14             	imul   $0x14,%eax,%eax
  105c93:	03 05 2c 49 11 00    	add    0x11492c,%eax
  105c99:	89 45 9c             	mov    %eax,-0x64(%ebp)
    // Get offset in slab
    int16_t *bufctl = kva;
  105c9c:	8b 45 a8             	mov    -0x58(%ebp),%eax
  105c9f:	89 45 98             	mov    %eax,-0x68(%ebp)
    void *buf = bufctl + cachep->num;
  105ca2:	8b 45 98             	mov    -0x68(%ebp),%eax
  105ca5:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  105ca8:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  105cac:	c1 e1 01             	shl    $0x1,%ecx
  105caf:	01 c8                	add    %ecx,%eax
  105cb1:	89 45 94             	mov    %eax,-0x6c(%ebp)
    int offset = (objp - buf) / cachep->objsize;
  105cb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
  105cb7:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  105cba:	29 c8                	sub    %ecx,%eax
  105cbc:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  105cbf:	0f b7 49 18          	movzwl 0x18(%ecx),%ecx
  105cc3:	99                   	cltd   
  105cc4:	f7 f9                	idiv   %ecx
  105cc6:	89 45 90             	mov    %eax,-0x70(%ebp)
    // Update slab 
    list_del(&(slab->slab_link));
  105cc9:	8b 45 9c             	mov    -0x64(%ebp),%eax
  105ccc:	83 c0 0c             	add    $0xc,%eax
  105ccf:	89 45 b8             	mov    %eax,-0x48(%ebp)
    __list_del(listelm->prev, listelm->next);
  105cd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
  105cd5:	8b 00                	mov    (%eax),%eax
  105cd7:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  105cda:	8b 49 04             	mov    0x4(%ecx),%ecx
  105cdd:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105ce0:	89 4d bc             	mov    %ecx,-0x44(%ebp)
    prev->next = next;
  105ce3:	8b 45 bc             	mov    -0x44(%ebp),%eax
  105ce6:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105ce9:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
  105cec:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105cef:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  105cf2:	89 01                	mov    %eax,(%ecx)
    bufctl[offset] = slab->free;
  105cf4:	8b 45 9c             	mov    -0x64(%ebp),%eax
  105cf7:	66 8b 70 0a          	mov    0xa(%eax),%si
  105cfb:	8b 45 90             	mov    -0x70(%ebp),%eax
  105cfe:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  105d01:	66 89 34 41          	mov    %si,(%ecx,%eax,2)
    slab->inuse --;
  105d05:	8b 45 9c             	mov    -0x64(%ebp),%eax
  105d08:	66 8b 70 08          	mov    0x8(%eax),%si
  105d0c:	66 83 c6 ff          	add    $0xffff,%si
  105d10:	66 89 70 08          	mov    %si,0x8(%eax)
    slab->free = offset;
  105d14:	8b 45 90             	mov    -0x70(%ebp),%eax
  105d17:	66 89 c6             	mov    %ax,%si
  105d1a:	8b 45 9c             	mov    -0x64(%ebp),%eax
  105d1d:	66 89 70 0a          	mov    %si,0xa(%eax)
    if (slab->inuse == 0)
  105d21:	8b 45 9c             	mov    -0x64(%ebp),%eax
  105d24:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  105d28:	83 f8 00             	cmp    $0x0,%eax
  105d2b:	0f 85 57 00 00 00    	jne    105d88 <kmem_cache_free+0x148>
        list_add(&(cachep->slabs_free), &(slab->slab_link));
  105d31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  105d34:	83 c0 10             	add    $0x10,%eax
  105d37:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105d3a:	83 c1 0c             	add    $0xc,%ecx
  105d3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105d40:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
  105d43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105d46:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105d49:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105d4c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
  105d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105d52:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105d55:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105d58:	8b 52 04             	mov    0x4(%edx),%edx
  105d5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105d5e:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105d61:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
  105d64:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105d67:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105d6a:	89 01                	mov    %eax,(%ecx)
  105d6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105d6f:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  105d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105d75:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105d78:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  105d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105d7e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105d81:	89 01                	mov    %eax,(%ecx)
  105d83:	e9 52 00 00 00       	jmp    105dda <kmem_cache_free+0x19a>
    else 
        list_add(&(cachep->slabs_partial), &(slab->slab_link));
  105d88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  105d8b:	83 c0 08             	add    $0x8,%eax
  105d8e:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  105d91:	83 c1 0c             	add    $0xc,%ecx
  105d94:	89 45 c8             	mov    %eax,-0x38(%ebp)
  105d97:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    list_add_after(listelm, elm);
  105d9a:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105d9d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  105da0:	89 45 d0             	mov    %eax,-0x30(%ebp)
  105da3:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    __list_add(elm, listelm, listelm->next);
  105da6:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105da9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  105dac:	8b 55 d0             	mov    -0x30(%ebp),%edx
  105daf:	8b 52 04             	mov    0x4(%edx),%edx
  105db2:	89 45 dc             	mov    %eax,-0x24(%ebp)
  105db5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  105db8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    prev->next = next->prev = elm;
  105dbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105dbe:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  105dc1:	89 01                	mov    %eax,(%ecx)
  105dc3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  105dc6:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  105dc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105dcc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105dcf:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  105dd2:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105dd5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105dd8:	89 01                	mov    %eax,(%ecx)
}
  105dda:	83 c4 74             	add    $0x74,%esp
  105ddd:	5e                   	pop    %esi
  105dde:	5d                   	pop    %ebp
  105ddf:	c3                   	ret    

00105de0 <kmem_cache_grow>:
kmem_cache_grow(struct kmem_cache_t *cachep) {
  105de0:	55                   	push   %ebp
  105de1:	89 e5                	mov    %esp,%ebp
  105de3:	56                   	push   %esi
  105de4:	83 ec 54             	sub    $0x54,%esp
  105de7:	8b 45 08             	mov    0x8(%ebp),%eax
  105dea:	b9 01 00 00 00       	mov    $0x1,%ecx
  105def:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct Page *page = alloc_page();
  105df2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  105df9:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  105dfc:	e8 0f d2 ff ff       	call   103010 <alloc_pages>
  105e01:	89 45 d8             	mov    %eax,-0x28(%ebp)
    void *kva = page2kva(page);
  105e04:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105e07:	89 04 24             	mov    %eax,(%esp)
  105e0a:	e8 51 01 00 00       	call   105f60 <page2kva>
  105e0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    struct slab_t *slab = (struct slab_t *) page;
  105e12:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105e15:	89 45 d0             	mov    %eax,-0x30(%ebp)
    slab->cachep = cachep;
  105e18:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105e1b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  105e1e:	89 41 04             	mov    %eax,0x4(%ecx)
    slab->inuse = slab->free = 0;
  105e21:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105e24:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%eax)
  105e2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105e2d:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
    list_add(&(cachep->slabs_free), &(slab->slab_link));
  105e33:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105e36:	83 c0 10             	add    $0x10,%eax
  105e39:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  105e3c:	83 c1 0c             	add    $0xc,%ecx
  105e3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  105e42:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
  105e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105e48:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  105e4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105e4e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
  105e51:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105e54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  105e57:	8b 55 ec             	mov    -0x14(%ebp),%edx
  105e5a:	8b 52 04             	mov    0x4(%edx),%edx
  105e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  105e60:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  105e63:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
  105e66:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105e69:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  105e6c:	89 01                	mov    %eax,(%ecx)
  105e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  105e71:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  105e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105e77:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105e7a:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  105e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105e80:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  105e83:	89 01                	mov    %eax,(%ecx)
    int16_t *bufctl = kva;
  105e85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  105e88:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 1; i < cachep->num; i++)
  105e8b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
  105e92:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105e95:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105e98:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  105e9c:	39 c8                	cmp    %ecx,%eax
  105e9e:	0f 8d 21 00 00 00    	jge    105ec5 <kmem_cache_grow+0xe5>
        bufctl[i-1] = i;
  105ea4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105ea7:	66 89 c1             	mov    %ax,%cx
  105eaa:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105ead:	83 e8 01             	sub    $0x1,%eax
  105eb0:	8b 55 cc             	mov    -0x34(%ebp),%edx
  105eb3:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    for (int i = 1; i < cachep->num; i++)
  105eb7:	8b 45 c8             	mov    -0x38(%ebp),%eax
  105eba:	83 c0 01             	add    $0x1,%eax
  105ebd:	89 45 c8             	mov    %eax,-0x38(%ebp)
  105ec0:	e9 cd ff ff ff       	jmp    105e92 <kmem_cache_grow+0xb2>
    bufctl[cachep->num-1] = -1;
  105ec5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105ec8:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
  105ecc:	83 e8 01             	sub    $0x1,%eax
  105ecf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  105ed2:	66 c7 04 41 ff ff    	movw   $0xffff,(%ecx,%eax,2)
    void *buf = bufctl + cachep->num;
  105ed8:	8b 45 cc             	mov    -0x34(%ebp),%eax
  105edb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  105ede:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
  105ee2:	c1 e1 01             	shl    $0x1,%ecx
  105ee5:	01 c8                	add    %ecx,%eax
  105ee7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if (cachep->ctor) 
  105eea:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105eed:	83 78 1c 00          	cmpl   $0x0,0x1c(%eax)
  105ef1:	0f 84 5e 00 00 00    	je     105f55 <kmem_cache_grow+0x175>
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
  105ef7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  105efa:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105efd:	8b 45 c0             	mov    -0x40(%ebp),%eax
  105f00:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  105f03:	8b 55 dc             	mov    -0x24(%ebp),%edx
  105f06:	0f b7 52 18          	movzwl 0x18(%edx),%edx
  105f0a:	8b 75 dc             	mov    -0x24(%ebp),%esi
  105f0d:	0f b7 76 1a          	movzwl 0x1a(%esi),%esi
  105f11:	0f af d6             	imul   %esi,%edx
  105f14:	01 d1                	add    %edx,%ecx
  105f16:	39 c8                	cmp    %ecx,%eax
  105f18:	0f 83 32 00 00 00    	jae    105f50 <kmem_cache_grow+0x170>
            cachep->ctor(p, cachep, cachep->objsize);
  105f1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105f21:	8b 40 1c             	mov    0x1c(%eax),%eax
  105f24:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  105f27:	8b 55 dc             	mov    -0x24(%ebp),%edx
  105f2a:	8b 75 dc             	mov    -0x24(%ebp),%esi
  105f2d:	0f b7 76 18          	movzwl 0x18(%esi),%esi
  105f31:	89 0c 24             	mov    %ecx,(%esp)
  105f34:	89 54 24 04          	mov    %edx,0x4(%esp)
  105f38:	89 74 24 08          	mov    %esi,0x8(%esp)
  105f3c:	ff d0                	call   *%eax
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
  105f3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  105f41:	0f b7 40 18          	movzwl 0x18(%eax),%eax
  105f45:	03 45 c0             	add    -0x40(%ebp),%eax
  105f48:	89 45 c0             	mov    %eax,-0x40(%ebp)
  105f4b:	e9 ad ff ff ff       	jmp    105efd <kmem_cache_grow+0x11d>
            cachep->ctor(p, cachep, cachep->objsize);
  105f50:	e9 00 00 00 00       	jmp    105f55 <kmem_cache_grow+0x175>
    return slab;
  105f55:	8b 45 d0             	mov    -0x30(%ebp),%eax
  105f58:	83 c4 54             	add    $0x54,%esp
  105f5b:	5e                   	pop    %esi
  105f5c:	5d                   	pop    %ebp
  105f5d:	c3                   	ret    
  105f5e:	66 90                	xchg   %ax,%ax

00105f60 <page2kva>:
page2kva(struct Page *page) {
  105f60:	55                   	push   %ebp
  105f61:	89 e5                	mov    %esp,%ebp
  105f63:	56                   	push   %esi
  105f64:	83 ec 24             	sub    $0x24,%esp
  105f67:	8b 45 08             	mov    0x8(%ebp),%eax
  105f6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return KADDR(page2pa(page));
  105f6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105f70:	89 04 24             	mov    %eax,(%esp)
  105f73:	e8 48 04 00 00       	call   1063c0 <page2pa>
  105f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105f7e:	c1 e8 0c             	shr    $0xc,%eax
  105f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
  105f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105f87:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  105f8d:	0f 82 2f 00 00 00    	jb     105fc2 <page2kva+0x62>
  105f93:	8d 05 48 f8 10 00    	lea    0x10f848,%eax
  105f99:	b9 61 00 00 00       	mov    $0x61,%ecx
  105f9e:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  105fa4:	8b 75 f4             	mov    -0xc(%ebp),%esi
  105fa7:	89 04 24             	mov    %eax,(%esp)
  105faa:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
  105fb1:	00 
  105fb2:	89 54 24 08          	mov    %edx,0x8(%esp)
  105fb6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  105fba:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  105fbd:	e8 8e a4 ff ff       	call   100450 <__panic>
  105fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105fc5:	05 00 00 00 c0       	add    $0xc0000000,%eax
  105fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
  105fcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105fd0:	83 c4 24             	add    $0x24,%esp
  105fd3:	5e                   	pop    %esi
  105fd4:	5d                   	pop    %ebp
  105fd5:	c3                   	ret    
  105fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  105fdd:	00 00 00 

00105fe0 <kmem_cache_zalloc>:
kmem_cache_zalloc(struct kmem_cache_t *cachep) {
  105fe0:	55                   	push   %ebp
  105fe1:	89 e5                	mov    %esp,%ebp
  105fe3:	83 ec 28             	sub    $0x28,%esp
  105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
  105fe9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    void *objp = kmem_cache_alloc(cachep);
  105fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105fef:	89 04 24             	mov    %eax,(%esp)
  105ff2:	e8 e9 f7 ff ff       	call   1057e0 <kmem_cache_alloc>
  105ff7:	31 c9                	xor    %ecx,%ecx
  105ff9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    memset(objp, 0, cachep->objsize);
  105ffc:	8b 45 f8             	mov    -0x8(%ebp),%eax
  105fff:	8b 55 fc             	mov    -0x4(%ebp),%edx
  106002:	0f b7 52 18          	movzwl 0x18(%edx),%edx
  106006:	89 04 24             	mov    %eax,(%esp)
  106009:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  106010:	00 
  106011:	89 54 24 08          	mov    %edx,0x8(%esp)
  106015:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  106018:	e8 c3 83 00 00       	call   10e3e0 <memset>
    return objp;
  10601d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  106020:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106023:	89 c8                	mov    %ecx,%eax
  106025:	83 c4 28             	add    $0x28,%esp
  106028:	5d                   	pop    %ebp
  106029:	c3                   	ret    
  10602a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00106030 <kmem_cache_size>:

// kmem_cache_size - get object size
size_t 
kmem_cache_size(struct kmem_cache_t *cachep) {
  106030:	55                   	push   %ebp
  106031:	89 e5                	mov    %esp,%ebp
  106033:	50                   	push   %eax
  106034:	8b 45 08             	mov    0x8(%ebp),%eax
  106037:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cachep->objsize;
  10603a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10603d:	0f b7 40 18          	movzwl 0x18(%eax),%eax
  106041:	83 c4 04             	add    $0x4,%esp
  106044:	5d                   	pop    %ebp
  106045:	c3                   	ret    
  106046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10604d:	00 00 00 

00106050 <kmem_cache_name>:
}

// kmem_cache_name - get cache name
const char *
kmem_cache_name(struct kmem_cache_t *cachep) {
  106050:	55                   	push   %ebp
  106051:	89 e5                	mov    %esp,%ebp
  106053:	50                   	push   %eax
  106054:	8b 45 08             	mov    0x8(%ebp),%eax
  106057:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cachep->name;
  10605a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10605d:	83 c0 24             	add    $0x24,%eax
  106060:	83 c4 04             	add    $0x4,%esp
  106063:	5d                   	pop    %ebp
  106064:	c3                   	ret    
  106065:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10606c:	00 00 00 00 

00106070 <kmem_cache_shrink>:
}

// kmem_cache_shrink - destroy all slabs in free list 
int 
kmem_cache_shrink(struct kmem_cache_t *cachep) {
  106070:	55                   	push   %ebp
  106071:	89 e5                	mov    %esp,%ebp
  106073:	83 ec 28             	sub    $0x28,%esp
  106076:	8b 45 08             	mov    0x8(%ebp),%eax
  106079:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = 0;
  10607c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = list_next(&(cachep->slabs_free));
  106083:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106086:	83 c0 10             	add    $0x10,%eax
  106089:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
  10608c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10608f:	8b 40 04             	mov    0x4(%eax),%eax
  106092:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (le != &(cachep->slabs_free)) {
  106095:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106098:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10609b:	83 c1 10             	add    $0x10,%ecx
  10609e:	39 c8                	cmp    %ecx,%eax
  1060a0:	0f 84 40 00 00 00    	je     1060e6 <kmem_cache_shrink+0x76>
  1060a6:	31 c0                	xor    %eax,%eax
  1060a8:	89 c1                	mov    %eax,%ecx
  1060aa:	83 c1 0c             	add    $0xc,%ecx
  1060ad:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
  1060af:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1060b2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
        le = list_next(le);
  1060b5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1060b8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  1060bb:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1060be:	8b 49 04             	mov    0x4(%ecx),%ecx
  1060c1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
  1060c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1060c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1060ca:	01 c2                	add    %eax,%edx
  1060cc:	89 0c 24             	mov    %ecx,(%esp)
  1060cf:	89 54 24 04          	mov    %edx,0x4(%esp)
  1060d3:	e8 58 fa ff ff       	call   105b30 <kmem_slab_destroy>
        count ++;
  1060d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1060db:	83 c0 01             	add    $0x1,%eax
  1060de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &(cachep->slabs_free)) {
  1060e1:	e9 af ff ff ff       	jmp    106095 <kmem_cache_shrink+0x25>
    }
    return count;
  1060e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1060e9:	83 c4 28             	add    $0x28,%esp
  1060ec:	5d                   	pop    %ebp
  1060ed:	c3                   	ret    
  1060ee:	66 90                	xchg   %ax,%ax

001060f0 <kmem_cache_reap>:
}

// kmem_cache_reap - reap all free slabs 
int 
kmem_cache_reap() {
  1060f0:	55                   	push   %ebp
  1060f1:	89 e5                	mov    %esp,%ebp
  1060f3:	83 ec 18             	sub    $0x18,%esp
  1060f6:	8d 05 dc 48 11 00    	lea    0x1148dc,%eax
    int count = 0;
  1060fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    list_entry_t *le = &(cache_chain);
  106103:	89 45 f4             	mov    %eax,-0xc(%ebp)
  106106:	8d 05 dc 48 11 00    	lea    0x1148dc,%eax
    while ((le = list_next(le)) != &(cache_chain))
  10610c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10610f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  106112:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106115:	8b 49 04             	mov    0x4(%ecx),%ecx
  106118:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10611b:	39 c1                	cmp    %eax,%ecx
  10611d:	0f 84 21 00 00 00    	je     106144 <kmem_cache_reap+0x54>
  106123:	31 c0                	xor    %eax,%eax
  106125:	89 c1                	mov    %eax,%ecx
  106127:	83 c1 34             	add    $0x34,%ecx
  10612a:	29 c8                	sub    %ecx,%eax
        count += kmem_cache_shrink(to_struct(le, struct kmem_cache_t, cache_link));
  10612c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10612f:	01 c1                	add    %eax,%ecx
  106131:	89 0c 24             	mov    %ecx,(%esp)
  106134:	e8 37 ff ff ff       	call   106070 <kmem_cache_shrink>
  106139:	03 45 f8             	add    -0x8(%ebp),%eax
  10613c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((le = list_next(le)) != &(cache_chain))
  10613f:	e9 c2 ff ff ff       	jmp    106106 <kmem_cache_reap+0x16>
    return count;
  106144:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106147:	83 c4 18             	add    $0x18,%esp
  10614a:	5d                   	pop    %ebp
  10614b:	c3                   	ret    
  10614c:	0f 1f 40 00          	nopl   0x0(%eax)

00106150 <kmalloc>:
}

void *
kmalloc(size_t size) {
  106150:	55                   	push   %ebp
  106151:	89 e5                	mov    %esp,%ebp
  106153:	56                   	push   %esi
  106154:	83 ec 24             	sub    $0x24,%esp
  106157:	8b 45 08             	mov    0x8(%ebp),%eax
  10615a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    assert(size <= SIZED_CACHE_MAX);
  10615d:	81 7d f8 00 08 00 00 	cmpl   $0x800,-0x8(%ebp)
  106164:	0f 86 32 00 00 00    	jbe    10619c <kmalloc+0x4c>
  10616a:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106170:	b9 4c 01 00 00       	mov    $0x14c,%ecx
  106175:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10617b:	8d 35 46 fd 10 00    	lea    0x10fd46,%esi
  106181:	89 04 24             	mov    %eax,(%esp)
  106184:	c7 44 24 04 4c 01 00 	movl   $0x14c,0x4(%esp)
  10618b:	00 
  10618c:	89 54 24 08          	mov    %edx,0x8(%esp)
  106190:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106194:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  106197:	e8 b4 a2 ff ff       	call   100450 <__panic>
  10619c:	e9 00 00 00 00       	jmp    1061a1 <kmalloc+0x51>
    return kmem_cache_alloc(sized_caches[kmem_sized_index(size)]);
  1061a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1061a4:	89 04 24             	mov    %eax,(%esp)
  1061a7:	e8 04 f4 ff ff       	call   1055b0 <kmem_sized_index>
  1061ac:	8b 04 85 e4 48 11 00 	mov    0x1148e4(,%eax,4),%eax
  1061b3:	89 04 24             	mov    %eax,(%esp)
  1061b6:	e8 25 f6 ff ff       	call   1057e0 <kmem_cache_alloc>
  1061bb:	83 c4 24             	add    $0x24,%esp
  1061be:	5e                   	pop    %esi
  1061bf:	5d                   	pop    %ebp
  1061c0:	c3                   	ret    
  1061c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  1061c8:	0f 1f 84 00 00 00 00 
  1061cf:	00 

001061d0 <kfree>:
}

void 
kfree(void *objp) {
  1061d0:	55                   	push   %ebp
  1061d1:	89 e5                	mov    %esp,%ebp
  1061d3:	83 ec 28             	sub    $0x28,%esp
  1061d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1061d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    void *base = slab2kva(pages);
  1061dc:	a1 2c 49 11 00       	mov    0x11492c,%eax
  1061e1:	89 04 24             	mov    %eax,(%esp)
  1061e4:	e8 77 fd ff ff       	call   105f60 <page2kva>
  1061e9:	b9 00 10 00 00       	mov    $0x1000,%ecx
  1061ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void *kva = ROUNDDOWN(objp, PGSIZE);
  1061f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1061f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1061f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1061fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1061fd:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  106203:	29 d0                	sub    %edx,%eax
  106205:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106208:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10620b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct slab_t *slab = (struct slab_t *) &pages[(kva-base)/PGSIZE];
  10620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106211:	8b 55 f8             	mov    -0x8(%ebp),%edx
  106214:	29 d0                	sub    %edx,%eax
  106216:	99                   	cltd   
  106217:	f7 f9                	idiv   %ecx
  106219:	6b c0 14             	imul   $0x14,%eax,%eax
  10621c:	03 05 2c 49 11 00    	add    0x11492c,%eax
  106222:	89 45 e8             	mov    %eax,-0x18(%ebp)
    kmem_cache_free(slab->cachep, objp);
  106225:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106228:	8b 40 04             	mov    0x4(%eax),%eax
  10622b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10622e:	89 04 24             	mov    %eax,(%esp)
  106231:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106235:	e8 06 fa ff ff       	call   105c40 <kmem_cache_free>
}
  10623a:	83 c4 28             	add    $0x28,%esp
  10623d:	5d                   	pop    %ebp
  10623e:	c3                   	ret    
  10623f:	90                   	nop

00106240 <kmem_int>:

void
kmem_int() {
  106240:	55                   	push   %ebp
  106241:	89 e5                	mov    %esp,%ebp
  106243:	53                   	push   %ebx
  106244:	57                   	push   %edi
  106245:	56                   	push   %esi
  106246:	83 ec 5c             	sub    $0x5c,%esp
  106249:	8d 05 a0 48 11 00    	lea    0x1148a0,%eax
  10624f:	83 c0 24             	add    $0x24,%eax
  106252:	b9 10 00 00 00       	mov    $0x10,%ecx

    // Init cache for kmem_cache
    cache_cache.objsize = sizeof(struct kmem_cache_t);
  106257:	66 c7 05 b8 48 11 00 	movw   $0x3c,0x1148b8
  10625e:	3c 00 
    cache_cache.num = PGSIZE / (sizeof(int16_t) + sizeof(struct kmem_cache_t));
  106260:	66 c7 05 ba 48 11 00 	movw   $0x42,0x1148ba
  106267:	42 00 
    cache_cache.ctor = NULL;
  106269:	c7 05 bc 48 11 00 00 	movl   $0x0,0x1148bc
  106270:	00 00 00 
    cache_cache.dtor = NULL;
  106273:	c7 05 c0 48 11 00 00 	movl   $0x0,0x1148c0
  10627a:	00 00 00 
    memcpy(cache_cache.name, cache_cache_name, CACHE_NAMELEN);
  10627d:	8b 15 f8 39 11 00    	mov    0x1139f8,%edx
  106283:	89 04 24             	mov    %eax,(%esp)
  106286:	89 54 24 04          	mov    %edx,0x4(%esp)
  10628a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  106291:	00 
  106292:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  106295:	e8 56 82 00 00       	call   10e4f0 <memcpy>
  10629a:	8d 0d a0 48 11 00    	lea    0x1148a0,%ecx
  1062a0:	89 ca                	mov    %ecx,%edx
  1062a2:	83 c2 34             	add    $0x34,%edx
  1062a5:	8d 35 dc 48 11 00    	lea    0x1148dc,%esi
  1062ab:	89 cf                	mov    %ecx,%edi
  1062ad:	83 c7 10             	add    $0x10,%edi
  1062b0:	89 cb                	mov    %ecx,%ebx
  1062b2:	83 c3 08             	add    $0x8,%ebx
    list_init(&(cache_cache.slabs_full));
  1062b5:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    elm->prev = elm->next = elm;
  1062b8:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  1062bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
  1062be:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1062c1:	89 48 04             	mov    %ecx,0x4(%eax)
  1062c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1062c7:	89 08                	mov    %ecx,(%eax)
    list_init(&(cache_cache.slabs_partial));
  1062c9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  1062cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1062cf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1062d2:	89 41 04             	mov    %eax,0x4(%ecx)
  1062d5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1062d8:	89 01                	mov    %eax,(%ecx)
    list_init(&(cache_cache.slabs_free));
  1062da:	89 7d d0             	mov    %edi,-0x30(%ebp)
  1062dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1062e0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1062e3:	89 41 04             	mov    %eax,0x4(%ecx)
  1062e6:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1062e9:	89 01                	mov    %eax,(%ecx)
    list_init(&(cache_chain));
  1062eb:	89 75 f0             	mov    %esi,-0x10(%ebp)
  1062ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1062f1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1062f4:	89 41 04             	mov    %eax,0x4(%ecx)
  1062f7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  1062fa:	89 01                	mov    %eax,(%ecx)
    list_add(&(cache_chain), &(cache_cache.cache_link));
  1062fc:	89 75 d8             	mov    %esi,-0x28(%ebp)
  1062ff:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    list_add_after(listelm, elm);
  106302:	8b 45 d8             	mov    -0x28(%ebp),%eax
  106305:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  106308:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10630b:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
  10630e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  106311:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106314:	8b 55 e0             	mov    -0x20(%ebp),%edx
  106317:	8b 52 04             	mov    0x4(%edx),%edx
  10631a:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10631d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  106320:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    prev->next = next->prev = elm;
  106323:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106326:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106329:	89 01                	mov    %eax,(%ecx)
  10632b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10632e:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  106331:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106334:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106337:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10633a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10633d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  106340:	89 01                	mov    %eax,(%ecx)

    // Init sized cache 
    for (int i = 0, size = 16; i < SIZED_CACHE_NUM; i++, size *= 2)
  106342:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  106349:	c7 45 c0 10 00 00 00 	movl   $0x10,-0x40(%ebp)
  106350:	83 7d c4 08          	cmpl   $0x8,-0x3c(%ebp)
  106354:	0f 8d 4b 00 00 00    	jge    1063a5 <kmem_int+0x165>
  10635a:	31 c0                	xor    %eax,%eax
        sized_caches[i] = kmem_cache_create(sized_cache_name, size, NULL, NULL); 
  10635c:	8b 0d fc 39 11 00    	mov    0x1139fc,%ecx
  106362:	8b 55 c0             	mov    -0x40(%ebp),%edx
  106365:	89 0c 24             	mov    %ecx,(%esp)
  106368:	89 54 24 04          	mov    %edx,0x4(%esp)
  10636c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  106373:	00 
  106374:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  10637b:	00 
  10637c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10637f:	e8 cc f2 ff ff       	call   105650 <kmem_cache_create>
  106384:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  106387:	89 04 8d e4 48 11 00 	mov    %eax,0x1148e4(,%ecx,4)
    for (int i = 0, size = 16; i < SIZED_CACHE_NUM; i++, size *= 2)
  10638e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  106391:	83 c0 01             	add    $0x1,%eax
  106394:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  106397:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10639a:	c1 e0 01             	shl    $0x1,%eax
  10639d:	89 45 c0             	mov    %eax,-0x40(%ebp)
  1063a0:	e9 ab ff ff ff       	jmp    106350 <kmem_int+0x110>

    check_kmem();
  1063a5:	e8 66 00 00 00       	call   106410 <check_kmem>
  1063aa:	83 c4 5c             	add    $0x5c,%esp
  1063ad:	5e                   	pop    %esi
  1063ae:	5f                   	pop    %edi
  1063af:	5b                   	pop    %ebx
  1063b0:	5d                   	pop    %ebp
  1063b1:	c3                   	ret    
  1063b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  1063b9:	1f 84 00 00 00 00 00 

001063c0 <page2pa>:
page2pa(struct Page *page) {
  1063c0:	55                   	push   %ebp
  1063c1:	89 e5                	mov    %esp,%ebp
  1063c3:	83 ec 08             	sub    $0x8,%esp
  1063c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1063c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
  1063cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1063cf:	89 04 24             	mov    %eax,(%esp)
  1063d2:	e8 09 00 00 00       	call   1063e0 <page2ppn>
  1063d7:	c1 e0 0c             	shl    $0xc,%eax
  1063da:	83 c4 08             	add    $0x8,%esp
  1063dd:	5d                   	pop    %ebp
  1063de:	c3                   	ret    
  1063df:	90                   	nop

001063e0 <page2ppn>:
page2ppn(struct Page *page) {
  1063e0:	55                   	push   %ebp
  1063e1:	89 e5                	mov    %esp,%ebp
  1063e3:	50                   	push   %eax
  1063e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1063e7:	b9 14 00 00 00       	mov    $0x14,%ecx
  1063ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
  1063ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1063f2:	8b 15 2c 49 11 00    	mov    0x11492c,%edx
  1063f8:	29 d0                	sub    %edx,%eax
  1063fa:	99                   	cltd   
  1063fb:	f7 f9                	idiv   %ecx
  1063fd:	83 c4 04             	add    $0x4,%esp
  106400:	5d                   	pop    %ebp
  106401:	c3                   	ret    
  106402:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  106409:	1f 84 00 00 00 00 00 

00106410 <check_kmem>:
check_kmem() {
  106410:	55                   	push   %ebp
  106411:	89 e5                	mov    %esp,%ebp
  106413:	56                   	push   %esi
  106414:	81 ec d4 00 00 00    	sub    $0xd4,%esp
    assert(sizeof(struct Page) == sizeof(struct slab_t));
  10641a:	e9 00 00 00 00       	jmp    10641f <check_kmem+0xf>
    size_t fp = nr_free_pages();
  10641f:	e8 ec cc ff ff       	call   103110 <nr_free_pages>
  106424:	b9 fe 07 00 00       	mov    $0x7fe,%ecx
  106429:	8d 15 90 6e 10 00    	lea    0x106e90,%edx
  10642f:	8d 35 e0 6e 10 00    	lea    0x106ee0,%esi
  106435:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct kmem_cache_t *cp0 = kmem_cache_create(test_object_name, sizeof(struct test_object), test_ctor, test_dtor);
  106438:	a1 00 3a 11 00       	mov    0x113a00,%eax
  10643d:	89 04 24             	mov    %eax,(%esp)
  106440:	c7 44 24 04 fe 07 00 	movl   $0x7fe,0x4(%esp)
  106447:	00 
  106448:	89 54 24 08          	mov    %edx,0x8(%esp)
  10644c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106450:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  106453:	e8 f8 f1 ff ff       	call   105650 <kmem_cache_create>
  106458:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(cp0 != NULL);
  10645b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  10645f:	0f 85 32 00 00 00    	jne    106497 <check_kmem+0x87>
  106465:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  10646b:	b9 7c 00 00 00       	mov    $0x7c,%ecx
  106470:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106476:	8d 35 6a fd 10 00    	lea    0x10fd6a,%esi
  10647c:	89 04 24             	mov    %eax,(%esp)
  10647f:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
  106486:	00 
  106487:	89 54 24 08          	mov    %edx,0x8(%esp)
  10648b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10648f:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  106492:	e8 b9 9f ff ff       	call   100450 <__panic>
  106497:	e9 00 00 00 00       	jmp    10649c <check_kmem+0x8c>
    assert(kmem_cache_size(cp0) == sizeof(struct test_object));
  10649c:	e9 00 00 00 00       	jmp    1064a1 <check_kmem+0x91>
  1064a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1064a4:	89 04 24             	mov    %eax,(%esp)
  1064a7:	e8 84 fb ff ff       	call   106030 <kmem_cache_size>
  1064ac:	3d fe 07 00 00       	cmp    $0x7fe,%eax
  1064b1:	0f 84 32 00 00 00    	je     1064e9 <check_kmem+0xd9>
  1064b7:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1064bd:	b9 7d 00 00 00       	mov    $0x7d,%ecx
  1064c2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1064c8:	8d 35 76 fd 10 00    	lea    0x10fd76,%esi
  1064ce:	89 04 24             	mov    %eax,(%esp)
  1064d1:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
  1064d8:	00 
  1064d9:	89 54 24 08          	mov    %edx,0x8(%esp)
  1064dd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1064e1:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  1064e4:	e8 67 9f ff ff       	call   100450 <__panic>
  1064e9:	e9 00 00 00 00       	jmp    1064ee <check_kmem+0xde>
    assert(strcmp(kmem_cache_name(cp0), test_object_name) == 0);
  1064ee:	e9 00 00 00 00       	jmp    1064f3 <check_kmem+0xe3>
  1064f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1064f6:	89 04 24             	mov    %eax,(%esp)
  1064f9:	e8 52 fb ff ff       	call   106050 <kmem_cache_name>
  1064fe:	8b 0d 00 3a 11 00    	mov    0x113a00,%ecx
  106504:	89 04 24             	mov    %eax,(%esp)
  106507:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10650b:	e8 c0 7a 00 00       	call   10dfd0 <strcmp>
  106510:	83 f8 00             	cmp    $0x0,%eax
  106513:	0f 84 32 00 00 00    	je     10654b <check_kmem+0x13b>
  106519:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  10651f:	b9 7e 00 00 00       	mov    $0x7e,%ecx
  106524:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10652a:	8d 35 a9 fd 10 00    	lea    0x10fda9,%esi
  106530:	89 04 24             	mov    %eax,(%esp)
  106533:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
  10653a:	00 
  10653b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10653f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106543:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  106546:	e8 05 9f ff ff       	call   100450 <__panic>
  10654b:	e9 00 00 00 00       	jmp    106550 <check_kmem+0x140>
    assert((p0 = kmem_cache_alloc(cp0)) != NULL);
  106550:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106553:	89 04 24             	mov    %eax,(%esp)
  106556:	e8 85 f2 ff ff       	call   1057e0 <kmem_cache_alloc>
  10655b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10655e:	83 f8 00             	cmp    $0x0,%eax
  106561:	0f 85 32 00 00 00    	jne    106599 <check_kmem+0x189>
  106567:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  10656d:	b9 82 00 00 00       	mov    $0x82,%ecx
  106572:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106578:	8d 35 dd fd 10 00    	lea    0x10fddd,%esi
  10657e:	89 04 24             	mov    %eax,(%esp)
  106581:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
  106588:	00 
  106589:	89 54 24 08          	mov    %edx,0x8(%esp)
  10658d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106591:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  106594:	e8 b7 9e ff ff       	call   100450 <__panic>
  106599:	e9 00 00 00 00       	jmp    10659e <check_kmem+0x18e>
    assert((p1 = kmem_cache_alloc(cp0)) != NULL);
  10659e:	e9 00 00 00 00       	jmp    1065a3 <check_kmem+0x193>
  1065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1065a6:	89 04 24             	mov    %eax,(%esp)
  1065a9:	e8 32 f2 ff ff       	call   1057e0 <kmem_cache_alloc>
  1065ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
  1065b1:	83 f8 00             	cmp    $0x0,%eax
  1065b4:	0f 85 32 00 00 00    	jne    1065ec <check_kmem+0x1dc>
  1065ba:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1065c0:	b9 83 00 00 00       	mov    $0x83,%ecx
  1065c5:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1065cb:	8d 35 02 fe 10 00    	lea    0x10fe02,%esi
  1065d1:	89 04 24             	mov    %eax,(%esp)
  1065d4:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
  1065db:	00 
  1065dc:	89 54 24 08          	mov    %edx,0x8(%esp)
  1065e0:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1065e4:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  1065e7:	e8 64 9e ff ff       	call   100450 <__panic>
  1065ec:	e9 00 00 00 00       	jmp    1065f1 <check_kmem+0x1e1>
    assert((p2 = kmem_cache_alloc(cp0)) != NULL);
  1065f1:	e9 00 00 00 00       	jmp    1065f6 <check_kmem+0x1e6>
  1065f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1065f9:	89 04 24             	mov    %eax,(%esp)
  1065fc:	e8 df f1 ff ff       	call   1057e0 <kmem_cache_alloc>
  106601:	89 45 dc             	mov    %eax,-0x24(%ebp)
  106604:	83 f8 00             	cmp    $0x0,%eax
  106607:	0f 85 32 00 00 00    	jne    10663f <check_kmem+0x22f>
  10660d:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106613:	b9 84 00 00 00       	mov    $0x84,%ecx
  106618:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10661e:	8d 35 27 fe 10 00    	lea    0x10fe27,%esi
  106624:	89 04 24             	mov    %eax,(%esp)
  106627:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
  10662e:	00 
  10662f:	89 54 24 08          	mov    %edx,0x8(%esp)
  106633:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106637:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10663a:	e8 11 9e ff ff       	call   100450 <__panic>
  10663f:	e9 00 00 00 00       	jmp    106644 <check_kmem+0x234>
    assert((p3 = kmem_cache_alloc(cp0)) != NULL);
  106644:	e9 00 00 00 00       	jmp    106649 <check_kmem+0x239>
  106649:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10664c:	89 04 24             	mov    %eax,(%esp)
  10664f:	e8 8c f1 ff ff       	call   1057e0 <kmem_cache_alloc>
  106654:	89 45 d8             	mov    %eax,-0x28(%ebp)
  106657:	83 f8 00             	cmp    $0x0,%eax
  10665a:	0f 85 32 00 00 00    	jne    106692 <check_kmem+0x282>
  106660:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106666:	b9 85 00 00 00       	mov    $0x85,%ecx
  10666b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106671:	8d 35 4c fe 10 00    	lea    0x10fe4c,%esi
  106677:	89 04 24             	mov    %eax,(%esp)
  10667a:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
  106681:	00 
  106682:	89 54 24 08          	mov    %edx,0x8(%esp)
  106686:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10668a:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  10668d:	e8 be 9d ff ff       	call   100450 <__panic>
  106692:	e9 00 00 00 00       	jmp    106697 <check_kmem+0x287>
    assert((p4 = kmem_cache_alloc(cp0)) != NULL);
  106697:	e9 00 00 00 00       	jmp    10669c <check_kmem+0x28c>
  10669c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10669f:	89 04 24             	mov    %eax,(%esp)
  1066a2:	e8 39 f1 ff ff       	call   1057e0 <kmem_cache_alloc>
  1066a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  1066aa:	83 f8 00             	cmp    $0x0,%eax
  1066ad:	0f 85 32 00 00 00    	jne    1066e5 <check_kmem+0x2d5>
  1066b3:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1066b9:	b9 86 00 00 00       	mov    $0x86,%ecx
  1066be:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1066c4:	8d 35 71 fe 10 00    	lea    0x10fe71,%esi
  1066ca:	89 04 24             	mov    %eax,(%esp)
  1066cd:	c7 44 24 04 86 00 00 	movl   $0x86,0x4(%esp)
  1066d4:	00 
  1066d5:	89 54 24 08          	mov    %edx,0x8(%esp)
  1066d9:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1066dd:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  1066e0:	e8 6b 9d ff ff       	call   100450 <__panic>
  1066e5:	e9 00 00 00 00       	jmp    1066ea <check_kmem+0x2da>
    p = (char *) p4;
  1066ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1066ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
  1066f0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
  1066f7:	81 7d c8 fe 07 00 00 	cmpl   $0x7fe,-0x38(%ebp)
  1066fe:	0f 83 62 00 00 00    	jae    106766 <check_kmem+0x356>
        assert(p[i] == TEST_OBJECT_CTVAL);
  106704:	e9 00 00 00 00       	jmp    106709 <check_kmem+0x2f9>
  106709:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10670c:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10670f:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  106713:	83 f8 22             	cmp    $0x22,%eax
  106716:	0f 84 32 00 00 00    	je     10674e <check_kmem+0x33e>
  10671c:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106722:	b9 89 00 00 00       	mov    $0x89,%ecx
  106727:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10672d:	8d 35 96 fe 10 00    	lea    0x10fe96,%esi
  106733:	89 04 24             	mov    %eax,(%esp)
  106736:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
  10673d:	00 
  10673e:	89 54 24 08          	mov    %edx,0x8(%esp)
  106742:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106746:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  106749:	e8 02 9d ff ff       	call   100450 <__panic>
  10674e:	e9 00 00 00 00       	jmp    106753 <check_kmem+0x343>
  106753:	e9 00 00 00 00       	jmp    106758 <check_kmem+0x348>
    for (int i = 0; i < sizeof(struct test_object); i++)
  106758:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10675b:	83 c0 01             	add    $0x1,%eax
  10675e:	89 45 c8             	mov    %eax,-0x38(%ebp)
  106761:	e9 91 ff ff ff       	jmp    1066f7 <check_kmem+0x2e7>
    assert((p5 = kmem_cache_zalloc(cp0)) != NULL);
  106766:	e9 00 00 00 00       	jmp    10676b <check_kmem+0x35b>
  10676b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10676e:	89 04 24             	mov    %eax,(%esp)
  106771:	e8 6a f8 ff ff       	call   105fe0 <kmem_cache_zalloc>
  106776:	89 45 d0             	mov    %eax,-0x30(%ebp)
  106779:	83 f8 00             	cmp    $0x0,%eax
  10677c:	0f 85 32 00 00 00    	jne    1067b4 <check_kmem+0x3a4>
  106782:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106788:	b9 8a 00 00 00       	mov    $0x8a,%ecx
  10678d:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106793:	8d 35 b0 fe 10 00    	lea    0x10feb0,%esi
  106799:	89 04 24             	mov    %eax,(%esp)
  10679c:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
  1067a3:	00 
  1067a4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1067a8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1067ac:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  1067af:	e8 9c 9c ff ff       	call   100450 <__panic>
  1067b4:	e9 00 00 00 00       	jmp    1067b9 <check_kmem+0x3a9>
    p = (char *) p5;
  1067b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1067bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
  1067bf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
  1067c6:	81 7d c4 fe 07 00 00 	cmpl   $0x7fe,-0x3c(%ebp)
  1067cd:	0f 83 62 00 00 00    	jae    106835 <check_kmem+0x425>
        assert(p[i] == 0);
  1067d3:	e9 00 00 00 00       	jmp    1067d8 <check_kmem+0x3c8>
  1067d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  1067db:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  1067de:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  1067e2:	83 f8 00             	cmp    $0x0,%eax
  1067e5:	0f 84 32 00 00 00    	je     10681d <check_kmem+0x40d>
  1067eb:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1067f1:	b9 8d 00 00 00       	mov    $0x8d,%ecx
  1067f6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1067fc:	8d 35 d6 fe 10 00    	lea    0x10fed6,%esi
  106802:	89 04 24             	mov    %eax,(%esp)
  106805:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
  10680c:	00 
  10680d:	89 54 24 08          	mov    %edx,0x8(%esp)
  106811:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106815:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  106818:	e8 33 9c ff ff       	call   100450 <__panic>
  10681d:	e9 00 00 00 00       	jmp    106822 <check_kmem+0x412>
  106822:	e9 00 00 00 00       	jmp    106827 <check_kmem+0x417>
    for (int i = 0; i < sizeof(struct test_object); i++)
  106827:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10682a:	83 c0 01             	add    $0x1,%eax
  10682d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  106830:	e9 91 ff ff ff       	jmp    1067c6 <check_kmem+0x3b6>
    assert(nr_free_pages()+3 == fp);
  106835:	e9 00 00 00 00       	jmp    10683a <check_kmem+0x42a>
  10683a:	e8 d1 c8 ff ff       	call   103110 <nr_free_pages>
  10683f:	83 c0 03             	add    $0x3,%eax
  106842:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106845:	0f 84 32 00 00 00    	je     10687d <check_kmem+0x46d>
  10684b:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106851:	b9 8e 00 00 00       	mov    $0x8e,%ecx
  106856:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10685c:	8d 35 e0 fe 10 00    	lea    0x10fee0,%esi
  106862:	89 04 24             	mov    %eax,(%esp)
  106865:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  10686c:	00 
  10686d:	89 54 24 08          	mov    %edx,0x8(%esp)
  106871:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106875:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
  106878:	e8 d3 9b ff ff       	call   100450 <__panic>
  10687d:	e9 00 00 00 00       	jmp    106882 <check_kmem+0x472>
    assert(list_empty(&(cp0->slabs_free)));
  106882:	e9 00 00 00 00       	jmp    106887 <check_kmem+0x477>
  106887:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10688a:	83 c0 10             	add    $0x10,%eax
  10688d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
  106890:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106893:	8b 40 04             	mov    0x4(%eax),%eax
  106896:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  106899:	0f 94 c1             	sete   %cl
  10689c:	80 e1 01             	and    $0x1,%cl
  10689f:	0f b6 c1             	movzbl %cl,%eax
  1068a2:	83 f8 00             	cmp    $0x0,%eax
  1068a5:	0f 85 32 00 00 00    	jne    1068dd <check_kmem+0x4cd>
  1068ab:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1068b1:	b9 8f 00 00 00       	mov    $0x8f,%ecx
  1068b6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1068bc:	8d 35 f8 fe 10 00    	lea    0x10fef8,%esi
  1068c2:	89 04 24             	mov    %eax,(%esp)
  1068c5:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
  1068cc:	00 
  1068cd:	89 54 24 08          	mov    %edx,0x8(%esp)
  1068d1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  1068d5:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  1068d8:	e8 73 9b ff ff       	call   100450 <__panic>
  1068dd:	e9 00 00 00 00       	jmp    1068e2 <check_kmem+0x4d2>
    assert(list_empty(&(cp0->slabs_partial)));
  1068e2:	e9 00 00 00 00       	jmp    1068e7 <check_kmem+0x4d7>
  1068e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1068ea:	83 c0 08             	add    $0x8,%eax
  1068ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1068f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1068f3:	8b 40 04             	mov    0x4(%eax),%eax
  1068f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  1068f9:	0f 94 c1             	sete   %cl
  1068fc:	80 e1 01             	and    $0x1,%cl
  1068ff:	0f b6 c1             	movzbl %cl,%eax
  106902:	83 f8 00             	cmp    $0x0,%eax
  106905:	0f 85 32 00 00 00    	jne    10693d <check_kmem+0x52d>
  10690b:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106911:	b9 90 00 00 00       	mov    $0x90,%ecx
  106916:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10691c:	8d 35 17 ff 10 00    	lea    0x10ff17,%esi
  106922:	89 04 24             	mov    %eax,(%esp)
  106925:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
  10692c:	00 
  10692d:	89 54 24 08          	mov    %edx,0x8(%esp)
  106931:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106935:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  106938:	e8 13 9b ff ff       	call   100450 <__panic>
  10693d:	e9 00 00 00 00       	jmp    106942 <check_kmem+0x532>
    assert(list_length(&(cp0->slabs_full)) == 3);
  106942:	e9 00 00 00 00       	jmp    106947 <check_kmem+0x537>
  106947:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10694a:	89 04 24             	mov    %eax,(%esp)
  10694d:	e8 de 05 00 00       	call   106f30 <list_length>
  106952:	83 f8 03             	cmp    $0x3,%eax
  106955:	0f 84 32 00 00 00    	je     10698d <check_kmem+0x57d>
  10695b:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106961:	b9 91 00 00 00       	mov    $0x91,%ecx
  106966:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10696c:	8d 35 39 ff 10 00    	lea    0x10ff39,%esi
  106972:	89 04 24             	mov    %eax,(%esp)
  106975:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
  10697c:	00 
  10697d:	89 54 24 08          	mov    %edx,0x8(%esp)
  106981:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106985:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  106988:	e8 c3 9a ff ff       	call   100450 <__panic>
  10698d:	e9 00 00 00 00       	jmp    106992 <check_kmem+0x582>
    kmem_cache_free(cp0, p3);
  106992:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106995:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  106998:	89 04 24             	mov    %eax,(%esp)
  10699b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10699f:	e8 9c f2 ff ff       	call   105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p4);
  1069a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1069a7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  1069aa:	89 04 24             	mov    %eax,(%esp)
  1069ad:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1069b1:	e8 8a f2 ff ff       	call   105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p5);
  1069b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1069b9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  1069bc:	89 04 24             	mov    %eax,(%esp)
  1069bf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  1069c3:	e8 78 f2 ff ff       	call   105c40 <kmem_cache_free>
    assert(list_length(&(cp0->slabs_free)) == 1);
  1069c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1069cb:	83 c0 10             	add    $0x10,%eax
  1069ce:	89 04 24             	mov    %eax,(%esp)
  1069d1:	e8 5a 05 00 00       	call   106f30 <list_length>
  1069d6:	83 f8 01             	cmp    $0x1,%eax
  1069d9:	0f 84 35 00 00 00    	je     106a14 <check_kmem+0x604>
  1069df:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  1069e5:	b9 96 00 00 00       	mov    $0x96,%ecx
  1069ea:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1069f0:	8d 35 5e ff 10 00    	lea    0x10ff5e,%esi
  1069f6:	89 04 24             	mov    %eax,(%esp)
  1069f9:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
  106a00:	00 
  106a01:	89 54 24 08          	mov    %edx,0x8(%esp)
  106a05:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106a09:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  106a0f:	e8 3c 9a ff ff       	call   100450 <__panic>
  106a14:	e9 00 00 00 00       	jmp    106a19 <check_kmem+0x609>
    assert(list_length(&(cp0->slabs_partial)) == 1);
  106a19:	e9 00 00 00 00       	jmp    106a1e <check_kmem+0x60e>
  106a1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106a21:	83 c0 08             	add    $0x8,%eax
  106a24:	89 04 24             	mov    %eax,(%esp)
  106a27:	e8 04 05 00 00       	call   106f30 <list_length>
  106a2c:	83 f8 01             	cmp    $0x1,%eax
  106a2f:	0f 84 35 00 00 00    	je     106a6a <check_kmem+0x65a>
  106a35:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106a3b:	b9 97 00 00 00       	mov    $0x97,%ecx
  106a40:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106a46:	8d 35 83 ff 10 00    	lea    0x10ff83,%esi
  106a4c:	89 04 24             	mov    %eax,(%esp)
  106a4f:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
  106a56:	00 
  106a57:	89 54 24 08          	mov    %edx,0x8(%esp)
  106a5b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106a5f:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  106a65:	e8 e6 99 ff ff       	call   100450 <__panic>
  106a6a:	e9 00 00 00 00       	jmp    106a6f <check_kmem+0x65f>
    assert(list_length(&(cp0->slabs_full)) == 1);
  106a6f:	e9 00 00 00 00       	jmp    106a74 <check_kmem+0x664>
  106a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106a77:	89 04 24             	mov    %eax,(%esp)
  106a7a:	e8 b1 04 00 00       	call   106f30 <list_length>
  106a7f:	83 f8 01             	cmp    $0x1,%eax
  106a82:	0f 84 35 00 00 00    	je     106abd <check_kmem+0x6ad>
  106a88:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106a8e:	b9 98 00 00 00       	mov    $0x98,%ecx
  106a93:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106a99:	8d 35 ab ff 10 00    	lea    0x10ffab,%esi
  106a9f:	89 04 24             	mov    %eax,(%esp)
  106aa2:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  106aa9:	00 
  106aaa:	89 54 24 08          	mov    %edx,0x8(%esp)
  106aae:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106ab2:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  106ab8:	e8 93 99 ff ff       	call   100450 <__panic>
  106abd:	e9 00 00 00 00       	jmp    106ac2 <check_kmem+0x6b2>
    assert(kmem_cache_shrink(cp0) == 1);
  106ac2:	e9 00 00 00 00       	jmp    106ac7 <check_kmem+0x6b7>
  106ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106aca:	89 04 24             	mov    %eax,(%esp)
  106acd:	e8 9e f5 ff ff       	call   106070 <kmem_cache_shrink>
  106ad2:	83 f8 01             	cmp    $0x1,%eax
  106ad5:	0f 84 35 00 00 00    	je     106b10 <check_kmem+0x700>
  106adb:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106ae1:	b9 9a 00 00 00       	mov    $0x9a,%ecx
  106ae6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106aec:	8d 35 d0 ff 10 00    	lea    0x10ffd0,%esi
  106af2:	89 04 24             	mov    %eax,(%esp)
  106af5:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
  106afc:	00 
  106afd:	89 54 24 08          	mov    %edx,0x8(%esp)
  106b01:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106b05:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  106b0b:	e8 40 99 ff ff       	call   100450 <__panic>
  106b10:	e9 00 00 00 00       	jmp    106b15 <check_kmem+0x705>
    assert(nr_free_pages()+2 == fp);
  106b15:	e9 00 00 00 00       	jmp    106b1a <check_kmem+0x70a>
  106b1a:	e8 f1 c5 ff ff       	call   103110 <nr_free_pages>
  106b1f:	83 c0 02             	add    $0x2,%eax
  106b22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106b25:	0f 84 35 00 00 00    	je     106b60 <check_kmem+0x750>
  106b2b:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106b31:	b9 9b 00 00 00       	mov    $0x9b,%ecx
  106b36:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106b3c:	8d 35 ec ff 10 00    	lea    0x10ffec,%esi
  106b42:	89 04 24             	mov    %eax,(%esp)
  106b45:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
  106b4c:	00 
  106b4d:	89 54 24 08          	mov    %edx,0x8(%esp)
  106b51:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106b55:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  106b5b:	e8 f0 98 ff ff       	call   100450 <__panic>
  106b60:	e9 00 00 00 00       	jmp    106b65 <check_kmem+0x755>
    assert(list_empty(&(cp0->slabs_free)));
  106b65:	e9 00 00 00 00       	jmp    106b6a <check_kmem+0x75a>
  106b6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106b6d:	83 c0 10             	add    $0x10,%eax
  106b70:	89 45 f8             	mov    %eax,-0x8(%ebp)
  106b73:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106b76:	8b 40 04             	mov    0x4(%eax),%eax
  106b79:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  106b7c:	0f 94 c1             	sete   %cl
  106b7f:	80 e1 01             	and    $0x1,%cl
  106b82:	0f b6 c1             	movzbl %cl,%eax
  106b85:	83 f8 00             	cmp    $0x0,%eax
  106b88:	0f 85 35 00 00 00    	jne    106bc3 <check_kmem+0x7b3>
  106b8e:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106b94:	b9 9c 00 00 00       	mov    $0x9c,%ecx
  106b99:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106b9f:	8d 35 f8 fe 10 00    	lea    0x10fef8,%esi
  106ba5:	89 04 24             	mov    %eax,(%esp)
  106ba8:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
  106baf:	00 
  106bb0:	89 54 24 08          	mov    %edx,0x8(%esp)
  106bb4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106bb8:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  106bbe:	e8 8d 98 ff ff       	call   100450 <__panic>
  106bc3:	e9 00 00 00 00       	jmp    106bc8 <check_kmem+0x7b8>
    p = (char *) p4;
  106bc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  106bcb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
  106bce:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
  106bd5:	81 7d c0 fe 07 00 00 	cmpl   $0x7fe,-0x40(%ebp)
  106bdc:	0f 83 65 00 00 00    	jae    106c47 <check_kmem+0x837>
        assert(p[i] == TEST_OBJECT_DTVAL);
  106be2:	e9 00 00 00 00       	jmp    106be7 <check_kmem+0x7d7>
  106be7:	8b 45 c0             	mov    -0x40(%ebp),%eax
  106bea:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  106bed:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
  106bf1:	83 f8 11             	cmp    $0x11,%eax
  106bf4:	0f 84 35 00 00 00    	je     106c2f <check_kmem+0x81f>
  106bfa:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106c00:	b9 9f 00 00 00       	mov    $0x9f,%ecx
  106c05:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106c0b:	8d 35 04 00 11 00    	lea    0x110004,%esi
  106c11:	89 04 24             	mov    %eax,(%esp)
  106c14:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
  106c1b:	00 
  106c1c:	89 54 24 08          	mov    %edx,0x8(%esp)
  106c20:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106c24:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%ebp)
  106c2a:	e8 21 98 ff ff       	call   100450 <__panic>
  106c2f:	e9 00 00 00 00       	jmp    106c34 <check_kmem+0x824>
  106c34:	e9 00 00 00 00       	jmp    106c39 <check_kmem+0x829>
    for (int i = 0; i < sizeof(struct test_object); i++)
  106c39:	8b 45 c0             	mov    -0x40(%ebp),%eax
  106c3c:	83 c0 01             	add    $0x1,%eax
  106c3f:	89 45 c0             	mov    %eax,-0x40(%ebp)
  106c42:	e9 8e ff ff ff       	jmp    106bd5 <check_kmem+0x7c5>
    kmem_cache_free(cp0, p0);
  106c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106c4a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  106c4d:	89 04 24             	mov    %eax,(%esp)
  106c50:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106c54:	e8 e7 ef ff ff       	call   105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p1);
  106c59:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106c5c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  106c5f:	89 04 24             	mov    %eax,(%esp)
  106c62:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106c66:	e8 d5 ef ff ff       	call   105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p2);
  106c6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106c6e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  106c71:	89 04 24             	mov    %eax,(%esp)
  106c74:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  106c78:	e8 c3 ef ff ff       	call   105c40 <kmem_cache_free>
    assert(kmem_cache_reap() == 2);
  106c7d:	e8 6e f4 ff ff       	call   1060f0 <kmem_cache_reap>
  106c82:	83 f8 02             	cmp    $0x2,%eax
  106c85:	0f 84 35 00 00 00    	je     106cc0 <check_kmem+0x8b0>
  106c8b:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106c91:	b9 a4 00 00 00       	mov    $0xa4,%ecx
  106c96:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106c9c:	8d 35 1e 00 11 00    	lea    0x11001e,%esi
  106ca2:	89 04 24             	mov    %eax,(%esp)
  106ca5:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
  106cac:	00 
  106cad:	89 54 24 08          	mov    %edx,0x8(%esp)
  106cb1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106cb5:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  106cbb:	e8 90 97 ff ff       	call   100450 <__panic>
  106cc0:	e9 00 00 00 00       	jmp    106cc5 <check_kmem+0x8b5>
    assert(nr_free_pages() == fp);
  106cc5:	e9 00 00 00 00       	jmp    106cca <check_kmem+0x8ba>
  106cca:	e8 41 c4 ff ff       	call   103110 <nr_free_pages>
  106ccf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106cd2:	0f 84 35 00 00 00    	je     106d0d <check_kmem+0x8fd>
  106cd8:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106cde:	b9 a5 00 00 00       	mov    $0xa5,%ecx
  106ce3:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106ce9:	8d 35 35 00 11 00    	lea    0x110035,%esi
  106cef:	89 04 24             	mov    %eax,(%esp)
  106cf2:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
  106cf9:	00 
  106cfa:	89 54 24 08          	mov    %edx,0x8(%esp)
  106cfe:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106d02:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
  106d08:	e8 43 97 ff ff       	call   100450 <__panic>
  106d0d:	e9 00 00 00 00       	jmp    106d12 <check_kmem+0x902>
    kmem_cache_destroy(cp0);
  106d12:	8b 45 e8             	mov    -0x18(%ebp),%eax
  106d15:	89 04 24             	mov    %eax,(%esp)
  106d18:	e8 d3 ec ff ff       	call   1059f0 <kmem_cache_destroy>
  106d1d:	b8 00 08 00 00       	mov    $0x800,%eax
    assert((p0 = kmalloc(2048)) != NULL);
  106d22:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  106d29:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  106d2f:	e8 1c f4 ff ff       	call   106150 <kmalloc>
  106d34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  106d37:	83 f8 00             	cmp    $0x0,%eax
  106d3a:	0f 85 35 00 00 00    	jne    106d75 <check_kmem+0x965>
  106d40:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106d46:	b9 aa 00 00 00       	mov    $0xaa,%ecx
  106d4b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106d51:	8d 35 4b 00 11 00    	lea    0x11004b,%esi
  106d57:	89 04 24             	mov    %eax,(%esp)
  106d5a:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
  106d61:	00 
  106d62:	89 54 24 08          	mov    %edx,0x8(%esp)
  106d66:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106d6a:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
  106d70:	e8 db 96 ff ff       	call   100450 <__panic>
  106d75:	e9 00 00 00 00       	jmp    106d7a <check_kmem+0x96a>
    assert(nr_free_pages()+1 == fp);
  106d7a:	e9 00 00 00 00       	jmp    106d7f <check_kmem+0x96f>
  106d7f:	e8 8c c3 ff ff       	call   103110 <nr_free_pages>
  106d84:	83 c0 01             	add    $0x1,%eax
  106d87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106d8a:	0f 84 35 00 00 00    	je     106dc5 <check_kmem+0x9b5>
  106d90:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106d96:	b9 ab 00 00 00       	mov    $0xab,%ecx
  106d9b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106da1:	8d 35 68 00 11 00    	lea    0x110068,%esi
  106da7:	89 04 24             	mov    %eax,(%esp)
  106daa:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
  106db1:	00 
  106db2:	89 54 24 08          	mov    %edx,0x8(%esp)
  106db6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106dba:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
  106dc0:	e8 8b 96 ff ff       	call   100450 <__panic>
  106dc5:	e9 00 00 00 00       	jmp    106dca <check_kmem+0x9ba>
    kfree(p0);
  106dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  106dcd:	89 04 24             	mov    %eax,(%esp)
  106dd0:	e8 fb f3 ff ff       	call   1061d0 <kfree>
    assert(kmem_cache_reap() == 1);
  106dd5:	e8 16 f3 ff ff       	call   1060f0 <kmem_cache_reap>
  106dda:	83 f8 01             	cmp    $0x1,%eax
  106ddd:	0f 84 35 00 00 00    	je     106e18 <check_kmem+0xa08>
  106de3:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106de9:	b9 ad 00 00 00       	mov    $0xad,%ecx
  106dee:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106df4:	8d 35 80 00 11 00    	lea    0x110080,%esi
  106dfa:	89 04 24             	mov    %eax,(%esp)
  106dfd:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
  106e04:	00 
  106e05:	89 54 24 08          	mov    %edx,0x8(%esp)
  106e09:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106e0d:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  106e13:	e8 38 96 ff ff       	call   100450 <__panic>
  106e18:	e9 00 00 00 00       	jmp    106e1d <check_kmem+0xa0d>
    assert(nr_free_pages() == fp);
  106e1d:	e9 00 00 00 00       	jmp    106e22 <check_kmem+0xa12>
  106e22:	e8 e9 c2 ff ff       	call   103110 <nr_free_pages>
  106e27:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  106e2a:	0f 84 35 00 00 00    	je     106e65 <check_kmem+0xa55>
  106e30:	8d 05 22 fd 10 00    	lea    0x10fd22,%eax
  106e36:	b9 ae 00 00 00       	mov    $0xae,%ecx
  106e3b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106e41:	8d 35 35 00 11 00    	lea    0x110035,%esi
  106e47:	89 04 24             	mov    %eax,(%esp)
  106e4a:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
  106e51:	00 
  106e52:	89 54 24 08          	mov    %edx,0x8(%esp)
  106e56:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106e5a:	89 8d 48 ff ff ff    	mov    %ecx,-0xb8(%ebp)
  106e60:	e8 eb 95 ff ff       	call   100450 <__panic>
  106e65:	e9 00 00 00 00       	jmp    106e6a <check_kmem+0xa5a>
  106e6a:	8d 05 97 00 11 00    	lea    0x110097,%eax
    cprintf("check_kmem() succeeded!\n");
  106e70:	89 04 24             	mov    %eax,(%esp)
  106e73:	e8 c8 93 ff ff       	call   100240 <cprintf>
}
  106e78:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  106e7e:	81 c4 d4 00 00 00    	add    $0xd4,%esp
  106e84:	5e                   	pop    %esi
  106e85:	5d                   	pop    %ebp
  106e86:	c3                   	ret    
  106e87:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  106e8e:	00 00 

00106e90 <test_ctor>:
test_ctor(void* objp, struct kmem_cache_t * cachep, size_t size) {
  106e90:	55                   	push   %ebp
  106e91:	89 e5                	mov    %esp,%ebp
  106e93:	83 ec 14             	sub    $0x14,%esp
  106e96:	8b 45 10             	mov    0x10(%ebp),%eax
  106e99:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  106e9c:	8b 55 08             	mov    0x8(%ebp),%edx
  106e9f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  106ea2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = objp;
  106ea8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106eab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < size; i++)
  106eae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106eb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106eb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  106ebb:	0f 83 18 00 00 00    	jae    106ed9 <test_ctor+0x49>
        p[i] = TEST_OBJECT_CTVAL;
  106ec1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106ec4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106ec7:	c6 04 01 22          	movb   $0x22,(%ecx,%eax,1)
    for (int i = 0; i < size; i++)
  106ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106ece:	83 c0 01             	add    $0x1,%eax
  106ed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106ed4:	e9 dc ff ff ff       	jmp    106eb5 <test_ctor+0x25>
}
  106ed9:	83 c4 14             	add    $0x14,%esp
  106edc:	5d                   	pop    %ebp
  106edd:	c3                   	ret    
  106ede:	66 90                	xchg   %ax,%ax

00106ee0 <test_dtor>:
test_dtor(void* objp, struct kmem_cache_t * cachep, size_t size) {
  106ee0:	55                   	push   %ebp
  106ee1:	89 e5                	mov    %esp,%ebp
  106ee3:	83 ec 14             	sub    $0x14,%esp
  106ee6:	8b 45 10             	mov    0x10(%ebp),%eax
  106ee9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  106eec:	8b 55 08             	mov    0x8(%ebp),%edx
  106eef:	89 55 fc             	mov    %edx,-0x4(%ebp)
  106ef2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  106ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = objp;
  106ef8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < size; i++)
  106efe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  106f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106f08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  106f0b:	0f 83 18 00 00 00    	jae    106f29 <test_dtor+0x49>
        p[i] = TEST_OBJECT_DTVAL;
  106f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106f14:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  106f17:	c6 04 01 11          	movb   $0x11,(%ecx,%eax,1)
    for (int i = 0; i < size; i++)
  106f1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  106f1e:	83 c0 01             	add    $0x1,%eax
  106f21:	89 45 ec             	mov    %eax,-0x14(%ebp)
  106f24:	e9 dc ff ff ff       	jmp    106f05 <test_dtor+0x25>
}
  106f29:	83 c4 14             	add    $0x14,%esp
  106f2c:	5d                   	pop    %ebp
  106f2d:	c3                   	ret    
  106f2e:	66 90                	xchg   %ax,%ax

00106f30 <list_length>:
list_length(list_entry_t *listelm) {
  106f30:	55                   	push   %ebp
  106f31:	89 e5                	mov    %esp,%ebp
  106f33:	83 ec 10             	sub    $0x10,%esp
  106f36:	8b 45 08             	mov    0x8(%ebp),%eax
  106f39:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t len = 0;
  106f3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = listelm;
  106f43:	8b 45 f8             	mov    -0x8(%ebp),%eax
  106f46:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while ((le = list_next(le)) != listelm)
  106f49:	8b 45 f0             	mov    -0x10(%ebp),%eax
  106f4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return listelm->next;
  106f4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106f52:	8b 40 04             	mov    0x4(%eax),%eax
  106f55:	89 45 f0             	mov    %eax,-0x10(%ebp)
  106f58:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  106f5b:	0f 84 0e 00 00 00    	je     106f6f <list_length+0x3f>
        len ++;
  106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106f64:	83 c0 01             	add    $0x1,%eax
  106f67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != listelm)
  106f6a:	e9 da ff ff ff       	jmp    106f49 <list_length+0x19>
    return len;
  106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  106f72:	83 c4 10             	add    $0x10,%esp
  106f75:	5d                   	pop    %ebp
  106f76:	c3                   	ret    
  106f77:	66 90                	xchg   %ax,%ax
  106f79:	66 90                	xchg   %ax,%ax
  106f7b:	66 90                	xchg   %ax,%ax
  106f7d:	66 90                	xchg   %ax,%ax
  106f7f:	90                   	nop

00106f80 <buddy_init>:
        list_add(&(free_list), &(page->page_link));
    }
}

static void
buddy_init(void) {
  106f80:	55                   	push   %ebp
  106f81:	89 e5                	mov    %esp,%ebp
  106f83:	50                   	push   %eax
  106f84:	8d 05 30 49 11 00    	lea    0x114930,%eax
    list_init(&free_list);
  106f8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
  106f8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  106f90:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106f93:	89 41 04             	mov    %eax,0x4(%ecx)
  106f96:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  106f99:	89 01                	mov    %eax,(%ecx)
    nr_free = 0;
  106f9b:	c7 05 38 49 11 00 00 	movl   $0x0,0x114938
  106fa2:	00 00 00 
}
  106fa5:	83 c4 04             	add    $0x4,%esp
  106fa8:	5d                   	pop    %ebp
  106fa9:	c3                   	ret    
  106faa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00106fb0 <buddy_init_memmap>:

static void
buddy_init_memmap(struct Page *base, size_t n) {
  106fb0:	55                   	push   %ebp
  106fb1:	89 e5                	mov    %esp,%ebp
  106fb3:	56                   	push   %esi
  106fb4:	83 ec 34             	sub    $0x34,%esp
  106fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
  106fba:	8b 4d 08             	mov    0x8(%ebp),%ecx
  106fbd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  106fc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(n > 0);
  106fc3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  106fc7:	0f 87 32 00 00 00    	ja     106fff <buddy_init_memmap+0x4f>
  106fcd:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  106fd3:	b9 69 00 00 00       	mov    $0x69,%ecx
  106fd8:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  106fde:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  106fe4:	89 04 24             	mov    %eax,(%esp)
  106fe7:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
  106fee:	00 
  106fef:	89 54 24 08          	mov    %edx,0x8(%esp)
  106ff3:	89 74 24 0c          	mov    %esi,0xc(%esp)
  106ff7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  106ffa:	e8 51 94 ff ff       	call   100450 <__panic>
  106fff:	e9 00 00 00 00       	jmp    107004 <buddy_init_memmap+0x54>
    // Init pages
    for (struct Page *p = base; p < base + n; p++) {
  107004:	8b 45 ec             	mov    -0x14(%ebp),%eax
  107007:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10700a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10700d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  107010:	6b 55 e8 14          	imul   $0x14,-0x18(%ebp),%edx
  107014:	01 d1                	add    %edx,%ecx
  107016:	39 c8                	cmp    %ecx,%eax
  107018:	0f 83 92 00 00 00    	jae    1070b0 <buddy_init_memmap+0x100>
        assert(PageReserved(p));
  10701e:	e9 00 00 00 00       	jmp    107023 <buddy_init_memmap+0x73>
  107023:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  107026:	83 c0 04             	add    $0x4,%eax
  107029:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  107030:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  107033:	8b 45 f4             	mov    -0xc(%ebp),%eax
  107036:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  107039:	0f a3 08             	bt     %ecx,(%eax)
  10703c:	19 c0                	sbb    %eax,%eax
  10703e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return oldbit != 0;
  107041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  107045:	0f 95 c2             	setne  %dl
  107048:	80 e2 01             	and    $0x1,%dl
  10704b:	0f b6 c2             	movzbl %dl,%eax
  10704e:	83 f8 00             	cmp    $0x0,%eax
  107051:	0f 85 32 00 00 00    	jne    107089 <buddy_init_memmap+0xd9>
  107057:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10705d:	b9 6c 00 00 00       	mov    $0x6c,%ecx
  107062:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  107068:	8d 35 e4 00 11 00    	lea    0x1100e4,%esi
  10706e:	89 04 24             	mov    %eax,(%esp)
  107071:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
  107078:	00 
  107079:	89 54 24 08          	mov    %edx,0x8(%esp)
  10707d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  107081:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  107084:	e8 c7 93 ff ff       	call   100450 <__panic>
  107089:	e9 00 00 00 00       	jmp    10708e <buddy_init_memmap+0xde>
        p->flags = p->property = 0;
  10708e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  107091:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  107098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10709b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    for (struct Page *p = base; p < base + n; p++) {
  1070a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1070a5:	83 c0 14             	add    $0x14,%eax
  1070a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1070ab:	e9 5a ff ff ff       	jmp    10700a <buddy_init_memmap+0x5a>
    }
    // Init size
    buddy_init_size(n);
  1070b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1070b3:	89 04 24             	mov    %eax,(%esp)
  1070b6:	e8 45 2e 00 00       	call   109f00 <buddy_init_size>
    // Init segment
    buddy_init_segment(base);
  1070bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1070be:	89 04 24             	mov    %eax,(%esp)
  1070c1:	e8 8a 34 00 00       	call   10a550 <buddy_init_segment>
}
  1070c6:	83 c4 34             	add    $0x34,%esp
  1070c9:	5e                   	pop    %esi
  1070ca:	5d                   	pop    %ebp
  1070cb:	c3                   	ret    
  1070cc:	0f 1f 40 00          	nopl   0x0(%eax)

001070d0 <buddy_alloc_pages>:

static struct Page *
buddy_alloc_pages(size_t n) {
  1070d0:	55                   	push   %ebp
  1070d1:	89 e5                	mov    %esp,%ebp
  1070d3:	53                   	push   %ebx
  1070d4:	57                   	push   %edi
  1070d5:	56                   	push   %esi
  1070d6:	81 ec 8c 01 00 00    	sub    $0x18c,%esp
  1070dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1070df:	89 45 9c             	mov    %eax,-0x64(%ebp)
    assert(n > 0);
  1070e2:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
  1070e6:	0f 87 35 00 00 00    	ja     107121 <buddy_alloc_pages+0x51>
  1070ec:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  1070f2:	b9 77 00 00 00       	mov    $0x77,%ecx
  1070f7:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1070fd:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  107103:	89 04 24             	mov    %eax,(%esp)
  107106:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
  10710d:	00 
  10710e:	89 54 24 08          	mov    %edx,0x8(%esp)
  107112:	89 74 24 0c          	mov    %esi,0xc(%esp)
  107116:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  10711c:	e8 2f 93 ff ff       	call   100450 <__panic>
  107121:	e9 00 00 00 00       	jmp    107126 <buddy_alloc_pages+0x56>
    struct Page *page;
    size_t block = BUDDY_ROOT;
  107126:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
    size_t length = UINT32_ROUND_UP(n);
  10712d:	8b 45 9c             	mov    -0x64(%ebp),%eax
  107130:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  107133:	8b 55 9c             	mov    -0x64(%ebp),%edx
  107136:	c1 ea 01             	shr    $0x1,%edx
  107139:	09 d1                	or     %edx,%ecx
  10713b:	8b 55 9c             	mov    -0x64(%ebp),%edx
  10713e:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107141:	c1 ee 01             	shr    $0x1,%esi
  107144:	09 f2                	or     %esi,%edx
  107146:	c1 ea 02             	shr    $0x2,%edx
  107149:	09 d1                	or     %edx,%ecx
  10714b:	8b 55 9c             	mov    -0x64(%ebp),%edx
  10714e:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107151:	c1 ee 01             	shr    $0x1,%esi
  107154:	09 f2                	or     %esi,%edx
  107156:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107159:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10715c:	c1 ef 01             	shr    $0x1,%edi
  10715f:	09 fe                	or     %edi,%esi
  107161:	c1 ee 02             	shr    $0x2,%esi
  107164:	09 f2                	or     %esi,%edx
  107166:	c1 ea 04             	shr    $0x4,%edx
  107169:	09 d1                	or     %edx,%ecx
  10716b:	8b 55 9c             	mov    -0x64(%ebp),%edx
  10716e:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107171:	c1 ee 01             	shr    $0x1,%esi
  107174:	09 f2                	or     %esi,%edx
  107176:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107179:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10717c:	c1 ef 01             	shr    $0x1,%edi
  10717f:	09 fe                	or     %edi,%esi
  107181:	c1 ee 02             	shr    $0x2,%esi
  107184:	09 f2                	or     %esi,%edx
  107186:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107189:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10718c:	c1 ef 01             	shr    $0x1,%edi
  10718f:	09 fe                	or     %edi,%esi
  107191:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107194:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107197:	c1 eb 01             	shr    $0x1,%ebx
  10719a:	09 df                	or     %ebx,%edi
  10719c:	c1 ef 02             	shr    $0x2,%edi
  10719f:	09 fe                	or     %edi,%esi
  1071a1:	c1 ee 04             	shr    $0x4,%esi
  1071a4:	09 f2                	or     %esi,%edx
  1071a6:	c1 ea 08             	shr    $0x8,%edx
  1071a9:	09 d1                	or     %edx,%ecx
  1071ab:	8b 55 9c             	mov    -0x64(%ebp),%edx
  1071ae:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1071b1:	c1 ee 01             	shr    $0x1,%esi
  1071b4:	09 f2                	or     %esi,%edx
  1071b6:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1071b9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1071bc:	c1 ef 01             	shr    $0x1,%edi
  1071bf:	09 fe                	or     %edi,%esi
  1071c1:	c1 ee 02             	shr    $0x2,%esi
  1071c4:	09 f2                	or     %esi,%edx
  1071c6:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1071c9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1071cc:	c1 ef 01             	shr    $0x1,%edi
  1071cf:	09 fe                	or     %edi,%esi
  1071d1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1071d4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  1071d7:	c1 eb 01             	shr    $0x1,%ebx
  1071da:	09 df                	or     %ebx,%edi
  1071dc:	c1 ef 02             	shr    $0x2,%edi
  1071df:	09 fe                	or     %edi,%esi
  1071e1:	c1 ee 04             	shr    $0x4,%esi
  1071e4:	09 f2                	or     %esi,%edx
  1071e6:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1071e9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1071ec:	c1 ef 01             	shr    $0x1,%edi
  1071ef:	09 fe                	or     %edi,%esi
  1071f1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1071f4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  1071f7:	c1 eb 01             	shr    $0x1,%ebx
  1071fa:	09 df                	or     %ebx,%edi
  1071fc:	c1 ef 02             	shr    $0x2,%edi
  1071ff:	09 fe                	or     %edi,%esi
  107201:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107204:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107207:	c1 eb 01             	shr    $0x1,%ebx
  10720a:	09 df                	or     %ebx,%edi
  10720c:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  10720f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  107215:	8b 45 9c             	mov    -0x64(%ebp),%eax
  107218:	c1 e8 01             	shr    $0x1,%eax
  10721b:	09 c3                	or     %eax,%ebx
  10721d:	c1 eb 02             	shr    $0x2,%ebx
  107220:	09 df                	or     %ebx,%edi
  107222:	c1 ef 04             	shr    $0x4,%edi
  107225:	09 fe                	or     %edi,%esi
  107227:	c1 ee 08             	shr    $0x8,%esi
  10722a:	09 f2                	or     %esi,%edx
  10722c:	c1 ea 10             	shr    $0x10,%edx
  10722f:	09 d1                	or     %edx,%ecx
  107231:	c1 e9 01             	shr    $0x1,%ecx
  107234:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10723a:	21 c8                	and    %ecx,%eax
  10723c:	83 f8 00             	cmp    $0x0,%eax
  10723f:	0f 84 2e 01 00 00    	je     107373 <buddy_alloc_pages+0x2a3>
  107245:	8b 45 9c             	mov    -0x64(%ebp),%eax
  107248:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10724b:	8b 55 9c             	mov    -0x64(%ebp),%edx
  10724e:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107251:	c1 ee 01             	shr    $0x1,%esi
  107254:	09 f2                	or     %esi,%edx
  107256:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107259:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10725c:	c1 ef 01             	shr    $0x1,%edi
  10725f:	09 fe                	or     %edi,%esi
  107261:	c1 ee 02             	shr    $0x2,%esi
  107264:	09 f2                	or     %esi,%edx
  107266:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107269:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10726c:	c1 ef 01             	shr    $0x1,%edi
  10726f:	09 fe                	or     %edi,%esi
  107271:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107274:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107277:	c1 eb 01             	shr    $0x1,%ebx
  10727a:	09 df                	or     %ebx,%edi
  10727c:	c1 ef 02             	shr    $0x2,%edi
  10727f:	09 fe                	or     %edi,%esi
  107281:	c1 ee 04             	shr    $0x4,%esi
  107284:	09 f2                	or     %esi,%edx
  107286:	8b 75 9c             	mov    -0x64(%ebp),%esi
  107289:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10728c:	c1 ef 01             	shr    $0x1,%edi
  10728f:	09 fe                	or     %edi,%esi
  107291:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107294:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107297:	c1 eb 01             	shr    $0x1,%ebx
  10729a:	09 df                	or     %ebx,%edi
  10729c:	c1 ef 02             	shr    $0x2,%edi
  10729f:	09 fe                	or     %edi,%esi
  1072a1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1072a4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  1072a7:	c1 eb 01             	shr    $0x1,%ebx
  1072aa:	09 df                	or     %ebx,%edi
  1072ac:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  1072af:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  1072b5:	8b 45 9c             	mov    -0x64(%ebp),%eax
  1072b8:	c1 e8 01             	shr    $0x1,%eax
  1072bb:	09 c3                	or     %eax,%ebx
  1072bd:	c1 eb 02             	shr    $0x2,%ebx
  1072c0:	09 df                	or     %ebx,%edi
  1072c2:	c1 ef 04             	shr    $0x4,%edi
  1072c5:	09 fe                	or     %edi,%esi
  1072c7:	c1 ee 08             	shr    $0x8,%esi
  1072ca:	09 f2                	or     %esi,%edx
  1072cc:	8b 45 9c             	mov    -0x64(%ebp),%eax
  1072cf:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1072d2:	c1 ee 01             	shr    $0x1,%esi
  1072d5:	09 f0                	or     %esi,%eax
  1072d7:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1072da:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1072dd:	c1 ef 01             	shr    $0x1,%edi
  1072e0:	09 fe                	or     %edi,%esi
  1072e2:	c1 ee 02             	shr    $0x2,%esi
  1072e5:	09 f0                	or     %esi,%eax
  1072e7:	8b 75 9c             	mov    -0x64(%ebp),%esi
  1072ea:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1072ed:	c1 ef 01             	shr    $0x1,%edi
  1072f0:	09 fe                	or     %edi,%esi
  1072f2:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  1072f5:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  1072f8:	c1 eb 01             	shr    $0x1,%ebx
  1072fb:	09 df                	or     %ebx,%edi
  1072fd:	c1 ef 02             	shr    $0x2,%edi
  107300:	09 fe                	or     %edi,%esi
  107302:	c1 ee 04             	shr    $0x4,%esi
  107305:	09 f0                	or     %esi,%eax
  107307:	8b 75 9c             	mov    -0x64(%ebp),%esi
  10730a:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10730d:	c1 ef 01             	shr    $0x1,%edi
  107310:	09 fe                	or     %edi,%esi
  107312:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107315:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107318:	c1 eb 01             	shr    $0x1,%ebx
  10731b:	09 df                	or     %ebx,%edi
  10731d:	c1 ef 02             	shr    $0x2,%edi
  107320:	09 fe                	or     %edi,%esi
  107322:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  107325:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107328:	c1 eb 01             	shr    $0x1,%ebx
  10732b:	09 df                	or     %ebx,%edi
  10732d:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
  107330:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  107336:	8b 45 9c             	mov    -0x64(%ebp),%eax
  107339:	c1 e8 01             	shr    $0x1,%eax
  10733c:	09 c3                	or     %eax,%ebx
  10733e:	c1 eb 02             	shr    $0x2,%ebx
  107341:	09 df                	or     %ebx,%edi
  107343:	c1 ef 04             	shr    $0x4,%edi
  107346:	09 fe                	or     %edi,%esi
  107348:	c1 ee 08             	shr    $0x8,%esi
  10734b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
  107351:	09 f0                	or     %esi,%eax
  107353:	c1 e8 10             	shr    $0x10,%eax
  107356:	09 c2                	or     %eax,%edx
  107358:	c1 ea 01             	shr    $0x1,%edx
  10735b:	21 d1                	and    %edx,%ecx
  10735d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  107363:	29 c8                	sub    %ecx,%eax
  107365:	c1 e0 01             	shl    $0x1,%eax
  107368:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10736e:	e9 09 00 00 00       	jmp    10737c <buddy_alloc_pages+0x2ac>
  107373:	8b 45 9c             	mov    -0x64(%ebp),%eax
  107376:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10737c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
  107382:	89 45 90             	mov    %eax,-0x70(%ebp)
  107385:	31 c0                	xor    %eax,%eax
  107387:	88 c1                	mov    %al,%cl
    // Find block
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
  107389:	8b 45 90             	mov    -0x70(%ebp),%eax
  10738c:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10738f:	8b 35 18 49 11 00    	mov    0x114918,%esi
  107395:	3b 04 96             	cmp    (%esi,%edx,4),%eax
  107398:	88 8d 67 ff ff ff    	mov    %cl,-0x99(%ebp)
  10739e:	0f 87 b4 02 00 00    	ja     107658 <buddy_alloc_pages+0x588>
  1073a4:	8b 45 90             	mov    -0x70(%ebp),%eax
  1073a7:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  1073ad:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1073b0:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1073b3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1073b6:	c1 ef 01             	shr    $0x1,%edi
  1073b9:	09 fe                	or     %edi,%esi
  1073bb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1073be:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1073c1:	c1 eb 01             	shr    $0x1,%ebx
  1073c4:	09 df                	or     %ebx,%edi
  1073c6:	c1 ef 02             	shr    $0x2,%edi
  1073c9:	09 fe                	or     %edi,%esi
  1073cb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1073ce:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1073d1:	c1 eb 01             	shr    $0x1,%ebx
  1073d4:	09 df                	or     %ebx,%edi
  1073d6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1073d9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1073df:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1073e2:	c1 e8 01             	shr    $0x1,%eax
  1073e5:	09 c3                	or     %eax,%ebx
  1073e7:	c1 eb 02             	shr    $0x2,%ebx
  1073ea:	09 df                	or     %ebx,%edi
  1073ec:	c1 ef 04             	shr    $0x4,%edi
  1073ef:	09 fe                	or     %edi,%esi
  1073f1:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1073f4:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1073f7:	c1 ef 01             	shr    $0x1,%edi
  1073fa:	09 f8                	or     %edi,%eax
  1073fc:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1073ff:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107402:	c1 eb 01             	shr    $0x1,%ebx
  107405:	09 df                	or     %ebx,%edi
  107407:	c1 ef 02             	shr    $0x2,%edi
  10740a:	09 f8                	or     %edi,%eax
  10740c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10740f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107412:	c1 eb 01             	shr    $0x1,%ebx
  107415:	09 df                	or     %ebx,%edi
  107417:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10741a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  107420:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107423:	c1 e8 01             	shr    $0x1,%eax
  107426:	09 c3                	or     %eax,%ebx
  107428:	c1 eb 02             	shr    $0x2,%ebx
  10742b:	09 df                	or     %ebx,%edi
  10742d:	c1 ef 04             	shr    $0x4,%edi
  107430:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
  107436:	09 f8                	or     %edi,%eax
  107438:	c1 e8 08             	shr    $0x8,%eax
  10743b:	09 c6                	or     %eax,%esi
  10743d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107440:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107443:	c1 ef 01             	shr    $0x1,%edi
  107446:	09 f8                	or     %edi,%eax
  107448:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10744b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10744e:	c1 eb 01             	shr    $0x1,%ebx
  107451:	09 df                	or     %ebx,%edi
  107453:	c1 ef 02             	shr    $0x2,%edi
  107456:	09 f8                	or     %edi,%eax
  107458:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10745b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10745e:	c1 eb 01             	shr    $0x1,%ebx
  107461:	09 df                	or     %ebx,%edi
  107463:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107466:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  10746c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10746f:	c1 e8 01             	shr    $0x1,%eax
  107472:	09 c3                	or     %eax,%ebx
  107474:	c1 eb 02             	shr    $0x2,%ebx
  107477:	09 df                	or     %ebx,%edi
  107479:	c1 ef 04             	shr    $0x4,%edi
  10747c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
  107482:	09 f8                	or     %edi,%eax
  107484:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107487:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10748a:	c1 eb 01             	shr    $0x1,%ebx
  10748d:	09 df                	or     %ebx,%edi
  10748f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107492:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  107498:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10749b:	c1 e8 01             	shr    $0x1,%eax
  10749e:	09 c3                	or     %eax,%ebx
  1074a0:	c1 eb 02             	shr    $0x2,%ebx
  1074a3:	09 df                	or     %ebx,%edi
  1074a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1074a8:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1074ab:	c1 eb 01             	shr    $0x1,%ebx
  1074ae:	09 d8                	or     %ebx,%eax
  1074b0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1074b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  1074b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1074bc:	c1 e8 01             	shr    $0x1,%eax
  1074bf:	09 c3                	or     %eax,%ebx
  1074c1:	c1 eb 02             	shr    $0x2,%ebx
  1074c4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
  1074ca:	09 d8                	or     %ebx,%eax
  1074cc:	c1 e8 04             	shr    $0x4,%eax
  1074cf:	09 c7                	or     %eax,%edi
  1074d1:	c1 ef 08             	shr    $0x8,%edi
  1074d4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
  1074da:	09 f8                	or     %edi,%eax
  1074dc:	c1 e8 10             	shr    $0x10,%eax
  1074df:	09 c6                	or     %eax,%esi
  1074e1:	c1 ee 01             	shr    $0x1,%esi
  1074e4:	21 f2                	and    %esi,%edx
  1074e6:	83 fa 00             	cmp    $0x0,%edx
  1074e9:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  1074ef:	0f 84 2b 01 00 00    	je     107620 <buddy_alloc_pages+0x550>
  1074f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1074f8:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1074fb:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1074fe:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107501:	c1 ee 01             	shr    $0x1,%esi
  107504:	09 f2                	or     %esi,%edx
  107506:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107509:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10750c:	c1 ef 01             	shr    $0x1,%edi
  10750f:	09 fe                	or     %edi,%esi
  107511:	c1 ee 02             	shr    $0x2,%esi
  107514:	09 f2                	or     %esi,%edx
  107516:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107519:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10751c:	c1 ef 01             	shr    $0x1,%edi
  10751f:	09 fe                	or     %edi,%esi
  107521:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107524:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107527:	c1 eb 01             	shr    $0x1,%ebx
  10752a:	09 df                	or     %ebx,%edi
  10752c:	c1 ef 02             	shr    $0x2,%edi
  10752f:	09 fe                	or     %edi,%esi
  107531:	c1 ee 04             	shr    $0x4,%esi
  107534:	09 f2                	or     %esi,%edx
  107536:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107539:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10753c:	c1 ef 01             	shr    $0x1,%edi
  10753f:	09 fe                	or     %edi,%esi
  107541:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107544:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107547:	c1 eb 01             	shr    $0x1,%ebx
  10754a:	09 df                	or     %ebx,%edi
  10754c:	c1 ef 02             	shr    $0x2,%edi
  10754f:	09 fe                	or     %edi,%esi
  107551:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107554:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107557:	c1 eb 01             	shr    $0x1,%ebx
  10755a:	09 df                	or     %ebx,%edi
  10755c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10755f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  107565:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107568:	c1 e8 01             	shr    $0x1,%eax
  10756b:	09 c3                	or     %eax,%ebx
  10756d:	c1 eb 02             	shr    $0x2,%ebx
  107570:	09 df                	or     %ebx,%edi
  107572:	c1 ef 04             	shr    $0x4,%edi
  107575:	09 fe                	or     %edi,%esi
  107577:	c1 ee 08             	shr    $0x8,%esi
  10757a:	09 f2                	or     %esi,%edx
  10757c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10757f:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107582:	c1 ee 01             	shr    $0x1,%esi
  107585:	09 f0                	or     %esi,%eax
  107587:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10758a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10758d:	c1 ef 01             	shr    $0x1,%edi
  107590:	09 fe                	or     %edi,%esi
  107592:	c1 ee 02             	shr    $0x2,%esi
  107595:	09 f0                	or     %esi,%eax
  107597:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10759a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10759d:	c1 ef 01             	shr    $0x1,%edi
  1075a0:	09 fe                	or     %edi,%esi
  1075a2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1075a5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1075a8:	c1 eb 01             	shr    $0x1,%ebx
  1075ab:	09 df                	or     %ebx,%edi
  1075ad:	c1 ef 02             	shr    $0x2,%edi
  1075b0:	09 fe                	or     %edi,%esi
  1075b2:	c1 ee 04             	shr    $0x4,%esi
  1075b5:	09 f0                	or     %esi,%eax
  1075b7:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1075ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1075bd:	c1 ef 01             	shr    $0x1,%edi
  1075c0:	09 fe                	or     %edi,%esi
  1075c2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1075c5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1075c8:	c1 eb 01             	shr    $0x1,%ebx
  1075cb:	09 df                	or     %ebx,%edi
  1075cd:	c1 ef 02             	shr    $0x2,%edi
  1075d0:	09 fe                	or     %edi,%esi
  1075d2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1075d5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1075d8:	c1 eb 01             	shr    $0x1,%ebx
  1075db:	09 df                	or     %ebx,%edi
  1075dd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1075e0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  1075e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1075e9:	c1 e8 01             	shr    $0x1,%eax
  1075ec:	09 c3                	or     %eax,%ebx
  1075ee:	c1 eb 02             	shr    $0x2,%ebx
  1075f1:	09 df                	or     %ebx,%edi
  1075f3:	c1 ef 04             	shr    $0x4,%edi
  1075f6:	09 fe                	or     %edi,%esi
  1075f8:	c1 ee 08             	shr    $0x8,%esi
  1075fb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
  107601:	09 f0                	or     %esi,%eax
  107603:	c1 e8 10             	shr    $0x10,%eax
  107606:	09 c2                	or     %eax,%edx
  107608:	c1 ea 01             	shr    $0x1,%edx
  10760b:	21 d1                	and    %edx,%ecx
  10760d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
  107613:	29 c8                	sub    %ecx,%eax
  107615:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  10761b:	e9 09 00 00 00       	jmp    107629 <buddy_alloc_pages+0x559>
  107620:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107623:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  107629:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
  10762f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
  107635:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  10763b:	89 c8                	mov    %ecx,%eax
  10763d:	31 d2                	xor    %edx,%edx
  10763f:	8b b5 3c ff ff ff    	mov    -0xc4(%ebp),%esi
  107645:	f7 f6                	div    %esi
  107647:	8b bd 60 ff ff ff    	mov    -0xa0(%ebp),%edi
  10764d:	39 c7                	cmp    %eax,%edi
  10764f:	0f 92 c3             	setb   %bl
  107652:	88 9d 67 ff ff ff    	mov    %bl,-0x99(%ebp)
  107658:	8a 85 67 ff ff ff    	mov    -0x99(%ebp),%al
  10765e:	a8 01                	test   $0x1,%al
  107660:	0f 85 05 00 00 00    	jne    10766b <buddy_alloc_pages+0x59b>
  107666:	e9 ca 0c 00 00       	jmp    108335 <buddy_alloc_pages+0x1265>
        size_t left = BUDDY_LEFT(block);
  10766b:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10766e:	c1 e0 01             	shl    $0x1,%eax
  107671:	89 45 8c             	mov    %eax,-0x74(%ebp)
        size_t right = BUDDY_RIGHT(block);
  107674:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107677:	c1 e0 01             	shl    $0x1,%eax
  10767a:	83 c0 01             	add    $0x1,%eax
  10767d:	89 45 88             	mov    %eax,-0x78(%ebp)
        if (BUDDY_EMPTY(block)) {                   // Split
  107680:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107683:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  107689:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10768c:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  107692:	8b 55 94             	mov    -0x6c(%ebp),%edx
  107695:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107698:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10769b:	c1 ef 01             	shr    $0x1,%edi
  10769e:	09 fe                	or     %edi,%esi
  1076a0:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1076a3:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076a6:	c1 eb 01             	shr    $0x1,%ebx
  1076a9:	09 df                	or     %ebx,%edi
  1076ab:	c1 ef 02             	shr    $0x2,%edi
  1076ae:	09 fe                	or     %edi,%esi
  1076b0:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1076b3:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076b6:	c1 eb 01             	shr    $0x1,%ebx
  1076b9:	09 df                	or     %ebx,%edi
  1076bb:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076be:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  1076c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1076c7:	c1 e8 01             	shr    $0x1,%eax
  1076ca:	09 c3                	or     %eax,%ebx
  1076cc:	c1 eb 02             	shr    $0x2,%ebx
  1076cf:	09 df                	or     %ebx,%edi
  1076d1:	c1 ef 04             	shr    $0x4,%edi
  1076d4:	09 fe                	or     %edi,%esi
  1076d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1076d9:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1076dc:	c1 ef 01             	shr    $0x1,%edi
  1076df:	09 f8                	or     %edi,%eax
  1076e1:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1076e4:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076e7:	c1 eb 01             	shr    $0x1,%ebx
  1076ea:	09 df                	or     %ebx,%edi
  1076ec:	c1 ef 02             	shr    $0x2,%edi
  1076ef:	09 f8                	or     %edi,%eax
  1076f1:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1076f4:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076f7:	c1 eb 01             	shr    $0x1,%ebx
  1076fa:	09 df                	or     %ebx,%edi
  1076fc:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1076ff:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  107705:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107708:	c1 e8 01             	shr    $0x1,%eax
  10770b:	09 c3                	or     %eax,%ebx
  10770d:	c1 eb 02             	shr    $0x2,%ebx
  107710:	09 df                	or     %ebx,%edi
  107712:	c1 ef 04             	shr    $0x4,%edi
  107715:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
  10771b:	09 f8                	or     %edi,%eax
  10771d:	c1 e8 08             	shr    $0x8,%eax
  107720:	09 c6                	or     %eax,%esi
  107722:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107725:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107728:	c1 ef 01             	shr    $0x1,%edi
  10772b:	09 f8                	or     %edi,%eax
  10772d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107730:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107733:	c1 eb 01             	shr    $0x1,%ebx
  107736:	09 df                	or     %ebx,%edi
  107738:	c1 ef 02             	shr    $0x2,%edi
  10773b:	09 f8                	or     %edi,%eax
  10773d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107740:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107743:	c1 eb 01             	shr    $0x1,%ebx
  107746:	09 df                	or     %ebx,%edi
  107748:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10774b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  107751:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107754:	c1 e8 01             	shr    $0x1,%eax
  107757:	09 c3                	or     %eax,%ebx
  107759:	c1 eb 02             	shr    $0x2,%ebx
  10775c:	09 df                	or     %ebx,%edi
  10775e:	c1 ef 04             	shr    $0x4,%edi
  107761:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
  107767:	09 f8                	or     %edi,%eax
  107769:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10776c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10776f:	c1 eb 01             	shr    $0x1,%ebx
  107772:	09 df                	or     %ebx,%edi
  107774:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107777:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  10777d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107780:	c1 e8 01             	shr    $0x1,%eax
  107783:	09 c3                	or     %eax,%ebx
  107785:	c1 eb 02             	shr    $0x2,%ebx
  107788:	09 df                	or     %ebx,%edi
  10778a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10778d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107790:	c1 eb 01             	shr    $0x1,%ebx
  107793:	09 d8                	or     %ebx,%eax
  107795:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107798:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
  10779e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1077a1:	c1 e8 01             	shr    $0x1,%eax
  1077a4:	09 c3                	or     %eax,%ebx
  1077a6:	c1 eb 02             	shr    $0x2,%ebx
  1077a9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
  1077af:	09 d8                	or     %ebx,%eax
  1077b1:	c1 e8 04             	shr    $0x4,%eax
  1077b4:	09 c7                	or     %eax,%edi
  1077b6:	c1 ef 08             	shr    $0x8,%edi
  1077b9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  1077bf:	09 f8                	or     %edi,%eax
  1077c1:	c1 e8 10             	shr    $0x10,%eax
  1077c4:	09 c6                	or     %eax,%esi
  1077c6:	c1 ee 01             	shr    $0x1,%esi
  1077c9:	21 f2                	and    %esi,%edx
  1077cb:	83 fa 00             	cmp    $0x0,%edx
  1077ce:	89 8d 24 ff ff ff    	mov    %ecx,-0xdc(%ebp)
  1077d4:	0f 84 2b 01 00 00    	je     107905 <buddy_alloc_pages+0x835>
  1077da:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1077dd:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1077e0:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1077e3:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1077e6:	c1 ee 01             	shr    $0x1,%esi
  1077e9:	09 f2                	or     %esi,%edx
  1077eb:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1077ee:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1077f1:	c1 ef 01             	shr    $0x1,%edi
  1077f4:	09 fe                	or     %edi,%esi
  1077f6:	c1 ee 02             	shr    $0x2,%esi
  1077f9:	09 f2                	or     %esi,%edx
  1077fb:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1077fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107801:	c1 ef 01             	shr    $0x1,%edi
  107804:	09 fe                	or     %edi,%esi
  107806:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107809:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10780c:	c1 eb 01             	shr    $0x1,%ebx
  10780f:	09 df                	or     %ebx,%edi
  107811:	c1 ef 02             	shr    $0x2,%edi
  107814:	09 fe                	or     %edi,%esi
  107816:	c1 ee 04             	shr    $0x4,%esi
  107819:	09 f2                	or     %esi,%edx
  10781b:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10781e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107821:	c1 ef 01             	shr    $0x1,%edi
  107824:	09 fe                	or     %edi,%esi
  107826:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107829:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10782c:	c1 eb 01             	shr    $0x1,%ebx
  10782f:	09 df                	or     %ebx,%edi
  107831:	c1 ef 02             	shr    $0x2,%edi
  107834:	09 fe                	or     %edi,%esi
  107836:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107839:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10783c:	c1 eb 01             	shr    $0x1,%ebx
  10783f:	09 df                	or     %ebx,%edi
  107841:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107844:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
  10784a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10784d:	c1 e8 01             	shr    $0x1,%eax
  107850:	09 c3                	or     %eax,%ebx
  107852:	c1 eb 02             	shr    $0x2,%ebx
  107855:	09 df                	or     %ebx,%edi
  107857:	c1 ef 04             	shr    $0x4,%edi
  10785a:	09 fe                	or     %edi,%esi
  10785c:	c1 ee 08             	shr    $0x8,%esi
  10785f:	09 f2                	or     %esi,%edx
  107861:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107864:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107867:	c1 ee 01             	shr    $0x1,%esi
  10786a:	09 f0                	or     %esi,%eax
  10786c:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10786f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107872:	c1 ef 01             	shr    $0x1,%edi
  107875:	09 fe                	or     %edi,%esi
  107877:	c1 ee 02             	shr    $0x2,%esi
  10787a:	09 f0                	or     %esi,%eax
  10787c:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10787f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107882:	c1 ef 01             	shr    $0x1,%edi
  107885:	09 fe                	or     %edi,%esi
  107887:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10788a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10788d:	c1 eb 01             	shr    $0x1,%ebx
  107890:	09 df                	or     %ebx,%edi
  107892:	c1 ef 02             	shr    $0x2,%edi
  107895:	09 fe                	or     %edi,%esi
  107897:	c1 ee 04             	shr    $0x4,%esi
  10789a:	09 f0                	or     %esi,%eax
  10789c:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10789f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1078a2:	c1 ef 01             	shr    $0x1,%edi
  1078a5:	09 fe                	or     %edi,%esi
  1078a7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1078aa:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1078ad:	c1 eb 01             	shr    $0x1,%ebx
  1078b0:	09 df                	or     %ebx,%edi
  1078b2:	c1 ef 02             	shr    $0x2,%edi
  1078b5:	09 fe                	or     %edi,%esi
  1078b7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1078ba:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1078bd:	c1 eb 01             	shr    $0x1,%ebx
  1078c0:	09 df                	or     %ebx,%edi
  1078c2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1078c5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
  1078cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1078ce:	c1 e8 01             	shr    $0x1,%eax
  1078d1:	09 c3                	or     %eax,%ebx
  1078d3:	c1 eb 02             	shr    $0x2,%ebx
  1078d6:	09 df                	or     %ebx,%edi
  1078d8:	c1 ef 04             	shr    $0x4,%edi
  1078db:	09 fe                	or     %edi,%esi
  1078dd:	c1 ee 08             	shr    $0x8,%esi
  1078e0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
  1078e6:	09 f0                	or     %esi,%eax
  1078e8:	c1 e8 10             	shr    $0x10,%eax
  1078eb:	09 c2                	or     %eax,%edx
  1078ed:	c1 ea 01             	shr    $0x1,%edx
  1078f0:	21 d1                	and    %edx,%ecx
  1078f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
  1078f8:	29 c8                	sub    %ecx,%eax
  1078fa:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  107900:	e9 09 00 00 00       	jmp    10790e <buddy_alloc_pages+0x83e>
  107905:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107908:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  10790e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
  107914:	8b 8d 24 ff ff ff    	mov    -0xdc(%ebp),%ecx
  10791a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
  107920:	89 c8                	mov    %ecx,%eax
  107922:	31 d2                	xor    %edx,%edx
  107924:	8b b5 14 ff ff ff    	mov    -0xec(%ebp),%esi
  10792a:	f7 f6                	div    %esi
  10792c:	8b bd 38 ff ff ff    	mov    -0xc8(%ebp),%edi
  107932:	39 c7                	cmp    %eax,%edi
  107934:	0f 85 22 09 00 00    	jne    10825c <buddy_alloc_pages+0x118c>
            size_t begin = BUDDY_BEGIN(block);
  10793a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10793d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107940:	8b 55 94             	mov    -0x6c(%ebp),%edx
  107943:	c1 ea 01             	shr    $0x1,%edx
  107946:	09 d1                	or     %edx,%ecx
  107948:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10794b:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10794e:	c1 ee 01             	shr    $0x1,%esi
  107951:	09 f2                	or     %esi,%edx
  107953:	c1 ea 02             	shr    $0x2,%edx
  107956:	09 d1                	or     %edx,%ecx
  107958:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10795b:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10795e:	c1 ee 01             	shr    $0x1,%esi
  107961:	09 f2                	or     %esi,%edx
  107963:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107966:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107969:	c1 ef 01             	shr    $0x1,%edi
  10796c:	09 fe                	or     %edi,%esi
  10796e:	c1 ee 02             	shr    $0x2,%esi
  107971:	09 f2                	or     %esi,%edx
  107973:	c1 ea 04             	shr    $0x4,%edx
  107976:	09 d1                	or     %edx,%ecx
  107978:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10797b:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10797e:	c1 ee 01             	shr    $0x1,%esi
  107981:	09 f2                	or     %esi,%edx
  107983:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107986:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107989:	c1 ef 01             	shr    $0x1,%edi
  10798c:	09 fe                	or     %edi,%esi
  10798e:	c1 ee 02             	shr    $0x2,%esi
  107991:	09 f2                	or     %esi,%edx
  107993:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107996:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107999:	c1 ef 01             	shr    $0x1,%edi
  10799c:	09 fe                	or     %edi,%esi
  10799e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1079a1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1079a4:	c1 eb 01             	shr    $0x1,%ebx
  1079a7:	09 df                	or     %ebx,%edi
  1079a9:	c1 ef 02             	shr    $0x2,%edi
  1079ac:	09 fe                	or     %edi,%esi
  1079ae:	c1 ee 04             	shr    $0x4,%esi
  1079b1:	09 f2                	or     %esi,%edx
  1079b3:	c1 ea 08             	shr    $0x8,%edx
  1079b6:	09 d1                	or     %edx,%ecx
  1079b8:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1079bb:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1079be:	c1 ee 01             	shr    $0x1,%esi
  1079c1:	09 f2                	or     %esi,%edx
  1079c3:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1079c6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1079c9:	c1 ef 01             	shr    $0x1,%edi
  1079cc:	09 fe                	or     %edi,%esi
  1079ce:	c1 ee 02             	shr    $0x2,%esi
  1079d1:	09 f2                	or     %esi,%edx
  1079d3:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1079d6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1079d9:	c1 ef 01             	shr    $0x1,%edi
  1079dc:	09 fe                	or     %edi,%esi
  1079de:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1079e1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1079e4:	c1 eb 01             	shr    $0x1,%ebx
  1079e7:	09 df                	or     %ebx,%edi
  1079e9:	c1 ef 02             	shr    $0x2,%edi
  1079ec:	09 fe                	or     %edi,%esi
  1079ee:	c1 ee 04             	shr    $0x4,%esi
  1079f1:	09 f2                	or     %esi,%edx
  1079f3:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1079f6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1079f9:	c1 ef 01             	shr    $0x1,%edi
  1079fc:	09 fe                	or     %edi,%esi
  1079fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a01:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a04:	c1 eb 01             	shr    $0x1,%ebx
  107a07:	09 df                	or     %ebx,%edi
  107a09:	c1 ef 02             	shr    $0x2,%edi
  107a0c:	09 fe                	or     %edi,%esi
  107a0e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a11:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a14:	c1 eb 01             	shr    $0x1,%ebx
  107a17:	09 df                	or     %ebx,%edi
  107a19:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a1c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
  107a22:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107a25:	c1 e8 01             	shr    $0x1,%eax
  107a28:	09 c3                	or     %eax,%ebx
  107a2a:	c1 eb 02             	shr    $0x2,%ebx
  107a2d:	09 df                	or     %ebx,%edi
  107a2f:	c1 ef 04             	shr    $0x4,%edi
  107a32:	09 fe                	or     %edi,%esi
  107a34:	c1 ee 08             	shr    $0x8,%esi
  107a37:	09 f2                	or     %esi,%edx
  107a39:	c1 ea 10             	shr    $0x10,%edx
  107a3c:	09 d1                	or     %edx,%ecx
  107a3e:	c1 e9 01             	shr    $0x1,%ecx
  107a41:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
  107a47:	21 c8                	and    %ecx,%eax
  107a49:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  107a4f:	8b 55 94             	mov    -0x6c(%ebp),%edx
  107a52:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107a55:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a58:	c1 ef 01             	shr    $0x1,%edi
  107a5b:	09 fe                	or     %edi,%esi
  107a5d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a60:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a63:	c1 eb 01             	shr    $0x1,%ebx
  107a66:	09 df                	or     %ebx,%edi
  107a68:	c1 ef 02             	shr    $0x2,%edi
  107a6b:	09 fe                	or     %edi,%esi
  107a6d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a70:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a73:	c1 eb 01             	shr    $0x1,%ebx
  107a76:	09 df                	or     %ebx,%edi
  107a78:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107a7b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  107a81:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107a84:	c1 e8 01             	shr    $0x1,%eax
  107a87:	09 c3                	or     %eax,%ebx
  107a89:	c1 eb 02             	shr    $0x2,%ebx
  107a8c:	09 df                	or     %ebx,%edi
  107a8e:	c1 ef 04             	shr    $0x4,%edi
  107a91:	09 fe                	or     %edi,%esi
  107a93:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107a96:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107a99:	c1 ef 01             	shr    $0x1,%edi
  107a9c:	09 f8                	or     %edi,%eax
  107a9e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107aa1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107aa4:	c1 eb 01             	shr    $0x1,%ebx
  107aa7:	09 df                	or     %ebx,%edi
  107aa9:	c1 ef 02             	shr    $0x2,%edi
  107aac:	09 f8                	or     %edi,%eax
  107aae:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107ab1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107ab4:	c1 eb 01             	shr    $0x1,%ebx
  107ab7:	09 df                	or     %ebx,%edi
  107ab9:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107abc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
  107ac2:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107ac5:	c1 e8 01             	shr    $0x1,%eax
  107ac8:	09 c3                	or     %eax,%ebx
  107aca:	c1 eb 02             	shr    $0x2,%ebx
  107acd:	09 df                	or     %ebx,%edi
  107acf:	c1 ef 04             	shr    $0x4,%edi
  107ad2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
  107ad8:	09 f8                	or     %edi,%eax
  107ada:	c1 e8 08             	shr    $0x8,%eax
  107add:	09 c6                	or     %eax,%esi
  107adf:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107ae2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107ae5:	c1 ef 01             	shr    $0x1,%edi
  107ae8:	09 f8                	or     %edi,%eax
  107aea:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107aed:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107af0:	c1 eb 01             	shr    $0x1,%ebx
  107af3:	09 df                	or     %ebx,%edi
  107af5:	c1 ef 02             	shr    $0x2,%edi
  107af8:	09 f8                	or     %edi,%eax
  107afa:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107afd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b00:	c1 eb 01             	shr    $0x1,%ebx
  107b03:	09 df                	or     %ebx,%edi
  107b05:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b08:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
  107b0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107b11:	c1 e8 01             	shr    $0x1,%eax
  107b14:	09 c3                	or     %eax,%ebx
  107b16:	c1 eb 02             	shr    $0x2,%ebx
  107b19:	09 df                	or     %ebx,%edi
  107b1b:	c1 ef 04             	shr    $0x4,%edi
  107b1e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
  107b24:	09 f8                	or     %edi,%eax
  107b26:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107b29:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b2c:	c1 eb 01             	shr    $0x1,%ebx
  107b2f:	09 df                	or     %ebx,%edi
  107b31:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b34:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  107b3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107b3d:	c1 e8 01             	shr    $0x1,%eax
  107b40:	09 c3                	or     %eax,%ebx
  107b42:	c1 eb 02             	shr    $0x2,%ebx
  107b45:	09 df                	or     %ebx,%edi
  107b47:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107b4a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b4d:	c1 eb 01             	shr    $0x1,%ebx
  107b50:	09 d8                	or     %ebx,%eax
  107b52:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107b55:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
  107b5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107b5e:	c1 e8 01             	shr    $0x1,%eax
  107b61:	09 c3                	or     %eax,%ebx
  107b63:	c1 eb 02             	shr    $0x2,%ebx
  107b66:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
  107b6c:	09 d8                	or     %ebx,%eax
  107b6e:	c1 e8 04             	shr    $0x4,%eax
  107b71:	09 c7                	or     %eax,%edi
  107b73:	c1 ef 08             	shr    $0x8,%edi
  107b76:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
  107b7c:	09 f8                	or     %edi,%eax
  107b7e:	c1 e8 10             	shr    $0x10,%eax
  107b81:	09 c6                	or     %eax,%esi
  107b83:	c1 ee 01             	shr    $0x1,%esi
  107b86:	21 f2                	and    %esi,%edx
  107b88:	83 fa 00             	cmp    $0x0,%edx
  107b8b:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
  107b91:	0f 84 2b 01 00 00    	je     107cc2 <buddy_alloc_pages+0xbf2>
  107b97:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107b9a:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107b9d:	8b 55 94             	mov    -0x6c(%ebp),%edx
  107ba0:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107ba3:	c1 ee 01             	shr    $0x1,%esi
  107ba6:	09 f2                	or     %esi,%edx
  107ba8:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107bab:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107bae:	c1 ef 01             	shr    $0x1,%edi
  107bb1:	09 fe                	or     %edi,%esi
  107bb3:	c1 ee 02             	shr    $0x2,%esi
  107bb6:	09 f2                	or     %esi,%edx
  107bb8:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107bbb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107bbe:	c1 ef 01             	shr    $0x1,%edi
  107bc1:	09 fe                	or     %edi,%esi
  107bc3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107bc6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107bc9:	c1 eb 01             	shr    $0x1,%ebx
  107bcc:	09 df                	or     %ebx,%edi
  107bce:	c1 ef 02             	shr    $0x2,%edi
  107bd1:	09 fe                	or     %edi,%esi
  107bd3:	c1 ee 04             	shr    $0x4,%esi
  107bd6:	09 f2                	or     %esi,%edx
  107bd8:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107bdb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107bde:	c1 ef 01             	shr    $0x1,%edi
  107be1:	09 fe                	or     %edi,%esi
  107be3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107be6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107be9:	c1 eb 01             	shr    $0x1,%ebx
  107bec:	09 df                	or     %ebx,%edi
  107bee:	c1 ef 02             	shr    $0x2,%edi
  107bf1:	09 fe                	or     %edi,%esi
  107bf3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107bf6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107bf9:	c1 eb 01             	shr    $0x1,%ebx
  107bfc:	09 df                	or     %ebx,%edi
  107bfe:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107c01:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  107c07:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107c0a:	c1 e8 01             	shr    $0x1,%eax
  107c0d:	09 c3                	or     %eax,%ebx
  107c0f:	c1 eb 02             	shr    $0x2,%ebx
  107c12:	09 df                	or     %ebx,%edi
  107c14:	c1 ef 04             	shr    $0x4,%edi
  107c17:	09 fe                	or     %edi,%esi
  107c19:	c1 ee 08             	shr    $0x8,%esi
  107c1c:	09 f2                	or     %esi,%edx
  107c1e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107c21:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107c24:	c1 ee 01             	shr    $0x1,%esi
  107c27:	09 f0                	or     %esi,%eax
  107c29:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107c2c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c2f:	c1 ef 01             	shr    $0x1,%edi
  107c32:	09 fe                	or     %edi,%esi
  107c34:	c1 ee 02             	shr    $0x2,%esi
  107c37:	09 f0                	or     %esi,%eax
  107c39:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107c3c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c3f:	c1 ef 01             	shr    $0x1,%edi
  107c42:	09 fe                	or     %edi,%esi
  107c44:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c47:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107c4a:	c1 eb 01             	shr    $0x1,%ebx
  107c4d:	09 df                	or     %ebx,%edi
  107c4f:	c1 ef 02             	shr    $0x2,%edi
  107c52:	09 fe                	or     %edi,%esi
  107c54:	c1 ee 04             	shr    $0x4,%esi
  107c57:	09 f0                	or     %esi,%eax
  107c59:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107c5c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c5f:	c1 ef 01             	shr    $0x1,%edi
  107c62:	09 fe                	or     %edi,%esi
  107c64:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c67:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107c6a:	c1 eb 01             	shr    $0x1,%ebx
  107c6d:	09 df                	or     %ebx,%edi
  107c6f:	c1 ef 02             	shr    $0x2,%edi
  107c72:	09 fe                	or     %edi,%esi
  107c74:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107c77:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107c7a:	c1 eb 01             	shr    $0x1,%ebx
  107c7d:	09 df                	or     %ebx,%edi
  107c7f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107c82:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
  107c88:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107c8b:	c1 e8 01             	shr    $0x1,%eax
  107c8e:	09 c3                	or     %eax,%ebx
  107c90:	c1 eb 02             	shr    $0x2,%ebx
  107c93:	09 df                	or     %ebx,%edi
  107c95:	c1 ef 04             	shr    $0x4,%edi
  107c98:	09 fe                	or     %edi,%esi
  107c9a:	c1 ee 08             	shr    $0x8,%esi
  107c9d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
  107ca3:	09 f0                	or     %esi,%eax
  107ca5:	c1 e8 10             	shr    $0x10,%eax
  107ca8:	09 c2                	or     %eax,%edx
  107caa:	c1 ea 01             	shr    $0x1,%edx
  107cad:	21 d1                	and    %edx,%ecx
  107caf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
  107cb5:	29 c8                	sub    %ecx,%eax
  107cb7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
  107cbd:	e9 09 00 00 00       	jmp    107ccb <buddy_alloc_pages+0xbfb>
  107cc2:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107cc5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
  107ccb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
  107cd1:	8b 8d f8 fe ff ff    	mov    -0x108(%ebp),%ecx
  107cd7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  107cdd:	89 c8                	mov    %ecx,%eax
  107cdf:	31 d2                	xor    %edx,%edx
  107ce1:	8b b5 e8 fe ff ff    	mov    -0x118(%ebp),%esi
  107ce7:	f7 f6                	div    %esi
  107ce9:	8b bd 0c ff ff ff    	mov    -0xf4(%ebp),%edi
  107cef:	0f af f8             	imul   %eax,%edi
  107cf2:	89 7d 84             	mov    %edi,-0x7c(%ebp)
            size_t end = BUDDY_END(block);
  107cf5:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107cf8:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107cfb:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107cfe:	c1 eb 01             	shr    $0x1,%ebx
  107d01:	09 df                	or     %ebx,%edi
  107d03:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d06:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d09:	c1 e9 01             	shr    $0x1,%ecx
  107d0c:	09 cb                	or     %ecx,%ebx
  107d0e:	c1 eb 02             	shr    $0x2,%ebx
  107d11:	09 df                	or     %ebx,%edi
  107d13:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d16:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d19:	c1 eb 01             	shr    $0x1,%ebx
  107d1c:	09 d9                	or     %ebx,%ecx
  107d1e:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d21:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d24:	c1 ee 01             	shr    $0x1,%esi
  107d27:	09 f3                	or     %esi,%ebx
  107d29:	c1 eb 02             	shr    $0x2,%ebx
  107d2c:	09 d9                	or     %ebx,%ecx
  107d2e:	c1 e9 04             	shr    $0x4,%ecx
  107d31:	09 cf                	or     %ecx,%edi
  107d33:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d36:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d39:	c1 ee 01             	shr    $0x1,%esi
  107d3c:	09 f1                	or     %esi,%ecx
  107d3e:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d41:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d44:	c1 eb 01             	shr    $0x1,%ebx
  107d47:	09 de                	or     %ebx,%esi
  107d49:	c1 ee 02             	shr    $0x2,%esi
  107d4c:	09 f1                	or     %esi,%ecx
  107d4e:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d51:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d54:	c1 eb 01             	shr    $0x1,%ebx
  107d57:	09 de                	or     %ebx,%esi
  107d59:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107d5c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
  107d62:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107d65:	c1 e8 01             	shr    $0x1,%eax
  107d68:	09 c3                	or     %eax,%ebx
  107d6a:	c1 eb 02             	shr    $0x2,%ebx
  107d6d:	09 de                	or     %ebx,%esi
  107d6f:	c1 ee 04             	shr    $0x4,%esi
  107d72:	09 f1                	or     %esi,%ecx
  107d74:	c1 e9 08             	shr    $0x8,%ecx
  107d77:	09 cf                	or     %ecx,%edi
  107d79:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107d7c:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d7f:	c1 e9 01             	shr    $0x1,%ecx
  107d82:	09 c8                	or     %ecx,%eax
  107d84:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d87:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d8a:	c1 ee 01             	shr    $0x1,%esi
  107d8d:	09 f1                	or     %esi,%ecx
  107d8f:	c1 e9 02             	shr    $0x2,%ecx
  107d92:	09 c8                	or     %ecx,%eax
  107d94:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107d97:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107d9a:	c1 ee 01             	shr    $0x1,%esi
  107d9d:	09 f1                	or     %esi,%ecx
  107d9f:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107da2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107da5:	c1 eb 01             	shr    $0x1,%ebx
  107da8:	09 de                	or     %ebx,%esi
  107daa:	c1 ee 02             	shr    $0x2,%esi
  107dad:	09 f1                	or     %esi,%ecx
  107daf:	c1 e9 04             	shr    $0x4,%ecx
  107db2:	09 c8                	or     %ecx,%eax
  107db4:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107db7:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107dba:	c1 ee 01             	shr    $0x1,%esi
  107dbd:	09 f1                	or     %esi,%ecx
  107dbf:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107dc2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107dc5:	c1 eb 01             	shr    $0x1,%ebx
  107dc8:	09 de                	or     %ebx,%esi
  107dca:	c1 ee 02             	shr    $0x2,%esi
  107dcd:	09 f1                	or     %esi,%ecx
  107dcf:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107dd2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107dd5:	c1 eb 01             	shr    $0x1,%ebx
  107dd8:	09 de                	or     %ebx,%esi
  107dda:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107ddd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
  107de3:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107de6:	c1 e8 01             	shr    $0x1,%eax
  107de9:	09 c3                	or     %eax,%ebx
  107deb:	c1 eb 02             	shr    $0x2,%ebx
  107dee:	09 de                	or     %ebx,%esi
  107df0:	c1 ee 04             	shr    $0x4,%esi
  107df3:	09 f1                	or     %esi,%ecx
  107df5:	c1 e9 08             	shr    $0x8,%ecx
  107df8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
  107dfe:	09 c8                	or     %ecx,%eax
  107e00:	c1 e8 10             	shr    $0x10,%eax
  107e03:	09 c7                	or     %eax,%edi
  107e05:	c1 ef 01             	shr    $0x1,%edi
  107e08:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
  107e0e:	21 f8                	and    %edi,%eax
  107e10:	83 c0 01             	add    $0x1,%eax
  107e13:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  107e19:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107e1c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107e1f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e22:	c1 eb 01             	shr    $0x1,%ebx
  107e25:	09 df                	or     %ebx,%edi
  107e27:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e2a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  107e30:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e33:	c1 e8 01             	shr    $0x1,%eax
  107e36:	09 c3                	or     %eax,%ebx
  107e38:	c1 eb 02             	shr    $0x2,%ebx
  107e3b:	09 df                	or     %ebx,%edi
  107e3d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e40:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e43:	c1 eb 01             	shr    $0x1,%ebx
  107e46:	09 d8                	or     %ebx,%eax
  107e48:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e4b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
  107e51:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e54:	c1 e8 01             	shr    $0x1,%eax
  107e57:	09 c3                	or     %eax,%ebx
  107e59:	c1 eb 02             	shr    $0x2,%ebx
  107e5c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
  107e62:	09 d8                	or     %ebx,%eax
  107e64:	c1 e8 04             	shr    $0x4,%eax
  107e67:	09 c7                	or     %eax,%edi
  107e69:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e6c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e6f:	c1 eb 01             	shr    $0x1,%ebx
  107e72:	09 d8                	or     %ebx,%eax
  107e74:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e77:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
  107e7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e80:	c1 e8 01             	shr    $0x1,%eax
  107e83:	09 c3                	or     %eax,%ebx
  107e85:	c1 eb 02             	shr    $0x2,%ebx
  107e88:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  107e8e:	09 d8                	or     %ebx,%eax
  107e90:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107e93:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  107e99:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107e9c:	c1 e8 01             	shr    $0x1,%eax
  107e9f:	09 c3                	or     %eax,%ebx
  107ea1:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107ea4:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
  107eaa:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107ead:	c1 e8 01             	shr    $0x1,%eax
  107eb0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
  107eb6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
  107ebc:	89 8d c4 fe ff ff    	mov    %ecx,-0x13c(%ebp)
  107ec2:	8b 8d c8 fe ff ff    	mov    -0x138(%ebp),%ecx
  107ec8:	09 c8                	or     %ecx,%eax
  107eca:	c1 e8 02             	shr    $0x2,%eax
  107ecd:	09 c3                	or     %eax,%ebx
  107ecf:	c1 eb 04             	shr    $0x4,%ebx
  107ed2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
  107ed8:	09 d8                	or     %ebx,%eax
  107eda:	c1 e8 08             	shr    $0x8,%eax
  107edd:	09 c7                	or     %eax,%edi
  107edf:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107ee2:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107ee5:	c1 e9 01             	shr    $0x1,%ecx
  107ee8:	09 c8                	or     %ecx,%eax
  107eea:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107eed:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107ef0:	c1 eb 01             	shr    $0x1,%ebx
  107ef3:	09 d9                	or     %ebx,%ecx
  107ef5:	c1 e9 02             	shr    $0x2,%ecx
  107ef8:	09 c8                	or     %ecx,%eax
  107efa:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107efd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f00:	c1 eb 01             	shr    $0x1,%ebx
  107f03:	09 d9                	or     %ebx,%ecx
  107f05:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f08:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
  107f0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107f11:	c1 e8 01             	shr    $0x1,%eax
  107f14:	09 c3                	or     %eax,%ebx
  107f16:	c1 eb 02             	shr    $0x2,%ebx
  107f19:	09 d9                	or     %ebx,%ecx
  107f1b:	c1 e9 04             	shr    $0x4,%ecx
  107f1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
  107f24:	09 c8                	or     %ecx,%eax
  107f26:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107f29:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f2c:	c1 eb 01             	shr    $0x1,%ebx
  107f2f:	09 d9                	or     %ebx,%ecx
  107f31:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f34:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
  107f3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107f3d:	c1 e8 01             	shr    $0x1,%eax
  107f40:	09 c3                	or     %eax,%ebx
  107f42:	c1 eb 02             	shr    $0x2,%ebx
  107f45:	09 d9                	or     %ebx,%ecx
  107f47:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107f4a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f4d:	c1 eb 01             	shr    $0x1,%ebx
  107f50:	09 d8                	or     %ebx,%eax
  107f52:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107f55:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  107f5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107f5e:	c1 e8 01             	shr    $0x1,%eax
  107f61:	09 c3                	or     %eax,%ebx
  107f63:	c1 eb 02             	shr    $0x2,%ebx
  107f66:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
  107f6c:	09 d8                	or     %ebx,%eax
  107f6e:	c1 e8 04             	shr    $0x4,%eax
  107f71:	09 c1                	or     %eax,%ecx
  107f73:	c1 e9 08             	shr    $0x8,%ecx
  107f76:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
  107f7c:	09 c8                	or     %ecx,%eax
  107f7e:	c1 e8 10             	shr    $0x10,%eax
  107f81:	09 c7                	or     %eax,%edi
  107f83:	c1 ef 01             	shr    $0x1,%edi
  107f86:	21 fe                	and    %edi,%esi
  107f88:	83 fe 00             	cmp    $0x0,%esi
  107f8b:	0f 84 2b 01 00 00    	je     1080bc <buddy_alloc_pages+0xfec>
  107f91:	8b 45 94             	mov    -0x6c(%ebp),%eax
  107f94:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  107f97:	8b 55 94             	mov    -0x6c(%ebp),%edx
  107f9a:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107f9d:	c1 ee 01             	shr    $0x1,%esi
  107fa0:	09 f2                	or     %esi,%edx
  107fa2:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107fa5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107fa8:	c1 ef 01             	shr    $0x1,%edi
  107fab:	09 fe                	or     %edi,%esi
  107fad:	c1 ee 02             	shr    $0x2,%esi
  107fb0:	09 f2                	or     %esi,%edx
  107fb2:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107fb5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107fb8:	c1 ef 01             	shr    $0x1,%edi
  107fbb:	09 fe                	or     %edi,%esi
  107fbd:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107fc0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107fc3:	c1 eb 01             	shr    $0x1,%ebx
  107fc6:	09 df                	or     %ebx,%edi
  107fc8:	c1 ef 02             	shr    $0x2,%edi
  107fcb:	09 fe                	or     %edi,%esi
  107fcd:	c1 ee 04             	shr    $0x4,%esi
  107fd0:	09 f2                	or     %esi,%edx
  107fd2:	8b 75 94             	mov    -0x6c(%ebp),%esi
  107fd5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107fd8:	c1 ef 01             	shr    $0x1,%edi
  107fdb:	09 fe                	or     %edi,%esi
  107fdd:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107fe0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107fe3:	c1 eb 01             	shr    $0x1,%ebx
  107fe6:	09 df                	or     %ebx,%edi
  107fe8:	c1 ef 02             	shr    $0x2,%edi
  107feb:	09 fe                	or     %edi,%esi
  107fed:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  107ff0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107ff3:	c1 eb 01             	shr    $0x1,%ebx
  107ff6:	09 df                	or     %ebx,%edi
  107ff8:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  107ffb:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
  108001:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108004:	c1 e8 01             	shr    $0x1,%eax
  108007:	09 c3                	or     %eax,%ebx
  108009:	c1 eb 02             	shr    $0x2,%ebx
  10800c:	09 df                	or     %ebx,%edi
  10800e:	c1 ef 04             	shr    $0x4,%edi
  108011:	09 fe                	or     %edi,%esi
  108013:	c1 ee 08             	shr    $0x8,%esi
  108016:	09 f2                	or     %esi,%edx
  108018:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10801b:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10801e:	c1 ee 01             	shr    $0x1,%esi
  108021:	09 f0                	or     %esi,%eax
  108023:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108026:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108029:	c1 ef 01             	shr    $0x1,%edi
  10802c:	09 fe                	or     %edi,%esi
  10802e:	c1 ee 02             	shr    $0x2,%esi
  108031:	09 f0                	or     %esi,%eax
  108033:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108036:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108039:	c1 ef 01             	shr    $0x1,%edi
  10803c:	09 fe                	or     %edi,%esi
  10803e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108041:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108044:	c1 eb 01             	shr    $0x1,%ebx
  108047:	09 df                	or     %ebx,%edi
  108049:	c1 ef 02             	shr    $0x2,%edi
  10804c:	09 fe                	or     %edi,%esi
  10804e:	c1 ee 04             	shr    $0x4,%esi
  108051:	09 f0                	or     %esi,%eax
  108053:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108056:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108059:	c1 ef 01             	shr    $0x1,%edi
  10805c:	09 fe                	or     %edi,%esi
  10805e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108061:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108064:	c1 eb 01             	shr    $0x1,%ebx
  108067:	09 df                	or     %ebx,%edi
  108069:	c1 ef 02             	shr    $0x2,%edi
  10806c:	09 fe                	or     %edi,%esi
  10806e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108071:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108074:	c1 eb 01             	shr    $0x1,%ebx
  108077:	09 df                	or     %ebx,%edi
  108079:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10807c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
  108082:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108085:	c1 e8 01             	shr    $0x1,%eax
  108088:	09 c3                	or     %eax,%ebx
  10808a:	c1 eb 02             	shr    $0x2,%ebx
  10808d:	09 df                	or     %ebx,%edi
  10808f:	c1 ef 04             	shr    $0x4,%edi
  108092:	09 fe                	or     %edi,%esi
  108094:	c1 ee 08             	shr    $0x8,%esi
  108097:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
  10809d:	09 f0                	or     %esi,%eax
  10809f:	c1 e8 10             	shr    $0x10,%eax
  1080a2:	09 c2                	or     %eax,%edx
  1080a4:	c1 ea 01             	shr    $0x1,%edx
  1080a7:	21 d1                	and    %edx,%ecx
  1080a9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
  1080af:	29 c8                	sub    %ecx,%eax
  1080b1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1080b7:	e9 09 00 00 00       	jmp    1080c5 <buddy_alloc_pages+0xff5>
  1080bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1080bf:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
  1080c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
  1080cb:	8d 0d 30 49 11 00    	lea    0x114930,%ecx
  1080d1:	8b 95 c4 fe ff ff    	mov    -0x13c(%ebp),%edx
  1080d7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
  1080dd:	89 d0                	mov    %edx,%eax
  1080df:	31 d2                	xor    %edx,%edx
  1080e1:	8b b5 a8 fe ff ff    	mov    -0x158(%ebp),%esi
  1080e7:	f7 f6                	div    %esi
  1080e9:	8b bd dc fe ff ff    	mov    -0x124(%ebp),%edi
  1080ef:	0f af f8             	imul   %eax,%edi
  1080f2:	89 7d 80             	mov    %edi,-0x80(%ebp)
            size_t mid = (begin+end)>>1;
  1080f5:	8b 45 84             	mov    -0x7c(%ebp),%eax
  1080f8:	03 45 80             	add    -0x80(%ebp),%eax
  1080fb:	c1 e8 01             	shr    $0x1,%eax
  1080fe:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
            list_del(&(buddy_alloc[begin].page_link));
  108104:	8b 45 84             	mov    -0x7c(%ebp),%eax
  108107:	6b c0 14             	imul   $0x14,%eax,%eax
  10810a:	03 05 1c 49 11 00    	add    0x11491c,%eax
  108110:	83 c0 0c             	add    $0xc,%eax
  108113:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    __list_del(listelm->prev, listelm->next);
  108116:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  108119:	8b 00                	mov    (%eax),%eax
  10811b:	8b 7d a4             	mov    -0x5c(%ebp),%edi
  10811e:	8b 7f 04             	mov    0x4(%edi),%edi
  108121:	89 45 ac             	mov    %eax,-0x54(%ebp)
  108124:	89 7d a8             	mov    %edi,-0x58(%ebp)
    prev->next = next;
  108127:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10812a:	8b 7d ac             	mov    -0x54(%ebp),%edi
  10812d:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
  108130:	8b 45 ac             	mov    -0x54(%ebp),%eax
  108133:	8b 7d a8             	mov    -0x58(%ebp),%edi
  108136:	89 07                	mov    %eax,(%edi)
            buddy_alloc[begin].property >>= 1;
  108138:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10813b:	6b c0 14             	imul   $0x14,%eax,%eax
  10813e:	03 05 1c 49 11 00    	add    0x11491c,%eax
  108144:	8b 78 08             	mov    0x8(%eax),%edi
  108147:	c1 ef 01             	shr    $0x1,%edi
  10814a:	89 78 08             	mov    %edi,0x8(%eax)
            buddy_alloc[mid].property = buddy_alloc[begin].property;
  10814d:	8b 45 84             	mov    -0x7c(%ebp),%eax
  108150:	6b c0 14             	imul   $0x14,%eax,%eax
  108153:	03 05 1c 49 11 00    	add    0x11491c,%eax
  108159:	8b 40 08             	mov    0x8(%eax),%eax
  10815c:	8b bd 7c ff ff ff    	mov    -0x84(%ebp),%edi
  108162:	6b ff 14             	imul   $0x14,%edi,%edi
  108165:	03 3d 1c 49 11 00    	add    0x11491c,%edi
  10816b:	89 47 08             	mov    %eax,0x8(%edi)
            buddy_segment[left] = buddy_segment[block]>>1;
  10816e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108171:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  108177:	8b 04 87             	mov    (%edi,%eax,4),%eax
  10817a:	c1 e8 01             	shr    $0x1,%eax
  10817d:	8b 7d 8c             	mov    -0x74(%ebp),%edi
  108180:	8b 1d 18 49 11 00    	mov    0x114918,%ebx
  108186:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            buddy_segment[right] = buddy_segment[block]>>1;
  108189:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10818c:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  108192:	8b 04 87             	mov    (%edi,%eax,4),%eax
  108195:	c1 e8 01             	shr    $0x1,%eax
  108198:	8b 7d 88             	mov    -0x78(%ebp),%edi
  10819b:	8b 1d 18 49 11 00    	mov    0x114918,%ebx
  1081a1:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            list_add(&free_list, &(buddy_alloc[begin].page_link));
  1081a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
  1081a7:	6b c0 14             	imul   $0x14,%eax,%eax
  1081aa:	03 05 1c 49 11 00    	add    0x11491c,%eax
  1081b0:	83 c0 0c             	add    $0xc,%eax
  1081b3:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  1081b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    list_add_after(listelm, elm);
  1081b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1081bc:	8b 7d d8             	mov    -0x28(%ebp),%edi
  1081bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  1081c2:	89 7d e0             	mov    %edi,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
  1081c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1081c8:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  1081cb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  1081ce:	8b 5b 04             	mov    0x4(%ebx),%ebx
  1081d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1081d4:	89 7d ec             	mov    %edi,-0x14(%ebp)
  1081d7:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    prev->next = next->prev = elm;
  1081da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1081dd:	8b 7d e8             	mov    -0x18(%ebp),%edi
  1081e0:	89 07                	mov    %eax,(%edi)
  1081e2:	8b 7d ec             	mov    -0x14(%ebp),%edi
  1081e5:	89 47 04             	mov    %eax,0x4(%edi)
    elm->next = next;
  1081e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1081eb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1081ee:	89 47 04             	mov    %eax,0x4(%edi)
    elm->prev = prev;
  1081f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1081f4:	8b 7d f0             	mov    -0x10(%ebp),%edi
  1081f7:	89 07                	mov    %eax,(%edi)
            list_add(&free_list, &(buddy_alloc[mid].page_link));
  1081f9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  1081ff:	6b c0 14             	imul   $0x14,%eax,%eax
  108202:	03 05 1c 49 11 00    	add    0x11491c,%eax
  108208:	83 c0 0c             	add    $0xc,%eax
  10820b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10820e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    list_add_after(listelm, elm);
  108211:	8b 45 c0             	mov    -0x40(%ebp),%eax
  108214:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  108217:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10821a:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    __list_add(elm, listelm, listelm->next);
  10821d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  108220:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  108223:	8b 7d c8             	mov    -0x38(%ebp),%edi
  108226:	8b 7f 04             	mov    0x4(%edi),%edi
  108229:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10822c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10822f:	89 7d cc             	mov    %edi,-0x34(%ebp)
    prev->next = next->prev = elm;
  108232:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  108235:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  108238:	89 01                	mov    %eax,(%ecx)
  10823a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10823d:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  108240:	8b 45 cc             	mov    -0x34(%ebp),%eax
  108243:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  108246:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  108249:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10824c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10824f:	89 01                	mov    %eax,(%ecx)
            block = left;
  108251:	8b 45 8c             	mov    -0x74(%ebp),%eax
  108254:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length & buddy_segment[left]) {  // Find in left (optimize)
  108257:	e9 d4 00 00 00       	jmp    108330 <buddy_alloc_pages+0x1260>
  10825c:	8b 45 90             	mov    -0x70(%ebp),%eax
  10825f:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  108262:	8b 15 18 49 11 00    	mov    0x114918,%edx
  108268:	23 04 8a             	and    (%edx,%ecx,4),%eax
  10826b:	83 f8 00             	cmp    $0x0,%eax
  10826e:	0f 84 0b 00 00 00    	je     10827f <buddy_alloc_pages+0x11af>
            block = left;
  108274:	8b 45 8c             	mov    -0x74(%ebp),%eax
  108277:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length & buddy_segment[right]) { // Find in right (optimize)
  10827a:	e9 ac 00 00 00       	jmp    10832b <buddy_alloc_pages+0x125b>
  10827f:	8b 45 90             	mov    -0x70(%ebp),%eax
  108282:	8b 4d 88             	mov    -0x78(%ebp),%ecx
  108285:	8b 15 18 49 11 00    	mov    0x114918,%edx
  10828b:	23 04 8a             	and    (%edx,%ecx,4),%eax
  10828e:	83 f8 00             	cmp    $0x0,%eax
  108291:	0f 84 0b 00 00 00    	je     1082a2 <buddy_alloc_pages+0x11d2>
            block = right;
  108297:	8b 45 88             	mov    -0x78(%ebp),%eax
  10829a:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length <= buddy_segment[left]) { // Find in left
  10829d:	e9 84 00 00 00       	jmp    108326 <buddy_alloc_pages+0x1256>
  1082a2:	8b 45 90             	mov    -0x70(%ebp),%eax
  1082a5:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  1082a8:	8b 15 18 49 11 00    	mov    0x114918,%edx
  1082ae:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
  1082b1:	0f 87 0b 00 00 00    	ja     1082c2 <buddy_alloc_pages+0x11f2>
            block = left;
  1082b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
  1082ba:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length <= buddy_segment[right]) {// Find in right
  1082bd:	e9 5f 00 00 00       	jmp    108321 <buddy_alloc_pages+0x1251>
  1082c2:	8b 45 90             	mov    -0x70(%ebp),%eax
  1082c5:	8b 4d 88             	mov    -0x78(%ebp),%ecx
  1082c8:	8b 15 18 49 11 00    	mov    0x114918,%edx
  1082ce:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
  1082d1:	0f 87 0b 00 00 00    	ja     1082e2 <buddy_alloc_pages+0x1212>
            block = right;
  1082d7:	8b 45 88             	mov    -0x78(%ebp),%eax
  1082da:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else {                                    // Shouldn't be here
  1082dd:	e9 3a 00 00 00       	jmp    10831c <buddy_alloc_pages+0x124c>
            assert(0);
  1082e2:	e9 00 00 00 00       	jmp    1082e7 <buddy_alloc_pages+0x1217>
  1082e7:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  1082ed:	b9 94 00 00 00       	mov    $0x94,%ecx
  1082f2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1082f8:	8d 35 e0 fc 10 00    	lea    0x10fce0,%esi
  1082fe:	89 04 24             	mov    %eax,(%esp)
  108301:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
  108308:	00 
  108309:	89 54 24 08          	mov    %edx,0x8(%esp)
  10830d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  108311:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%ebp)
  108317:	e8 34 81 ff ff       	call   100450 <__panic>
  10831c:	e9 00 00 00 00       	jmp    108321 <buddy_alloc_pages+0x1251>
  108321:	e9 00 00 00 00       	jmp    108326 <buddy_alloc_pages+0x1256>
  108326:	e9 00 00 00 00       	jmp    10832b <buddy_alloc_pages+0x125b>
  10832b:	e9 00 00 00 00       	jmp    108330 <buddy_alloc_pages+0x1260>
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
  108330:	e9 50 f0 ff ff       	jmp    107385 <buddy_alloc_pages+0x2b5>
        }
    }
    // Allocate
    if (length > buddy_segment[block])
  108335:	8b 45 90             	mov    -0x70(%ebp),%eax
  108338:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10833b:	8b 15 18 49 11 00    	mov    0x114918,%edx
  108341:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
  108344:	0f 86 0c 00 00 00    	jbe    108356 <buddy_alloc_pages+0x1286>
        return NULL;
  10834a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
  108351:	e9 59 04 00 00       	jmp    1087af <buddy_alloc_pages+0x16df>
    page = &(buddy_alloc[BUDDY_BEGIN(block)]);
  108356:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108359:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10835c:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10835f:	c1 ea 01             	shr    $0x1,%edx
  108362:	09 d1                	or     %edx,%ecx
  108364:	8b 55 94             	mov    -0x6c(%ebp),%edx
  108367:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10836a:	c1 ee 01             	shr    $0x1,%esi
  10836d:	09 f2                	or     %esi,%edx
  10836f:	c1 ea 02             	shr    $0x2,%edx
  108372:	09 d1                	or     %edx,%ecx
  108374:	8b 55 94             	mov    -0x6c(%ebp),%edx
  108377:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10837a:	c1 ee 01             	shr    $0x1,%esi
  10837d:	09 f2                	or     %esi,%edx
  10837f:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108382:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108385:	c1 ef 01             	shr    $0x1,%edi
  108388:	09 fe                	or     %edi,%esi
  10838a:	c1 ee 02             	shr    $0x2,%esi
  10838d:	09 f2                	or     %esi,%edx
  10838f:	c1 ea 04             	shr    $0x4,%edx
  108392:	09 d1                	or     %edx,%ecx
  108394:	8b 55 94             	mov    -0x6c(%ebp),%edx
  108397:	8b 75 94             	mov    -0x6c(%ebp),%esi
  10839a:	c1 ee 01             	shr    $0x1,%esi
  10839d:	09 f2                	or     %esi,%edx
  10839f:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1083a2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083a5:	c1 ef 01             	shr    $0x1,%edi
  1083a8:	09 fe                	or     %edi,%esi
  1083aa:	c1 ee 02             	shr    $0x2,%esi
  1083ad:	09 f2                	or     %esi,%edx
  1083af:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1083b2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083b5:	c1 ef 01             	shr    $0x1,%edi
  1083b8:	09 fe                	or     %edi,%esi
  1083ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083bd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1083c0:	c1 eb 01             	shr    $0x1,%ebx
  1083c3:	09 df                	or     %ebx,%edi
  1083c5:	c1 ef 02             	shr    $0x2,%edi
  1083c8:	09 fe                	or     %edi,%esi
  1083ca:	c1 ee 04             	shr    $0x4,%esi
  1083cd:	09 f2                	or     %esi,%edx
  1083cf:	c1 ea 08             	shr    $0x8,%edx
  1083d2:	09 d1                	or     %edx,%ecx
  1083d4:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1083d7:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1083da:	c1 ee 01             	shr    $0x1,%esi
  1083dd:	09 f2                	or     %esi,%edx
  1083df:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1083e2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083e5:	c1 ef 01             	shr    $0x1,%edi
  1083e8:	09 fe                	or     %edi,%esi
  1083ea:	c1 ee 02             	shr    $0x2,%esi
  1083ed:	09 f2                	or     %esi,%edx
  1083ef:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1083f2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083f5:	c1 ef 01             	shr    $0x1,%edi
  1083f8:	09 fe                	or     %edi,%esi
  1083fa:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1083fd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108400:	c1 eb 01             	shr    $0x1,%ebx
  108403:	09 df                	or     %ebx,%edi
  108405:	c1 ef 02             	shr    $0x2,%edi
  108408:	09 fe                	or     %edi,%esi
  10840a:	c1 ee 04             	shr    $0x4,%esi
  10840d:	09 f2                	or     %esi,%edx
  10840f:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108412:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108415:	c1 ef 01             	shr    $0x1,%edi
  108418:	09 fe                	or     %edi,%esi
  10841a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10841d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108420:	c1 eb 01             	shr    $0x1,%ebx
  108423:	09 df                	or     %ebx,%edi
  108425:	c1 ef 02             	shr    $0x2,%edi
  108428:	09 fe                	or     %edi,%esi
  10842a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10842d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108430:	c1 eb 01             	shr    $0x1,%ebx
  108433:	09 df                	or     %ebx,%edi
  108435:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108438:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  10843e:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108441:	c1 e8 01             	shr    $0x1,%eax
  108444:	09 c3                	or     %eax,%ebx
  108446:	c1 eb 02             	shr    $0x2,%ebx
  108449:	09 df                	or     %ebx,%edi
  10844b:	c1 ef 04             	shr    $0x4,%edi
  10844e:	09 fe                	or     %edi,%esi
  108450:	c1 ee 08             	shr    $0x8,%esi
  108453:	09 f2                	or     %esi,%edx
  108455:	c1 ea 10             	shr    $0x10,%edx
  108458:	09 d1                	or     %edx,%ecx
  10845a:	c1 e9 01             	shr    $0x1,%ecx
  10845d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
  108463:	21 c8                	and    %ecx,%eax
  108465:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10846b:	8b 55 94             	mov    -0x6c(%ebp),%edx
  10846e:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108471:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108474:	c1 ef 01             	shr    $0x1,%edi
  108477:	09 fe                	or     %edi,%esi
  108479:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10847c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10847f:	c1 eb 01             	shr    $0x1,%ebx
  108482:	09 df                	or     %ebx,%edi
  108484:	c1 ef 02             	shr    $0x2,%edi
  108487:	09 fe                	or     %edi,%esi
  108489:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10848c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10848f:	c1 eb 01             	shr    $0x1,%ebx
  108492:	09 df                	or     %ebx,%edi
  108494:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108497:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
  10849d:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1084a0:	c1 e8 01             	shr    $0x1,%eax
  1084a3:	09 c3                	or     %eax,%ebx
  1084a5:	c1 eb 02             	shr    $0x2,%ebx
  1084a8:	09 df                	or     %ebx,%edi
  1084aa:	c1 ef 04             	shr    $0x4,%edi
  1084ad:	09 fe                	or     %edi,%esi
  1084af:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1084b2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1084b5:	c1 ef 01             	shr    $0x1,%edi
  1084b8:	09 f8                	or     %edi,%eax
  1084ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1084bd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1084c0:	c1 eb 01             	shr    $0x1,%ebx
  1084c3:	09 df                	or     %ebx,%edi
  1084c5:	c1 ef 02             	shr    $0x2,%edi
  1084c8:	09 f8                	or     %edi,%eax
  1084ca:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1084cd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1084d0:	c1 eb 01             	shr    $0x1,%ebx
  1084d3:	09 df                	or     %ebx,%edi
  1084d5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1084d8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
  1084de:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1084e1:	c1 e8 01             	shr    $0x1,%eax
  1084e4:	09 c3                	or     %eax,%ebx
  1084e6:	c1 eb 02             	shr    $0x2,%ebx
  1084e9:	09 df                	or     %ebx,%edi
  1084eb:	c1 ef 04             	shr    $0x4,%edi
  1084ee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
  1084f4:	09 f8                	or     %edi,%eax
  1084f6:	c1 e8 08             	shr    $0x8,%eax
  1084f9:	09 c6                	or     %eax,%esi
  1084fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1084fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108501:	c1 ef 01             	shr    $0x1,%edi
  108504:	09 f8                	or     %edi,%eax
  108506:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108509:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10850c:	c1 eb 01             	shr    $0x1,%ebx
  10850f:	09 df                	or     %ebx,%edi
  108511:	c1 ef 02             	shr    $0x2,%edi
  108514:	09 f8                	or     %edi,%eax
  108516:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108519:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10851c:	c1 eb 01             	shr    $0x1,%ebx
  10851f:	09 df                	or     %ebx,%edi
  108521:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108524:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  10852a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10852d:	c1 e8 01             	shr    $0x1,%eax
  108530:	09 c3                	or     %eax,%ebx
  108532:	c1 eb 02             	shr    $0x2,%ebx
  108535:	09 df                	or     %ebx,%edi
  108537:	c1 ef 04             	shr    $0x4,%edi
  10853a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
  108540:	09 f8                	or     %edi,%eax
  108542:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108545:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108548:	c1 eb 01             	shr    $0x1,%ebx
  10854b:	09 df                	or     %ebx,%edi
  10854d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108550:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
  108556:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108559:	c1 e8 01             	shr    $0x1,%eax
  10855c:	09 c3                	or     %eax,%ebx
  10855e:	c1 eb 02             	shr    $0x2,%ebx
  108561:	09 df                	or     %ebx,%edi
  108563:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108566:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108569:	c1 eb 01             	shr    $0x1,%ebx
  10856c:	09 d8                	or     %ebx,%eax
  10856e:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108571:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
  108577:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10857a:	c1 e8 01             	shr    $0x1,%eax
  10857d:	09 c3                	or     %eax,%ebx
  10857f:	c1 eb 02             	shr    $0x2,%ebx
  108582:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
  108588:	09 d8                	or     %ebx,%eax
  10858a:	c1 e8 04             	shr    $0x4,%eax
  10858d:	09 c7                	or     %eax,%edi
  10858f:	c1 ef 08             	shr    $0x8,%edi
  108592:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
  108598:	09 f8                	or     %edi,%eax
  10859a:	c1 e8 10             	shr    $0x10,%eax
  10859d:	09 c6                	or     %eax,%esi
  10859f:	c1 ee 01             	shr    $0x1,%esi
  1085a2:	21 f2                	and    %esi,%edx
  1085a4:	83 fa 00             	cmp    $0x0,%edx
  1085a7:	89 8d 88 fe ff ff    	mov    %ecx,-0x178(%ebp)
  1085ad:	0f 84 2b 01 00 00    	je     1086de <buddy_alloc_pages+0x160e>
  1085b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1085b6:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  1085b9:	8b 55 94             	mov    -0x6c(%ebp),%edx
  1085bc:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1085bf:	c1 ee 01             	shr    $0x1,%esi
  1085c2:	09 f2                	or     %esi,%edx
  1085c4:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1085c7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1085ca:	c1 ef 01             	shr    $0x1,%edi
  1085cd:	09 fe                	or     %edi,%esi
  1085cf:	c1 ee 02             	shr    $0x2,%esi
  1085d2:	09 f2                	or     %esi,%edx
  1085d4:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1085d7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1085da:	c1 ef 01             	shr    $0x1,%edi
  1085dd:	09 fe                	or     %edi,%esi
  1085df:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1085e2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  1085e5:	c1 eb 01             	shr    $0x1,%ebx
  1085e8:	09 df                	or     %ebx,%edi
  1085ea:	c1 ef 02             	shr    $0x2,%edi
  1085ed:	09 fe                	or     %edi,%esi
  1085ef:	c1 ee 04             	shr    $0x4,%esi
  1085f2:	09 f2                	or     %esi,%edx
  1085f4:	8b 75 94             	mov    -0x6c(%ebp),%esi
  1085f7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  1085fa:	c1 ef 01             	shr    $0x1,%edi
  1085fd:	09 fe                	or     %edi,%esi
  1085ff:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108602:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108605:	c1 eb 01             	shr    $0x1,%ebx
  108608:	09 df                	or     %ebx,%edi
  10860a:	c1 ef 02             	shr    $0x2,%edi
  10860d:	09 fe                	or     %edi,%esi
  10860f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108612:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108615:	c1 eb 01             	shr    $0x1,%ebx
  108618:	09 df                	or     %ebx,%edi
  10861a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10861d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
  108623:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108626:	c1 e8 01             	shr    $0x1,%eax
  108629:	09 c3                	or     %eax,%ebx
  10862b:	c1 eb 02             	shr    $0x2,%ebx
  10862e:	09 df                	or     %ebx,%edi
  108630:	c1 ef 04             	shr    $0x4,%edi
  108633:	09 fe                	or     %edi,%esi
  108635:	c1 ee 08             	shr    $0x8,%esi
  108638:	09 f2                	or     %esi,%edx
  10863a:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10863d:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108640:	c1 ee 01             	shr    $0x1,%esi
  108643:	09 f0                	or     %esi,%eax
  108645:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108648:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10864b:	c1 ef 01             	shr    $0x1,%edi
  10864e:	09 fe                	or     %edi,%esi
  108650:	c1 ee 02             	shr    $0x2,%esi
  108653:	09 f0                	or     %esi,%eax
  108655:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108658:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10865b:	c1 ef 01             	shr    $0x1,%edi
  10865e:	09 fe                	or     %edi,%esi
  108660:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108663:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108666:	c1 eb 01             	shr    $0x1,%ebx
  108669:	09 df                	or     %ebx,%edi
  10866b:	c1 ef 02             	shr    $0x2,%edi
  10866e:	09 fe                	or     %edi,%esi
  108670:	c1 ee 04             	shr    $0x4,%esi
  108673:	09 f0                	or     %esi,%eax
  108675:	8b 75 94             	mov    -0x6c(%ebp),%esi
  108678:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  10867b:	c1 ef 01             	shr    $0x1,%edi
  10867e:	09 fe                	or     %edi,%esi
  108680:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108683:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108686:	c1 eb 01             	shr    $0x1,%ebx
  108689:	09 df                	or     %ebx,%edi
  10868b:	c1 ef 02             	shr    $0x2,%edi
  10868e:	09 fe                	or     %edi,%esi
  108690:	8b 7d 94             	mov    -0x6c(%ebp),%edi
  108693:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  108696:	c1 eb 01             	shr    $0x1,%ebx
  108699:	09 df                	or     %ebx,%edi
  10869b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
  10869e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
  1086a4:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1086a7:	c1 e8 01             	shr    $0x1,%eax
  1086aa:	09 c3                	or     %eax,%ebx
  1086ac:	c1 eb 02             	shr    $0x2,%ebx
  1086af:	09 df                	or     %ebx,%edi
  1086b1:	c1 ef 04             	shr    $0x4,%edi
  1086b4:	09 fe                	or     %edi,%esi
  1086b6:	c1 ee 08             	shr    $0x8,%esi
  1086b9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
  1086bf:	09 f0                	or     %esi,%eax
  1086c1:	c1 e8 10             	shr    $0x10,%eax
  1086c4:	09 c2                	or     %eax,%edx
  1086c6:	c1 ea 01             	shr    $0x1,%edx
  1086c9:	21 d1                	and    %edx,%ecx
  1086cb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
  1086d1:	29 c8                	sub    %ecx,%eax
  1086d3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1086d9:	e9 09 00 00 00       	jmp    1086e7 <buddy_alloc_pages+0x1617>
  1086de:	8b 45 94             	mov    -0x6c(%ebp),%eax
  1086e1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
  1086e7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
  1086ed:	8b 8d 88 fe ff ff    	mov    -0x178(%ebp),%ecx
  1086f3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
  1086f9:	89 c8                	mov    %ecx,%eax
  1086fb:	31 d2                	xor    %edx,%edx
  1086fd:	8b b5 78 fe ff ff    	mov    -0x188(%ebp),%esi
  108703:	f7 f6                	div    %esi
  108705:	8b bd 9c fe ff ff    	mov    -0x164(%ebp),%edi
  10870b:	0f af f8             	imul   %eax,%edi
  10870e:	6b c7 14             	imul   $0x14,%edi,%eax
  108711:	03 05 1c 49 11 00    	add    0x11491c,%eax
  108717:	89 45 98             	mov    %eax,-0x68(%ebp)
    list_del(&(page->page_link));
  10871a:	8b 45 98             	mov    -0x68(%ebp),%eax
  10871d:	83 c0 0c             	add    $0xc,%eax
  108720:	89 45 b0             	mov    %eax,-0x50(%ebp)
    __list_del(listelm->prev, listelm->next);
  108723:	8b 45 b0             	mov    -0x50(%ebp),%eax
  108726:	8b 00                	mov    (%eax),%eax
  108728:	8b 7d b0             	mov    -0x50(%ebp),%edi
  10872b:	8b 7f 04             	mov    0x4(%edi),%edi
  10872e:	89 45 b8             	mov    %eax,-0x48(%ebp)
  108731:	89 7d b4             	mov    %edi,-0x4c(%ebp)
    prev->next = next;
  108734:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  108737:	8b 7d b8             	mov    -0x48(%ebp),%edi
  10873a:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
  10873d:	8b 45 b8             	mov    -0x48(%ebp),%eax
  108740:	8b 7d b4             	mov    -0x4c(%ebp),%edi
  108743:	89 07                	mov    %eax,(%edi)
    buddy_segment[block] = 0;
  108745:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108748:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  10874e:	c7 04 87 00 00 00 00 	movl   $0x0,(%edi,%eax,4)
    nr_free -= length;
  108755:	8b 45 90             	mov    -0x70(%ebp),%eax
  108758:	8b 3d 38 49 11 00    	mov    0x114938,%edi
  10875e:	29 c7                	sub    %eax,%edi
  108760:	89 3d 38 49 11 00    	mov    %edi,0x114938
    // Update buddy segment
    while (block != BUDDY_ROOT) {
  108766:	83 7d 94 01          	cmpl   $0x1,-0x6c(%ebp)
  10876a:	0f 84 39 00 00 00    	je     1087a9 <buddy_alloc_pages+0x16d9>
        block = BUDDY_PARENT(block);
  108770:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108773:	c1 e8 01             	shr    $0x1,%eax
  108776:	89 45 94             	mov    %eax,-0x6c(%ebp)
        buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
  108779:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10877c:	c1 e0 01             	shl    $0x1,%eax
  10877f:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  108785:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  108788:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10878b:	c1 e1 01             	shl    $0x1,%ecx
  10878e:	8b 15 18 49 11 00    	mov    0x114918,%edx
  108794:	0b 44 8a 04          	or     0x4(%edx,%ecx,4),%eax
  108798:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10879b:	8b 15 18 49 11 00    	mov    0x114918,%edx
  1087a1:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    while (block != BUDDY_ROOT) {
  1087a4:	e9 bd ff ff ff       	jmp    108766 <buddy_alloc_pages+0x1696>
    }
    return page;
  1087a9:	8b 45 98             	mov    -0x68(%ebp),%eax
  1087ac:	89 45 a0             	mov    %eax,-0x60(%ebp)
}
  1087af:	8b 45 a0             	mov    -0x60(%ebp),%eax
  1087b2:	81 c4 8c 01 00 00    	add    $0x18c,%esp
  1087b8:	5e                   	pop    %esi
  1087b9:	5f                   	pop    %edi
  1087ba:	5b                   	pop    %ebx
  1087bb:	5d                   	pop    %ebp
  1087bc:	c3                   	ret    
  1087bd:	0f 1f 00             	nopl   (%eax)

001087c0 <buddy_free_pages>:

static void
buddy_free_pages(struct Page *base, size_t n) {
  1087c0:	55                   	push   %ebp
  1087c1:	89 e5                	mov    %esp,%ebp
  1087c3:	53                   	push   %ebx
  1087c4:	57                   	push   %edi
  1087c5:	56                   	push   %esi
  1087c6:	81 ec 7c 01 00 00    	sub    $0x17c,%esp
  1087cc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1087cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1087d2:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  1087d5:	89 45 90             	mov    %eax,-0x70(%ebp)
    assert(n > 0);
  1087d8:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
  1087dc:	0f 87 35 00 00 00    	ja     108817 <buddy_free_pages+0x57>
  1087e2:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  1087e8:	b9 a8 00 00 00       	mov    $0xa8,%ecx
  1087ed:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  1087f3:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  1087f9:	89 04 24             	mov    %eax,(%esp)
  1087fc:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
  108803:	00 
  108804:	89 54 24 08          	mov    %edx,0x8(%esp)
  108808:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10880c:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  108812:	e8 39 7c ff ff       	call   100450 <__panic>
  108817:	e9 00 00 00 00       	jmp    10881c <buddy_free_pages+0x5c>
    struct Page *p = base;
  10881c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10881f:	89 45 8c             	mov    %eax,-0x74(%ebp)
    size_t length = UINT32_ROUND_UP(n);
  108822:	8b 45 90             	mov    -0x70(%ebp),%eax
  108825:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  108828:	8b 55 90             	mov    -0x70(%ebp),%edx
  10882b:	c1 ea 01             	shr    $0x1,%edx
  10882e:	09 d1                	or     %edx,%ecx
  108830:	8b 55 90             	mov    -0x70(%ebp),%edx
  108833:	8b 75 90             	mov    -0x70(%ebp),%esi
  108836:	c1 ee 01             	shr    $0x1,%esi
  108839:	09 f2                	or     %esi,%edx
  10883b:	c1 ea 02             	shr    $0x2,%edx
  10883e:	09 d1                	or     %edx,%ecx
  108840:	8b 55 90             	mov    -0x70(%ebp),%edx
  108843:	8b 75 90             	mov    -0x70(%ebp),%esi
  108846:	c1 ee 01             	shr    $0x1,%esi
  108849:	09 f2                	or     %esi,%edx
  10884b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10884e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108851:	c1 ef 01             	shr    $0x1,%edi
  108854:	09 fe                	or     %edi,%esi
  108856:	c1 ee 02             	shr    $0x2,%esi
  108859:	09 f2                	or     %esi,%edx
  10885b:	c1 ea 04             	shr    $0x4,%edx
  10885e:	09 d1                	or     %edx,%ecx
  108860:	8b 55 90             	mov    -0x70(%ebp),%edx
  108863:	8b 75 90             	mov    -0x70(%ebp),%esi
  108866:	c1 ee 01             	shr    $0x1,%esi
  108869:	09 f2                	or     %esi,%edx
  10886b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10886e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108871:	c1 ef 01             	shr    $0x1,%edi
  108874:	09 fe                	or     %edi,%esi
  108876:	c1 ee 02             	shr    $0x2,%esi
  108879:	09 f2                	or     %esi,%edx
  10887b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10887e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108881:	c1 ef 01             	shr    $0x1,%edi
  108884:	09 fe                	or     %edi,%esi
  108886:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108889:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  10888c:	c1 eb 01             	shr    $0x1,%ebx
  10888f:	09 df                	or     %ebx,%edi
  108891:	c1 ef 02             	shr    $0x2,%edi
  108894:	09 fe                	or     %edi,%esi
  108896:	c1 ee 04             	shr    $0x4,%esi
  108899:	09 f2                	or     %esi,%edx
  10889b:	c1 ea 08             	shr    $0x8,%edx
  10889e:	09 d1                	or     %edx,%ecx
  1088a0:	8b 55 90             	mov    -0x70(%ebp),%edx
  1088a3:	8b 75 90             	mov    -0x70(%ebp),%esi
  1088a6:	c1 ee 01             	shr    $0x1,%esi
  1088a9:	09 f2                	or     %esi,%edx
  1088ab:	8b 75 90             	mov    -0x70(%ebp),%esi
  1088ae:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088b1:	c1 ef 01             	shr    $0x1,%edi
  1088b4:	09 fe                	or     %edi,%esi
  1088b6:	c1 ee 02             	shr    $0x2,%esi
  1088b9:	09 f2                	or     %esi,%edx
  1088bb:	8b 75 90             	mov    -0x70(%ebp),%esi
  1088be:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088c1:	c1 ef 01             	shr    $0x1,%edi
  1088c4:	09 fe                	or     %edi,%esi
  1088c6:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088c9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  1088cc:	c1 eb 01             	shr    $0x1,%ebx
  1088cf:	09 df                	or     %ebx,%edi
  1088d1:	c1 ef 02             	shr    $0x2,%edi
  1088d4:	09 fe                	or     %edi,%esi
  1088d6:	c1 ee 04             	shr    $0x4,%esi
  1088d9:	09 f2                	or     %esi,%edx
  1088db:	8b 75 90             	mov    -0x70(%ebp),%esi
  1088de:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088e1:	c1 ef 01             	shr    $0x1,%edi
  1088e4:	09 fe                	or     %edi,%esi
  1088e6:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088e9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  1088ec:	c1 eb 01             	shr    $0x1,%ebx
  1088ef:	09 df                	or     %ebx,%edi
  1088f1:	c1 ef 02             	shr    $0x2,%edi
  1088f4:	09 fe                	or     %edi,%esi
  1088f6:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1088f9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  1088fc:	c1 eb 01             	shr    $0x1,%ebx
  1088ff:	09 df                	or     %ebx,%edi
  108901:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  108904:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10890a:	8b 45 90             	mov    -0x70(%ebp),%eax
  10890d:	c1 e8 01             	shr    $0x1,%eax
  108910:	09 c3                	or     %eax,%ebx
  108912:	c1 eb 02             	shr    $0x2,%ebx
  108915:	09 df                	or     %ebx,%edi
  108917:	c1 ef 04             	shr    $0x4,%edi
  10891a:	09 fe                	or     %edi,%esi
  10891c:	c1 ee 08             	shr    $0x8,%esi
  10891f:	09 f2                	or     %esi,%edx
  108921:	c1 ea 10             	shr    $0x10,%edx
  108924:	09 d1                	or     %edx,%ecx
  108926:	c1 e9 01             	shr    $0x1,%ecx
  108929:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
  10892f:	21 c8                	and    %ecx,%eax
  108931:	83 f8 00             	cmp    $0x0,%eax
  108934:	0f 84 2e 01 00 00    	je     108a68 <buddy_free_pages+0x2a8>
  10893a:	8b 45 90             	mov    -0x70(%ebp),%eax
  10893d:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  108940:	8b 55 90             	mov    -0x70(%ebp),%edx
  108943:	8b 75 90             	mov    -0x70(%ebp),%esi
  108946:	c1 ee 01             	shr    $0x1,%esi
  108949:	09 f2                	or     %esi,%edx
  10894b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10894e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108951:	c1 ef 01             	shr    $0x1,%edi
  108954:	09 fe                	or     %edi,%esi
  108956:	c1 ee 02             	shr    $0x2,%esi
  108959:	09 f2                	or     %esi,%edx
  10895b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10895e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108961:	c1 ef 01             	shr    $0x1,%edi
  108964:	09 fe                	or     %edi,%esi
  108966:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108969:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  10896c:	c1 eb 01             	shr    $0x1,%ebx
  10896f:	09 df                	or     %ebx,%edi
  108971:	c1 ef 02             	shr    $0x2,%edi
  108974:	09 fe                	or     %edi,%esi
  108976:	c1 ee 04             	shr    $0x4,%esi
  108979:	09 f2                	or     %esi,%edx
  10897b:	8b 75 90             	mov    -0x70(%ebp),%esi
  10897e:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108981:	c1 ef 01             	shr    $0x1,%edi
  108984:	09 fe                	or     %edi,%esi
  108986:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108989:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  10898c:	c1 eb 01             	shr    $0x1,%ebx
  10898f:	09 df                	or     %ebx,%edi
  108991:	c1 ef 02             	shr    $0x2,%edi
  108994:	09 fe                	or     %edi,%esi
  108996:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108999:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  10899c:	c1 eb 01             	shr    $0x1,%ebx
  10899f:	09 df                	or     %ebx,%edi
  1089a1:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  1089a4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  1089aa:	8b 45 90             	mov    -0x70(%ebp),%eax
  1089ad:	c1 e8 01             	shr    $0x1,%eax
  1089b0:	09 c3                	or     %eax,%ebx
  1089b2:	c1 eb 02             	shr    $0x2,%ebx
  1089b5:	09 df                	or     %ebx,%edi
  1089b7:	c1 ef 04             	shr    $0x4,%edi
  1089ba:	09 fe                	or     %edi,%esi
  1089bc:	c1 ee 08             	shr    $0x8,%esi
  1089bf:	09 f2                	or     %esi,%edx
  1089c1:	8b 45 90             	mov    -0x70(%ebp),%eax
  1089c4:	8b 75 90             	mov    -0x70(%ebp),%esi
  1089c7:	c1 ee 01             	shr    $0x1,%esi
  1089ca:	09 f0                	or     %esi,%eax
  1089cc:	8b 75 90             	mov    -0x70(%ebp),%esi
  1089cf:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1089d2:	c1 ef 01             	shr    $0x1,%edi
  1089d5:	09 fe                	or     %edi,%esi
  1089d7:	c1 ee 02             	shr    $0x2,%esi
  1089da:	09 f0                	or     %esi,%eax
  1089dc:	8b 75 90             	mov    -0x70(%ebp),%esi
  1089df:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1089e2:	c1 ef 01             	shr    $0x1,%edi
  1089e5:	09 fe                	or     %edi,%esi
  1089e7:	8b 7d 90             	mov    -0x70(%ebp),%edi
  1089ea:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  1089ed:	c1 eb 01             	shr    $0x1,%ebx
  1089f0:	09 df                	or     %ebx,%edi
  1089f2:	c1 ef 02             	shr    $0x2,%edi
  1089f5:	09 fe                	or     %edi,%esi
  1089f7:	c1 ee 04             	shr    $0x4,%esi
  1089fa:	09 f0                	or     %esi,%eax
  1089fc:	8b 75 90             	mov    -0x70(%ebp),%esi
  1089ff:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108a02:	c1 ef 01             	shr    $0x1,%edi
  108a05:	09 fe                	or     %edi,%esi
  108a07:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108a0a:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  108a0d:	c1 eb 01             	shr    $0x1,%ebx
  108a10:	09 df                	or     %ebx,%edi
  108a12:	c1 ef 02             	shr    $0x2,%edi
  108a15:	09 fe                	or     %edi,%esi
  108a17:	8b 7d 90             	mov    -0x70(%ebp),%edi
  108a1a:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  108a1d:	c1 eb 01             	shr    $0x1,%ebx
  108a20:	09 df                	or     %ebx,%edi
  108a22:	8b 5d 90             	mov    -0x70(%ebp),%ebx
  108a25:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  108a2b:	8b 45 90             	mov    -0x70(%ebp),%eax
  108a2e:	c1 e8 01             	shr    $0x1,%eax
  108a31:	09 c3                	or     %eax,%ebx
  108a33:	c1 eb 02             	shr    $0x2,%ebx
  108a36:	09 df                	or     %ebx,%edi
  108a38:	c1 ef 04             	shr    $0x4,%edi
  108a3b:	09 fe                	or     %edi,%esi
  108a3d:	c1 ee 08             	shr    $0x8,%esi
  108a40:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
  108a46:	09 f0                	or     %esi,%eax
  108a48:	c1 e8 10             	shr    $0x10,%eax
  108a4b:	09 c2                	or     %eax,%edx
  108a4d:	c1 ea 01             	shr    $0x1,%edx
  108a50:	21 d1                	and    %edx,%ecx
  108a52:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
  108a58:	29 c8                	sub    %ecx,%eax
  108a5a:	c1 e0 01             	shl    $0x1,%eax
  108a5d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  108a63:	e9 09 00 00 00       	jmp    108a71 <buddy_free_pages+0x2b1>
  108a68:	8b 45 90             	mov    -0x70(%ebp),%eax
  108a6b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  108a71:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
  108a77:	b9 14 00 00 00       	mov    $0x14,%ecx
  108a7c:	89 45 88             	mov    %eax,-0x78(%ebp)
    // Find buddy id 
    size_t begin = (base-buddy_alloc);
  108a7f:	8b 45 94             	mov    -0x6c(%ebp),%eax
  108a82:	8b 15 1c 49 11 00    	mov    0x11491c,%edx
  108a88:	29 d0                	sub    %edx,%eax
  108a8a:	99                   	cltd   
  108a8b:	f7 f9                	idiv   %ecx
  108a8d:	89 45 84             	mov    %eax,-0x7c(%ebp)
    size_t end = begin + length;
  108a90:	8b 45 84             	mov    -0x7c(%ebp),%eax
  108a93:	03 45 88             	add    -0x78(%ebp),%eax
  108a96:	89 45 80             	mov    %eax,-0x80(%ebp)
    size_t block = BUDDY_BLOCK(begin, end);
  108a99:	a1 08 49 11 00       	mov    0x114908,%eax
  108a9e:	8b 4d 80             	mov    -0x80(%ebp),%ecx
  108aa1:	2b 4d 84             	sub    -0x7c(%ebp),%ecx
  108aa4:	31 f6                	xor    %esi,%esi
  108aa6:	89 f2                	mov    %esi,%edx
  108aa8:	f7 f1                	div    %ecx
  108aaa:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  108aad:	8b 75 80             	mov    -0x80(%ebp),%esi
  108ab0:	2b 75 84             	sub    -0x7c(%ebp),%esi
  108ab3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  108ab9:	89 c8                	mov    %ecx,%eax
  108abb:	31 c9                	xor    %ecx,%ecx
  108abd:	89 ca                	mov    %ecx,%edx
  108abf:	f7 f6                	div    %esi
  108ac1:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
  108ac7:	01 c1                	add    %eax,%ecx
  108ac9:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
    // Release block
    for (; p != base + n; p ++) {
  108acf:	8b 45 8c             	mov    -0x74(%ebp),%eax
  108ad2:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  108ad5:	6b 55 90 14          	imul   $0x14,-0x70(%ebp),%edx
  108ad9:	01 d1                	add    %edx,%ecx
  108adb:	39 c8                	cmp    %ecx,%eax
  108add:	0f 84 a6 00 00 00    	je     108b89 <buddy_free_pages+0x3c9>
        assert(!PageReserved(p));
  108ae3:	e9 00 00 00 00       	jmp    108ae8 <buddy_free_pages+0x328>
  108ae8:	8b 45 8c             	mov    -0x74(%ebp),%eax
  108aeb:	83 c0 04             	add    $0x4,%eax
  108aee:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
  108af5:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  108af8:	8b 45 9c             	mov    -0x64(%ebp),%eax
  108afb:	8b 4d a0             	mov    -0x60(%ebp),%ecx
  108afe:	0f a3 08             	bt     %ecx,(%eax)
  108b01:	19 c0                	sbb    %eax,%eax
  108b03:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
  108b06:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
  108b0a:	0f 95 c2             	setne  %dl
  108b0d:	80 e2 01             	and    $0x1,%dl
  108b10:	0f b6 c2             	movzbl %dl,%eax
  108b13:	83 f8 00             	cmp    $0x0,%eax
  108b16:	0f 84 35 00 00 00    	je     108b51 <buddy_free_pages+0x391>
  108b1c:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  108b22:	b9 b1 00 00 00       	mov    $0xb1,%ecx
  108b27:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  108b2d:	8d 35 e3 00 11 00    	lea    0x1100e3,%esi
  108b33:	89 04 24             	mov    %eax,(%esp)
  108b36:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
  108b3d:	00 
  108b3e:	89 54 24 08          	mov    %edx,0x8(%esp)
  108b42:	89 74 24 0c          	mov    %esi,0xc(%esp)
  108b46:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
  108b4c:	e8 ff 78 ff ff       	call   100450 <__panic>
  108b51:	e9 00 00 00 00       	jmp    108b56 <buddy_free_pages+0x396>
  108b56:	31 c0                	xor    %eax,%eax
        p->flags = 0;
  108b58:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  108b5b:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
  108b62:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  108b65:	89 0c 24             	mov    %ecx,(%esp)
  108b68:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  108b6f:	00 
  108b70:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
  108b76:	e8 25 24 00 00       	call   10afa0 <set_page_ref>
    for (; p != base + n; p ++) {
  108b7b:	8b 45 8c             	mov    -0x74(%ebp),%eax
  108b7e:	83 c0 14             	add    $0x14,%eax
  108b81:	89 45 8c             	mov    %eax,-0x74(%ebp)
  108b84:	e9 46 ff ff ff       	jmp    108acf <buddy_free_pages+0x30f>
  108b89:	8d 05 30 49 11 00    	lea    0x114930,%eax
    }
    base->property = length;
  108b8f:	8b 4d 88             	mov    -0x78(%ebp),%ecx
  108b92:	8b 55 94             	mov    -0x6c(%ebp),%edx
  108b95:	89 4a 08             	mov    %ecx,0x8(%edx)
    list_add(&(free_list), &(base->page_link));
  108b98:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  108b9b:	83 c1 0c             	add    $0xc,%ecx
  108b9e:	89 45 a8             	mov    %eax,-0x58(%ebp)
  108ba1:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
    list_add_after(listelm, elm);
  108ba4:	8b 45 a8             	mov    -0x58(%ebp),%eax
  108ba7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  108baa:	89 45 b0             	mov    %eax,-0x50(%ebp)
  108bad:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    __list_add(elm, listelm, listelm->next);
  108bb0:	8b 45 ac             	mov    -0x54(%ebp),%eax
  108bb3:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  108bb6:	8b 55 b0             	mov    -0x50(%ebp),%edx
  108bb9:	8b 52 04             	mov    0x4(%edx),%edx
  108bbc:	89 45 bc             	mov    %eax,-0x44(%ebp)
  108bbf:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  108bc2:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    prev->next = next->prev = elm;
  108bc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
  108bc8:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  108bcb:	89 01                	mov    %eax,(%ecx)
  108bcd:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  108bd0:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  108bd3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  108bd6:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  108bd9:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  108bdc:	8b 45 b8             	mov    -0x48(%ebp),%eax
  108bdf:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  108be2:	89 01                	mov    %eax,(%ecx)
    nr_free += length;
  108be4:	8b 45 88             	mov    -0x78(%ebp),%eax
  108be7:	03 05 38 49 11 00    	add    0x114938,%eax
  108bed:	a3 38 49 11 00       	mov    %eax,0x114938
    buddy_segment[block] = length;
  108bf2:	8b 45 88             	mov    -0x78(%ebp),%eax
  108bf5:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  108bfb:	8b 15 18 49 11 00    	mov    0x114918,%edx
  108c01:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    // Upadte & merge
    while (block != BUDDY_ROOT) {
  108c04:	83 bd 7c ff ff ff 01 	cmpl   $0x1,-0x84(%ebp)
  108c0b:	0f 84 a7 12 00 00    	je     109eb8 <buddy_free_pages+0x16f8>
        block = BUDDY_PARENT(block);
  108c11:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  108c17:	c1 e8 01             	shr    $0x1,%eax
  108c1a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
        size_t left = BUDDY_LEFT(block);
  108c20:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  108c26:	c1 e0 01             	shl    $0x1,%eax
  108c29:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
        size_t right = BUDDY_RIGHT(block);
  108c2f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  108c35:	c1 e0 01             	shl    $0x1,%eax
  108c38:	83 c0 01             	add    $0x1,%eax
  108c3b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
        if (BUDDY_EMPTY(left) && BUDDY_EMPTY(right)) {  // Merge
  108c41:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108c47:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  108c4d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  108c50:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  108c56:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  108c5c:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108c62:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108c68:	c1 ef 01             	shr    $0x1,%edi
  108c6b:	09 fe                	or     %edi,%esi
  108c6d:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108c73:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108c79:	c1 eb 01             	shr    $0x1,%ebx
  108c7c:	09 df                	or     %ebx,%edi
  108c7e:	c1 ef 02             	shr    $0x2,%edi
  108c81:	09 fe                	or     %edi,%esi
  108c83:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108c89:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108c8f:	c1 eb 01             	shr    $0x1,%ebx
  108c92:	09 df                	or     %ebx,%edi
  108c94:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108c9a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  108ca0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108ca6:	c1 e8 01             	shr    $0x1,%eax
  108ca9:	09 c3                	or     %eax,%ebx
  108cab:	c1 eb 02             	shr    $0x2,%ebx
  108cae:	09 df                	or     %ebx,%edi
  108cb0:	c1 ef 04             	shr    $0x4,%edi
  108cb3:	09 fe                	or     %edi,%esi
  108cb5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108cbb:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108cc1:	c1 ef 01             	shr    $0x1,%edi
  108cc4:	09 f8                	or     %edi,%eax
  108cc6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108ccc:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108cd2:	c1 eb 01             	shr    $0x1,%ebx
  108cd5:	09 df                	or     %ebx,%edi
  108cd7:	c1 ef 02             	shr    $0x2,%edi
  108cda:	09 f8                	or     %edi,%eax
  108cdc:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108ce2:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108ce8:	c1 eb 01             	shr    $0x1,%ebx
  108ceb:	09 df                	or     %ebx,%edi
  108ced:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108cf3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  108cf9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108cff:	c1 e8 01             	shr    $0x1,%eax
  108d02:	09 c3                	or     %eax,%ebx
  108d04:	c1 eb 02             	shr    $0x2,%ebx
  108d07:	09 df                	or     %ebx,%edi
  108d09:	c1 ef 04             	shr    $0x4,%edi
  108d0c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
  108d12:	09 f8                	or     %edi,%eax
  108d14:	c1 e8 08             	shr    $0x8,%eax
  108d17:	09 c6                	or     %eax,%esi
  108d19:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108d1f:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108d25:	c1 ef 01             	shr    $0x1,%edi
  108d28:	09 f8                	or     %edi,%eax
  108d2a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108d30:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108d36:	c1 eb 01             	shr    $0x1,%ebx
  108d39:	09 df                	or     %ebx,%edi
  108d3b:	c1 ef 02             	shr    $0x2,%edi
  108d3e:	09 f8                	or     %edi,%eax
  108d40:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108d46:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108d4c:	c1 eb 01             	shr    $0x1,%ebx
  108d4f:	09 df                	or     %ebx,%edi
  108d51:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108d57:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  108d5d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108d63:	c1 e8 01             	shr    $0x1,%eax
  108d66:	09 c3                	or     %eax,%ebx
  108d68:	c1 eb 02             	shr    $0x2,%ebx
  108d6b:	09 df                	or     %ebx,%edi
  108d6d:	c1 ef 04             	shr    $0x4,%edi
  108d70:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
  108d76:	09 f8                	or     %edi,%eax
  108d78:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108d7e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108d84:	c1 eb 01             	shr    $0x1,%ebx
  108d87:	09 df                	or     %ebx,%edi
  108d89:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108d8f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  108d95:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108d9b:	c1 e8 01             	shr    $0x1,%eax
  108d9e:	09 c3                	or     %eax,%ebx
  108da0:	c1 eb 02             	shr    $0x2,%ebx
  108da3:	09 df                	or     %ebx,%edi
  108da5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108dab:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108db1:	c1 eb 01             	shr    $0x1,%ebx
  108db4:	09 d8                	or     %ebx,%eax
  108db6:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108dbc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  108dc2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108dc8:	c1 e8 01             	shr    $0x1,%eax
  108dcb:	09 c3                	or     %eax,%ebx
  108dcd:	c1 eb 02             	shr    $0x2,%ebx
  108dd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
  108dd6:	09 d8                	or     %ebx,%eax
  108dd8:	c1 e8 04             	shr    $0x4,%eax
  108ddb:	09 c7                	or     %eax,%edi
  108ddd:	c1 ef 08             	shr    $0x8,%edi
  108de0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
  108de6:	09 f8                	or     %edi,%eax
  108de8:	c1 e8 10             	shr    $0x10,%eax
  108deb:	09 c6                	or     %eax,%esi
  108ded:	c1 ee 01             	shr    $0x1,%esi
  108df0:	21 f2                	and    %esi,%edx
  108df2:	83 fa 00             	cmp    $0x0,%edx
  108df5:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
  108dfb:	0f 84 91 01 00 00    	je     108f92 <buddy_free_pages+0x7d2>
  108e01:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108e07:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  108e0d:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  108e13:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108e19:	c1 ee 01             	shr    $0x1,%esi
  108e1c:	09 f2                	or     %esi,%edx
  108e1e:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108e24:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e2a:	c1 ef 01             	shr    $0x1,%edi
  108e2d:	09 fe                	or     %edi,%esi
  108e2f:	c1 ee 02             	shr    $0x2,%esi
  108e32:	09 f2                	or     %esi,%edx
  108e34:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108e3a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e40:	c1 ef 01             	shr    $0x1,%edi
  108e43:	09 fe                	or     %edi,%esi
  108e45:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e4b:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108e51:	c1 eb 01             	shr    $0x1,%ebx
  108e54:	09 df                	or     %ebx,%edi
  108e56:	c1 ef 02             	shr    $0x2,%edi
  108e59:	09 fe                	or     %edi,%esi
  108e5b:	c1 ee 04             	shr    $0x4,%esi
  108e5e:	09 f2                	or     %esi,%edx
  108e60:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108e66:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e6c:	c1 ef 01             	shr    $0x1,%edi
  108e6f:	09 fe                	or     %edi,%esi
  108e71:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e77:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108e7d:	c1 eb 01             	shr    $0x1,%ebx
  108e80:	09 df                	or     %ebx,%edi
  108e82:	c1 ef 02             	shr    $0x2,%edi
  108e85:	09 fe                	or     %edi,%esi
  108e87:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108e8d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108e93:	c1 eb 01             	shr    $0x1,%ebx
  108e96:	09 df                	or     %ebx,%edi
  108e98:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108e9e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  108ea4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108eaa:	c1 e8 01             	shr    $0x1,%eax
  108ead:	09 c3                	or     %eax,%ebx
  108eaf:	c1 eb 02             	shr    $0x2,%ebx
  108eb2:	09 df                	or     %ebx,%edi
  108eb4:	c1 ef 04             	shr    $0x4,%edi
  108eb7:	09 fe                	or     %edi,%esi
  108eb9:	c1 ee 08             	shr    $0x8,%esi
  108ebc:	09 f2                	or     %esi,%edx
  108ebe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108ec4:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108eca:	c1 ee 01             	shr    $0x1,%esi
  108ecd:	09 f0                	or     %esi,%eax
  108ecf:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108ed5:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108edb:	c1 ef 01             	shr    $0x1,%edi
  108ede:	09 fe                	or     %edi,%esi
  108ee0:	c1 ee 02             	shr    $0x2,%esi
  108ee3:	09 f0                	or     %esi,%eax
  108ee5:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108eeb:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108ef1:	c1 ef 01             	shr    $0x1,%edi
  108ef4:	09 fe                	or     %edi,%esi
  108ef6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108efc:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108f02:	c1 eb 01             	shr    $0x1,%ebx
  108f05:	09 df                	or     %ebx,%edi
  108f07:	c1 ef 02             	shr    $0x2,%edi
  108f0a:	09 fe                	or     %edi,%esi
  108f0c:	c1 ee 04             	shr    $0x4,%esi
  108f0f:	09 f0                	or     %esi,%eax
  108f11:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  108f17:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108f1d:	c1 ef 01             	shr    $0x1,%edi
  108f20:	09 fe                	or     %edi,%esi
  108f22:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108f28:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108f2e:	c1 eb 01             	shr    $0x1,%ebx
  108f31:	09 df                	or     %ebx,%edi
  108f33:	c1 ef 02             	shr    $0x2,%edi
  108f36:	09 fe                	or     %edi,%esi
  108f38:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  108f3e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108f44:	c1 eb 01             	shr    $0x1,%ebx
  108f47:	09 df                	or     %ebx,%edi
  108f49:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  108f4f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  108f55:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108f5b:	c1 e8 01             	shr    $0x1,%eax
  108f5e:	09 c3                	or     %eax,%ebx
  108f60:	c1 eb 02             	shr    $0x2,%ebx
  108f63:	09 df                	or     %ebx,%edi
  108f65:	c1 ef 04             	shr    $0x4,%edi
  108f68:	09 fe                	or     %edi,%esi
  108f6a:	c1 ee 08             	shr    $0x8,%esi
  108f6d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
  108f73:	09 f0                	or     %esi,%eax
  108f75:	c1 e8 10             	shr    $0x10,%eax
  108f78:	09 c2                	or     %eax,%edx
  108f7a:	c1 ea 01             	shr    $0x1,%edx
  108f7d:	21 d1                	and    %edx,%ecx
  108f7f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
  108f85:	29 c8                	sub    %ecx,%eax
  108f87:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
  108f8d:	e9 0c 00 00 00       	jmp    108f9e <buddy_free_pages+0x7de>
  108f92:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  108f98:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
  108f9e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
  108fa4:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
  108faa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  108fb0:	89 c8                	mov    %ecx,%eax
  108fb2:	31 d2                	xor    %edx,%edx
  108fb4:	8b b5 24 ff ff ff    	mov    -0xdc(%ebp),%esi
  108fba:	f7 f6                	div    %esi
  108fbc:	8b bd 48 ff ff ff    	mov    -0xb8(%ebp),%edi
  108fc2:	39 c7                	cmp    %eax,%edi
  108fc4:	0f 85 b5 0e 00 00    	jne    109e7f <buddy_free_pages+0x16bf>
  108fca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  108fd0:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  108fd6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  108fd9:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  108fdf:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
  108fe5:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  108feb:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  108ff1:	c1 ef 01             	shr    $0x1,%edi
  108ff4:	09 fe                	or     %edi,%esi
  108ff6:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  108ffc:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109002:	c1 eb 01             	shr    $0x1,%ebx
  109005:	09 df                	or     %ebx,%edi
  109007:	c1 ef 02             	shr    $0x2,%edi
  10900a:	09 fe                	or     %edi,%esi
  10900c:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109012:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109018:	c1 eb 01             	shr    $0x1,%ebx
  10901b:	09 df                	or     %ebx,%edi
  10901d:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109023:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
  109029:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10902f:	c1 e8 01             	shr    $0x1,%eax
  109032:	09 c3                	or     %eax,%ebx
  109034:	c1 eb 02             	shr    $0x2,%ebx
  109037:	09 df                	or     %ebx,%edi
  109039:	c1 ef 04             	shr    $0x4,%edi
  10903c:	09 fe                	or     %edi,%esi
  10903e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109044:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  10904a:	c1 ef 01             	shr    $0x1,%edi
  10904d:	09 f8                	or     %edi,%eax
  10904f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109055:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10905b:	c1 eb 01             	shr    $0x1,%ebx
  10905e:	09 df                	or     %ebx,%edi
  109060:	c1 ef 02             	shr    $0x2,%edi
  109063:	09 f8                	or     %edi,%eax
  109065:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  10906b:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109071:	c1 eb 01             	shr    $0x1,%ebx
  109074:	09 df                	or     %ebx,%edi
  109076:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10907c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
  109082:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109088:	c1 e8 01             	shr    $0x1,%eax
  10908b:	09 c3                	or     %eax,%ebx
  10908d:	c1 eb 02             	shr    $0x2,%ebx
  109090:	09 df                	or     %ebx,%edi
  109092:	c1 ef 04             	shr    $0x4,%edi
  109095:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
  10909b:	09 f8                	or     %edi,%eax
  10909d:	c1 e8 08             	shr    $0x8,%eax
  1090a0:	09 c6                	or     %eax,%esi
  1090a2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1090a8:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1090ae:	c1 ef 01             	shr    $0x1,%edi
  1090b1:	09 f8                	or     %edi,%eax
  1090b3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1090b9:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1090bf:	c1 eb 01             	shr    $0x1,%ebx
  1090c2:	09 df                	or     %ebx,%edi
  1090c4:	c1 ef 02             	shr    $0x2,%edi
  1090c7:	09 f8                	or     %edi,%eax
  1090c9:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1090cf:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1090d5:	c1 eb 01             	shr    $0x1,%ebx
  1090d8:	09 df                	or     %ebx,%edi
  1090da:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1090e0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  1090e6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1090ec:	c1 e8 01             	shr    $0x1,%eax
  1090ef:	09 c3                	or     %eax,%ebx
  1090f1:	c1 eb 02             	shr    $0x2,%ebx
  1090f4:	09 df                	or     %ebx,%edi
  1090f6:	c1 ef 04             	shr    $0x4,%edi
  1090f9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
  1090ff:	09 f8                	or     %edi,%eax
  109101:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109107:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10910d:	c1 eb 01             	shr    $0x1,%ebx
  109110:	09 df                	or     %ebx,%edi
  109112:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109118:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
  10911e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109124:	c1 e8 01             	shr    $0x1,%eax
  109127:	09 c3                	or     %eax,%ebx
  109129:	c1 eb 02             	shr    $0x2,%ebx
  10912c:	09 df                	or     %ebx,%edi
  10912e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109134:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10913a:	c1 eb 01             	shr    $0x1,%ebx
  10913d:	09 d8                	or     %ebx,%eax
  10913f:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109145:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
  10914b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109151:	c1 e8 01             	shr    $0x1,%eax
  109154:	09 c3                	or     %eax,%ebx
  109156:	c1 eb 02             	shr    $0x2,%ebx
  109159:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
  10915f:	09 d8                	or     %ebx,%eax
  109161:	c1 e8 04             	shr    $0x4,%eax
  109164:	09 c7                	or     %eax,%edi
  109166:	c1 ef 08             	shr    $0x8,%edi
  109169:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
  10916f:	09 f8                	or     %edi,%eax
  109171:	c1 e8 10             	shr    $0x10,%eax
  109174:	09 c6                	or     %eax,%esi
  109176:	c1 ee 01             	shr    $0x1,%esi
  109179:	21 f2                	and    %esi,%edx
  10917b:	83 fa 00             	cmp    $0x0,%edx
  10917e:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%ebp)
  109184:	0f 84 91 01 00 00    	je     10931b <buddy_free_pages+0xb5b>
  10918a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109190:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109196:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
  10919c:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1091a2:	c1 ee 01             	shr    $0x1,%esi
  1091a5:	09 f2                	or     %esi,%edx
  1091a7:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1091ad:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1091b3:	c1 ef 01             	shr    $0x1,%edi
  1091b6:	09 fe                	or     %edi,%esi
  1091b8:	c1 ee 02             	shr    $0x2,%esi
  1091bb:	09 f2                	or     %esi,%edx
  1091bd:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1091c3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1091c9:	c1 ef 01             	shr    $0x1,%edi
  1091cc:	09 fe                	or     %edi,%esi
  1091ce:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1091d4:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1091da:	c1 eb 01             	shr    $0x1,%ebx
  1091dd:	09 df                	or     %ebx,%edi
  1091df:	c1 ef 02             	shr    $0x2,%edi
  1091e2:	09 fe                	or     %edi,%esi
  1091e4:	c1 ee 04             	shr    $0x4,%esi
  1091e7:	09 f2                	or     %esi,%edx
  1091e9:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1091ef:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1091f5:	c1 ef 01             	shr    $0x1,%edi
  1091f8:	09 fe                	or     %edi,%esi
  1091fa:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109200:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109206:	c1 eb 01             	shr    $0x1,%ebx
  109209:	09 df                	or     %ebx,%edi
  10920b:	c1 ef 02             	shr    $0x2,%edi
  10920e:	09 fe                	or     %edi,%esi
  109210:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109216:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10921c:	c1 eb 01             	shr    $0x1,%ebx
  10921f:	09 df                	or     %ebx,%edi
  109221:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109227:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
  10922d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109233:	c1 e8 01             	shr    $0x1,%eax
  109236:	09 c3                	or     %eax,%ebx
  109238:	c1 eb 02             	shr    $0x2,%ebx
  10923b:	09 df                	or     %ebx,%edi
  10923d:	c1 ef 04             	shr    $0x4,%edi
  109240:	09 fe                	or     %edi,%esi
  109242:	c1 ee 08             	shr    $0x8,%esi
  109245:	09 f2                	or     %esi,%edx
  109247:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10924d:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109253:	c1 ee 01             	shr    $0x1,%esi
  109256:	09 f0                	or     %esi,%eax
  109258:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  10925e:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109264:	c1 ef 01             	shr    $0x1,%edi
  109267:	09 fe                	or     %edi,%esi
  109269:	c1 ee 02             	shr    $0x2,%esi
  10926c:	09 f0                	or     %esi,%eax
  10926e:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109274:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  10927a:	c1 ef 01             	shr    $0x1,%edi
  10927d:	09 fe                	or     %edi,%esi
  10927f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109285:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10928b:	c1 eb 01             	shr    $0x1,%ebx
  10928e:	09 df                	or     %ebx,%edi
  109290:	c1 ef 02             	shr    $0x2,%edi
  109293:	09 fe                	or     %edi,%esi
  109295:	c1 ee 04             	shr    $0x4,%esi
  109298:	09 f0                	or     %esi,%eax
  10929a:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1092a0:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1092a6:	c1 ef 01             	shr    $0x1,%edi
  1092a9:	09 fe                	or     %edi,%esi
  1092ab:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1092b1:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1092b7:	c1 eb 01             	shr    $0x1,%ebx
  1092ba:	09 df                	or     %ebx,%edi
  1092bc:	c1 ef 02             	shr    $0x2,%edi
  1092bf:	09 fe                	or     %edi,%esi
  1092c1:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1092c7:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1092cd:	c1 eb 01             	shr    $0x1,%ebx
  1092d0:	09 df                	or     %ebx,%edi
  1092d2:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1092d8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
  1092de:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1092e4:	c1 e8 01             	shr    $0x1,%eax
  1092e7:	09 c3                	or     %eax,%ebx
  1092e9:	c1 eb 02             	shr    $0x2,%ebx
  1092ec:	09 df                	or     %ebx,%edi
  1092ee:	c1 ef 04             	shr    $0x4,%edi
  1092f1:	09 fe                	or     %edi,%esi
  1092f3:	c1 ee 08             	shr    $0x8,%esi
  1092f6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
  1092fc:	09 f0                	or     %esi,%eax
  1092fe:	c1 e8 10             	shr    $0x10,%eax
  109301:	09 c2                	or     %eax,%edx
  109303:	c1 ea 01             	shr    $0x1,%edx
  109306:	21 d1                	and    %edx,%ecx
  109308:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
  10930e:	29 c8                	sub    %ecx,%eax
  109310:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  109316:	e9 0c 00 00 00       	jmp    109327 <buddy_free_pages+0xb67>
  10931b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109321:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  109327:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
  10932d:	8b 8d 0c ff ff ff    	mov    -0xf4(%ebp),%ecx
  109333:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
  109339:	89 c8                	mov    %ecx,%eax
  10933b:	31 d2                	xor    %edx,%edx
  10933d:	8b b5 fc fe ff ff    	mov    -0x104(%ebp),%esi
  109343:	f7 f6                	div    %esi
  109345:	8b bd 20 ff ff ff    	mov    -0xe0(%ebp),%edi
  10934b:	39 c7                	cmp    %eax,%edi
  10934d:	0f 85 2c 0b 00 00    	jne    109e7f <buddy_free_pages+0x16bf>
            size_t lbegin = BUDDY_BEGIN(left);
  109353:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109359:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  10935f:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  109365:	c1 ea 01             	shr    $0x1,%edx
  109368:	09 d1                	or     %edx,%ecx
  10936a:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  109370:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109376:	c1 ee 01             	shr    $0x1,%esi
  109379:	09 f2                	or     %esi,%edx
  10937b:	c1 ea 02             	shr    $0x2,%edx
  10937e:	09 d1                	or     %edx,%ecx
  109380:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  109386:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10938c:	c1 ee 01             	shr    $0x1,%esi
  10938f:	09 f2                	or     %esi,%edx
  109391:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109397:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  10939d:	c1 ef 01             	shr    $0x1,%edi
  1093a0:	09 fe                	or     %edi,%esi
  1093a2:	c1 ee 02             	shr    $0x2,%esi
  1093a5:	09 f2                	or     %esi,%edx
  1093a7:	c1 ea 04             	shr    $0x4,%edx
  1093aa:	09 d1                	or     %edx,%ecx
  1093ac:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  1093b2:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1093b8:	c1 ee 01             	shr    $0x1,%esi
  1093bb:	09 f2                	or     %esi,%edx
  1093bd:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1093c3:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1093c9:	c1 ef 01             	shr    $0x1,%edi
  1093cc:	09 fe                	or     %edi,%esi
  1093ce:	c1 ee 02             	shr    $0x2,%esi
  1093d1:	09 f2                	or     %esi,%edx
  1093d3:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1093d9:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1093df:	c1 ef 01             	shr    $0x1,%edi
  1093e2:	09 fe                	or     %edi,%esi
  1093e4:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1093ea:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1093f0:	c1 eb 01             	shr    $0x1,%ebx
  1093f3:	09 df                	or     %ebx,%edi
  1093f5:	c1 ef 02             	shr    $0x2,%edi
  1093f8:	09 fe                	or     %edi,%esi
  1093fa:	c1 ee 04             	shr    $0x4,%esi
  1093fd:	09 f2                	or     %esi,%edx
  1093ff:	c1 ea 08             	shr    $0x8,%edx
  109402:	09 d1                	or     %edx,%ecx
  109404:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  10940a:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109410:	c1 ee 01             	shr    $0x1,%esi
  109413:	09 f2                	or     %esi,%edx
  109415:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10941b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109421:	c1 ef 01             	shr    $0x1,%edi
  109424:	09 fe                	or     %edi,%esi
  109426:	c1 ee 02             	shr    $0x2,%esi
  109429:	09 f2                	or     %esi,%edx
  10942b:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109431:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109437:	c1 ef 01             	shr    $0x1,%edi
  10943a:	09 fe                	or     %edi,%esi
  10943c:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109442:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109448:	c1 eb 01             	shr    $0x1,%ebx
  10944b:	09 df                	or     %ebx,%edi
  10944d:	c1 ef 02             	shr    $0x2,%edi
  109450:	09 fe                	or     %edi,%esi
  109452:	c1 ee 04             	shr    $0x4,%esi
  109455:	09 f2                	or     %esi,%edx
  109457:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10945d:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109463:	c1 ef 01             	shr    $0x1,%edi
  109466:	09 fe                	or     %edi,%esi
  109468:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  10946e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109474:	c1 eb 01             	shr    $0x1,%ebx
  109477:	09 df                	or     %ebx,%edi
  109479:	c1 ef 02             	shr    $0x2,%edi
  10947c:	09 fe                	or     %edi,%esi
  10947e:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109484:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  10948a:	c1 eb 01             	shr    $0x1,%ebx
  10948d:	09 df                	or     %ebx,%edi
  10948f:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109495:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
  10949b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  1094a1:	c1 e8 01             	shr    $0x1,%eax
  1094a4:	09 c3                	or     %eax,%ebx
  1094a6:	c1 eb 02             	shr    $0x2,%ebx
  1094a9:	09 df                	or     %ebx,%edi
  1094ab:	c1 ef 04             	shr    $0x4,%edi
  1094ae:	09 fe                	or     %edi,%esi
  1094b0:	c1 ee 08             	shr    $0x8,%esi
  1094b3:	09 f2                	or     %esi,%edx
  1094b5:	c1 ea 10             	shr    $0x10,%edx
  1094b8:	09 d1                	or     %edx,%ecx
  1094ba:	c1 e9 01             	shr    $0x1,%ecx
  1094bd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
  1094c3:	21 c8                	and    %ecx,%eax
  1094c5:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  1094cb:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  1094d1:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1094d7:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1094dd:	c1 ef 01             	shr    $0x1,%edi
  1094e0:	09 fe                	or     %edi,%esi
  1094e2:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1094e8:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1094ee:	c1 eb 01             	shr    $0x1,%ebx
  1094f1:	09 df                	or     %ebx,%edi
  1094f3:	c1 ef 02             	shr    $0x2,%edi
  1094f6:	09 fe                	or     %edi,%esi
  1094f8:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1094fe:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109504:	c1 eb 01             	shr    $0x1,%ebx
  109507:	09 df                	or     %ebx,%edi
  109509:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  10950f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  109515:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10951b:	c1 e8 01             	shr    $0x1,%eax
  10951e:	09 c3                	or     %eax,%ebx
  109520:	c1 eb 02             	shr    $0x2,%ebx
  109523:	09 df                	or     %ebx,%edi
  109525:	c1 ef 04             	shr    $0x4,%edi
  109528:	09 fe                	or     %edi,%esi
  10952a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109530:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109536:	c1 ef 01             	shr    $0x1,%edi
  109539:	09 f8                	or     %edi,%eax
  10953b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109541:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109547:	c1 eb 01             	shr    $0x1,%ebx
  10954a:	09 df                	or     %ebx,%edi
  10954c:	c1 ef 02             	shr    $0x2,%edi
  10954f:	09 f8                	or     %edi,%eax
  109551:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109557:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  10955d:	c1 eb 01             	shr    $0x1,%ebx
  109560:	09 df                	or     %ebx,%edi
  109562:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109568:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
  10956e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109574:	c1 e8 01             	shr    $0x1,%eax
  109577:	09 c3                	or     %eax,%ebx
  109579:	c1 eb 02             	shr    $0x2,%ebx
  10957c:	09 df                	or     %ebx,%edi
  10957e:	c1 ef 04             	shr    $0x4,%edi
  109581:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
  109587:	09 f8                	or     %edi,%eax
  109589:	c1 e8 08             	shr    $0x8,%eax
  10958c:	09 c6                	or     %eax,%esi
  10958e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109594:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  10959a:	c1 ef 01             	shr    $0x1,%edi
  10959d:	09 f8                	or     %edi,%eax
  10959f:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1095a5:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1095ab:	c1 eb 01             	shr    $0x1,%ebx
  1095ae:	09 df                	or     %ebx,%edi
  1095b0:	c1 ef 02             	shr    $0x2,%edi
  1095b3:	09 f8                	or     %edi,%eax
  1095b5:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1095bb:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1095c1:	c1 eb 01             	shr    $0x1,%ebx
  1095c4:	09 df                	or     %ebx,%edi
  1095c6:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1095cc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
  1095d2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  1095d8:	c1 e8 01             	shr    $0x1,%eax
  1095db:	09 c3                	or     %eax,%ebx
  1095dd:	c1 eb 02             	shr    $0x2,%ebx
  1095e0:	09 df                	or     %ebx,%edi
  1095e2:	c1 ef 04             	shr    $0x4,%edi
  1095e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
  1095eb:	09 f8                	or     %edi,%eax
  1095ed:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1095f3:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1095f9:	c1 eb 01             	shr    $0x1,%ebx
  1095fc:	09 df                	or     %ebx,%edi
  1095fe:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109604:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
  10960a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109610:	c1 e8 01             	shr    $0x1,%eax
  109613:	09 c3                	or     %eax,%ebx
  109615:	c1 eb 02             	shr    $0x2,%ebx
  109618:	09 df                	or     %ebx,%edi
  10961a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109620:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109626:	c1 eb 01             	shr    $0x1,%ebx
  109629:	09 d8                	or     %ebx,%eax
  10962b:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109631:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
  109637:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10963d:	c1 e8 01             	shr    $0x1,%eax
  109640:	09 c3                	or     %eax,%ebx
  109642:	c1 eb 02             	shr    $0x2,%ebx
  109645:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
  10964b:	09 d8                	or     %ebx,%eax
  10964d:	c1 e8 04             	shr    $0x4,%eax
  109650:	09 c7                	or     %eax,%edi
  109652:	c1 ef 08             	shr    $0x8,%edi
  109655:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
  10965b:	09 f8                	or     %edi,%eax
  10965d:	c1 e8 10             	shr    $0x10,%eax
  109660:	09 c6                	or     %eax,%esi
  109662:	c1 ee 01             	shr    $0x1,%esi
  109665:	21 f2                	and    %esi,%edx
  109667:	83 fa 00             	cmp    $0x0,%edx
  10966a:	89 8d e0 fe ff ff    	mov    %ecx,-0x120(%ebp)
  109670:	0f 84 91 01 00 00    	je     109807 <buddy_free_pages+0x1047>
  109676:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10967c:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  109682:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
  109688:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10968e:	c1 ee 01             	shr    $0x1,%esi
  109691:	09 f2                	or     %esi,%edx
  109693:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109699:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  10969f:	c1 ef 01             	shr    $0x1,%edi
  1096a2:	09 fe                	or     %edi,%esi
  1096a4:	c1 ee 02             	shr    $0x2,%esi
  1096a7:	09 f2                	or     %esi,%edx
  1096a9:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1096af:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1096b5:	c1 ef 01             	shr    $0x1,%edi
  1096b8:	09 fe                	or     %edi,%esi
  1096ba:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1096c0:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1096c6:	c1 eb 01             	shr    $0x1,%ebx
  1096c9:	09 df                	or     %ebx,%edi
  1096cb:	c1 ef 02             	shr    $0x2,%edi
  1096ce:	09 fe                	or     %edi,%esi
  1096d0:	c1 ee 04             	shr    $0x4,%esi
  1096d3:	09 f2                	or     %esi,%edx
  1096d5:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  1096db:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1096e1:	c1 ef 01             	shr    $0x1,%edi
  1096e4:	09 fe                	or     %edi,%esi
  1096e6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1096ec:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1096f2:	c1 eb 01             	shr    $0x1,%ebx
  1096f5:	09 df                	or     %ebx,%edi
  1096f7:	c1 ef 02             	shr    $0x2,%edi
  1096fa:	09 fe                	or     %edi,%esi
  1096fc:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109702:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109708:	c1 eb 01             	shr    $0x1,%ebx
  10970b:	09 df                	or     %ebx,%edi
  10970d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109713:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
  109719:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10971f:	c1 e8 01             	shr    $0x1,%eax
  109722:	09 c3                	or     %eax,%ebx
  109724:	c1 eb 02             	shr    $0x2,%ebx
  109727:	09 df                	or     %ebx,%edi
  109729:	c1 ef 04             	shr    $0x4,%edi
  10972c:	09 fe                	or     %edi,%esi
  10972e:	c1 ee 08             	shr    $0x8,%esi
  109731:	09 f2                	or     %esi,%edx
  109733:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109739:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10973f:	c1 ee 01             	shr    $0x1,%esi
  109742:	09 f0                	or     %esi,%eax
  109744:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10974a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109750:	c1 ef 01             	shr    $0x1,%edi
  109753:	09 fe                	or     %edi,%esi
  109755:	c1 ee 02             	shr    $0x2,%esi
  109758:	09 f0                	or     %esi,%eax
  10975a:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  109760:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109766:	c1 ef 01             	shr    $0x1,%edi
  109769:	09 fe                	or     %edi,%esi
  10976b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109771:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  109777:	c1 eb 01             	shr    $0x1,%ebx
  10977a:	09 df                	or     %ebx,%edi
  10977c:	c1 ef 02             	shr    $0x2,%edi
  10977f:	09 fe                	or     %edi,%esi
  109781:	c1 ee 04             	shr    $0x4,%esi
  109784:	09 f0                	or     %esi,%eax
  109786:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
  10978c:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  109792:	c1 ef 01             	shr    $0x1,%edi
  109795:	09 fe                	or     %edi,%esi
  109797:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  10979d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1097a3:	c1 eb 01             	shr    $0x1,%ebx
  1097a6:	09 df                	or     %ebx,%edi
  1097a8:	c1 ef 02             	shr    $0x2,%edi
  1097ab:	09 fe                	or     %edi,%esi
  1097ad:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
  1097b3:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1097b9:	c1 eb 01             	shr    $0x1,%ebx
  1097bc:	09 df                	or     %ebx,%edi
  1097be:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
  1097c4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
  1097ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  1097d0:	c1 e8 01             	shr    $0x1,%eax
  1097d3:	09 c3                	or     %eax,%ebx
  1097d5:	c1 eb 02             	shr    $0x2,%ebx
  1097d8:	09 df                	or     %ebx,%edi
  1097da:	c1 ef 04             	shr    $0x4,%edi
  1097dd:	09 fe                	or     %edi,%esi
  1097df:	c1 ee 08             	shr    $0x8,%esi
  1097e2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
  1097e8:	09 f0                	or     %esi,%eax
  1097ea:	c1 e8 10             	shr    $0x10,%eax
  1097ed:	09 c2                	or     %eax,%edx
  1097ef:	c1 ea 01             	shr    $0x1,%edx
  1097f2:	21 d1                	and    %edx,%ecx
  1097f4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
  1097fa:	29 c8                	sub    %ecx,%eax
  1097fc:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
  109802:	e9 0c 00 00 00       	jmp    109813 <buddy_free_pages+0x1053>
  109807:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10980d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
  109813:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
  109819:	8b 8d e0 fe ff ff    	mov    -0x120(%ebp),%ecx
  10981f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
  109825:	89 c8                	mov    %ecx,%eax
  109827:	31 d2                	xor    %edx,%edx
  109829:	8b b5 d0 fe ff ff    	mov    -0x130(%ebp),%esi
  10982f:	f7 f6                	div    %esi
  109831:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
  109837:	0f af f8             	imul   %eax,%edi
  10983a:	89 bd 70 ff ff ff    	mov    %edi,-0x90(%ebp)
            size_t rbegin = BUDDY_BEGIN(right);
  109840:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109846:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  10984c:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109852:	c1 eb 01             	shr    $0x1,%ebx
  109855:	09 df                	or     %ebx,%edi
  109857:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10985d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109863:	c1 e9 01             	shr    $0x1,%ecx
  109866:	09 cb                	or     %ecx,%ebx
  109868:	c1 eb 02             	shr    $0x2,%ebx
  10986b:	09 df                	or     %ebx,%edi
  10986d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109873:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109879:	c1 eb 01             	shr    $0x1,%ebx
  10987c:	09 d9                	or     %ebx,%ecx
  10987e:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109884:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  10988a:	c1 ee 01             	shr    $0x1,%esi
  10988d:	09 f3                	or     %esi,%ebx
  10988f:	c1 eb 02             	shr    $0x2,%ebx
  109892:	09 d9                	or     %ebx,%ecx
  109894:	c1 e9 04             	shr    $0x4,%ecx
  109897:	09 cf                	or     %ecx,%edi
  109899:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  10989f:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1098a5:	c1 ee 01             	shr    $0x1,%esi
  1098a8:	09 f1                	or     %esi,%ecx
  1098aa:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1098b0:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1098b6:	c1 eb 01             	shr    $0x1,%ebx
  1098b9:	09 de                	or     %ebx,%esi
  1098bb:	c1 ee 02             	shr    $0x2,%esi
  1098be:	09 f1                	or     %esi,%ecx
  1098c0:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1098c6:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1098cc:	c1 eb 01             	shr    $0x1,%ebx
  1098cf:	09 de                	or     %ebx,%esi
  1098d1:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1098d7:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
  1098dd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1098e3:	c1 e8 01             	shr    $0x1,%eax
  1098e6:	09 c3                	or     %eax,%ebx
  1098e8:	c1 eb 02             	shr    $0x2,%ebx
  1098eb:	09 de                	or     %ebx,%esi
  1098ed:	c1 ee 04             	shr    $0x4,%esi
  1098f0:	09 f1                	or     %esi,%ecx
  1098f2:	c1 e9 08             	shr    $0x8,%ecx
  1098f5:	09 cf                	or     %ecx,%edi
  1098f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1098fd:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109903:	c1 e9 01             	shr    $0x1,%ecx
  109906:	09 c8                	or     %ecx,%eax
  109908:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  10990e:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109914:	c1 ee 01             	shr    $0x1,%esi
  109917:	09 f1                	or     %esi,%ecx
  109919:	c1 e9 02             	shr    $0x2,%ecx
  10991c:	09 c8                	or     %ecx,%eax
  10991e:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109924:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  10992a:	c1 ee 01             	shr    $0x1,%esi
  10992d:	09 f1                	or     %esi,%ecx
  10992f:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109935:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10993b:	c1 eb 01             	shr    $0x1,%ebx
  10993e:	09 de                	or     %ebx,%esi
  109940:	c1 ee 02             	shr    $0x2,%esi
  109943:	09 f1                	or     %esi,%ecx
  109945:	c1 e9 04             	shr    $0x4,%ecx
  109948:	09 c8                	or     %ecx,%eax
  10994a:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109950:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109956:	c1 ee 01             	shr    $0x1,%esi
  109959:	09 f1                	or     %esi,%ecx
  10995b:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109961:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109967:	c1 eb 01             	shr    $0x1,%ebx
  10996a:	09 de                	or     %ebx,%esi
  10996c:	c1 ee 02             	shr    $0x2,%esi
  10996f:	09 f1                	or     %esi,%ecx
  109971:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109977:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  10997d:	c1 eb 01             	shr    $0x1,%ebx
  109980:	09 de                	or     %ebx,%esi
  109982:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109988:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
  10998e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109994:	c1 e8 01             	shr    $0x1,%eax
  109997:	09 c3                	or     %eax,%ebx
  109999:	c1 eb 02             	shr    $0x2,%ebx
  10999c:	09 de                	or     %ebx,%esi
  10999e:	c1 ee 04             	shr    $0x4,%esi
  1099a1:	09 f1                	or     %esi,%ecx
  1099a3:	c1 e9 08             	shr    $0x8,%ecx
  1099a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
  1099ac:	09 c8                	or     %ecx,%eax
  1099ae:	c1 e8 10             	shr    $0x10,%eax
  1099b1:	09 c7                	or     %eax,%edi
  1099b3:	c1 ef 01             	shr    $0x1,%edi
  1099b6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
  1099bc:	21 f8                	and    %edi,%eax
  1099be:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  1099c4:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  1099ca:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  1099d0:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1099d6:	c1 eb 01             	shr    $0x1,%ebx
  1099d9:	09 df                	or     %ebx,%edi
  1099db:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  1099e1:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
  1099e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1099ed:	c1 e8 01             	shr    $0x1,%eax
  1099f0:	09 c3                	or     %eax,%ebx
  1099f2:	c1 eb 02             	shr    $0x2,%ebx
  1099f5:	09 df                	or     %ebx,%edi
  1099f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  1099fd:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109a03:	c1 eb 01             	shr    $0x1,%ebx
  109a06:	09 d8                	or     %ebx,%eax
  109a08:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109a0e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
  109a14:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a1a:	c1 e8 01             	shr    $0x1,%eax
  109a1d:	09 c3                	or     %eax,%ebx
  109a1f:	c1 eb 02             	shr    $0x2,%ebx
  109a22:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
  109a28:	09 d8                	or     %ebx,%eax
  109a2a:	c1 e8 04             	shr    $0x4,%eax
  109a2d:	09 c7                	or     %eax,%edi
  109a2f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a35:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109a3b:	c1 eb 01             	shr    $0x1,%ebx
  109a3e:	09 d8                	or     %ebx,%eax
  109a40:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109a46:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
  109a4c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a52:	c1 e8 01             	shr    $0x1,%eax
  109a55:	09 c3                	or     %eax,%ebx
  109a57:	c1 eb 02             	shr    $0x2,%ebx
  109a5a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
  109a60:	09 d8                	or     %ebx,%eax
  109a62:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109a68:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
  109a6e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a74:	c1 e8 01             	shr    $0x1,%eax
  109a77:	09 c3                	or     %eax,%ebx
  109a79:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a7f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
  109a85:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109a8b:	c1 e8 01             	shr    $0x1,%eax
  109a8e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
  109a94:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
  109a9a:	89 8d ac fe ff ff    	mov    %ecx,-0x154(%ebp)
  109aa0:	8b 8d b0 fe ff ff    	mov    -0x150(%ebp),%ecx
  109aa6:	09 c8                	or     %ecx,%eax
  109aa8:	c1 e8 02             	shr    $0x2,%eax
  109aab:	09 c3                	or     %eax,%ebx
  109aad:	c1 eb 04             	shr    $0x4,%ebx
  109ab0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
  109ab6:	09 d8                	or     %ebx,%eax
  109ab8:	c1 e8 08             	shr    $0x8,%eax
  109abb:	09 c7                	or     %eax,%edi
  109abd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109ac3:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109ac9:	c1 e9 01             	shr    $0x1,%ecx
  109acc:	09 c8                	or     %ecx,%eax
  109ace:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109ad4:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109ada:	c1 eb 01             	shr    $0x1,%ebx
  109add:	09 d9                	or     %ebx,%ecx
  109adf:	c1 e9 02             	shr    $0x2,%ecx
  109ae2:	09 c8                	or     %ecx,%eax
  109ae4:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109aea:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109af0:	c1 eb 01             	shr    $0x1,%ebx
  109af3:	09 d9                	or     %ebx,%ecx
  109af5:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109afb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
  109b01:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109b07:	c1 e8 01             	shr    $0x1,%eax
  109b0a:	09 c3                	or     %eax,%ebx
  109b0c:	c1 eb 02             	shr    $0x2,%ebx
  109b0f:	09 d9                	or     %ebx,%ecx
  109b11:	c1 e9 04             	shr    $0x4,%ecx
  109b14:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
  109b1a:	09 c8                	or     %ecx,%eax
  109b1c:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109b22:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109b28:	c1 eb 01             	shr    $0x1,%ebx
  109b2b:	09 d9                	or     %ebx,%ecx
  109b2d:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109b33:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
  109b39:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109b3f:	c1 e8 01             	shr    $0x1,%eax
  109b42:	09 c3                	or     %eax,%ebx
  109b44:	c1 eb 02             	shr    $0x2,%ebx
  109b47:	09 d9                	or     %ebx,%ecx
  109b49:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109b4f:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109b55:	c1 eb 01             	shr    $0x1,%ebx
  109b58:	09 d8                	or     %ebx,%eax
  109b5a:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109b60:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
  109b66:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109b6c:	c1 e8 01             	shr    $0x1,%eax
  109b6f:	09 c3                	or     %eax,%ebx
  109b71:	c1 eb 02             	shr    $0x2,%ebx
  109b74:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
  109b7a:	09 d8                	or     %ebx,%eax
  109b7c:	c1 e8 04             	shr    $0x4,%eax
  109b7f:	09 c1                	or     %eax,%ecx
  109b81:	c1 e9 08             	shr    $0x8,%ecx
  109b84:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
  109b8a:	09 c8                	or     %ecx,%eax
  109b8c:	c1 e8 10             	shr    $0x10,%eax
  109b8f:	09 c7                	or     %eax,%edi
  109b91:	c1 ef 01             	shr    $0x1,%edi
  109b94:	21 fe                	and    %edi,%esi
  109b96:	83 fe 00             	cmp    $0x0,%esi
  109b99:	0f 84 91 01 00 00    	je     109d30 <buddy_free_pages+0x1570>
  109b9f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109ba5:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  109bab:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
  109bb1:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109bb7:	c1 ee 01             	shr    $0x1,%esi
  109bba:	09 f2                	or     %esi,%edx
  109bbc:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109bc2:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109bc8:	c1 ef 01             	shr    $0x1,%edi
  109bcb:	09 fe                	or     %edi,%esi
  109bcd:	c1 ee 02             	shr    $0x2,%esi
  109bd0:	09 f2                	or     %esi,%edx
  109bd2:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109bd8:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109bde:	c1 ef 01             	shr    $0x1,%edi
  109be1:	09 fe                	or     %edi,%esi
  109be3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109be9:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109bef:	c1 eb 01             	shr    $0x1,%ebx
  109bf2:	09 df                	or     %ebx,%edi
  109bf4:	c1 ef 02             	shr    $0x2,%edi
  109bf7:	09 fe                	or     %edi,%esi
  109bf9:	c1 ee 04             	shr    $0x4,%esi
  109bfc:	09 f2                	or     %esi,%edx
  109bfe:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109c04:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c0a:	c1 ef 01             	shr    $0x1,%edi
  109c0d:	09 fe                	or     %edi,%esi
  109c0f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c15:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109c1b:	c1 eb 01             	shr    $0x1,%ebx
  109c1e:	09 df                	or     %ebx,%edi
  109c20:	c1 ef 02             	shr    $0x2,%edi
  109c23:	09 fe                	or     %edi,%esi
  109c25:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c2b:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109c31:	c1 eb 01             	shr    $0x1,%ebx
  109c34:	09 df                	or     %ebx,%edi
  109c36:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109c3c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
  109c42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109c48:	c1 e8 01             	shr    $0x1,%eax
  109c4b:	09 c3                	or     %eax,%ebx
  109c4d:	c1 eb 02             	shr    $0x2,%ebx
  109c50:	09 df                	or     %ebx,%edi
  109c52:	c1 ef 04             	shr    $0x4,%edi
  109c55:	09 fe                	or     %edi,%esi
  109c57:	c1 ee 08             	shr    $0x8,%esi
  109c5a:	09 f2                	or     %esi,%edx
  109c5c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109c62:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109c68:	c1 ee 01             	shr    $0x1,%esi
  109c6b:	09 f0                	or     %esi,%eax
  109c6d:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109c73:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c79:	c1 ef 01             	shr    $0x1,%edi
  109c7c:	09 fe                	or     %edi,%esi
  109c7e:	c1 ee 02             	shr    $0x2,%esi
  109c81:	09 f0                	or     %esi,%eax
  109c83:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109c89:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c8f:	c1 ef 01             	shr    $0x1,%edi
  109c92:	09 fe                	or     %edi,%esi
  109c94:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109c9a:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109ca0:	c1 eb 01             	shr    $0x1,%ebx
  109ca3:	09 df                	or     %ebx,%edi
  109ca5:	c1 ef 02             	shr    $0x2,%edi
  109ca8:	09 fe                	or     %edi,%esi
  109caa:	c1 ee 04             	shr    $0x4,%esi
  109cad:	09 f0                	or     %esi,%eax
  109caf:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
  109cb5:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109cbb:	c1 ef 01             	shr    $0x1,%edi
  109cbe:	09 fe                	or     %edi,%esi
  109cc0:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109cc6:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109ccc:	c1 eb 01             	shr    $0x1,%ebx
  109ccf:	09 df                	or     %ebx,%edi
  109cd1:	c1 ef 02             	shr    $0x2,%edi
  109cd4:	09 fe                	or     %edi,%esi
  109cd6:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
  109cdc:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109ce2:	c1 eb 01             	shr    $0x1,%ebx
  109ce5:	09 df                	or     %ebx,%edi
  109ce7:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
  109ced:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
  109cf3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109cf9:	c1 e8 01             	shr    $0x1,%eax
  109cfc:	09 c3                	or     %eax,%ebx
  109cfe:	c1 eb 02             	shr    $0x2,%ebx
  109d01:	09 df                	or     %ebx,%edi
  109d03:	c1 ef 04             	shr    $0x4,%edi
  109d06:	09 fe                	or     %edi,%esi
  109d08:	c1 ee 08             	shr    $0x8,%esi
  109d0b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
  109d11:	09 f0                	or     %esi,%eax
  109d13:	c1 e8 10             	shr    $0x10,%eax
  109d16:	09 c2                	or     %eax,%edx
  109d18:	c1 ea 01             	shr    $0x1,%edx
  109d1b:	21 d1                	and    %edx,%ecx
  109d1d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
  109d23:	29 c8                	sub    %ecx,%eax
  109d25:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  109d2b:	e9 0c 00 00 00       	jmp    109d3c <buddy_free_pages+0x157c>
  109d30:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  109d36:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
  109d3c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
  109d42:	8d 0d 30 49 11 00    	lea    0x114930,%ecx
  109d48:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
  109d4e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
  109d54:	89 d0                	mov    %edx,%eax
  109d56:	31 d2                	xor    %edx,%edx
  109d58:	8b b5 90 fe ff ff    	mov    -0x170(%ebp),%esi
  109d5e:	f7 f6                	div    %esi
  109d60:	8b bd c4 fe ff ff    	mov    -0x13c(%ebp),%edi
  109d66:	0f af f8             	imul   %eax,%edi
  109d69:	89 bd 6c ff ff ff    	mov    %edi,-0x94(%ebp)
            list_del(&(buddy_alloc[lbegin].page_link));
  109d6f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  109d75:	6b c0 14             	imul   $0x14,%eax,%eax
  109d78:	03 05 1c 49 11 00    	add    0x11491c,%eax
  109d7e:	83 c0 0c             	add    $0xc,%eax
  109d81:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
  109d84:	8b 45 e8             	mov    -0x18(%ebp),%eax
  109d87:	8b 00                	mov    (%eax),%eax
  109d89:	8b 7d e8             	mov    -0x18(%ebp),%edi
  109d8c:	8b 7f 04             	mov    0x4(%edi),%edi
  109d8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  109d92:	89 7d ec             	mov    %edi,-0x14(%ebp)
    prev->next = next;
  109d95:	8b 45 ec             	mov    -0x14(%ebp),%eax
  109d98:	8b 7d f0             	mov    -0x10(%ebp),%edi
  109d9b:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
  109d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109da1:	8b 7d ec             	mov    -0x14(%ebp),%edi
  109da4:	89 07                	mov    %eax,(%edi)
            list_del(&(buddy_alloc[rbegin].page_link));
  109da6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
  109dac:	6b c0 14             	imul   $0x14,%eax,%eax
  109daf:	03 05 1c 49 11 00    	add    0x11491c,%eax
  109db5:	83 c0 0c             	add    $0xc,%eax
  109db8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_del(listelm->prev, listelm->next);
  109dbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
  109dbe:	8b 00                	mov    (%eax),%eax
  109dc0:	8b 7d dc             	mov    -0x24(%ebp),%edi
  109dc3:	8b 7f 04             	mov    0x4(%edi),%edi
  109dc6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  109dc9:	89 7d e0             	mov    %edi,-0x20(%ebp)
    prev->next = next;
  109dcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
  109dcf:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  109dd2:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
  109dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  109dd8:	8b 7d e0             	mov    -0x20(%ebp),%edi
  109ddb:	89 07                	mov    %eax,(%edi)
            buddy_segment[block] = buddy_segment[left]<<1;
  109ddd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109de3:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  109de9:	8b 04 87             	mov    (%edi,%eax,4),%eax
  109dec:	c1 e0 01             	shl    $0x1,%eax
  109def:	8b bd 7c ff ff ff    	mov    -0x84(%ebp),%edi
  109df5:	8b 1d 18 49 11 00    	mov    0x114918,%ebx
  109dfb:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            buddy_alloc[lbegin].property = buddy_segment[left]<<1;
  109dfe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  109e04:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  109e0a:	8b 04 87             	mov    (%edi,%eax,4),%eax
  109e0d:	c1 e0 01             	shl    $0x1,%eax
  109e10:	8b bd 70 ff ff ff    	mov    -0x90(%ebp),%edi
  109e16:	6b ff 14             	imul   $0x14,%edi,%edi
  109e19:	03 3d 1c 49 11 00    	add    0x11491c,%edi
  109e1f:	89 47 08             	mov    %eax,0x8(%edi)
            list_add(&(free_list), &(buddy_alloc[lbegin].page_link));
  109e22:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  109e28:	6b c0 14             	imul   $0x14,%eax,%eax
  109e2b:	03 05 1c 49 11 00    	add    0x11491c,%eax
  109e31:	83 c0 0c             	add    $0xc,%eax
  109e34:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  109e37:	89 45 c0             	mov    %eax,-0x40(%ebp)
    list_add_after(listelm, elm);
  109e3a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  109e3d:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  109e40:	89 45 cc             	mov    %eax,-0x34(%ebp)
  109e43:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    __list_add(elm, listelm, listelm->next);
  109e46:	8b 45 c8             	mov    -0x38(%ebp),%eax
  109e49:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  109e4c:	8b 7d cc             	mov    -0x34(%ebp),%edi
  109e4f:	8b 7f 04             	mov    0x4(%edi),%edi
  109e52:	89 45 d8             	mov    %eax,-0x28(%ebp)
  109e55:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  109e58:	89 7d d0             	mov    %edi,-0x30(%ebp)
    prev->next = next->prev = elm;
  109e5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  109e5e:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  109e61:	89 01                	mov    %eax,(%ecx)
  109e63:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  109e66:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  109e69:	8b 45 d0             	mov    -0x30(%ebp),%eax
  109e6c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  109e6f:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  109e72:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  109e75:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  109e78:	89 01                	mov    %eax,(%ecx)
        } else {                                        // Update
  109e7a:	e9 34 00 00 00       	jmp    109eb3 <buddy_free_pages+0x16f3>
            buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
  109e7f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  109e85:	c1 e0 01             	shl    $0x1,%eax
  109e88:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  109e8e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  109e91:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  109e97:	c1 e1 01             	shl    $0x1,%ecx
  109e9a:	8b 15 18 49 11 00    	mov    0x114918,%edx
  109ea0:	0b 44 8a 04          	or     0x4(%edx,%ecx,4),%eax
  109ea4:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  109eaa:	8b 15 18 49 11 00    	mov    0x114918,%edx
  109eb0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    while (block != BUDDY_ROOT) {
  109eb3:	e9 4c ed ff ff       	jmp    108c04 <buddy_free_pages+0x444>
        }
    }
}
  109eb8:	81 c4 7c 01 00 00    	add    $0x17c,%esp
  109ebe:	5e                   	pop    %esi
  109ebf:	5f                   	pop    %edi
  109ec0:	5b                   	pop    %ebx
  109ec1:	5d                   	pop    %ebp
  109ec2:	c3                   	ret    
  109ec3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  109eca:	84 00 00 00 00 00 

00109ed0 <buddy_nr_free_pages>:

static size_t
buddy_nr_free_pages(void) {
  109ed0:	55                   	push   %ebp
  109ed1:	89 e5                	mov    %esp,%ebp
    return nr_free;
  109ed3:	a1 38 49 11 00       	mov    0x114938,%eax
  109ed8:	5d                   	pop    %ebp
  109ed9:	c3                   	ret    
  109eda:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

00109ee0 <default_check>:
    buddy_init_memmap(buddy_physical, buddy_physical_size_store);

}

static void
default_check(void) {
  109ee0:	55                   	push   %ebp
  109ee1:	89 e5                	mov    %esp,%ebp

    // Check buddy system
    macro_check();
  109ee3:	83 ec 08             	sub    $0x8,%esp
  109ee6:	e8 d5 10 00 00       	call   10afc0 <macro_check>
    size_check();
  109eeb:	e8 20 13 00 00       	call   10b210 <size_check>
    segment_check();
  109ef0:	e8 0b 15 00 00       	call   10b400 <segment_check>
    alloc_check();
  109ef5:	e8 b6 1b 00 00       	call   10bab0 <alloc_check>
    
}
  109efa:	83 c4 08             	add    $0x8,%esp
  109efd:	5d                   	pop    %ebp
  109efe:	c3                   	ret    
  109eff:	90                   	nop

00109f00 <buddy_init_size>:
buddy_init_size(size_t n) {
  109f00:	55                   	push   %ebp
  109f01:	89 e5                	mov    %esp,%ebp
  109f03:	53                   	push   %ebx
  109f04:	57                   	push   %edi
  109f05:	56                   	push   %esi
  109f06:	83 ec 3c             	sub    $0x3c,%esp
  109f09:	8b 45 08             	mov    0x8(%ebp),%eax
  109f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(n > 1);
  109f0f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  109f13:	0f 87 32 00 00 00    	ja     109f4b <buddy_init_size+0x4b>
  109f19:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  109f1f:	b9 2a 00 00 00       	mov    $0x2a,%ecx
  109f24:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  109f2a:	8d 35 dd 00 11 00    	lea    0x1100dd,%esi
  109f30:	89 04 24             	mov    %eax,(%esp)
  109f33:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  109f3a:	00 
  109f3b:	89 54 24 08          	mov    %edx,0x8(%esp)
  109f3f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  109f43:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  109f46:	e8 05 65 ff ff       	call   100450 <__panic>
  109f4b:	e9 00 00 00 00       	jmp    109f50 <buddy_init_size+0x50>
    buddy_physical_size = n;
  109f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109f53:	a3 04 49 11 00       	mov    %eax,0x114904
    if (n < 512) {
  109f58:	81 7d f0 00 02 00 00 	cmpl   $0x200,-0x10(%ebp)
  109f5f:	0f 83 1a 03 00 00    	jae    10a27f <buddy_init_size+0x37f>
        buddy_virtual_size = UINT32_ROUND_UP(n-1);
  109f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109f68:	83 e8 01             	sub    $0x1,%eax
  109f6b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  109f6e:	83 e9 01             	sub    $0x1,%ecx
  109f71:	8b 55 f0             	mov    -0x10(%ebp),%edx
  109f74:	83 ea 01             	sub    $0x1,%edx
  109f77:	c1 ea 01             	shr    $0x1,%edx
  109f7a:	09 d1                	or     %edx,%ecx
  109f7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  109f7f:	83 ea 01             	sub    $0x1,%edx
  109f82:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109f85:	83 ee 01             	sub    $0x1,%esi
  109f88:	c1 ee 01             	shr    $0x1,%esi
  109f8b:	09 f2                	or     %esi,%edx
  109f8d:	c1 ea 02             	shr    $0x2,%edx
  109f90:	09 d1                	or     %edx,%ecx
  109f92:	8b 55 f0             	mov    -0x10(%ebp),%edx
  109f95:	83 ea 01             	sub    $0x1,%edx
  109f98:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109f9b:	83 ee 01             	sub    $0x1,%esi
  109f9e:	c1 ee 01             	shr    $0x1,%esi
  109fa1:	09 f2                	or     %esi,%edx
  109fa3:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109fa6:	83 ee 01             	sub    $0x1,%esi
  109fa9:	8b 7d f0             	mov    -0x10(%ebp),%edi
  109fac:	83 ef 01             	sub    $0x1,%edi
  109faf:	c1 ef 01             	shr    $0x1,%edi
  109fb2:	09 fe                	or     %edi,%esi
  109fb4:	c1 ee 02             	shr    $0x2,%esi
  109fb7:	09 f2                	or     %esi,%edx
  109fb9:	c1 ea 04             	shr    $0x4,%edx
  109fbc:	09 d1                	or     %edx,%ecx
  109fbe:	8b 55 f0             	mov    -0x10(%ebp),%edx
  109fc1:	83 ea 01             	sub    $0x1,%edx
  109fc4:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109fc7:	83 ee 01             	sub    $0x1,%esi
  109fca:	c1 ee 01             	shr    $0x1,%esi
  109fcd:	09 f2                	or     %esi,%edx
  109fcf:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109fd2:	83 ee 01             	sub    $0x1,%esi
  109fd5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  109fd8:	83 ef 01             	sub    $0x1,%edi
  109fdb:	c1 ef 01             	shr    $0x1,%edi
  109fde:	09 fe                	or     %edi,%esi
  109fe0:	c1 ee 02             	shr    $0x2,%esi
  109fe3:	09 f2                	or     %esi,%edx
  109fe5:	8b 75 f0             	mov    -0x10(%ebp),%esi
  109fe8:	83 ee 01             	sub    $0x1,%esi
  109feb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  109fee:	83 ef 01             	sub    $0x1,%edi
  109ff1:	c1 ef 01             	shr    $0x1,%edi
  109ff4:	09 fe                	or     %edi,%esi
  109ff6:	8b 7d f0             	mov    -0x10(%ebp),%edi
  109ff9:	83 ef 01             	sub    $0x1,%edi
  109ffc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  109fff:	83 eb 01             	sub    $0x1,%ebx
  10a002:	c1 eb 01             	shr    $0x1,%ebx
  10a005:	09 df                	or     %ebx,%edi
  10a007:	c1 ef 02             	shr    $0x2,%edi
  10a00a:	09 fe                	or     %edi,%esi
  10a00c:	c1 ee 04             	shr    $0x4,%esi
  10a00f:	09 f2                	or     %esi,%edx
  10a011:	c1 ea 08             	shr    $0x8,%edx
  10a014:	09 d1                	or     %edx,%ecx
  10a016:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a019:	83 ea 01             	sub    $0x1,%edx
  10a01c:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a01f:	83 ee 01             	sub    $0x1,%esi
  10a022:	c1 ee 01             	shr    $0x1,%esi
  10a025:	09 f2                	or     %esi,%edx
  10a027:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a02a:	83 ee 01             	sub    $0x1,%esi
  10a02d:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a030:	83 ef 01             	sub    $0x1,%edi
  10a033:	c1 ef 01             	shr    $0x1,%edi
  10a036:	09 fe                	or     %edi,%esi
  10a038:	c1 ee 02             	shr    $0x2,%esi
  10a03b:	09 f2                	or     %esi,%edx
  10a03d:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a040:	83 ee 01             	sub    $0x1,%esi
  10a043:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a046:	83 ef 01             	sub    $0x1,%edi
  10a049:	c1 ef 01             	shr    $0x1,%edi
  10a04c:	09 fe                	or     %edi,%esi
  10a04e:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a051:	83 ef 01             	sub    $0x1,%edi
  10a054:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a057:	83 eb 01             	sub    $0x1,%ebx
  10a05a:	c1 eb 01             	shr    $0x1,%ebx
  10a05d:	09 df                	or     %ebx,%edi
  10a05f:	c1 ef 02             	shr    $0x2,%edi
  10a062:	09 fe                	or     %edi,%esi
  10a064:	c1 ee 04             	shr    $0x4,%esi
  10a067:	09 f2                	or     %esi,%edx
  10a069:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a06c:	83 ee 01             	sub    $0x1,%esi
  10a06f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a072:	83 ef 01             	sub    $0x1,%edi
  10a075:	c1 ef 01             	shr    $0x1,%edi
  10a078:	09 fe                	or     %edi,%esi
  10a07a:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a07d:	83 ef 01             	sub    $0x1,%edi
  10a080:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a083:	83 eb 01             	sub    $0x1,%ebx
  10a086:	c1 eb 01             	shr    $0x1,%ebx
  10a089:	09 df                	or     %ebx,%edi
  10a08b:	c1 ef 02             	shr    $0x2,%edi
  10a08e:	09 fe                	or     %edi,%esi
  10a090:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a093:	83 ef 01             	sub    $0x1,%edi
  10a096:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a099:	83 eb 01             	sub    $0x1,%ebx
  10a09c:	c1 eb 01             	shr    $0x1,%ebx
  10a09f:	09 df                	or     %ebx,%edi
  10a0a1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a0a4:	83 eb 01             	sub    $0x1,%ebx
  10a0a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10a0aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a0ad:	83 e8 01             	sub    $0x1,%eax
  10a0b0:	c1 e8 01             	shr    $0x1,%eax
  10a0b3:	09 c3                	or     %eax,%ebx
  10a0b5:	c1 eb 02             	shr    $0x2,%ebx
  10a0b8:	09 df                	or     %ebx,%edi
  10a0ba:	c1 ef 04             	shr    $0x4,%edi
  10a0bd:	09 fe                	or     %edi,%esi
  10a0bf:	c1 ee 08             	shr    $0x8,%esi
  10a0c2:	09 f2                	or     %esi,%edx
  10a0c4:	c1 ea 10             	shr    $0x10,%edx
  10a0c7:	09 d1                	or     %edx,%ecx
  10a0c9:	c1 e9 01             	shr    $0x1,%ecx
  10a0cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a0cf:	21 c8                	and    %ecx,%eax
  10a0d1:	83 f8 00             	cmp    $0x0,%eax
  10a0d4:	0f 84 85 01 00 00    	je     10a25f <buddy_init_size+0x35f>
  10a0da:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a0dd:	83 e8 01             	sub    $0x1,%eax
  10a0e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10a0e3:	83 e9 01             	sub    $0x1,%ecx
  10a0e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a0e9:	83 ea 01             	sub    $0x1,%edx
  10a0ec:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a0ef:	83 ee 01             	sub    $0x1,%esi
  10a0f2:	c1 ee 01             	shr    $0x1,%esi
  10a0f5:	09 f2                	or     %esi,%edx
  10a0f7:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a0fa:	83 ee 01             	sub    $0x1,%esi
  10a0fd:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a100:	83 ef 01             	sub    $0x1,%edi
  10a103:	c1 ef 01             	shr    $0x1,%edi
  10a106:	09 fe                	or     %edi,%esi
  10a108:	c1 ee 02             	shr    $0x2,%esi
  10a10b:	09 f2                	or     %esi,%edx
  10a10d:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a110:	83 ee 01             	sub    $0x1,%esi
  10a113:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a116:	83 ef 01             	sub    $0x1,%edi
  10a119:	c1 ef 01             	shr    $0x1,%edi
  10a11c:	09 fe                	or     %edi,%esi
  10a11e:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a121:	83 ef 01             	sub    $0x1,%edi
  10a124:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a127:	83 eb 01             	sub    $0x1,%ebx
  10a12a:	c1 eb 01             	shr    $0x1,%ebx
  10a12d:	09 df                	or     %ebx,%edi
  10a12f:	c1 ef 02             	shr    $0x2,%edi
  10a132:	09 fe                	or     %edi,%esi
  10a134:	c1 ee 04             	shr    $0x4,%esi
  10a137:	09 f2                	or     %esi,%edx
  10a139:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a13c:	83 ee 01             	sub    $0x1,%esi
  10a13f:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a142:	83 ef 01             	sub    $0x1,%edi
  10a145:	c1 ef 01             	shr    $0x1,%edi
  10a148:	09 fe                	or     %edi,%esi
  10a14a:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a14d:	83 ef 01             	sub    $0x1,%edi
  10a150:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a153:	83 eb 01             	sub    $0x1,%ebx
  10a156:	c1 eb 01             	shr    $0x1,%ebx
  10a159:	09 df                	or     %ebx,%edi
  10a15b:	c1 ef 02             	shr    $0x2,%edi
  10a15e:	09 fe                	or     %edi,%esi
  10a160:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a163:	83 ef 01             	sub    $0x1,%edi
  10a166:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a169:	83 eb 01             	sub    $0x1,%ebx
  10a16c:	c1 eb 01             	shr    $0x1,%ebx
  10a16f:	09 df                	or     %ebx,%edi
  10a171:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a174:	83 eb 01             	sub    $0x1,%ebx
  10a177:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10a17a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a17d:	83 e8 01             	sub    $0x1,%eax
  10a180:	c1 e8 01             	shr    $0x1,%eax
  10a183:	09 c3                	or     %eax,%ebx
  10a185:	c1 eb 02             	shr    $0x2,%ebx
  10a188:	09 df                	or     %ebx,%edi
  10a18a:	c1 ef 04             	shr    $0x4,%edi
  10a18d:	09 fe                	or     %edi,%esi
  10a18f:	c1 ee 08             	shr    $0x8,%esi
  10a192:	09 f2                	or     %esi,%edx
  10a194:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a197:	83 e8 01             	sub    $0x1,%eax
  10a19a:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a19d:	83 ee 01             	sub    $0x1,%esi
  10a1a0:	c1 ee 01             	shr    $0x1,%esi
  10a1a3:	09 f0                	or     %esi,%eax
  10a1a5:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a1a8:	83 ee 01             	sub    $0x1,%esi
  10a1ab:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a1ae:	83 ef 01             	sub    $0x1,%edi
  10a1b1:	c1 ef 01             	shr    $0x1,%edi
  10a1b4:	09 fe                	or     %edi,%esi
  10a1b6:	c1 ee 02             	shr    $0x2,%esi
  10a1b9:	09 f0                	or     %esi,%eax
  10a1bb:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a1be:	83 ee 01             	sub    $0x1,%esi
  10a1c1:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a1c4:	83 ef 01             	sub    $0x1,%edi
  10a1c7:	c1 ef 01             	shr    $0x1,%edi
  10a1ca:	09 fe                	or     %edi,%esi
  10a1cc:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a1cf:	83 ef 01             	sub    $0x1,%edi
  10a1d2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a1d5:	83 eb 01             	sub    $0x1,%ebx
  10a1d8:	c1 eb 01             	shr    $0x1,%ebx
  10a1db:	09 df                	or     %ebx,%edi
  10a1dd:	c1 ef 02             	shr    $0x2,%edi
  10a1e0:	09 fe                	or     %edi,%esi
  10a1e2:	c1 ee 04             	shr    $0x4,%esi
  10a1e5:	09 f0                	or     %esi,%eax
  10a1e7:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a1ea:	83 ee 01             	sub    $0x1,%esi
  10a1ed:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a1f0:	83 ef 01             	sub    $0x1,%edi
  10a1f3:	c1 ef 01             	shr    $0x1,%edi
  10a1f6:	09 fe                	or     %edi,%esi
  10a1f8:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a1fb:	83 ef 01             	sub    $0x1,%edi
  10a1fe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a201:	83 eb 01             	sub    $0x1,%ebx
  10a204:	c1 eb 01             	shr    $0x1,%ebx
  10a207:	09 df                	or     %ebx,%edi
  10a209:	c1 ef 02             	shr    $0x2,%edi
  10a20c:	09 fe                	or     %edi,%esi
  10a20e:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a211:	83 ef 01             	sub    $0x1,%edi
  10a214:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a217:	83 eb 01             	sub    $0x1,%ebx
  10a21a:	c1 eb 01             	shr    $0x1,%ebx
  10a21d:	09 df                	or     %ebx,%edi
  10a21f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a222:	83 eb 01             	sub    $0x1,%ebx
  10a225:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10a228:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a22b:	83 e8 01             	sub    $0x1,%eax
  10a22e:	c1 e8 01             	shr    $0x1,%eax
  10a231:	09 c3                	or     %eax,%ebx
  10a233:	c1 eb 02             	shr    $0x2,%ebx
  10a236:	09 df                	or     %ebx,%edi
  10a238:	c1 ef 04             	shr    $0x4,%edi
  10a23b:	09 fe                	or     %edi,%esi
  10a23d:	c1 ee 08             	shr    $0x8,%esi
  10a240:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10a243:	09 f0                	or     %esi,%eax
  10a245:	c1 e8 10             	shr    $0x10,%eax
  10a248:	09 c2                	or     %eax,%edx
  10a24a:	c1 ea 01             	shr    $0x1,%edx
  10a24d:	21 d1                	and    %edx,%ecx
  10a24f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a252:	29 c8                	sub    %ecx,%eax
  10a254:	c1 e0 01             	shl    $0x1,%eax
  10a257:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10a25a:	e9 09 00 00 00       	jmp    10a268 <buddy_init_size+0x368>
  10a25f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a262:	83 e8 01             	sub    $0x1,%eax
  10a265:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10a268:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10a26b:	a3 08 49 11 00       	mov    %eax,0x114908
        buddy_segment_size = 1;
  10a270:	c7 05 0c 49 11 00 01 	movl   $0x1,0x11490c
  10a277:	00 00 00 
    } else {
  10a27a:	e9 8a 02 00 00       	jmp    10a509 <buddy_init_size+0x609>
        buddy_virtual_size = UINT32_ROUND_DOWN(n);
  10a27f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a282:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10a285:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a288:	c1 ea 01             	shr    $0x1,%edx
  10a28b:	09 d1                	or     %edx,%ecx
  10a28d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a290:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a293:	c1 ee 01             	shr    $0x1,%esi
  10a296:	09 f2                	or     %esi,%edx
  10a298:	c1 ea 02             	shr    $0x2,%edx
  10a29b:	09 d1                	or     %edx,%ecx
  10a29d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a2a0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a2a3:	c1 ee 01             	shr    $0x1,%esi
  10a2a6:	09 f2                	or     %esi,%edx
  10a2a8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a2ab:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a2ae:	c1 ef 01             	shr    $0x1,%edi
  10a2b1:	09 fe                	or     %edi,%esi
  10a2b3:	c1 ee 02             	shr    $0x2,%esi
  10a2b6:	09 f2                	or     %esi,%edx
  10a2b8:	c1 ea 04             	shr    $0x4,%edx
  10a2bb:	09 d1                	or     %edx,%ecx
  10a2bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a2c0:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a2c3:	c1 ee 01             	shr    $0x1,%esi
  10a2c6:	09 f2                	or     %esi,%edx
  10a2c8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a2cb:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a2ce:	c1 ef 01             	shr    $0x1,%edi
  10a2d1:	09 fe                	or     %edi,%esi
  10a2d3:	c1 ee 02             	shr    $0x2,%esi
  10a2d6:	09 f2                	or     %esi,%edx
  10a2d8:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a2db:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a2de:	c1 ef 01             	shr    $0x1,%edi
  10a2e1:	09 fe                	or     %edi,%esi
  10a2e3:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a2e6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a2e9:	c1 eb 01             	shr    $0x1,%ebx
  10a2ec:	09 df                	or     %ebx,%edi
  10a2ee:	c1 ef 02             	shr    $0x2,%edi
  10a2f1:	09 fe                	or     %edi,%esi
  10a2f3:	c1 ee 04             	shr    $0x4,%esi
  10a2f6:	09 f2                	or     %esi,%edx
  10a2f8:	c1 ea 08             	shr    $0x8,%edx
  10a2fb:	09 d1                	or     %edx,%ecx
  10a2fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a300:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a303:	c1 ee 01             	shr    $0x1,%esi
  10a306:	09 f2                	or     %esi,%edx
  10a308:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a30b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a30e:	c1 ef 01             	shr    $0x1,%edi
  10a311:	09 fe                	or     %edi,%esi
  10a313:	c1 ee 02             	shr    $0x2,%esi
  10a316:	09 f2                	or     %esi,%edx
  10a318:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a31b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a31e:	c1 ef 01             	shr    $0x1,%edi
  10a321:	09 fe                	or     %edi,%esi
  10a323:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a326:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a329:	c1 eb 01             	shr    $0x1,%ebx
  10a32c:	09 df                	or     %ebx,%edi
  10a32e:	c1 ef 02             	shr    $0x2,%edi
  10a331:	09 fe                	or     %edi,%esi
  10a333:	c1 ee 04             	shr    $0x4,%esi
  10a336:	09 f2                	or     %esi,%edx
  10a338:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a33b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a33e:	c1 ef 01             	shr    $0x1,%edi
  10a341:	09 fe                	or     %edi,%esi
  10a343:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a346:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a349:	c1 eb 01             	shr    $0x1,%ebx
  10a34c:	09 df                	or     %ebx,%edi
  10a34e:	c1 ef 02             	shr    $0x2,%edi
  10a351:	09 fe                	or     %edi,%esi
  10a353:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a356:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a359:	c1 eb 01             	shr    $0x1,%ebx
  10a35c:	09 df                	or     %ebx,%edi
  10a35e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a361:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10a364:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a367:	c1 e8 01             	shr    $0x1,%eax
  10a36a:	09 c3                	or     %eax,%ebx
  10a36c:	c1 eb 02             	shr    $0x2,%ebx
  10a36f:	09 df                	or     %ebx,%edi
  10a371:	c1 ef 04             	shr    $0x4,%edi
  10a374:	09 fe                	or     %edi,%esi
  10a376:	c1 ee 08             	shr    $0x8,%esi
  10a379:	09 f2                	or     %esi,%edx
  10a37b:	c1 ea 10             	shr    $0x10,%edx
  10a37e:	09 d1                	or     %edx,%ecx
  10a380:	c1 e9 01             	shr    $0x1,%ecx
  10a383:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10a386:	21 c8                	and    %ecx,%eax
  10a388:	83 f8 00             	cmp    $0x0,%eax
  10a38b:	0f 84 1c 01 00 00    	je     10a4ad <buddy_init_size+0x5ad>
  10a391:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a394:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10a397:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a39a:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a39d:	c1 ee 01             	shr    $0x1,%esi
  10a3a0:	09 f2                	or     %esi,%edx
  10a3a2:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a3a5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3a8:	c1 ef 01             	shr    $0x1,%edi
  10a3ab:	09 fe                	or     %edi,%esi
  10a3ad:	c1 ee 02             	shr    $0x2,%esi
  10a3b0:	09 f2                	or     %esi,%edx
  10a3b2:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a3b5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3b8:	c1 ef 01             	shr    $0x1,%edi
  10a3bb:	09 fe                	or     %edi,%esi
  10a3bd:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3c0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a3c3:	c1 eb 01             	shr    $0x1,%ebx
  10a3c6:	09 df                	or     %ebx,%edi
  10a3c8:	c1 ef 02             	shr    $0x2,%edi
  10a3cb:	09 fe                	or     %edi,%esi
  10a3cd:	c1 ee 04             	shr    $0x4,%esi
  10a3d0:	09 f2                	or     %esi,%edx
  10a3d2:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a3d5:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3d8:	c1 ef 01             	shr    $0x1,%edi
  10a3db:	09 fe                	or     %edi,%esi
  10a3dd:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3e0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a3e3:	c1 eb 01             	shr    $0x1,%ebx
  10a3e6:	09 df                	or     %ebx,%edi
  10a3e8:	c1 ef 02             	shr    $0x2,%edi
  10a3eb:	09 fe                	or     %edi,%esi
  10a3ed:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a3f0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a3f3:	c1 eb 01             	shr    $0x1,%ebx
  10a3f6:	09 df                	or     %ebx,%edi
  10a3f8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a3fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10a3fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a401:	c1 e8 01             	shr    $0x1,%eax
  10a404:	09 c3                	or     %eax,%ebx
  10a406:	c1 eb 02             	shr    $0x2,%ebx
  10a409:	09 df                	or     %ebx,%edi
  10a40b:	c1 ef 04             	shr    $0x4,%edi
  10a40e:	09 fe                	or     %edi,%esi
  10a410:	c1 ee 08             	shr    $0x8,%esi
  10a413:	09 f2                	or     %esi,%edx
  10a415:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a418:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a41b:	c1 ee 01             	shr    $0x1,%esi
  10a41e:	09 f0                	or     %esi,%eax
  10a420:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a423:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a426:	c1 ef 01             	shr    $0x1,%edi
  10a429:	09 fe                	or     %edi,%esi
  10a42b:	c1 ee 02             	shr    $0x2,%esi
  10a42e:	09 f0                	or     %esi,%eax
  10a430:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a433:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a436:	c1 ef 01             	shr    $0x1,%edi
  10a439:	09 fe                	or     %edi,%esi
  10a43b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a43e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a441:	c1 eb 01             	shr    $0x1,%ebx
  10a444:	09 df                	or     %ebx,%edi
  10a446:	c1 ef 02             	shr    $0x2,%edi
  10a449:	09 fe                	or     %edi,%esi
  10a44b:	c1 ee 04             	shr    $0x4,%esi
  10a44e:	09 f0                	or     %esi,%eax
  10a450:	8b 75 f0             	mov    -0x10(%ebp),%esi
  10a453:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a456:	c1 ef 01             	shr    $0x1,%edi
  10a459:	09 fe                	or     %edi,%esi
  10a45b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a45e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a461:	c1 eb 01             	shr    $0x1,%ebx
  10a464:	09 df                	or     %ebx,%edi
  10a466:	c1 ef 02             	shr    $0x2,%edi
  10a469:	09 fe                	or     %edi,%esi
  10a46b:	8b 7d f0             	mov    -0x10(%ebp),%edi
  10a46e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a471:	c1 eb 01             	shr    $0x1,%ebx
  10a474:	09 df                	or     %ebx,%edi
  10a476:	8b 5d f0             	mov    -0x10(%ebp),%ebx
  10a479:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10a47c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a47f:	c1 e8 01             	shr    $0x1,%eax
  10a482:	09 c3                	or     %eax,%ebx
  10a484:	c1 eb 02             	shr    $0x2,%ebx
  10a487:	09 df                	or     %ebx,%edi
  10a489:	c1 ef 04             	shr    $0x4,%edi
  10a48c:	09 fe                	or     %edi,%esi
  10a48e:	c1 ee 08             	shr    $0x8,%esi
  10a491:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10a494:	09 f0                	or     %esi,%eax
  10a496:	c1 e8 10             	shr    $0x10,%eax
  10a499:	09 c2                	or     %eax,%edx
  10a49b:	c1 ea 01             	shr    $0x1,%edx
  10a49e:	21 d1                	and    %edx,%ecx
  10a4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10a4a3:	29 c8                	sub    %ecx,%eax
  10a4a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10a4a8:	e9 06 00 00 00       	jmp    10a4b3 <buddy_init_size+0x5b3>
  10a4ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a4b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10a4b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10a4b6:	a3 08 49 11 00       	mov    %eax,0x114908
        buddy_segment_size = buddy_virtual_size*sizeof(size_t)*2/PGSIZE;
  10a4bb:	a1 08 49 11 00       	mov    0x114908,%eax
  10a4c0:	c1 e0 02             	shl    $0x2,%eax
  10a4c3:	c1 e0 01             	shl    $0x1,%eax
  10a4c6:	c1 e8 0c             	shr    $0xc,%eax
  10a4c9:	a3 0c 49 11 00       	mov    %eax,0x11490c
        if (n > buddy_virtual_size + (buddy_segment_size<<1)) {
  10a4ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a4d1:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10a4d7:	8b 15 0c 49 11 00    	mov    0x11490c,%edx
  10a4dd:	c1 e2 01             	shl    $0x1,%edx
  10a4e0:	01 d1                	add    %edx,%ecx
  10a4e2:	39 c8                	cmp    %ecx,%eax
  10a4e4:	0f 86 1a 00 00 00    	jbe    10a504 <buddy_init_size+0x604>
            buddy_virtual_size <<= 1;
  10a4ea:	a1 08 49 11 00       	mov    0x114908,%eax
  10a4ef:	c1 e0 01             	shl    $0x1,%eax
  10a4f2:	a3 08 49 11 00       	mov    %eax,0x114908
            buddy_segment_size <<= 1;
  10a4f7:	a1 0c 49 11 00       	mov    0x11490c,%eax
  10a4fc:	c1 e0 01             	shl    $0x1,%eax
  10a4ff:	a3 0c 49 11 00       	mov    %eax,0x11490c
  10a504:	e9 00 00 00 00       	jmp    10a509 <buddy_init_size+0x609>
    buddy_alloc_size = MIN(buddy_virtual_size, buddy_physical_size-buddy_segment_size);
  10a509:	a1 08 49 11 00       	mov    0x114908,%eax
  10a50e:	8b 0d 04 49 11 00    	mov    0x114904,%ecx
  10a514:	2b 0d 0c 49 11 00    	sub    0x11490c,%ecx
  10a51a:	39 c8                	cmp    %ecx,%eax
  10a51c:	0f 83 0d 00 00 00    	jae    10a52f <buddy_init_size+0x62f>
  10a522:	a1 08 49 11 00       	mov    0x114908,%eax
  10a527:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10a52a:	e9 0e 00 00 00       	jmp    10a53d <buddy_init_size+0x63d>
  10a52f:	a1 04 49 11 00       	mov    0x114904,%eax
  10a534:	2b 05 0c 49 11 00    	sub    0x11490c,%eax
  10a53a:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10a53d:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10a540:	a3 10 49 11 00       	mov    %eax,0x114910
}
  10a545:	83 c4 3c             	add    $0x3c,%esp
  10a548:	5e                   	pop    %esi
  10a549:	5f                   	pop    %edi
  10a54a:	5b                   	pop    %ebx
  10a54b:	5d                   	pop    %ebp
  10a54c:	c3                   	ret    
  10a54d:	0f 1f 00             	nopl   (%eax)

0010a550 <buddy_init_segment>:
buddy_init_segment(struct Page *base) {
  10a550:	55                   	push   %ebp
  10a551:	89 e5                	mov    %esp,%ebp
  10a553:	53                   	push   %ebx
  10a554:	57                   	push   %edi
  10a555:	56                   	push   %esi
  10a556:	81 ec dc 00 00 00    	sub    $0xdc,%esp
  10a55c:	8b 45 08             	mov    0x8(%ebp),%eax
  10a55f:	89 45 b8             	mov    %eax,-0x48(%ebp)
    buddy_physical = base;
  10a562:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10a565:	a3 14 49 11 00       	mov    %eax,0x114914
    buddy_segment = KADDR(page2pa(base));
  10a56a:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10a56d:	89 04 24             	mov    %eax,(%esp)
  10a570:	e8 db 09 00 00       	call   10af50 <page2pa>
  10a575:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10a578:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10a57b:	c1 e8 0c             	shr    $0xc,%eax
  10a57e:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10a581:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10a584:	3b 05 2c 48 11 00    	cmp    0x11482c,%eax
  10a58a:	0f 82 2f 00 00 00    	jb     10a5bf <buddy_init_segment+0x6f>
  10a590:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10a596:	b9 3e 00 00 00       	mov    $0x3e,%ecx
  10a59b:	8d 15 32 f7 10 00    	lea    0x10f732,%edx
  10a5a1:	8b 75 b4             	mov    -0x4c(%ebp),%esi
  10a5a4:	89 04 24             	mov    %eax,(%esp)
  10a5a7:	c7 44 24 04 3e 00 00 	movl   $0x3e,0x4(%esp)
  10a5ae:	00 
  10a5af:	89 54 24 08          	mov    %edx,0x8(%esp)
  10a5b3:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10a5b7:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  10a5ba:	e8 91 5e ff ff       	call   100450 <__panic>
  10a5bf:	31 c0                	xor    %eax,%eax
  10a5c1:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  10a5c4:	81 c1 00 00 00 c0    	add    $0xc0000000,%ecx
  10a5ca:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  10a5cd:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  10a5d0:	89 0d 18 49 11 00    	mov    %ecx,0x114918
    buddy_alloc = base + buddy_segment_size;
  10a5d6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  10a5d9:	6b 15 0c 49 11 00 14 	imul   $0x14,0x11490c,%edx
  10a5e0:	01 d1                	add    %edx,%ecx
  10a5e2:	89 0d 1c 49 11 00    	mov    %ecx,0x11491c
    memset(buddy_segment, 0, buddy_segment_size*PGSIZE);
  10a5e8:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  10a5ee:	8b 15 0c 49 11 00    	mov    0x11490c,%edx
  10a5f4:	c1 e2 0c             	shl    $0xc,%edx
  10a5f7:	89 0c 24             	mov    %ecx,(%esp)
  10a5fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10a601:	00 
  10a602:	89 54 24 08          	mov    %edx,0x8(%esp)
  10a606:	89 45 90             	mov    %eax,-0x70(%ebp)
  10a609:	e8 d2 3d 00 00       	call   10e3e0 <memset>
    nr_free += buddy_alloc_size;
  10a60e:	8b 0d 10 49 11 00    	mov    0x114910,%ecx
  10a614:	03 0d 38 49 11 00    	add    0x114938,%ecx
  10a61a:	89 0d 38 49 11 00    	mov    %ecx,0x114938
    size_t block = BUDDY_ROOT;
  10a620:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%ebp)
    size_t alloc_size = buddy_alloc_size;
  10a627:	8b 0d 10 49 11 00    	mov    0x114910,%ecx
  10a62d:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
    size_t virtual_size = buddy_virtual_size;
  10a630:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10a636:	89 4d a0             	mov    %ecx,-0x60(%ebp)
    buddy_segment[block] = alloc_size;
  10a639:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10a63c:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a63f:	8b 35 18 49 11 00    	mov    0x114918,%esi
  10a645:	89 0c 96             	mov    %ecx,(%esi,%edx,4)
  10a648:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10a64b:	31 c0                	xor    %eax,%eax
  10a64d:	88 c1                	mov    %al,%cl
    while (alloc_size > 0 && alloc_size < virtual_size) {
  10a64f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
  10a653:	88 4d 8b             	mov    %cl,-0x75(%ebp)
  10a656:	0f 86 0c 00 00 00    	jbe    10a668 <buddy_init_segment+0x118>
  10a65c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10a65f:	3b 45 a0             	cmp    -0x60(%ebp),%eax
  10a662:	0f 92 c1             	setb   %cl
  10a665:	88 4d 8b             	mov    %cl,-0x75(%ebp)
  10a668:	8a 45 8b             	mov    -0x75(%ebp),%al
  10a66b:	a8 01                	test   $0x1,%al
  10a66d:	0f 85 05 00 00 00    	jne    10a678 <buddy_init_segment+0x128>
  10a673:	e9 9d 04 00 00       	jmp    10ab15 <buddy_init_segment+0x5c5>
        virtual_size >>= 1;
  10a678:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10a67b:	c1 e8 01             	shr    $0x1,%eax
  10a67e:	89 45 a0             	mov    %eax,-0x60(%ebp)
        if (alloc_size > virtual_size) {
  10a681:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10a684:	3b 45 a0             	cmp    -0x60(%ebp),%eax
  10a687:	0f 86 54 04 00 00    	jbe    10aae1 <buddy_init_segment+0x591>
            struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
  10a68d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a690:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10a693:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a696:	c1 ea 01             	shr    $0x1,%edx
  10a699:	09 d1                	or     %edx,%ecx
  10a69b:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a69e:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6a1:	c1 ee 01             	shr    $0x1,%esi
  10a6a4:	09 f2                	or     %esi,%edx
  10a6a6:	c1 ea 02             	shr    $0x2,%edx
  10a6a9:	09 d1                	or     %edx,%ecx
  10a6ab:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a6ae:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6b1:	c1 ee 01             	shr    $0x1,%esi
  10a6b4:	09 f2                	or     %esi,%edx
  10a6b6:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6b9:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a6bc:	c1 ef 01             	shr    $0x1,%edi
  10a6bf:	09 fe                	or     %edi,%esi
  10a6c1:	c1 ee 02             	shr    $0x2,%esi
  10a6c4:	09 f2                	or     %esi,%edx
  10a6c6:	c1 ea 04             	shr    $0x4,%edx
  10a6c9:	09 d1                	or     %edx,%ecx
  10a6cb:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a6ce:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6d1:	c1 ee 01             	shr    $0x1,%esi
  10a6d4:	09 f2                	or     %esi,%edx
  10a6d6:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6d9:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a6dc:	c1 ef 01             	shr    $0x1,%edi
  10a6df:	09 fe                	or     %edi,%esi
  10a6e1:	c1 ee 02             	shr    $0x2,%esi
  10a6e4:	09 f2                	or     %esi,%edx
  10a6e6:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a6e9:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a6ec:	c1 ef 01             	shr    $0x1,%edi
  10a6ef:	09 fe                	or     %edi,%esi
  10a6f1:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a6f4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a6f7:	c1 eb 01             	shr    $0x1,%ebx
  10a6fa:	09 df                	or     %ebx,%edi
  10a6fc:	c1 ef 02             	shr    $0x2,%edi
  10a6ff:	09 fe                	or     %edi,%esi
  10a701:	c1 ee 04             	shr    $0x4,%esi
  10a704:	09 f2                	or     %esi,%edx
  10a706:	c1 ea 08             	shr    $0x8,%edx
  10a709:	09 d1                	or     %edx,%ecx
  10a70b:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a70e:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a711:	c1 ee 01             	shr    $0x1,%esi
  10a714:	09 f2                	or     %esi,%edx
  10a716:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a719:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a71c:	c1 ef 01             	shr    $0x1,%edi
  10a71f:	09 fe                	or     %edi,%esi
  10a721:	c1 ee 02             	shr    $0x2,%esi
  10a724:	09 f2                	or     %esi,%edx
  10a726:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a729:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a72c:	c1 ef 01             	shr    $0x1,%edi
  10a72f:	09 fe                	or     %edi,%esi
  10a731:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a734:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a737:	c1 eb 01             	shr    $0x1,%ebx
  10a73a:	09 df                	or     %ebx,%edi
  10a73c:	c1 ef 02             	shr    $0x2,%edi
  10a73f:	09 fe                	or     %edi,%esi
  10a741:	c1 ee 04             	shr    $0x4,%esi
  10a744:	09 f2                	or     %esi,%edx
  10a746:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a749:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a74c:	c1 ef 01             	shr    $0x1,%edi
  10a74f:	09 fe                	or     %edi,%esi
  10a751:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a754:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a757:	c1 eb 01             	shr    $0x1,%ebx
  10a75a:	09 df                	or     %ebx,%edi
  10a75c:	c1 ef 02             	shr    $0x2,%edi
  10a75f:	09 fe                	or     %edi,%esi
  10a761:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a764:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a767:	c1 eb 01             	shr    $0x1,%ebx
  10a76a:	09 df                	or     %ebx,%edi
  10a76c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a76f:	89 45 84             	mov    %eax,-0x7c(%ebp)
  10a772:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a775:	c1 e8 01             	shr    $0x1,%eax
  10a778:	09 c3                	or     %eax,%ebx
  10a77a:	c1 eb 02             	shr    $0x2,%ebx
  10a77d:	09 df                	or     %ebx,%edi
  10a77f:	c1 ef 04             	shr    $0x4,%edi
  10a782:	09 fe                	or     %edi,%esi
  10a784:	c1 ee 08             	shr    $0x8,%esi
  10a787:	09 f2                	or     %esi,%edx
  10a789:	c1 ea 10             	shr    $0x10,%edx
  10a78c:	09 d1                	or     %edx,%ecx
  10a78e:	c1 e9 01             	shr    $0x1,%ecx
  10a791:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10a794:	21 c8                	and    %ecx,%eax
  10a796:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10a79c:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a79f:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a7a2:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7a5:	c1 ef 01             	shr    $0x1,%edi
  10a7a8:	09 fe                	or     %edi,%esi
  10a7aa:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7ad:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a7b0:	c1 eb 01             	shr    $0x1,%ebx
  10a7b3:	09 df                	or     %ebx,%edi
  10a7b5:	c1 ef 02             	shr    $0x2,%edi
  10a7b8:	09 fe                	or     %edi,%esi
  10a7ba:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7bd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a7c0:	c1 eb 01             	shr    $0x1,%ebx
  10a7c3:	09 df                	or     %ebx,%edi
  10a7c5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a7c8:	89 45 80             	mov    %eax,-0x80(%ebp)
  10a7cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a7ce:	c1 e8 01             	shr    $0x1,%eax
  10a7d1:	09 c3                	or     %eax,%ebx
  10a7d3:	c1 eb 02             	shr    $0x2,%ebx
  10a7d6:	09 df                	or     %ebx,%edi
  10a7d8:	c1 ef 04             	shr    $0x4,%edi
  10a7db:	09 fe                	or     %edi,%esi
  10a7dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a7e0:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7e3:	c1 ef 01             	shr    $0x1,%edi
  10a7e6:	09 f8                	or     %edi,%eax
  10a7e8:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7eb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a7ee:	c1 eb 01             	shr    $0x1,%ebx
  10a7f1:	09 df                	or     %ebx,%edi
  10a7f3:	c1 ef 02             	shr    $0x2,%edi
  10a7f6:	09 f8                	or     %edi,%eax
  10a7f8:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a7fb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a7fe:	c1 eb 01             	shr    $0x1,%ebx
  10a801:	09 df                	or     %ebx,%edi
  10a803:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a806:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10a80c:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a80f:	c1 e8 01             	shr    $0x1,%eax
  10a812:	09 c3                	or     %eax,%ebx
  10a814:	c1 eb 02             	shr    $0x2,%ebx
  10a817:	09 df                	or     %ebx,%edi
  10a819:	c1 ef 04             	shr    $0x4,%edi
  10a81c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10a822:	09 f8                	or     %edi,%eax
  10a824:	c1 e8 08             	shr    $0x8,%eax
  10a827:	09 c6                	or     %eax,%esi
  10a829:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a82c:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a82f:	c1 ef 01             	shr    $0x1,%edi
  10a832:	09 f8                	or     %edi,%eax
  10a834:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a837:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a83a:	c1 eb 01             	shr    $0x1,%ebx
  10a83d:	09 df                	or     %ebx,%edi
  10a83f:	c1 ef 02             	shr    $0x2,%edi
  10a842:	09 f8                	or     %edi,%eax
  10a844:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a847:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a84a:	c1 eb 01             	shr    $0x1,%ebx
  10a84d:	09 df                	or     %ebx,%edi
  10a84f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a852:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10a858:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a85b:	c1 e8 01             	shr    $0x1,%eax
  10a85e:	09 c3                	or     %eax,%ebx
  10a860:	c1 eb 02             	shr    $0x2,%ebx
  10a863:	09 df                	or     %ebx,%edi
  10a865:	c1 ef 04             	shr    $0x4,%edi
  10a868:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10a86e:	09 f8                	or     %edi,%eax
  10a870:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a873:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a876:	c1 eb 01             	shr    $0x1,%ebx
  10a879:	09 df                	or     %ebx,%edi
  10a87b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a87e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10a884:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a887:	c1 e8 01             	shr    $0x1,%eax
  10a88a:	09 c3                	or     %eax,%ebx
  10a88c:	c1 eb 02             	shr    $0x2,%ebx
  10a88f:	09 df                	or     %ebx,%edi
  10a891:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a894:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a897:	c1 eb 01             	shr    $0x1,%ebx
  10a89a:	09 d8                	or     %ebx,%eax
  10a89c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a89f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  10a8a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a8a8:	c1 e8 01             	shr    $0x1,%eax
  10a8ab:	09 c3                	or     %eax,%ebx
  10a8ad:	c1 eb 02             	shr    $0x2,%ebx
  10a8b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  10a8b6:	09 d8                	or     %ebx,%eax
  10a8b8:	c1 e8 04             	shr    $0x4,%eax
  10a8bb:	09 c7                	or     %eax,%edi
  10a8bd:	c1 ef 08             	shr    $0x8,%edi
  10a8c0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10a8c6:	09 f8                	or     %edi,%eax
  10a8c8:	c1 e8 10             	shr    $0x10,%eax
  10a8cb:	09 c6                	or     %eax,%esi
  10a8cd:	c1 ee 01             	shr    $0x1,%esi
  10a8d0:	21 f2                	and    %esi,%edx
  10a8d2:	83 fa 00             	cmp    $0x0,%edx
  10a8d5:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10a8db:	0f 84 2b 01 00 00    	je     10aa0c <buddy_init_segment+0x4bc>
  10a8e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a8e4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10a8e7:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10a8ea:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a8ed:	c1 ee 01             	shr    $0x1,%esi
  10a8f0:	09 f2                	or     %esi,%edx
  10a8f2:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a8f5:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a8f8:	c1 ef 01             	shr    $0x1,%edi
  10a8fb:	09 fe                	or     %edi,%esi
  10a8fd:	c1 ee 02             	shr    $0x2,%esi
  10a900:	09 f2                	or     %esi,%edx
  10a902:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a905:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a908:	c1 ef 01             	shr    $0x1,%edi
  10a90b:	09 fe                	or     %edi,%esi
  10a90d:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a910:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a913:	c1 eb 01             	shr    $0x1,%ebx
  10a916:	09 df                	or     %ebx,%edi
  10a918:	c1 ef 02             	shr    $0x2,%edi
  10a91b:	09 fe                	or     %edi,%esi
  10a91d:	c1 ee 04             	shr    $0x4,%esi
  10a920:	09 f2                	or     %esi,%edx
  10a922:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a925:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a928:	c1 ef 01             	shr    $0x1,%edi
  10a92b:	09 fe                	or     %edi,%esi
  10a92d:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a930:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a933:	c1 eb 01             	shr    $0x1,%ebx
  10a936:	09 df                	or     %ebx,%edi
  10a938:	c1 ef 02             	shr    $0x2,%edi
  10a93b:	09 fe                	or     %edi,%esi
  10a93d:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a940:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a943:	c1 eb 01             	shr    $0x1,%ebx
  10a946:	09 df                	or     %ebx,%edi
  10a948:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a94b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10a951:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a954:	c1 e8 01             	shr    $0x1,%eax
  10a957:	09 c3                	or     %eax,%ebx
  10a959:	c1 eb 02             	shr    $0x2,%ebx
  10a95c:	09 df                	or     %ebx,%edi
  10a95e:	c1 ef 04             	shr    $0x4,%edi
  10a961:	09 fe                	or     %edi,%esi
  10a963:	c1 ee 08             	shr    $0x8,%esi
  10a966:	09 f2                	or     %esi,%edx
  10a968:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a96b:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a96e:	c1 ee 01             	shr    $0x1,%esi
  10a971:	09 f0                	or     %esi,%eax
  10a973:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a976:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a979:	c1 ef 01             	shr    $0x1,%edi
  10a97c:	09 fe                	or     %edi,%esi
  10a97e:	c1 ee 02             	shr    $0x2,%esi
  10a981:	09 f0                	or     %esi,%eax
  10a983:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a986:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a989:	c1 ef 01             	shr    $0x1,%edi
  10a98c:	09 fe                	or     %edi,%esi
  10a98e:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a991:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a994:	c1 eb 01             	shr    $0x1,%ebx
  10a997:	09 df                	or     %ebx,%edi
  10a999:	c1 ef 02             	shr    $0x2,%edi
  10a99c:	09 fe                	or     %edi,%esi
  10a99e:	c1 ee 04             	shr    $0x4,%esi
  10a9a1:	09 f0                	or     %esi,%eax
  10a9a3:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10a9a6:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a9a9:	c1 ef 01             	shr    $0x1,%edi
  10a9ac:	09 fe                	or     %edi,%esi
  10a9ae:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a9b1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a9b4:	c1 eb 01             	shr    $0x1,%ebx
  10a9b7:	09 df                	or     %ebx,%edi
  10a9b9:	c1 ef 02             	shr    $0x2,%edi
  10a9bc:	09 fe                	or     %edi,%esi
  10a9be:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10a9c1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a9c4:	c1 eb 01             	shr    $0x1,%ebx
  10a9c7:	09 df                	or     %ebx,%edi
  10a9c9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10a9cc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10a9d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10a9d5:	c1 e8 01             	shr    $0x1,%eax
  10a9d8:	09 c3                	or     %eax,%ebx
  10a9da:	c1 eb 02             	shr    $0x2,%ebx
  10a9dd:	09 df                	or     %ebx,%edi
  10a9df:	c1 ef 04             	shr    $0x4,%edi
  10a9e2:	09 fe                	or     %edi,%esi
  10a9e4:	c1 ee 08             	shr    $0x8,%esi
  10a9e7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
  10a9ed:	09 f0                	or     %esi,%eax
  10a9ef:	c1 e8 10             	shr    $0x10,%eax
  10a9f2:	09 c2                	or     %eax,%edx
  10a9f4:	c1 ea 01             	shr    $0x1,%edx
  10a9f7:	21 d1                	and    %edx,%ecx
  10a9f9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
  10a9ff:	29 c8                	sub    %ecx,%eax
  10aa01:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  10aa07:	e9 09 00 00 00       	jmp    10aa15 <buddy_init_segment+0x4c5>
  10aa0c:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10aa0f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  10aa15:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
  10aa1b:	8d 0d 30 49 11 00    	lea    0x114930,%ecx
  10aa21:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
  10aa27:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  10aa2d:	89 d0                	mov    %edx,%eax
  10aa2f:	31 d2                	xor    %edx,%edx
  10aa31:	8b b5 5c ff ff ff    	mov    -0xa4(%ebp),%esi
  10aa37:	f7 f6                	div    %esi
  10aa39:	8b 7d 80             	mov    -0x80(%ebp),%edi
  10aa3c:	0f af f8             	imul   %eax,%edi
  10aa3f:	6b c7 14             	imul   $0x14,%edi,%eax
  10aa42:	03 05 1c 49 11 00    	add    0x11491c,%eax
  10aa48:	89 45 9c             	mov    %eax,-0x64(%ebp)
            page->property = virtual_size;
  10aa4b:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10aa4e:	8b 7d 9c             	mov    -0x64(%ebp),%edi
  10aa51:	89 47 08             	mov    %eax,0x8(%edi)
            list_add(&(free_list), &(page->page_link));
  10aa54:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10aa57:	83 c0 0c             	add    $0xc,%eax
  10aa5a:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10aa5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    list_add_after(listelm, elm);
  10aa60:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10aa63:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10aa66:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10aa69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    __list_add(elm, listelm, listelm->next);
  10aa6c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10aa6f:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10aa72:	8b 7d c8             	mov    -0x38(%ebp),%edi
  10aa75:	8b 7f 04             	mov    0x4(%edi),%edi
  10aa78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10aa7b:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10aa7e:	89 7d cc             	mov    %edi,-0x34(%ebp)
    prev->next = next->prev = elm;
  10aa81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10aa84:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10aa87:	89 01                	mov    %eax,(%ecx)
  10aa89:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10aa8c:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  10aa8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10aa92:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10aa95:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10aa98:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10aa9b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10aa9e:	89 01                	mov    %eax,(%ecx)
            buddy_segment[BUDDY_LEFT(block)] = virtual_size;
  10aaa0:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10aaa3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10aaa6:	c1 e1 01             	shl    $0x1,%ecx
  10aaa9:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  10aaaf:	89 04 8f             	mov    %eax,(%edi,%ecx,4)
            alloc_size -= virtual_size;
  10aab2:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10aab5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10aab8:	29 c1                	sub    %eax,%ecx
  10aaba:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
            buddy_segment[BUDDY_RIGHT(block)] = alloc_size;
  10aabd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10aac0:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10aac3:	c1 e1 01             	shl    $0x1,%ecx
  10aac6:	8b 3d 18 49 11 00    	mov    0x114918,%edi
  10aacc:	89 44 8f 04          	mov    %eax,0x4(%edi,%ecx,4)
            block = BUDDY_RIGHT(block);
  10aad0:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10aad3:	c1 e0 01             	shl    $0x1,%eax
  10aad6:	83 c0 01             	add    $0x1,%eax
  10aad9:	89 45 a8             	mov    %eax,-0x58(%ebp)
        } else {
  10aadc:	e9 2f 00 00 00       	jmp    10ab10 <buddy_init_segment+0x5c0>
            buddy_segment[BUDDY_LEFT(block)] = alloc_size;
  10aae1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10aae4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10aae7:	c1 e1 01             	shl    $0x1,%ecx
  10aaea:	8b 15 18 49 11 00    	mov    0x114918,%edx
  10aaf0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
            buddy_segment[BUDDY_RIGHT(block)] = 0;
  10aaf3:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10aaf6:	c1 e0 01             	shl    $0x1,%eax
  10aaf9:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  10aaff:	c7 44 81 04 00 00 00 	movl   $0x0,0x4(%ecx,%eax,4)
  10ab06:	00 
            block = BUDDY_LEFT(block);
  10ab07:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ab0a:	c1 e0 01             	shl    $0x1,%eax
  10ab0d:	89 45 a8             	mov    %eax,-0x58(%ebp)
    while (alloc_size > 0 && alloc_size < virtual_size) {
  10ab10:	e9 36 fb ff ff       	jmp    10a64b <buddy_init_segment+0xfb>
    if (alloc_size > 0) {
  10ab15:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
  10ab19:	0f 86 1f 04 00 00    	jbe    10af3e <buddy_init_segment+0x9ee>
        struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
  10ab1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ab22:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10ab25:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ab28:	c1 ea 01             	shr    $0x1,%edx
  10ab2b:	09 d1                	or     %edx,%ecx
  10ab2d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ab30:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab33:	c1 ee 01             	shr    $0x1,%esi
  10ab36:	09 f2                	or     %esi,%edx
  10ab38:	c1 ea 02             	shr    $0x2,%edx
  10ab3b:	09 d1                	or     %edx,%ecx
  10ab3d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ab40:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab43:	c1 ee 01             	shr    $0x1,%esi
  10ab46:	09 f2                	or     %esi,%edx
  10ab48:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab4b:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ab4e:	c1 ef 01             	shr    $0x1,%edi
  10ab51:	09 fe                	or     %edi,%esi
  10ab53:	c1 ee 02             	shr    $0x2,%esi
  10ab56:	09 f2                	or     %esi,%edx
  10ab58:	c1 ea 04             	shr    $0x4,%edx
  10ab5b:	09 d1                	or     %edx,%ecx
  10ab5d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ab60:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab63:	c1 ee 01             	shr    $0x1,%esi
  10ab66:	09 f2                	or     %esi,%edx
  10ab68:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab6b:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ab6e:	c1 ef 01             	shr    $0x1,%edi
  10ab71:	09 fe                	or     %edi,%esi
  10ab73:	c1 ee 02             	shr    $0x2,%esi
  10ab76:	09 f2                	or     %esi,%edx
  10ab78:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ab7b:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ab7e:	c1 ef 01             	shr    $0x1,%edi
  10ab81:	09 fe                	or     %edi,%esi
  10ab83:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ab86:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ab89:	c1 eb 01             	shr    $0x1,%ebx
  10ab8c:	09 df                	or     %ebx,%edi
  10ab8e:	c1 ef 02             	shr    $0x2,%edi
  10ab91:	09 fe                	or     %edi,%esi
  10ab93:	c1 ee 04             	shr    $0x4,%esi
  10ab96:	09 f2                	or     %esi,%edx
  10ab98:	c1 ea 08             	shr    $0x8,%edx
  10ab9b:	09 d1                	or     %edx,%ecx
  10ab9d:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10aba0:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10aba3:	c1 ee 01             	shr    $0x1,%esi
  10aba6:	09 f2                	or     %esi,%edx
  10aba8:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10abab:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abae:	c1 ef 01             	shr    $0x1,%edi
  10abb1:	09 fe                	or     %edi,%esi
  10abb3:	c1 ee 02             	shr    $0x2,%esi
  10abb6:	09 f2                	or     %esi,%edx
  10abb8:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10abbb:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abbe:	c1 ef 01             	shr    $0x1,%edi
  10abc1:	09 fe                	or     %edi,%esi
  10abc3:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abc6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10abc9:	c1 eb 01             	shr    $0x1,%ebx
  10abcc:	09 df                	or     %ebx,%edi
  10abce:	c1 ef 02             	shr    $0x2,%edi
  10abd1:	09 fe                	or     %edi,%esi
  10abd3:	c1 ee 04             	shr    $0x4,%esi
  10abd6:	09 f2                	or     %esi,%edx
  10abd8:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10abdb:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abde:	c1 ef 01             	shr    $0x1,%edi
  10abe1:	09 fe                	or     %edi,%esi
  10abe3:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abe6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10abe9:	c1 eb 01             	shr    $0x1,%ebx
  10abec:	09 df                	or     %ebx,%edi
  10abee:	c1 ef 02             	shr    $0x2,%edi
  10abf1:	09 fe                	or     %edi,%esi
  10abf3:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10abf6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10abf9:	c1 eb 01             	shr    $0x1,%ebx
  10abfc:	09 df                	or     %ebx,%edi
  10abfe:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac01:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  10ac07:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ac0a:	c1 e8 01             	shr    $0x1,%eax
  10ac0d:	09 c3                	or     %eax,%ebx
  10ac0f:	c1 eb 02             	shr    $0x2,%ebx
  10ac12:	09 df                	or     %ebx,%edi
  10ac14:	c1 ef 04             	shr    $0x4,%edi
  10ac17:	09 fe                	or     %edi,%esi
  10ac19:	c1 ee 08             	shr    $0x8,%esi
  10ac1c:	09 f2                	or     %esi,%edx
  10ac1e:	c1 ea 10             	shr    $0x10,%edx
  10ac21:	09 d1                	or     %edx,%ecx
  10ac23:	c1 e9 01             	shr    $0x1,%ecx
  10ac26:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
  10ac2c:	21 c8                	and    %ecx,%eax
  10ac2e:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10ac34:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ac37:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ac3a:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac3d:	c1 ef 01             	shr    $0x1,%edi
  10ac40:	09 fe                	or     %edi,%esi
  10ac42:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac45:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac48:	c1 eb 01             	shr    $0x1,%ebx
  10ac4b:	09 df                	or     %ebx,%edi
  10ac4d:	c1 ef 02             	shr    $0x2,%edi
  10ac50:	09 fe                	or     %edi,%esi
  10ac52:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac55:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac58:	c1 eb 01             	shr    $0x1,%ebx
  10ac5b:	09 df                	or     %ebx,%edi
  10ac5d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac60:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  10ac66:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ac69:	c1 e8 01             	shr    $0x1,%eax
  10ac6c:	09 c3                	or     %eax,%ebx
  10ac6e:	c1 eb 02             	shr    $0x2,%ebx
  10ac71:	09 df                	or     %ebx,%edi
  10ac73:	c1 ef 04             	shr    $0x4,%edi
  10ac76:	09 fe                	or     %edi,%esi
  10ac78:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ac7b:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac7e:	c1 ef 01             	shr    $0x1,%edi
  10ac81:	09 f8                	or     %edi,%eax
  10ac83:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac86:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac89:	c1 eb 01             	shr    $0x1,%ebx
  10ac8c:	09 df                	or     %ebx,%edi
  10ac8e:	c1 ef 02             	shr    $0x2,%edi
  10ac91:	09 f8                	or     %edi,%eax
  10ac93:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ac96:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ac99:	c1 eb 01             	shr    $0x1,%ebx
  10ac9c:	09 df                	or     %ebx,%edi
  10ac9e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10aca1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
  10aca7:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10acaa:	c1 e8 01             	shr    $0x1,%eax
  10acad:	09 c3                	or     %eax,%ebx
  10acaf:	c1 eb 02             	shr    $0x2,%ebx
  10acb2:	09 df                	or     %ebx,%edi
  10acb4:	c1 ef 04             	shr    $0x4,%edi
  10acb7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
  10acbd:	09 f8                	or     %edi,%eax
  10acbf:	c1 e8 08             	shr    $0x8,%eax
  10acc2:	09 c6                	or     %eax,%esi
  10acc4:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10acc7:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10acca:	c1 ef 01             	shr    $0x1,%edi
  10accd:	09 f8                	or     %edi,%eax
  10accf:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10acd2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10acd5:	c1 eb 01             	shr    $0x1,%ebx
  10acd8:	09 df                	or     %ebx,%edi
  10acda:	c1 ef 02             	shr    $0x2,%edi
  10acdd:	09 f8                	or     %edi,%eax
  10acdf:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ace2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ace5:	c1 eb 01             	shr    $0x1,%ebx
  10ace8:	09 df                	or     %ebx,%edi
  10acea:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10aced:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
  10acf3:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10acf6:	c1 e8 01             	shr    $0x1,%eax
  10acf9:	09 c3                	or     %eax,%ebx
  10acfb:	c1 eb 02             	shr    $0x2,%ebx
  10acfe:	09 df                	or     %ebx,%edi
  10ad00:	c1 ef 04             	shr    $0x4,%edi
  10ad03:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
  10ad09:	09 f8                	or     %edi,%eax
  10ad0b:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ad0e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ad11:	c1 eb 01             	shr    $0x1,%ebx
  10ad14:	09 df                	or     %ebx,%edi
  10ad16:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ad19:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  10ad1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ad22:	c1 e8 01             	shr    $0x1,%eax
  10ad25:	09 c3                	or     %eax,%ebx
  10ad27:	c1 eb 02             	shr    $0x2,%ebx
  10ad2a:	09 df                	or     %ebx,%edi
  10ad2c:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ad2f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ad32:	c1 eb 01             	shr    $0x1,%ebx
  10ad35:	09 d8                	or     %ebx,%eax
  10ad37:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ad3a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  10ad40:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ad43:	c1 e8 01             	shr    $0x1,%eax
  10ad46:	09 c3                	or     %eax,%ebx
  10ad48:	c1 eb 02             	shr    $0x2,%ebx
  10ad4b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
  10ad51:	09 d8                	or     %ebx,%eax
  10ad53:	c1 e8 04             	shr    $0x4,%eax
  10ad56:	09 c7                	or     %eax,%edi
  10ad58:	c1 ef 08             	shr    $0x8,%edi
  10ad5b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
  10ad61:	09 f8                	or     %edi,%eax
  10ad63:	c1 e8 10             	shr    $0x10,%eax
  10ad66:	09 c6                	or     %eax,%esi
  10ad68:	c1 ee 01             	shr    $0x1,%esi
  10ad6b:	21 f2                	and    %esi,%edx
  10ad6d:	83 fa 00             	cmp    $0x0,%edx
  10ad70:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
  10ad76:	0f 84 2b 01 00 00    	je     10aea7 <buddy_init_segment+0x957>
  10ad7c:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ad7f:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10ad82:	8b 55 a8             	mov    -0x58(%ebp),%edx
  10ad85:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ad88:	c1 ee 01             	shr    $0x1,%esi
  10ad8b:	09 f2                	or     %esi,%edx
  10ad8d:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ad90:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ad93:	c1 ef 01             	shr    $0x1,%edi
  10ad96:	09 fe                	or     %edi,%esi
  10ad98:	c1 ee 02             	shr    $0x2,%esi
  10ad9b:	09 f2                	or     %esi,%edx
  10ad9d:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ada0:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ada3:	c1 ef 01             	shr    $0x1,%edi
  10ada6:	09 fe                	or     %edi,%esi
  10ada8:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10adab:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10adae:	c1 eb 01             	shr    $0x1,%ebx
  10adb1:	09 df                	or     %ebx,%edi
  10adb3:	c1 ef 02             	shr    $0x2,%edi
  10adb6:	09 fe                	or     %edi,%esi
  10adb8:	c1 ee 04             	shr    $0x4,%esi
  10adbb:	09 f2                	or     %esi,%edx
  10adbd:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10adc0:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10adc3:	c1 ef 01             	shr    $0x1,%edi
  10adc6:	09 fe                	or     %edi,%esi
  10adc8:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10adcb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10adce:	c1 eb 01             	shr    $0x1,%ebx
  10add1:	09 df                	or     %ebx,%edi
  10add3:	c1 ef 02             	shr    $0x2,%edi
  10add6:	09 fe                	or     %edi,%esi
  10add8:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10addb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10adde:	c1 eb 01             	shr    $0x1,%ebx
  10ade1:	09 df                	or     %ebx,%edi
  10ade3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ade6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  10adec:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10adef:	c1 e8 01             	shr    $0x1,%eax
  10adf2:	09 c3                	or     %eax,%ebx
  10adf4:	c1 eb 02             	shr    $0x2,%ebx
  10adf7:	09 df                	or     %ebx,%edi
  10adf9:	c1 ef 04             	shr    $0x4,%edi
  10adfc:	09 fe                	or     %edi,%esi
  10adfe:	c1 ee 08             	shr    $0x8,%esi
  10ae01:	09 f2                	or     %esi,%edx
  10ae03:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ae06:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ae09:	c1 ee 01             	shr    $0x1,%esi
  10ae0c:	09 f0                	or     %esi,%eax
  10ae0e:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ae11:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae14:	c1 ef 01             	shr    $0x1,%edi
  10ae17:	09 fe                	or     %edi,%esi
  10ae19:	c1 ee 02             	shr    $0x2,%esi
  10ae1c:	09 f0                	or     %esi,%eax
  10ae1e:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ae21:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae24:	c1 ef 01             	shr    $0x1,%edi
  10ae27:	09 fe                	or     %edi,%esi
  10ae29:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae2c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ae2f:	c1 eb 01             	shr    $0x1,%ebx
  10ae32:	09 df                	or     %ebx,%edi
  10ae34:	c1 ef 02             	shr    $0x2,%edi
  10ae37:	09 fe                	or     %edi,%esi
  10ae39:	c1 ee 04             	shr    $0x4,%esi
  10ae3c:	09 f0                	or     %esi,%eax
  10ae3e:	8b 75 a8             	mov    -0x58(%ebp),%esi
  10ae41:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae44:	c1 ef 01             	shr    $0x1,%edi
  10ae47:	09 fe                	or     %edi,%esi
  10ae49:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae4c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ae4f:	c1 eb 01             	shr    $0x1,%ebx
  10ae52:	09 df                	or     %ebx,%edi
  10ae54:	c1 ef 02             	shr    $0x2,%edi
  10ae57:	09 fe                	or     %edi,%esi
  10ae59:	8b 7d a8             	mov    -0x58(%ebp),%edi
  10ae5c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ae5f:	c1 eb 01             	shr    $0x1,%ebx
  10ae62:	09 df                	or     %ebx,%edi
  10ae64:	8b 5d a8             	mov    -0x58(%ebp),%ebx
  10ae67:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  10ae6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ae70:	c1 e8 01             	shr    $0x1,%eax
  10ae73:	09 c3                	or     %eax,%ebx
  10ae75:	c1 eb 02             	shr    $0x2,%ebx
  10ae78:	09 df                	or     %ebx,%edi
  10ae7a:	c1 ef 04             	shr    $0x4,%edi
  10ae7d:	09 fe                	or     %edi,%esi
  10ae7f:	c1 ee 08             	shr    $0x8,%esi
  10ae82:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
  10ae88:	09 f0                	or     %esi,%eax
  10ae8a:	c1 e8 10             	shr    $0x10,%eax
  10ae8d:	09 c2                	or     %eax,%edx
  10ae8f:	c1 ea 01             	shr    $0x1,%edx
  10ae92:	21 d1                	and    %edx,%ecx
  10ae94:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
  10ae9a:	29 c8                	sub    %ecx,%eax
  10ae9c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  10aea2:	e9 09 00 00 00       	jmp    10aeb0 <buddy_init_segment+0x960>
  10aea7:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10aeaa:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  10aeb0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
  10aeb6:	8d 0d 30 49 11 00    	lea    0x114930,%ecx
  10aebc:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
  10aec2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  10aec8:	89 d0                	mov    %edx,%eax
  10aeca:	31 d2                	xor    %edx,%edx
  10aecc:	8b b5 30 ff ff ff    	mov    -0xd0(%ebp),%esi
  10aed2:	f7 f6                	div    %esi
  10aed4:	8b bd 54 ff ff ff    	mov    -0xac(%ebp),%edi
  10aeda:	0f af f8             	imul   %eax,%edi
  10aedd:	6b c7 14             	imul   $0x14,%edi,%eax
  10aee0:	03 05 1c 49 11 00    	add    0x11491c,%eax
  10aee6:	89 45 98             	mov    %eax,-0x68(%ebp)
        page->property = alloc_size;
  10aee9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10aeec:	8b 7d 98             	mov    -0x68(%ebp),%edi
  10aeef:	89 47 08             	mov    %eax,0x8(%edi)
        list_add(&(free_list), &(page->page_link));
  10aef2:	8b 45 98             	mov    -0x68(%ebp),%eax
  10aef5:	83 c0 0c             	add    $0xc,%eax
  10aef8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
  10aefb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    list_add_after(listelm, elm);
  10aefe:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10af01:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10af04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10af07:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
  10af0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10af0d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10af10:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10af13:	8b 7f 04             	mov    0x4(%edi),%edi
  10af16:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10af19:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10af1c:	89 7d e8             	mov    %edi,-0x18(%ebp)
    prev->next = next->prev = elm;
  10af1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10af22:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10af25:	89 01                	mov    %eax,(%ecx)
  10af27:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10af2a:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  10af2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10af30:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10af33:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10af36:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10af39:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10af3c:	89 01                	mov    %eax,(%ecx)
}
  10af3e:	81 c4 dc 00 00 00    	add    $0xdc,%esp
  10af44:	5e                   	pop    %esi
  10af45:	5f                   	pop    %edi
  10af46:	5b                   	pop    %ebx
  10af47:	5d                   	pop    %ebp
  10af48:	c3                   	ret    
  10af49:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

0010af50 <page2pa>:
page2pa(struct Page *page) {
  10af50:	55                   	push   %ebp
  10af51:	89 e5                	mov    %esp,%ebp
  10af53:	83 ec 08             	sub    $0x8,%esp
  10af56:	8b 45 08             	mov    0x8(%ebp),%eax
  10af59:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
  10af5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10af5f:	89 04 24             	mov    %eax,(%esp)
  10af62:	e8 09 00 00 00       	call   10af70 <page2ppn>
  10af67:	c1 e0 0c             	shl    $0xc,%eax
  10af6a:	83 c4 08             	add    $0x8,%esp
  10af6d:	5d                   	pop    %ebp
  10af6e:	c3                   	ret    
  10af6f:	90                   	nop

0010af70 <page2ppn>:
page2ppn(struct Page *page) {
  10af70:	55                   	push   %ebp
  10af71:	89 e5                	mov    %esp,%ebp
  10af73:	50                   	push   %eax
  10af74:	8b 45 08             	mov    0x8(%ebp),%eax
  10af77:	b9 14 00 00 00       	mov    $0x14,%ecx
  10af7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
  10af7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10af82:	8b 15 2c 49 11 00    	mov    0x11492c,%edx
  10af88:	29 d0                	sub    %edx,%eax
  10af8a:	99                   	cltd   
  10af8b:	f7 f9                	idiv   %ecx
  10af8d:	83 c4 04             	add    $0x4,%esp
  10af90:	5d                   	pop    %ebp
  10af91:	c3                   	ret    
  10af92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10af99:	1f 84 00 00 00 00 00 

0010afa0 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
  10afa0:	55                   	push   %ebp
  10afa1:	89 e5                	mov    %esp,%ebp
  10afa3:	83 ec 08             	sub    $0x8,%esp
  10afa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  10afa9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10afac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10afaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
  10afb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10afb5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10afb8:	89 01                	mov    %eax,(%ecx)
}
  10afba:	83 c4 08             	add    $0x8,%esp
  10afbd:	5d                   	pop    %ebp
  10afbe:	c3                   	ret    
  10afbf:	90                   	nop

0010afc0 <macro_check>:
macro_check(void) {
  10afc0:	55                   	push   %ebp
  10afc1:	89 e5                	mov    %esp,%ebp
  10afc3:	56                   	push   %esi
  10afc4:	83 ec 34             	sub    $0x34,%esp
    assert(BUDDY_ROOT == 1);
  10afc7:	e9 00 00 00 00       	jmp    10afcc <macro_check+0xc>
    assert(BUDDY_LEFT(3) == 6);
  10afcc:	e9 00 00 00 00       	jmp    10afd1 <macro_check+0x11>
  10afd1:	e9 00 00 00 00       	jmp    10afd6 <macro_check+0x16>
    assert(BUDDY_RIGHT(3) == 7);
  10afd6:	e9 00 00 00 00       	jmp    10afdb <macro_check+0x1b>
  10afdb:	e9 00 00 00 00       	jmp    10afe0 <macro_check+0x20>
    assert(BUDDY_PARENT(6) == 3);
  10afe0:	e9 00 00 00 00       	jmp    10afe5 <macro_check+0x25>
  10afe5:	e9 00 00 00 00       	jmp    10afea <macro_check+0x2a>
    assert(BUDDY_PARENT(7) == 3);
  10afea:	e9 00 00 00 00       	jmp    10afef <macro_check+0x2f>
  10afef:	e9 00 00 00 00       	jmp    10aff4 <macro_check+0x34>
    size_t buddy_virtual_size_store = buddy_virtual_size;
  10aff4:	a1 08 49 11 00       	mov    0x114908,%eax
  10aff9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t buddy_segment_root_store = buddy_segment[BUDDY_ROOT];
  10affc:	a1 18 49 11 00       	mov    0x114918,%eax
  10b001:	8b 40 04             	mov    0x4(%eax),%eax
  10b004:	89 45 f4             	mov    %eax,-0xc(%ebp)
    buddy_virtual_size = 16;
  10b007:	c7 05 08 49 11 00 10 	movl   $0x10,0x114908
  10b00e:	00 00 00 
    buddy_segment[BUDDY_ROOT] = 16;
  10b011:	a1 18 49 11 00       	mov    0x114918,%eax
  10b016:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
    assert(BUDDY_LENGTH(6) == 4);
  10b01d:	a1 08 49 11 00       	mov    0x114908,%eax
  10b022:	c1 e8 02             	shr    $0x2,%eax
  10b025:	83 f8 04             	cmp    $0x4,%eax
  10b028:	0f 84 32 00 00 00    	je     10b060 <macro_check+0xa0>
  10b02e:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b034:	b9 de 00 00 00       	mov    $0xde,%ecx
  10b039:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b03f:	8d 35 f4 00 11 00    	lea    0x1100f4,%esi
  10b045:	89 04 24             	mov    %eax,(%esp)
  10b048:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
  10b04f:	00 
  10b050:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b054:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b058:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10b05b:	e8 f0 53 ff ff       	call   100450 <__panic>
  10b060:	e9 00 00 00 00       	jmp    10b065 <macro_check+0xa5>
    assert(BUDDY_BEGIN(6) == 8);
  10b065:	e9 00 00 00 00       	jmp    10b06a <macro_check+0xaa>
  10b06a:	a1 08 49 11 00       	mov    0x114908,%eax
  10b06f:	c1 e8 02             	shr    $0x2,%eax
  10b072:	c1 e0 01             	shl    $0x1,%eax
  10b075:	83 f8 08             	cmp    $0x8,%eax
  10b078:	0f 84 32 00 00 00    	je     10b0b0 <macro_check+0xf0>
  10b07e:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b084:	b9 df 00 00 00       	mov    $0xdf,%ecx
  10b089:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b08f:	8d 35 09 01 11 00    	lea    0x110109,%esi
  10b095:	89 04 24             	mov    %eax,(%esp)
  10b098:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
  10b09f:	00 
  10b0a0:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b0a4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b0a8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10b0ab:	e8 a0 53 ff ff       	call   100450 <__panic>
  10b0b0:	e9 00 00 00 00       	jmp    10b0b5 <macro_check+0xf5>
    assert(BUDDY_END(6) == 12);
  10b0b5:	e9 00 00 00 00       	jmp    10b0ba <macro_check+0xfa>
  10b0ba:	a1 08 49 11 00       	mov    0x114908,%eax
  10b0bf:	c1 e8 02             	shr    $0x2,%eax
  10b0c2:	6b c0 03             	imul   $0x3,%eax,%eax
  10b0c5:	83 f8 0c             	cmp    $0xc,%eax
  10b0c8:	0f 84 32 00 00 00    	je     10b100 <macro_check+0x140>
  10b0ce:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b0d4:	b9 e0 00 00 00       	mov    $0xe0,%ecx
  10b0d9:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b0df:	8d 35 1d 01 11 00    	lea    0x11011d,%esi
  10b0e5:	89 04 24             	mov    %eax,(%esp)
  10b0e8:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
  10b0ef:	00 
  10b0f0:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b0f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b0f8:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10b0fb:	e8 50 53 ff ff       	call   100450 <__panic>
  10b100:	e9 00 00 00 00       	jmp    10b105 <macro_check+0x145>
    assert(BUDDY_BLOCK(8, 12) == 6);
  10b105:	e9 00 00 00 00       	jmp    10b10a <macro_check+0x14a>
  10b10a:	a1 08 49 11 00       	mov    0x114908,%eax
  10b10f:	c1 e8 02             	shr    $0x2,%eax
  10b112:	83 c0 02             	add    $0x2,%eax
  10b115:	83 f8 06             	cmp    $0x6,%eax
  10b118:	0f 84 32 00 00 00    	je     10b150 <macro_check+0x190>
  10b11e:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b124:	b9 e1 00 00 00       	mov    $0xe1,%ecx
  10b129:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b12f:	8d 35 30 01 11 00    	lea    0x110130,%esi
  10b135:	89 04 24             	mov    %eax,(%esp)
  10b138:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
  10b13f:	00 
  10b140:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b144:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b148:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10b14b:	e8 00 53 ff ff       	call   100450 <__panic>
  10b150:	e9 00 00 00 00       	jmp    10b155 <macro_check+0x195>
    assert(BUDDY_EMPTY(BUDDY_ROOT));
  10b155:	e9 00 00 00 00       	jmp    10b15a <macro_check+0x19a>
  10b15a:	a1 18 49 11 00       	mov    0x114918,%eax
  10b15f:	8b 40 04             	mov    0x4(%eax),%eax
  10b162:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10b168:	c1 e9 00             	shr    $0x0,%ecx
  10b16b:	39 c8                	cmp    %ecx,%eax
  10b16d:	0f 84 32 00 00 00    	je     10b1a5 <macro_check+0x1e5>
  10b173:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b179:	b9 e2 00 00 00       	mov    $0xe2,%ecx
  10b17e:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b184:	8d 35 48 01 11 00    	lea    0x110148,%esi
  10b18a:	89 04 24             	mov    %eax,(%esp)
  10b18d:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
  10b194:	00 
  10b195:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b199:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b19d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10b1a0:	e8 ab 52 ff ff       	call   100450 <__panic>
  10b1a5:	e9 00 00 00 00       	jmp    10b1aa <macro_check+0x1ea>
    buddy_virtual_size = buddy_virtual_size_store;
  10b1aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10b1ad:	a3 08 49 11 00       	mov    %eax,0x114908
    buddy_segment[BUDDY_ROOT] = buddy_segment_root_store;
  10b1b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10b1b5:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  10b1bb:	89 41 04             	mov    %eax,0x4(%ecx)
    assert(UINT32_SHR_OR(0xCC, 2) == 0xFF);
  10b1be:	e9 00 00 00 00       	jmp    10b1c3 <macro_check+0x203>
    assert(UINT32_MASK(0x4000) == 0x7FFF);
  10b1c3:	e9 00 00 00 00       	jmp    10b1c8 <macro_check+0x208>
  10b1c8:	e9 00 00 00 00       	jmp    10b1cd <macro_check+0x20d>
    assert(UINT32_REMAINDER(0x4321) == 0x321);
  10b1cd:	e9 00 00 00 00       	jmp    10b1d2 <macro_check+0x212>
  10b1d2:	e9 00 00 00 00       	jmp    10b1d7 <macro_check+0x217>
    assert(UINT32_ROUND_UP(0x2321) == 0x4000);
  10b1d7:	e9 00 00 00 00       	jmp    10b1dc <macro_check+0x21c>
  10b1dc:	e9 00 00 00 00       	jmp    10b1e1 <macro_check+0x221>
    assert(UINT32_ROUND_UP(0x2000) == 0x2000);
  10b1e1:	e9 00 00 00 00       	jmp    10b1e6 <macro_check+0x226>
  10b1e6:	e9 00 00 00 00       	jmp    10b1eb <macro_check+0x22b>
    assert(UINT32_ROUND_DOWN(0x4321) == 0x4000);
  10b1eb:	e9 00 00 00 00       	jmp    10b1f0 <macro_check+0x230>
  10b1f0:	e9 00 00 00 00       	jmp    10b1f5 <macro_check+0x235>
    assert(UINT32_ROUND_DOWN(0x4000) == 0x4000);
  10b1f5:	e9 00 00 00 00       	jmp    10b1fa <macro_check+0x23a>
  10b1fa:	e9 00 00 00 00       	jmp    10b1ff <macro_check+0x23f>
}
  10b1ff:	83 c4 34             	add    $0x34,%esp
  10b202:	5e                   	pop    %esi
  10b203:	5d                   	pop    %ebp
  10b204:	c3                   	ret    
  10b205:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10b20c:	00 00 00 00 

0010b210 <size_check>:
size_check(void) {
  10b210:	55                   	push   %ebp
  10b211:	89 e5                	mov    %esp,%ebp
  10b213:	56                   	push   %esi
  10b214:	83 ec 44             	sub    $0x44,%esp
  10b217:	b8 c8 00 00 00       	mov    $0xc8,%eax
    size_t buddy_physical_size_store = buddy_physical_size;
  10b21c:	8b 0d 04 49 11 00    	mov    0x114904,%ecx
  10b222:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    buddy_init_size(200);
  10b225:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
  10b22c:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10b22f:	e8 cc ec ff ff       	call   109f00 <buddy_init_size>
    assert(buddy_virtual_size == 256);
  10b234:	81 3d 08 49 11 00 00 	cmpl   $0x100,0x114908
  10b23b:	01 00 00 
  10b23e:	0f 84 32 00 00 00    	je     10b276 <size_check+0x66>
  10b244:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b24a:	b9 f6 00 00 00       	mov    $0xf6,%ecx
  10b24f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b255:	8d 35 60 01 11 00    	lea    0x110160,%esi
  10b25b:	89 04 24             	mov    %eax,(%esp)
  10b25e:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
  10b265:	00 
  10b266:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b26a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b26e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10b271:	e8 da 51 ff ff       	call   100450 <__panic>
  10b276:	e9 00 00 00 00       	jmp    10b27b <size_check+0x6b>
  10b27b:	b8 00 04 00 00       	mov    $0x400,%eax
    buddy_init_size(1024);
  10b280:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
  10b287:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10b28a:	e8 71 ec ff ff       	call   109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
  10b28f:	81 3d 08 49 11 00 00 	cmpl   $0x400,0x114908
  10b296:	04 00 00 
  10b299:	0f 84 32 00 00 00    	je     10b2d1 <size_check+0xc1>
  10b29f:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b2a5:	b9 f8 00 00 00       	mov    $0xf8,%ecx
  10b2aa:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b2b0:	8d 35 7a 01 11 00    	lea    0x11017a,%esi
  10b2b6:	89 04 24             	mov    %eax,(%esp)
  10b2b9:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
  10b2c0:	00 
  10b2c1:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b2c5:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b2c9:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10b2cc:	e8 7f 51 ff ff       	call   100450 <__panic>
  10b2d1:	e9 00 00 00 00       	jmp    10b2d6 <size_check+0xc6>
  10b2d6:	b8 02 04 00 00       	mov    $0x402,%eax
    buddy_init_size(1026);
  10b2db:	c7 04 24 02 04 00 00 	movl   $0x402,(%esp)
  10b2e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10b2e5:	e8 16 ec ff ff       	call   109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
  10b2ea:	81 3d 08 49 11 00 00 	cmpl   $0x400,0x114908
  10b2f1:	04 00 00 
  10b2f4:	0f 84 32 00 00 00    	je     10b32c <size_check+0x11c>
  10b2fa:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b300:	b9 fa 00 00 00       	mov    $0xfa,%ecx
  10b305:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b30b:	8d 35 7a 01 11 00    	lea    0x11017a,%esi
  10b311:	89 04 24             	mov    %eax,(%esp)
  10b314:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  10b31b:	00 
  10b31c:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b320:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b324:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10b327:	e8 24 51 ff ff       	call   100450 <__panic>
  10b32c:	e9 00 00 00 00       	jmp    10b331 <size_check+0x121>
  10b331:	b8 04 04 00 00       	mov    $0x404,%eax
    buddy_init_size(1028);    
  10b336:	c7 04 24 04 04 00 00 	movl   $0x404,(%esp)
  10b33d:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10b340:	e8 bb eb ff ff       	call   109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
  10b345:	81 3d 08 49 11 00 00 	cmpl   $0x400,0x114908
  10b34c:	04 00 00 
  10b34f:	0f 84 32 00 00 00    	je     10b387 <size_check+0x177>
  10b355:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b35b:	b9 fc 00 00 00       	mov    $0xfc,%ecx
  10b360:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b366:	8d 35 7a 01 11 00    	lea    0x11017a,%esi
  10b36c:	89 04 24             	mov    %eax,(%esp)
  10b36f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
  10b376:	00 
  10b377:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b37b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b37f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  10b382:	e8 c9 50 ff ff       	call   100450 <__panic>
  10b387:	e9 00 00 00 00       	jmp    10b38c <size_check+0x17c>
  10b38c:	b8 06 04 00 00       	mov    $0x406,%eax
    buddy_init_size(1030);    
  10b391:	c7 04 24 06 04 00 00 	movl   $0x406,(%esp)
  10b398:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10b39b:	e8 60 eb ff ff       	call   109f00 <buddy_init_size>
    assert(buddy_virtual_size == 2048);
  10b3a0:	81 3d 08 49 11 00 00 	cmpl   $0x800,0x114908
  10b3a7:	08 00 00 
  10b3aa:	0f 84 32 00 00 00    	je     10b3e2 <size_check+0x1d2>
  10b3b0:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b3b6:	b9 fe 00 00 00       	mov    $0xfe,%ecx
  10b3bb:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b3c1:	8d 35 95 01 11 00    	lea    0x110195,%esi
  10b3c7:	89 04 24             	mov    %eax,(%esp)
  10b3ca:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
  10b3d1:	00 
  10b3d2:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b3d6:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b3da:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10b3dd:	e8 6e 50 ff ff       	call   100450 <__panic>
  10b3e2:	e9 00 00 00 00       	jmp    10b3e7 <size_check+0x1d7>
    buddy_init_size(buddy_physical_size_store);   
  10b3e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10b3ea:	89 04 24             	mov    %eax,(%esp)
  10b3ed:	e8 0e eb ff ff       	call   109f00 <buddy_init_size>
}
  10b3f2:	83 c4 44             	add    $0x44,%esp
  10b3f5:	5e                   	pop    %esi
  10b3f6:	5d                   	pop    %ebp
  10b3f7:	c3                   	ret    
  10b3f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10b3ff:	00 

0010b400 <segment_check>:
segment_check(void) {
  10b400:	55                   	push   %ebp
  10b401:	89 e5                	mov    %esp,%ebp
    size_t total = 0, count = 0;
  10b403:	53                   	push   %ebx
  10b404:	57                   	push   %edi
  10b405:	56                   	push   %esi
  10b406:	83 ec 7c             	sub    $0x7c,%esp
  10b409:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10b410:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    for (size_t block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
  10b417:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
  10b41e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b421:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10b427:	c1 e1 01             	shl    $0x1,%ecx
  10b42a:	39 c8                	cmp    %ecx,%eax
  10b42c:	0f 83 6f 05 00 00    	jae    10b9a1 <segment_check+0x5a1>
        if (BUDDY_EMPTY(block))
  10b432:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b435:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  10b43b:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10b43e:	8b 0d 08 49 11 00    	mov    0x114908,%ecx
  10b444:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10b447:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b44a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b44d:	c1 ef 01             	shr    $0x1,%edi
  10b450:	09 fe                	or     %edi,%esi
  10b452:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b455:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b458:	c1 eb 01             	shr    $0x1,%ebx
  10b45b:	09 df                	or     %ebx,%edi
  10b45d:	c1 ef 02             	shr    $0x2,%edi
  10b460:	09 fe                	or     %edi,%esi
  10b462:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b465:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b468:	c1 eb 01             	shr    $0x1,%ebx
  10b46b:	09 df                	or     %ebx,%edi
  10b46d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b470:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10b473:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b476:	c1 e8 01             	shr    $0x1,%eax
  10b479:	09 c3                	or     %eax,%ebx
  10b47b:	c1 eb 02             	shr    $0x2,%ebx
  10b47e:	09 df                	or     %ebx,%edi
  10b480:	c1 ef 04             	shr    $0x4,%edi
  10b483:	09 fe                	or     %edi,%esi
  10b485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b488:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b48b:	c1 ef 01             	shr    $0x1,%edi
  10b48e:	09 f8                	or     %edi,%eax
  10b490:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b493:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b496:	c1 eb 01             	shr    $0x1,%ebx
  10b499:	09 df                	or     %ebx,%edi
  10b49b:	c1 ef 02             	shr    $0x2,%edi
  10b49e:	09 f8                	or     %edi,%eax
  10b4a0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b4a3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b4a6:	c1 eb 01             	shr    $0x1,%ebx
  10b4a9:	09 df                	or     %ebx,%edi
  10b4ab:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b4ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10b4b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b4b4:	c1 e8 01             	shr    $0x1,%eax
  10b4b7:	09 c3                	or     %eax,%ebx
  10b4b9:	c1 eb 02             	shr    $0x2,%ebx
  10b4bc:	09 df                	or     %ebx,%edi
  10b4be:	c1 ef 04             	shr    $0x4,%edi
  10b4c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10b4c4:	09 f8                	or     %edi,%eax
  10b4c6:	c1 e8 08             	shr    $0x8,%eax
  10b4c9:	09 c6                	or     %eax,%esi
  10b4cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b4ce:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b4d1:	c1 ef 01             	shr    $0x1,%edi
  10b4d4:	09 f8                	or     %edi,%eax
  10b4d6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b4d9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b4dc:	c1 eb 01             	shr    $0x1,%ebx
  10b4df:	09 df                	or     %ebx,%edi
  10b4e1:	c1 ef 02             	shr    $0x2,%edi
  10b4e4:	09 f8                	or     %edi,%eax
  10b4e6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b4e9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b4ec:	c1 eb 01             	shr    $0x1,%ebx
  10b4ef:	09 df                	or     %ebx,%edi
  10b4f1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b4f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10b4f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b4fa:	c1 e8 01             	shr    $0x1,%eax
  10b4fd:	09 c3                	or     %eax,%ebx
  10b4ff:	c1 eb 02             	shr    $0x2,%ebx
  10b502:	09 df                	or     %ebx,%edi
  10b504:	c1 ef 04             	shr    $0x4,%edi
  10b507:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10b50a:	09 f8                	or     %edi,%eax
  10b50c:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b50f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b512:	c1 eb 01             	shr    $0x1,%ebx
  10b515:	09 df                	or     %ebx,%edi
  10b517:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b51a:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10b51d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b520:	c1 e8 01             	shr    $0x1,%eax
  10b523:	09 c3                	or     %eax,%ebx
  10b525:	c1 eb 02             	shr    $0x2,%ebx
  10b528:	09 df                	or     %ebx,%edi
  10b52a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b52d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b530:	c1 eb 01             	shr    $0x1,%ebx
  10b533:	09 d8                	or     %ebx,%eax
  10b535:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b538:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10b53b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b53e:	c1 e8 01             	shr    $0x1,%eax
  10b541:	09 c3                	or     %eax,%ebx
  10b543:	c1 eb 02             	shr    $0x2,%ebx
  10b546:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10b549:	09 d8                	or     %ebx,%eax
  10b54b:	c1 e8 04             	shr    $0x4,%eax
  10b54e:	09 c7                	or     %eax,%edi
  10b550:	c1 ef 08             	shr    $0x8,%edi
  10b553:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10b556:	09 f8                	or     %edi,%eax
  10b558:	c1 e8 10             	shr    $0x10,%eax
  10b55b:	09 c6                	or     %eax,%esi
  10b55d:	c1 ee 01             	shr    $0x1,%esi
  10b560:	21 f2                	and    %esi,%edx
  10b562:	83 fa 00             	cmp    $0x0,%edx
  10b565:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
  10b568:	0f 84 1c 01 00 00    	je     10b68a <segment_check+0x28a>
  10b56e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b571:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10b574:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10b577:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b57a:	c1 ee 01             	shr    $0x1,%esi
  10b57d:	09 f2                	or     %esi,%edx
  10b57f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b582:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b585:	c1 ef 01             	shr    $0x1,%edi
  10b588:	09 fe                	or     %edi,%esi
  10b58a:	c1 ee 02             	shr    $0x2,%esi
  10b58d:	09 f2                	or     %esi,%edx
  10b58f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b592:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b595:	c1 ef 01             	shr    $0x1,%edi
  10b598:	09 fe                	or     %edi,%esi
  10b59a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b59d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b5a0:	c1 eb 01             	shr    $0x1,%ebx
  10b5a3:	09 df                	or     %ebx,%edi
  10b5a5:	c1 ef 02             	shr    $0x2,%edi
  10b5a8:	09 fe                	or     %edi,%esi
  10b5aa:	c1 ee 04             	shr    $0x4,%esi
  10b5ad:	09 f2                	or     %esi,%edx
  10b5af:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b5b2:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b5b5:	c1 ef 01             	shr    $0x1,%edi
  10b5b8:	09 fe                	or     %edi,%esi
  10b5ba:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b5bd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b5c0:	c1 eb 01             	shr    $0x1,%ebx
  10b5c3:	09 df                	or     %ebx,%edi
  10b5c5:	c1 ef 02             	shr    $0x2,%edi
  10b5c8:	09 fe                	or     %edi,%esi
  10b5ca:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b5cd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b5d0:	c1 eb 01             	shr    $0x1,%ebx
  10b5d3:	09 df                	or     %ebx,%edi
  10b5d5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b5d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10b5db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b5de:	c1 e8 01             	shr    $0x1,%eax
  10b5e1:	09 c3                	or     %eax,%ebx
  10b5e3:	c1 eb 02             	shr    $0x2,%ebx
  10b5e6:	09 df                	or     %ebx,%edi
  10b5e8:	c1 ef 04             	shr    $0x4,%edi
  10b5eb:	09 fe                	or     %edi,%esi
  10b5ed:	c1 ee 08             	shr    $0x8,%esi
  10b5f0:	09 f2                	or     %esi,%edx
  10b5f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b5f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b5f8:	c1 ee 01             	shr    $0x1,%esi
  10b5fb:	09 f0                	or     %esi,%eax
  10b5fd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b600:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b603:	c1 ef 01             	shr    $0x1,%edi
  10b606:	09 fe                	or     %edi,%esi
  10b608:	c1 ee 02             	shr    $0x2,%esi
  10b60b:	09 f0                	or     %esi,%eax
  10b60d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b610:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b613:	c1 ef 01             	shr    $0x1,%edi
  10b616:	09 fe                	or     %edi,%esi
  10b618:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b61b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b61e:	c1 eb 01             	shr    $0x1,%ebx
  10b621:	09 df                	or     %ebx,%edi
  10b623:	c1 ef 02             	shr    $0x2,%edi
  10b626:	09 fe                	or     %edi,%esi
  10b628:	c1 ee 04             	shr    $0x4,%esi
  10b62b:	09 f0                	or     %esi,%eax
  10b62d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b630:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b633:	c1 ef 01             	shr    $0x1,%edi
  10b636:	09 fe                	or     %edi,%esi
  10b638:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b63b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b63e:	c1 eb 01             	shr    $0x1,%ebx
  10b641:	09 df                	or     %ebx,%edi
  10b643:	c1 ef 02             	shr    $0x2,%edi
  10b646:	09 fe                	or     %edi,%esi
  10b648:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b64b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b64e:	c1 eb 01             	shr    $0x1,%ebx
  10b651:	09 df                	or     %ebx,%edi
  10b653:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b656:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10b659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b65c:	c1 e8 01             	shr    $0x1,%eax
  10b65f:	09 c3                	or     %eax,%ebx
  10b661:	c1 eb 02             	shr    $0x2,%ebx
  10b664:	09 df                	or     %ebx,%edi
  10b666:	c1 ef 04             	shr    $0x4,%edi
  10b669:	09 fe                	or     %edi,%esi
  10b66b:	c1 ee 08             	shr    $0x8,%esi
  10b66e:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10b671:	09 f0                	or     %esi,%eax
  10b673:	c1 e8 10             	shr    $0x10,%eax
  10b676:	09 c2                	or     %eax,%edx
  10b678:	c1 ea 01             	shr    $0x1,%edx
  10b67b:	21 d1                	and    %edx,%ecx
  10b67d:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10b680:	29 c8                	sub    %ecx,%eax
  10b682:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10b685:	e9 06 00 00 00       	jmp    10b690 <segment_check+0x290>
  10b68a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b68d:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10b690:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10b693:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10b696:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10b699:	89 c8                	mov    %ecx,%eax
  10b69b:	31 d2                	xor    %edx,%edx
  10b69d:	8b 75 b4             	mov    -0x4c(%ebp),%esi
  10b6a0:	f7 f6                	div    %esi
  10b6a2:	8b 7d d8             	mov    -0x28(%ebp),%edi
  10b6a5:	39 c7                	cmp    %eax,%edi
  10b6a7:	0f 85 59 02 00 00    	jne    10b906 <segment_check+0x506>
            total += BUDDY_LENGTH(block);
  10b6ad:	a1 08 49 11 00       	mov    0x114908,%eax
  10b6b2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10b6b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10b6b8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b6bb:	c1 ee 01             	shr    $0x1,%esi
  10b6be:	09 f2                	or     %esi,%edx
  10b6c0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b6c3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b6c6:	c1 ef 01             	shr    $0x1,%edi
  10b6c9:	09 fe                	or     %edi,%esi
  10b6cb:	c1 ee 02             	shr    $0x2,%esi
  10b6ce:	09 f2                	or     %esi,%edx
  10b6d0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b6d3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b6d6:	c1 ef 01             	shr    $0x1,%edi
  10b6d9:	09 fe                	or     %edi,%esi
  10b6db:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b6de:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b6e1:	c1 eb 01             	shr    $0x1,%ebx
  10b6e4:	09 df                	or     %ebx,%edi
  10b6e6:	c1 ef 02             	shr    $0x2,%edi
  10b6e9:	09 fe                	or     %edi,%esi
  10b6eb:	c1 ee 04             	shr    $0x4,%esi
  10b6ee:	09 f2                	or     %esi,%edx
  10b6f0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b6f3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b6f6:	c1 ef 01             	shr    $0x1,%edi
  10b6f9:	09 fe                	or     %edi,%esi
  10b6fb:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b6fe:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b701:	c1 eb 01             	shr    $0x1,%ebx
  10b704:	09 df                	or     %ebx,%edi
  10b706:	c1 ef 02             	shr    $0x2,%edi
  10b709:	09 fe                	or     %edi,%esi
  10b70b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b70e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b711:	c1 eb 01             	shr    $0x1,%ebx
  10b714:	09 df                	or     %ebx,%edi
  10b716:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b719:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10b71c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b71f:	c1 e8 01             	shr    $0x1,%eax
  10b722:	09 c3                	or     %eax,%ebx
  10b724:	c1 eb 02             	shr    $0x2,%ebx
  10b727:	09 df                	or     %ebx,%edi
  10b729:	c1 ef 04             	shr    $0x4,%edi
  10b72c:	09 fe                	or     %edi,%esi
  10b72e:	c1 ee 08             	shr    $0x8,%esi
  10b731:	09 f2                	or     %esi,%edx
  10b733:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b736:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b739:	c1 ee 01             	shr    $0x1,%esi
  10b73c:	09 f0                	or     %esi,%eax
  10b73e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b741:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b744:	c1 ef 01             	shr    $0x1,%edi
  10b747:	09 fe                	or     %edi,%esi
  10b749:	c1 ee 02             	shr    $0x2,%esi
  10b74c:	09 f0                	or     %esi,%eax
  10b74e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b751:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b754:	c1 ef 01             	shr    $0x1,%edi
  10b757:	09 fe                	or     %edi,%esi
  10b759:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b75c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b75f:	c1 eb 01             	shr    $0x1,%ebx
  10b762:	09 df                	or     %ebx,%edi
  10b764:	c1 ef 02             	shr    $0x2,%edi
  10b767:	09 fe                	or     %edi,%esi
  10b769:	c1 ee 04             	shr    $0x4,%esi
  10b76c:	09 f0                	or     %esi,%eax
  10b76e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b771:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b774:	c1 ef 01             	shr    $0x1,%edi
  10b777:	09 fe                	or     %edi,%esi
  10b779:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b77c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b77f:	c1 eb 01             	shr    $0x1,%ebx
  10b782:	09 df                	or     %ebx,%edi
  10b784:	c1 ef 02             	shr    $0x2,%edi
  10b787:	09 fe                	or     %edi,%esi
  10b789:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b78c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b78f:	c1 eb 01             	shr    $0x1,%ebx
  10b792:	09 df                	or     %ebx,%edi
  10b794:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b797:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10b79a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b79d:	c1 e8 01             	shr    $0x1,%eax
  10b7a0:	09 c3                	or     %eax,%ebx
  10b7a2:	c1 eb 02             	shr    $0x2,%ebx
  10b7a5:	09 df                	or     %ebx,%edi
  10b7a7:	c1 ef 04             	shr    $0x4,%edi
  10b7aa:	09 fe                	or     %edi,%esi
  10b7ac:	c1 ee 08             	shr    $0x8,%esi
  10b7af:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10b7b2:	09 f0                	or     %esi,%eax
  10b7b4:	c1 e8 10             	shr    $0x10,%eax
  10b7b7:	09 c2                	or     %eax,%edx
  10b7b9:	c1 ea 01             	shr    $0x1,%edx
  10b7bc:	21 d1                	and    %edx,%ecx
  10b7be:	83 f9 00             	cmp    $0x0,%ecx
  10b7c1:	0f 84 1c 01 00 00    	je     10b8e3 <segment_check+0x4e3>
  10b7c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b7ca:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10b7cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10b7d0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b7d3:	c1 ee 01             	shr    $0x1,%esi
  10b7d6:	09 f2                	or     %esi,%edx
  10b7d8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b7db:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b7de:	c1 ef 01             	shr    $0x1,%edi
  10b7e1:	09 fe                	or     %edi,%esi
  10b7e3:	c1 ee 02             	shr    $0x2,%esi
  10b7e6:	09 f2                	or     %esi,%edx
  10b7e8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b7eb:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b7ee:	c1 ef 01             	shr    $0x1,%edi
  10b7f1:	09 fe                	or     %edi,%esi
  10b7f3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b7f6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b7f9:	c1 eb 01             	shr    $0x1,%ebx
  10b7fc:	09 df                	or     %ebx,%edi
  10b7fe:	c1 ef 02             	shr    $0x2,%edi
  10b801:	09 fe                	or     %edi,%esi
  10b803:	c1 ee 04             	shr    $0x4,%esi
  10b806:	09 f2                	or     %esi,%edx
  10b808:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b80b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b80e:	c1 ef 01             	shr    $0x1,%edi
  10b811:	09 fe                	or     %edi,%esi
  10b813:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b816:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b819:	c1 eb 01             	shr    $0x1,%ebx
  10b81c:	09 df                	or     %ebx,%edi
  10b81e:	c1 ef 02             	shr    $0x2,%edi
  10b821:	09 fe                	or     %edi,%esi
  10b823:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b826:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b829:	c1 eb 01             	shr    $0x1,%ebx
  10b82c:	09 df                	or     %ebx,%edi
  10b82e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b831:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10b834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b837:	c1 e8 01             	shr    $0x1,%eax
  10b83a:	09 c3                	or     %eax,%ebx
  10b83c:	c1 eb 02             	shr    $0x2,%ebx
  10b83f:	09 df                	or     %ebx,%edi
  10b841:	c1 ef 04             	shr    $0x4,%edi
  10b844:	09 fe                	or     %edi,%esi
  10b846:	c1 ee 08             	shr    $0x8,%esi
  10b849:	09 f2                	or     %esi,%edx
  10b84b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b84e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b851:	c1 ee 01             	shr    $0x1,%esi
  10b854:	09 f0                	or     %esi,%eax
  10b856:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b859:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b85c:	c1 ef 01             	shr    $0x1,%edi
  10b85f:	09 fe                	or     %edi,%esi
  10b861:	c1 ee 02             	shr    $0x2,%esi
  10b864:	09 f0                	or     %esi,%eax
  10b866:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b869:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b86c:	c1 ef 01             	shr    $0x1,%edi
  10b86f:	09 fe                	or     %edi,%esi
  10b871:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b874:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b877:	c1 eb 01             	shr    $0x1,%ebx
  10b87a:	09 df                	or     %ebx,%edi
  10b87c:	c1 ef 02             	shr    $0x2,%edi
  10b87f:	09 fe                	or     %edi,%esi
  10b881:	c1 ee 04             	shr    $0x4,%esi
  10b884:	09 f0                	or     %esi,%eax
  10b886:	8b 75 e4             	mov    -0x1c(%ebp),%esi
  10b889:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b88c:	c1 ef 01             	shr    $0x1,%edi
  10b88f:	09 fe                	or     %edi,%esi
  10b891:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b894:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b897:	c1 eb 01             	shr    $0x1,%ebx
  10b89a:	09 df                	or     %ebx,%edi
  10b89c:	c1 ef 02             	shr    $0x2,%edi
  10b89f:	09 fe                	or     %edi,%esi
  10b8a1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
  10b8a4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b8a7:	c1 eb 01             	shr    $0x1,%ebx
  10b8aa:	09 df                	or     %ebx,%edi
  10b8ac:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
  10b8af:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10b8b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b8b5:	c1 e8 01             	shr    $0x1,%eax
  10b8b8:	09 c3                	or     %eax,%ebx
  10b8ba:	c1 eb 02             	shr    $0x2,%ebx
  10b8bd:	09 df                	or     %ebx,%edi
  10b8bf:	c1 ef 04             	shr    $0x4,%edi
  10b8c2:	09 fe                	or     %edi,%esi
  10b8c4:	c1 ee 08             	shr    $0x8,%esi
  10b8c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10b8ca:	09 f0                	or     %esi,%eax
  10b8cc:	c1 e8 10             	shr    $0x10,%eax
  10b8cf:	09 c2                	or     %eax,%edx
  10b8d1:	c1 ea 01             	shr    $0x1,%edx
  10b8d4:	21 d1                	and    %edx,%ecx
  10b8d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10b8d9:	29 c8                	sub    %ecx,%eax
  10b8db:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10b8de:	e9 06 00 00 00       	jmp    10b8e9 <segment_check+0x4e9>
  10b8e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b8e6:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10b8e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10b8ec:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  10b8ef:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10b8f2:	89 c8                	mov    %ecx,%eax
  10b8f4:	31 d2                	xor    %edx,%edx
  10b8f6:	8b 75 9c             	mov    -0x64(%ebp),%esi
  10b8f9:	f7 f6                	div    %esi
  10b8fb:	03 45 ec             	add    -0x14(%ebp),%eax
  10b8fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10b901:	e9 88 00 00 00       	jmp    10b98e <segment_check+0x58e>
        else if (block < buddy_virtual_size)
  10b906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b909:	3b 05 08 49 11 00    	cmp    0x114908,%eax
  10b90f:	0f 83 74 00 00 00    	jae    10b989 <segment_check+0x589>
            assert(buddy_segment[block] == (buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)]));
  10b915:	e9 00 00 00 00       	jmp    10b91a <segment_check+0x51a>
  10b91a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b91d:	8b 0d 18 49 11 00    	mov    0x114918,%ecx
  10b923:	8b 04 81             	mov    (%ecx,%eax,4),%eax
  10b926:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10b929:	c1 e1 01             	shl    $0x1,%ecx
  10b92c:	8b 15 18 49 11 00    	mov    0x114918,%edx
  10b932:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
  10b935:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10b938:	c1 e2 01             	shl    $0x1,%edx
  10b93b:	8b 35 18 49 11 00    	mov    0x114918,%esi
  10b941:	0b 4c 96 04          	or     0x4(%esi,%edx,4),%ecx
  10b945:	39 c8                	cmp    %ecx,%eax
  10b947:	0f 84 32 00 00 00    	je     10b97f <segment_check+0x57f>
  10b94d:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b953:	b9 0c 01 00 00       	mov    $0x10c,%ecx
  10b958:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b95e:	8d 35 b0 01 11 00    	lea    0x1101b0,%esi
  10b964:	89 04 24             	mov    %eax,(%esp)
  10b967:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
  10b96e:	00 
  10b96f:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b973:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b977:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  10b97a:	e8 d1 4a ff ff       	call   100450 <__panic>
  10b97f:	e9 00 00 00 00       	jmp    10b984 <segment_check+0x584>
  10b984:	e9 00 00 00 00       	jmp    10b989 <segment_check+0x589>
  10b989:	e9 00 00 00 00       	jmp    10b98e <segment_check+0x58e>
        if (BUDDY_EMPTY(block))
  10b98e:	e9 00 00 00 00       	jmp    10b993 <segment_check+0x593>
    for (size_t block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
  10b993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10b996:	83 c0 01             	add    $0x1,%eax
  10b999:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10b99c:	e9 7d fa ff ff       	jmp    10b41e <segment_check+0x1e>
    assert(total == nr_free_pages());
  10b9a1:	e9 00 00 00 00       	jmp    10b9a6 <segment_check+0x5a6>
  10b9a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10b9a9:	89 45 94             	mov    %eax,-0x6c(%ebp)
  10b9ac:	e8 5f 77 ff ff       	call   103110 <nr_free_pages>
  10b9b1:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10b9b4:	39 c1                	cmp    %eax,%ecx
  10b9b6:	0f 84 32 00 00 00    	je     10b9ee <segment_check+0x5ee>
  10b9bc:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10b9c2:	b9 0d 01 00 00       	mov    $0x10d,%ecx
  10b9c7:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10b9cd:	8d 35 0f 02 11 00    	lea    0x11020f,%esi
  10b9d3:	89 04 24             	mov    %eax,(%esp)
  10b9d6:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
  10b9dd:	00 
  10b9de:	89 54 24 08          	mov    %edx,0x8(%esp)
  10b9e2:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10b9e6:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  10b9e9:	e8 62 4a ff ff       	call   100450 <__panic>
  10b9ee:	e9 00 00 00 00       	jmp    10b9f3 <segment_check+0x5f3>
  10b9f3:	8d 05 30 49 11 00    	lea    0x114930,%eax
    total = 0, count = 0;
  10b9f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10ba00:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    list_entry_t *le = &free_list;
  10ba07:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10ba0a:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while ((le = list_next(le)) != &free_list) {
  10ba10:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10ba13:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    return listelm->next;
  10ba16:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10ba19:	8b 49 04             	mov    0x4(%ecx),%ecx
  10ba1c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10ba1f:	39 c1                	cmp    %eax,%ecx
  10ba21:	0f 84 2b 00 00 00    	je     10ba52 <segment_check+0x652>
  10ba27:	31 c0                	xor    %eax,%eax
  10ba29:	89 c1                	mov    %eax,%ecx
  10ba2b:	83 c1 0c             	add    $0xc,%ecx
  10ba2e:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
  10ba30:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10ba33:	01 c1                	add    %eax,%ecx
  10ba35:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        count ++, total += p->property;
  10ba38:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ba3b:	83 c0 01             	add    $0x1,%eax
  10ba3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10ba41:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10ba44:	8b 40 08             	mov    0x8(%eax),%eax
  10ba47:	03 45 ec             	add    -0x14(%ebp),%eax
  10ba4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
  10ba4d:	e9 b8 ff ff ff       	jmp    10ba0a <segment_check+0x60a>
    assert(total == nr_free_pages());
  10ba52:	e9 00 00 00 00       	jmp    10ba57 <segment_check+0x657>
  10ba57:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10ba5a:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10ba5d:	e8 ae 76 ff ff       	call   103110 <nr_free_pages>
  10ba62:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  10ba65:	39 c1                	cmp    %eax,%ecx
  10ba67:	0f 84 32 00 00 00    	je     10ba9f <segment_check+0x69f>
  10ba6d:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10ba73:	b9 16 01 00 00       	mov    $0x116,%ecx
  10ba78:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10ba7e:	8d 35 0f 02 11 00    	lea    0x11020f,%esi
  10ba84:	89 04 24             	mov    %eax,(%esp)
  10ba87:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
  10ba8e:	00 
  10ba8f:	89 54 24 08          	mov    %edx,0x8(%esp)
  10ba93:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10ba97:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10ba9a:	e8 b1 49 ff ff       	call   100450 <__panic>
  10ba9f:	e9 00 00 00 00       	jmp    10baa4 <segment_check+0x6a4>
}
  10baa4:	83 c4 7c             	add    $0x7c,%esp
  10baa7:	5e                   	pop    %esi
  10baa8:	5f                   	pop    %edi
  10baa9:	5b                   	pop    %ebx
  10baaa:	5d                   	pop    %ebp
  10baab:	c3                   	ret    
  10baac:	0f 1f 40 00          	nopl   0x0(%eax)

0010bab0 <alloc_check>:
alloc_check(void) {
  10bab0:	55                   	push   %ebp
  10bab1:	89 e5                	mov    %esp,%ebp
    size_t buddy_physical_size_store = buddy_physical_size;
  10bab3:	56                   	push   %esi
  10bab4:	81 ec f4 00 00 00    	sub    $0xf4,%esp
  10baba:	a1 04 49 11 00       	mov    0x114904,%eax
  10babf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for (struct Page *p = buddy_physical; p < buddy_physical + 1026; p++)
  10bac2:	a1 14 49 11 00       	mov    0x114914,%eax
  10bac7:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10baca:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10bacd:	8b 0d 14 49 11 00    	mov    0x114914,%ecx
  10bad3:	81 c1 28 50 00 00    	add    $0x5028,%ecx
  10bad9:	39 c8                	cmp    %ecx,%eax
  10badb:	0f 83 27 00 00 00    	jae    10bb08 <alloc_check+0x58>
        SetPageReserved(p);
  10bae1:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10bae4:	83 c0 04             	add    $0x4,%eax
  10bae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10baee:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  10baf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10baf4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10baf7:	0f ab 08             	bts    %ecx,(%eax)
    for (struct Page *p = buddy_physical; p < buddy_physical + 1026; p++)
  10bafa:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10bafd:	83 c0 14             	add    $0x14,%eax
  10bb00:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10bb03:	e9 c2 ff ff ff       	jmp    10baca <alloc_check+0x1a>
    buddy_init();
  10bb08:	e8 73 b4 ff ff       	call   106f80 <buddy_init>
  10bb0d:	b8 02 04 00 00       	mov    $0x402,%eax
    buddy_init_memmap(buddy_physical, 1026);
  10bb12:	8b 0d 14 49 11 00    	mov    0x114914,%ecx
  10bb18:	89 0c 24             	mov    %ecx,(%esp)
  10bb1b:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
  10bb22:	00 
  10bb23:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10bb26:	e8 85 b4 ff ff       	call   106fb0 <buddy_init_memmap>
    p0 = p1 = p2 = NULL;
  10bb2b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10bb32:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
  10bb39:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  10bb40:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p0 = alloc_page()) != NULL);
  10bb45:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10bb4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10bb4f:	e8 bc 74 ff ff       	call   103010 <alloc_pages>
  10bb54:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10bb57:	83 f8 00             	cmp    $0x0,%eax
  10bb5a:	0f 85 32 00 00 00    	jne    10bb92 <alloc_check+0xe2>
  10bb60:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bb66:	b9 27 01 00 00       	mov    $0x127,%ecx
  10bb6b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bb71:	8d 35 28 02 11 00    	lea    0x110228,%esi
  10bb77:	89 04 24             	mov    %eax,(%esp)
  10bb7a:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
  10bb81:	00 
  10bb82:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bb86:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bb8a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10bb8d:	e8 be 48 ff ff       	call   100450 <__panic>
  10bb92:	e9 00 00 00 00       	jmp    10bb97 <alloc_check+0xe7>
    assert((p1 = alloc_page()) != NULL);
  10bb97:	e9 00 00 00 00       	jmp    10bb9c <alloc_check+0xec>
  10bb9c:	b8 01 00 00 00       	mov    $0x1,%eax
  10bba1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10bba8:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10bbab:	e8 60 74 ff ff       	call   103010 <alloc_pages>
  10bbb0:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10bbb3:	83 f8 00             	cmp    $0x0,%eax
  10bbb6:	0f 85 32 00 00 00    	jne    10bbee <alloc_check+0x13e>
  10bbbc:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bbc2:	b9 28 01 00 00       	mov    $0x128,%ecx
  10bbc7:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bbcd:	8d 35 44 02 11 00    	lea    0x110244,%esi
  10bbd3:	89 04 24             	mov    %eax,(%esp)
  10bbd6:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
  10bbdd:	00 
  10bbde:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bbe2:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bbe6:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  10bbe9:	e8 62 48 ff ff       	call   100450 <__panic>
  10bbee:	e9 00 00 00 00       	jmp    10bbf3 <alloc_check+0x143>
    assert((p2 = alloc_page()) != NULL);
  10bbf3:	e9 00 00 00 00       	jmp    10bbf8 <alloc_check+0x148>
  10bbf8:	b8 01 00 00 00       	mov    $0x1,%eax
  10bbfd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10bc04:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10bc07:	e8 04 74 ff ff       	call   103010 <alloc_pages>
  10bc0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10bc0f:	83 f8 00             	cmp    $0x0,%eax
  10bc12:	0f 85 32 00 00 00    	jne    10bc4a <alloc_check+0x19a>
  10bc18:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bc1e:	b9 29 01 00 00       	mov    $0x129,%ecx
  10bc23:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bc29:	8d 35 60 02 11 00    	lea    0x110260,%esi
  10bc2f:	89 04 24             	mov    %eax,(%esp)
  10bc32:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
  10bc39:	00 
  10bc3a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bc3e:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bc42:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10bc45:	e8 06 48 ff ff       	call   100450 <__panic>
  10bc4a:	e9 00 00 00 00       	jmp    10bc4f <alloc_check+0x19f>
    assert((p3 = alloc_page()) != NULL);
  10bc4f:	e9 00 00 00 00       	jmp    10bc54 <alloc_check+0x1a4>
  10bc54:	b8 01 00 00 00       	mov    $0x1,%eax
  10bc59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10bc60:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10bc63:	e8 a8 73 ff ff       	call   103010 <alloc_pages>
  10bc68:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10bc6b:	83 f8 00             	cmp    $0x0,%eax
  10bc6e:	0f 85 32 00 00 00    	jne    10bca6 <alloc_check+0x1f6>
  10bc74:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bc7a:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  10bc7f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bc85:	8d 35 7c 02 11 00    	lea    0x11027c,%esi
  10bc8b:	89 04 24             	mov    %eax,(%esp)
  10bc8e:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
  10bc95:	00 
  10bc96:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bc9a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bc9e:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  10bca1:	e8 aa 47 ff ff       	call   100450 <__panic>
  10bca6:	e9 00 00 00 00       	jmp    10bcab <alloc_check+0x1fb>
    assert(p0 + 1 == p1);
  10bcab:	e9 00 00 00 00       	jmp    10bcb0 <alloc_check+0x200>
  10bcb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10bcb3:	83 c0 14             	add    $0x14,%eax
  10bcb6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
  10bcb9:	0f 84 32 00 00 00    	je     10bcf1 <alloc_check+0x241>
  10bcbf:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bcc5:	b9 2c 01 00 00       	mov    $0x12c,%ecx
  10bcca:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bcd0:	8d 35 98 02 11 00    	lea    0x110298,%esi
  10bcd6:	89 04 24             	mov    %eax,(%esp)
  10bcd9:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
  10bce0:	00 
  10bce1:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bce5:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bce9:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  10bcec:	e8 5f 47 ff ff       	call   100450 <__panic>
  10bcf1:	e9 00 00 00 00       	jmp    10bcf6 <alloc_check+0x246>
    assert(p1 + 1 == p2);
  10bcf6:	e9 00 00 00 00       	jmp    10bcfb <alloc_check+0x24b>
  10bcfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10bcfe:	83 c0 14             	add    $0x14,%eax
  10bd01:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
  10bd04:	0f 84 32 00 00 00    	je     10bd3c <alloc_check+0x28c>
  10bd0a:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bd10:	b9 2d 01 00 00       	mov    $0x12d,%ecx
  10bd15:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bd1b:	8d 35 a5 02 11 00    	lea    0x1102a5,%esi
  10bd21:	89 04 24             	mov    %eax,(%esp)
  10bd24:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
  10bd2b:	00 
  10bd2c:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bd30:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bd34:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
  10bd37:	e8 14 47 ff ff       	call   100450 <__panic>
  10bd3c:	e9 00 00 00 00       	jmp    10bd41 <alloc_check+0x291>
    assert(p2 + 1 == p3);
  10bd41:	e9 00 00 00 00       	jmp    10bd46 <alloc_check+0x296>
  10bd46:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10bd49:	83 c0 14             	add    $0x14,%eax
  10bd4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  10bd4f:	0f 84 32 00 00 00    	je     10bd87 <alloc_check+0x2d7>
  10bd55:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bd5b:	b9 2e 01 00 00       	mov    $0x12e,%ecx
  10bd60:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bd66:	8d 35 b2 02 11 00    	lea    0x1102b2,%esi
  10bd6c:	89 04 24             	mov    %eax,(%esp)
  10bd6f:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
  10bd76:	00 
  10bd77:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bd7b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bd7f:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  10bd82:	e8 c9 46 ff ff       	call   100450 <__panic>
  10bd87:	e9 00 00 00 00       	jmp    10bd8c <alloc_check+0x2dc>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0 && page_ref(p3) == 0);
  10bd8c:	e9 00 00 00 00       	jmp    10bd91 <alloc_check+0x2e1>
  10bd91:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10bd94:	89 04 24             	mov    %eax,(%esp)
  10bd97:	e8 b4 06 00 00       	call   10c450 <page_ref>
  10bd9c:	83 f8 00             	cmp    $0x0,%eax
  10bd9f:	0f 85 3c 00 00 00    	jne    10bde1 <alloc_check+0x331>
  10bda5:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10bda8:	89 04 24             	mov    %eax,(%esp)
  10bdab:	e8 a0 06 00 00       	call   10c450 <page_ref>
  10bdb0:	83 f8 00             	cmp    $0x0,%eax
  10bdb3:	0f 85 28 00 00 00    	jne    10bde1 <alloc_check+0x331>
  10bdb9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10bdbc:	89 04 24             	mov    %eax,(%esp)
  10bdbf:	e8 8c 06 00 00       	call   10c450 <page_ref>
  10bdc4:	83 f8 00             	cmp    $0x0,%eax
  10bdc7:	0f 85 14 00 00 00    	jne    10bde1 <alloc_check+0x331>
  10bdcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10bdd0:	89 04 24             	mov    %eax,(%esp)
  10bdd3:	e8 78 06 00 00       	call   10c450 <page_ref>
  10bdd8:	83 f8 00             	cmp    $0x0,%eax
  10bddb:	0f 84 32 00 00 00    	je     10be13 <alloc_check+0x363>
  10bde1:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bde7:	b9 2f 01 00 00       	mov    $0x12f,%ecx
  10bdec:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bdf2:	8d 35 bf 02 11 00    	lea    0x1102bf,%esi
  10bdf8:	89 04 24             	mov    %eax,(%esp)
  10bdfb:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
  10be02:	00 
  10be03:	89 54 24 08          	mov    %edx,0x8(%esp)
  10be07:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10be0b:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
  10be0e:	e8 3d 46 ff ff       	call   100450 <__panic>
  10be13:	e9 00 00 00 00       	jmp    10be18 <alloc_check+0x368>
    assert(page2pa(p0) < npage * PGSIZE);
  10be18:	e9 00 00 00 00       	jmp    10be1d <alloc_check+0x36d>
  10be1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10be20:	89 04 24             	mov    %eax,(%esp)
  10be23:	e8 28 f1 ff ff       	call   10af50 <page2pa>
  10be28:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10be2e:	c1 e1 0c             	shl    $0xc,%ecx
  10be31:	39 c8                	cmp    %ecx,%eax
  10be33:	0f 82 32 00 00 00    	jb     10be6b <alloc_check+0x3bb>
  10be39:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10be3f:	b9 31 01 00 00       	mov    $0x131,%ecx
  10be44:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10be4a:	8d 35 10 03 11 00    	lea    0x110310,%esi
  10be50:	89 04 24             	mov    %eax,(%esp)
  10be53:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
  10be5a:	00 
  10be5b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10be5f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10be63:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10be66:	e8 e5 45 ff ff       	call   100450 <__panic>
  10be6b:	e9 00 00 00 00       	jmp    10be70 <alloc_check+0x3c0>
    assert(page2pa(p1) < npage * PGSIZE);
  10be70:	e9 00 00 00 00       	jmp    10be75 <alloc_check+0x3c5>
  10be75:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10be78:	89 04 24             	mov    %eax,(%esp)
  10be7b:	e8 d0 f0 ff ff       	call   10af50 <page2pa>
  10be80:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10be86:	c1 e1 0c             	shl    $0xc,%ecx
  10be89:	39 c8                	cmp    %ecx,%eax
  10be8b:	0f 82 32 00 00 00    	jb     10bec3 <alloc_check+0x413>
  10be91:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10be97:	b9 32 01 00 00       	mov    $0x132,%ecx
  10be9c:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bea2:	8d 35 2d 03 11 00    	lea    0x11032d,%esi
  10bea8:	89 04 24             	mov    %eax,(%esp)
  10beab:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
  10beb2:	00 
  10beb3:	89 54 24 08          	mov    %edx,0x8(%esp)
  10beb7:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bebb:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  10bebe:	e8 8d 45 ff ff       	call   100450 <__panic>
  10bec3:	e9 00 00 00 00       	jmp    10bec8 <alloc_check+0x418>
    assert(page2pa(p2) < npage * PGSIZE);
  10bec8:	e9 00 00 00 00       	jmp    10becd <alloc_check+0x41d>
  10becd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10bed0:	89 04 24             	mov    %eax,(%esp)
  10bed3:	e8 78 f0 ff ff       	call   10af50 <page2pa>
  10bed8:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10bede:	c1 e1 0c             	shl    $0xc,%ecx
  10bee1:	39 c8                	cmp    %ecx,%eax
  10bee3:	0f 82 32 00 00 00    	jb     10bf1b <alloc_check+0x46b>
  10bee9:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10beef:	b9 33 01 00 00       	mov    $0x133,%ecx
  10bef4:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10befa:	8d 35 4a 03 11 00    	lea    0x11034a,%esi
  10bf00:	89 04 24             	mov    %eax,(%esp)
  10bf03:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
  10bf0a:	00 
  10bf0b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bf0f:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bf13:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  10bf16:	e8 35 45 ff ff       	call   100450 <__panic>
  10bf1b:	e9 00 00 00 00       	jmp    10bf20 <alloc_check+0x470>
    assert(page2pa(p3) < npage * PGSIZE);
  10bf20:	e9 00 00 00 00       	jmp    10bf25 <alloc_check+0x475>
  10bf25:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10bf28:	89 04 24             	mov    %eax,(%esp)
  10bf2b:	e8 20 f0 ff ff       	call   10af50 <page2pa>
  10bf30:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10bf36:	c1 e1 0c             	shl    $0xc,%ecx
  10bf39:	39 c8                	cmp    %ecx,%eax
  10bf3b:	0f 82 35 00 00 00    	jb     10bf76 <alloc_check+0x4c6>
  10bf41:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bf47:	b9 34 01 00 00       	mov    $0x134,%ecx
  10bf4c:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bf52:	8d 35 67 03 11 00    	lea    0x110367,%esi
  10bf58:	89 04 24             	mov    %eax,(%esp)
  10bf5b:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
  10bf62:	00 
  10bf63:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bf67:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bf6b:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  10bf71:	e8 da 44 ff ff       	call   100450 <__panic>
  10bf76:	e9 00 00 00 00       	jmp    10bf7b <alloc_check+0x4cb>
  10bf7b:	8d 05 30 49 11 00    	lea    0x114930,%eax
    list_entry_t *le = &free_list;
  10bf81:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10bf84:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while ((le = list_next(le)) != &free_list) {
  10bf8a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10bf8d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10bf90:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10bf93:	8b 49 04             	mov    0x4(%ecx),%ecx
  10bf96:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  10bf99:	39 c1                	cmp    %eax,%ecx
  10bf9b:	0f 84 67 00 00 00    	je     10c008 <alloc_check+0x558>
  10bfa1:	31 c0                	xor    %eax,%eax
  10bfa3:	89 c1                	mov    %eax,%ecx
  10bfa5:	83 c1 0c             	add    $0xc,%ecx
  10bfa8:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
  10bfaa:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10bfad:	01 c1                	add    %eax,%ecx
  10bfaf:	89 4d c8             	mov    %ecx,-0x38(%ebp)
        assert(buddy_alloc_pages(p->property) != NULL);
  10bfb2:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10bfb5:	8b 40 08             	mov    0x8(%eax),%eax
  10bfb8:	89 04 24             	mov    %eax,(%esp)
  10bfbb:	e8 10 b1 ff ff       	call   1070d0 <buddy_alloc_pages>
  10bfc0:	83 f8 00             	cmp    $0x0,%eax
  10bfc3:	0f 85 35 00 00 00    	jne    10bffe <alloc_check+0x54e>
  10bfc9:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10bfcf:	b9 39 01 00 00       	mov    $0x139,%ecx
  10bfd4:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10bfda:	8d 35 84 03 11 00    	lea    0x110384,%esi
  10bfe0:	89 04 24             	mov    %eax,(%esp)
  10bfe3:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
  10bfea:	00 
  10bfeb:	89 54 24 08          	mov    %edx,0x8(%esp)
  10bfef:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10bff3:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  10bff9:	e8 52 44 ff ff       	call   100450 <__panic>
  10bffe:	e9 00 00 00 00       	jmp    10c003 <alloc_check+0x553>
    while ((le = list_next(le)) != &free_list) {
  10c003:	e9 7c ff ff ff       	jmp    10bf84 <alloc_check+0x4d4>
    assert(alloc_page() == NULL);
  10c008:	e9 00 00 00 00       	jmp    10c00d <alloc_check+0x55d>
  10c00d:	b8 01 00 00 00       	mov    $0x1,%eax
  10c012:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10c019:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10c01f:	e8 ec 6f ff ff       	call   103010 <alloc_pages>
  10c024:	83 f8 00             	cmp    $0x0,%eax
  10c027:	0f 84 35 00 00 00    	je     10c062 <alloc_check+0x5b2>
  10c02d:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c033:	b9 3c 01 00 00       	mov    $0x13c,%ecx
  10c038:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c03e:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10c044:	89 04 24             	mov    %eax,(%esp)
  10c047:	c7 44 24 04 3c 01 00 	movl   $0x13c,0x4(%esp)
  10c04e:	00 
  10c04f:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c053:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c057:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  10c05d:	e8 ee 43 ff ff       	call   100450 <__panic>
  10c062:	e9 00 00 00 00       	jmp    10c067 <alloc_check+0x5b7>
  10c067:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
  10c06c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10c06f:	89 0c 24             	mov    %ecx,(%esp)
  10c072:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10c079:	00 
  10c07a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  10c080:	e8 3b 70 ff ff       	call   1030c0 <free_pages>
  10c085:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
  10c08a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10c08d:	89 0c 24             	mov    %ecx,(%esp)
  10c090:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10c097:	00 
  10c098:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10c09e:	e8 1d 70 ff ff       	call   1030c0 <free_pages>
  10c0a3:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
  10c0a8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10c0ab:	89 0c 24             	mov    %ecx,(%esp)
  10c0ae:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10c0b5:	00 
  10c0b6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10c0bc:	e8 ff 6f ff ff       	call   1030c0 <free_pages>
    assert(nr_free == 3);
  10c0c1:	83 3d 38 49 11 00 03 	cmpl   $0x3,0x114938
  10c0c8:	0f 84 35 00 00 00    	je     10c103 <alloc_check+0x653>
  10c0ce:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c0d4:	b9 42 01 00 00       	mov    $0x142,%ecx
  10c0d9:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c0df:	8d 35 c0 03 11 00    	lea    0x1103c0,%esi
  10c0e5:	89 04 24             	mov    %eax,(%esp)
  10c0e8:	c7 44 24 04 42 01 00 	movl   $0x142,0x4(%esp)
  10c0ef:	00 
  10c0f0:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c0f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c0f8:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  10c0fe:	e8 4d 43 ff ff       	call   100450 <__panic>
  10c103:	e9 00 00 00 00       	jmp    10c108 <alloc_check+0x658>
    assert((p1 = alloc_page()) != NULL);
  10c108:	e9 00 00 00 00       	jmp    10c10d <alloc_check+0x65d>
  10c10d:	b8 01 00 00 00       	mov    $0x1,%eax
  10c112:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10c119:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  10c11f:	e8 ec 6e ff ff       	call   103010 <alloc_pages>
  10c124:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10c127:	83 f8 00             	cmp    $0x0,%eax
  10c12a:	0f 85 35 00 00 00    	jne    10c165 <alloc_check+0x6b5>
  10c130:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c136:	b9 44 01 00 00       	mov    $0x144,%ecx
  10c13b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c141:	8d 35 44 02 11 00    	lea    0x110244,%esi
  10c147:	89 04 24             	mov    %eax,(%esp)
  10c14a:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
  10c151:	00 
  10c152:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c156:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c15a:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
  10c160:	e8 eb 42 ff ff       	call   100450 <__panic>
  10c165:	e9 00 00 00 00       	jmp    10c16a <alloc_check+0x6ba>
    assert((p0 = alloc_pages(2)) != NULL);
  10c16a:	e9 00 00 00 00       	jmp    10c16f <alloc_check+0x6bf>
  10c16f:	b8 02 00 00 00       	mov    $0x2,%eax
  10c174:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  10c17b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  10c181:	e8 8a 6e ff ff       	call   103010 <alloc_pages>
  10c186:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10c189:	83 f8 00             	cmp    $0x0,%eax
  10c18c:	0f 85 35 00 00 00    	jne    10c1c7 <alloc_check+0x717>
  10c192:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c198:	b9 45 01 00 00       	mov    $0x145,%ecx
  10c19d:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c1a3:	8d 35 cd 03 11 00    	lea    0x1103cd,%esi
  10c1a9:	89 04 24             	mov    %eax,(%esp)
  10c1ac:	c7 44 24 04 45 01 00 	movl   $0x145,0x4(%esp)
  10c1b3:	00 
  10c1b4:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c1b8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c1bc:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
  10c1c2:	e8 89 42 ff ff       	call   100450 <__panic>
  10c1c7:	e9 00 00 00 00       	jmp    10c1cc <alloc_check+0x71c>
    assert(p0 + 2 == p1);
  10c1cc:	e9 00 00 00 00       	jmp    10c1d1 <alloc_check+0x721>
  10c1d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10c1d4:	83 c0 28             	add    $0x28,%eax
  10c1d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
  10c1da:	0f 84 35 00 00 00    	je     10c215 <alloc_check+0x765>
  10c1e0:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c1e6:	b9 46 01 00 00       	mov    $0x146,%ecx
  10c1eb:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c1f1:	8d 35 eb 03 11 00    	lea    0x1103eb,%esi
  10c1f7:	89 04 24             	mov    %eax,(%esp)
  10c1fa:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
  10c201:	00 
  10c202:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c206:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c20a:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  10c210:	e8 3b 42 ff ff       	call   100450 <__panic>
  10c215:	e9 00 00 00 00       	jmp    10c21a <alloc_check+0x76a>
    assert(alloc_page() == NULL);
  10c21a:	e9 00 00 00 00       	jmp    10c21f <alloc_check+0x76f>
  10c21f:	b8 01 00 00 00       	mov    $0x1,%eax
  10c224:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10c22b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  10c231:	e8 da 6d ff ff       	call   103010 <alloc_pages>
  10c236:	83 f8 00             	cmp    $0x0,%eax
  10c239:	0f 84 35 00 00 00    	je     10c274 <alloc_check+0x7c4>
  10c23f:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c245:	b9 48 01 00 00       	mov    $0x148,%ecx
  10c24a:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c250:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10c256:	89 04 24             	mov    %eax,(%esp)
  10c259:	c7 44 24 04 48 01 00 	movl   $0x148,0x4(%esp)
  10c260:	00 
  10c261:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c265:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c269:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%ebp)
  10c26f:	e8 dc 41 ff ff       	call   100450 <__panic>
  10c274:	e9 00 00 00 00       	jmp    10c279 <alloc_check+0x7c9>
  10c279:	b8 02 00 00 00       	mov    $0x2,%eax
    free_pages(p0, 2);
  10c27e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10c281:	89 0c 24             	mov    %ecx,(%esp)
  10c284:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10c28b:	00 
  10c28c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  10c292:	e8 29 6e ff ff       	call   1030c0 <free_pages>
  10c297:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
  10c29c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10c29f:	89 0c 24             	mov    %ecx,(%esp)
  10c2a2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10c2a9:	00 
  10c2aa:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
  10c2b0:	e8 0b 6e ff ff       	call   1030c0 <free_pages>
  10c2b5:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p3);
  10c2ba:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10c2bd:	89 0c 24             	mov    %ecx,(%esp)
  10c2c0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10c2c7:	00 
  10c2c8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
  10c2ce:	e8 ed 6d ff ff       	call   1030c0 <free_pages>
  10c2d3:	b8 04 00 00 00       	mov    $0x4,%eax
    assert((p = alloc_pages(4)) == p0);
  10c2d8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10c2df:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  10c2e5:	e8 26 6d ff ff       	call   103010 <alloc_pages>
  10c2ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10c2ed:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  10c2f0:	0f 84 35 00 00 00    	je     10c32b <alloc_check+0x87b>
  10c2f6:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c2fc:	b9 4f 01 00 00       	mov    $0x14f,%ecx
  10c301:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c307:	8d 35 f8 03 11 00    	lea    0x1103f8,%esi
  10c30d:	89 04 24             	mov    %eax,(%esp)
  10c310:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
  10c317:	00 
  10c318:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c31c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c320:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%ebp)
  10c326:	e8 25 41 ff ff       	call   100450 <__panic>
  10c32b:	e9 00 00 00 00       	jmp    10c330 <alloc_check+0x880>
    assert(alloc_page() == NULL);
  10c330:	e9 00 00 00 00       	jmp    10c335 <alloc_check+0x885>
  10c335:	b8 01 00 00 00       	mov    $0x1,%eax
  10c33a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10c341:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
  10c347:	e8 c4 6c ff ff       	call   103010 <alloc_pages>
  10c34c:	83 f8 00             	cmp    $0x0,%eax
  10c34f:	0f 84 35 00 00 00    	je     10c38a <alloc_check+0x8da>
  10c355:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c35b:	b9 50 01 00 00       	mov    $0x150,%ecx
  10c360:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c366:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10c36c:	89 04 24             	mov    %eax,(%esp)
  10c36f:	c7 44 24 04 50 01 00 	movl   $0x150,0x4(%esp)
  10c376:	00 
  10c377:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c37b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c37f:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
  10c385:	e8 c6 40 ff ff       	call   100450 <__panic>
  10c38a:	e9 00 00 00 00       	jmp    10c38f <alloc_check+0x8df>
    assert(nr_free == 0);
  10c38f:	e9 00 00 00 00       	jmp    10c394 <alloc_check+0x8e4>
  10c394:	83 3d 38 49 11 00 00 	cmpl   $0x0,0x114938
  10c39b:	0f 84 35 00 00 00    	je     10c3d6 <alloc_check+0x926>
  10c3a1:	8d 05 c7 00 11 00    	lea    0x1100c7,%eax
  10c3a7:	b9 52 01 00 00       	mov    $0x152,%ecx
  10c3ac:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c3b2:	8d 35 13 04 11 00    	lea    0x110413,%esi
  10c3b8:	89 04 24             	mov    %eax,(%esp)
  10c3bb:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
  10c3c2:	00 
  10c3c3:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c3c7:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c3cb:	89 8d 24 ff ff ff    	mov    %ecx,-0xdc(%ebp)
  10c3d1:	e8 7a 40 ff ff       	call   100450 <__panic>
  10c3d6:	e9 00 00 00 00       	jmp    10c3db <alloc_check+0x92b>
    for (struct Page *p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
  10c3db:	a1 14 49 11 00       	mov    0x114914,%eax
  10c3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10c3e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c3e6:	8b 0d 14 49 11 00    	mov    0x114914,%ecx
  10c3ec:	6b 55 e4 14          	imul   $0x14,-0x1c(%ebp),%edx
  10c3f0:	01 d1                	add    %edx,%ecx
  10c3f2:	39 c8                	cmp    %ecx,%eax
  10c3f4:	0f 83 27 00 00 00    	jae    10c421 <alloc_check+0x971>
        SetPageReserved(p);
  10c3fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c3fd:	83 c0 04             	add    $0x4,%eax
  10c400:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10c407:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10c40a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c40d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10c410:	0f ab 08             	bts    %ecx,(%eax)
    for (struct Page *p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
  10c413:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c416:	83 c0 14             	add    $0x14,%eax
  10c419:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10c41c:	e9 c2 ff ff ff       	jmp    10c3e3 <alloc_check+0x933>
    buddy_init();
  10c421:	e8 5a ab ff ff       	call   106f80 <buddy_init>
    buddy_init_memmap(buddy_physical, buddy_physical_size_store);
  10c426:	a1 14 49 11 00       	mov    0x114914,%eax
  10c42b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10c42e:	89 04 24             	mov    %eax,(%esp)
  10c431:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10c435:	e8 76 ab ff ff       	call   106fb0 <buddy_init_memmap>
}
  10c43a:	81 c4 f4 00 00 00    	add    $0xf4,%esp
  10c440:	5e                   	pop    %esi
  10c441:	5d                   	pop    %ebp
  10c442:	c3                   	ret    
  10c443:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10c44a:	84 00 00 00 00 00 

0010c450 <page_ref>:
page_ref(struct Page *page) {
  10c450:	55                   	push   %ebp
  10c451:	89 e5                	mov    %esp,%ebp
  10c453:	50                   	push   %eax
  10c454:	8b 45 08             	mov    0x8(%ebp),%eax
  10c457:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
  10c45a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10c45d:	8b 00                	mov    (%eax),%eax
  10c45f:	83 c4 04             	add    $0x4,%esp
  10c462:	5d                   	pop    %ebp
  10c463:	c3                   	ret    
  10c464:	66 90                	xchg   %ax,%ax
  10c466:	66 90                	xchg   %ax,%ax
  10c468:	66 90                	xchg   %ax,%ax
  10c46a:	66 90                	xchg   %ax,%ax
  10c46c:	66 90                	xchg   %ax,%ax
  10c46e:	66 90                	xchg   %ax,%ax

0010c470 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
  10c470:	55                   	push   %ebp
  10c471:	89 e5                	mov    %esp,%ebp
  10c473:	50                   	push   %eax
  10c474:	8d 05 30 49 11 00    	lea    0x114930,%eax
    list_init(&free_list);
  10c47a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
  10c47d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10c480:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10c483:	89 41 04             	mov    %eax,0x4(%ecx)
  10c486:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10c489:	89 01                	mov    %eax,(%ecx)
    nr_free = 0;
  10c48b:	c7 05 38 49 11 00 00 	movl   $0x0,0x114938
  10c492:	00 00 00 
}
  10c495:	83 c4 04             	add    $0x4,%esp
  10c498:	5d                   	pop    %ebp
  10c499:	c3                   	ret    
  10c49a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

0010c4a0 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
  10c4a0:	55                   	push   %ebp
  10c4a1:	89 e5                	mov    %esp,%ebp
  10c4a3:	56                   	push   %esi
  10c4a4:	83 ec 64             	sub    $0x64,%esp
  10c4a7:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c4aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c4ad:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  10c4b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    assert(n > 0);
  10c4b3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  10c4b7:	0f 87 32 00 00 00    	ja     10c4ef <default_init_memmap+0x4f>
  10c4bd:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10c4c3:	b9 46 00 00 00       	mov    $0x46,%ecx
  10c4c8:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c4ce:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  10c4d4:	89 04 24             	mov    %eax,(%esp)
  10c4d7:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
  10c4de:	00 
  10c4df:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c4e3:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c4e7:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  10c4ea:	e8 61 3f ff ff       	call   100450 <__panic>
  10c4ef:	e9 00 00 00 00       	jmp    10c4f4 <default_init_memmap+0x54>
    struct Page *p = base;
  10c4f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10c4f7:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (; p != base + n; p ++) {
  10c4fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c4fd:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10c500:	6b 55 c4 14          	imul   $0x14,-0x3c(%ebp),%edx
  10c504:	01 d1                	add    %edx,%ecx
  10c506:	39 c8                	cmp    %ecx,%eax
  10c508:	0f 84 aa 00 00 00    	je     10c5b8 <default_init_memmap+0x118>
        assert(PageReserved(p));
  10c50e:	e9 00 00 00 00       	jmp    10c513 <default_init_memmap+0x73>
  10c513:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c516:	83 c0 04             	add    $0x4,%eax
  10c519:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
  10c520:	89 45 d0             	mov    %eax,-0x30(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10c523:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10c526:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10c529:	0f a3 08             	bt     %ecx,(%eax)
  10c52c:	19 c0                	sbb    %eax,%eax
  10c52e:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return oldbit != 0;
  10c531:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  10c535:	0f 95 c2             	setne  %dl
  10c538:	80 e2 01             	and    $0x1,%dl
  10c53b:	0f b6 c2             	movzbl %dl,%eax
  10c53e:	83 f8 00             	cmp    $0x0,%eax
  10c541:	0f 85 32 00 00 00    	jne    10c579 <default_init_memmap+0xd9>
  10c547:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10c54d:	b9 49 00 00 00       	mov    $0x49,%ecx
  10c552:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c558:	8d 35 e4 00 11 00    	lea    0x1100e4,%esi
  10c55e:	89 04 24             	mov    %eax,(%esp)
  10c561:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
  10c568:	00 
  10c569:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c56d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c571:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10c574:	e8 d7 3e ff ff       	call   100450 <__panic>
  10c579:	e9 00 00 00 00       	jmp    10c57e <default_init_memmap+0xde>
  10c57e:	31 c0                	xor    %eax,%eax
        p->flags = p->property = 0;
  10c580:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10c583:	c7 41 08 00 00 00 00 	movl   $0x0,0x8(%ecx)
  10c58a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10c58d:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
  10c594:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10c597:	89 0c 24             	mov    %ecx,(%esp)
  10c59a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10c5a1:	00 
  10c5a2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10c5a5:	e8 16 10 00 00       	call   10d5c0 <set_page_ref>
    for (; p != base + n; p ++) {
  10c5aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c5ad:	83 c0 14             	add    $0x14,%eax
  10c5b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10c5b3:	e9 42 ff ff ff       	jmp    10c4fa <default_init_memmap+0x5a>
    }
    base->property = n;
  10c5b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10c5bb:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10c5be:	89 41 08             	mov    %eax,0x8(%ecx)
    SetPageProperty(base);
  10c5c1:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10c5c4:	83 c0 04             	add    $0x4,%eax
  10c5c7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
  10c5ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  10c5d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10c5d4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10c5d7:	0f ab 08             	bts    %ecx,(%eax)
  10c5da:	8d 05 30 49 11 00    	lea    0x114930,%eax
    nr_free += n;
  10c5e0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10c5e3:	03 0d 38 49 11 00    	add    0x114938,%ecx
  10c5e9:	89 0d 38 49 11 00    	mov    %ecx,0x114938
    list_add(&free_list, &(base->page_link));
  10c5ef:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10c5f2:	83 c1 0c             	add    $0xc,%ecx
  10c5f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10c5f8:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
  10c5fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10c5fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10c601:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10c604:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
  10c607:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10c60a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10c60d:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10c610:	8b 52 04             	mov    0x4(%edx),%edx
  10c613:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10c616:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10c619:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
  10c61c:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10c61f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10c622:	89 01                	mov    %eax,(%ecx)
  10c624:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10c627:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  10c62a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c62d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10c630:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10c633:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c636:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10c639:	89 01                	mov    %eax,(%ecx)
}
  10c63b:	83 c4 64             	add    $0x64,%esp
  10c63e:	5e                   	pop    %esi
  10c63f:	5d                   	pop    %ebp
  10c640:	c3                   	ret    
  10c641:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10c648:	0f 1f 84 00 00 00 00 
  10c64f:	00 

0010c650 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
  10c650:	55                   	push   %ebp
  10c651:	89 e5                	mov    %esp,%ebp
  10c653:	56                   	push   %esi
  10c654:	83 ec 74             	sub    $0x74,%esp
  10c657:	8b 45 08             	mov    0x8(%ebp),%eax
  10c65a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    assert(n > 0);
  10c65d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
  10c661:	0f 87 32 00 00 00    	ja     10c699 <default_alloc_pages+0x49>
  10c667:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10c66d:	b9 55 00 00 00       	mov    $0x55,%ecx
  10c672:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c678:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  10c67e:	89 04 24             	mov    %eax,(%esp)
  10c681:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
  10c688:	00 
  10c689:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c68d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c691:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  10c694:	e8 b7 3d ff ff       	call   100450 <__panic>
  10c699:	e9 00 00 00 00       	jmp    10c69e <default_alloc_pages+0x4e>
    if (n > nr_free) {
  10c69e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10c6a1:	3b 05 38 49 11 00    	cmp    0x114938,%eax
  10c6a7:	0f 86 0c 00 00 00    	jbe    10c6b9 <default_alloc_pages+0x69>
        return NULL;
  10c6ad:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
  10c6b4:	e9 5c 01 00 00       	jmp    10c815 <default_alloc_pages+0x1c5>
  10c6b9:	8d 05 30 49 11 00    	lea    0x114930,%eax
    }
    struct Page *page = NULL;
  10c6bf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
    list_entry_t *le = &free_list;
  10c6c6:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10c6c9:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while ((le = list_next(le)) != &free_list) {
  10c6cf:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  10c6d2:	89 4d bc             	mov    %ecx,-0x44(%ebp)
    return listelm->next;
  10c6d5:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10c6d8:	8b 49 04             	mov    0x4(%ecx),%ecx
  10c6db:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  10c6de:	39 c1                	cmp    %eax,%ecx
  10c6e0:	0f 84 30 00 00 00    	je     10c716 <default_alloc_pages+0xc6>
  10c6e6:	31 c0                	xor    %eax,%eax
  10c6e8:	89 c1                	mov    %eax,%ecx
  10c6ea:	83 c1 0c             	add    $0xc,%ecx
  10c6ed:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
  10c6ef:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  10c6f2:	01 c1                	add    %eax,%ecx
  10c6f4:	89 4d a8             	mov    %ecx,-0x58(%ebp)
        if (p->property >= n) {
  10c6f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10c6fa:	8b 40 08             	mov    0x8(%eax),%eax
  10c6fd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
  10c700:	0f 82 0b 00 00 00    	jb     10c711 <default_alloc_pages+0xc1>
            page = p;
  10c706:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10c709:	89 45 b0             	mov    %eax,-0x50(%ebp)
            break;
  10c70c:	e9 05 00 00 00       	jmp    10c716 <default_alloc_pages+0xc6>
    while ((le = list_next(le)) != &free_list) {
  10c711:	e9 b3 ff ff ff       	jmp    10c6c9 <default_alloc_pages+0x79>
        }
    }
    if (page != NULL) {
  10c716:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
  10c71a:	0f 84 ef 00 00 00    	je     10c80f <default_alloc_pages+0x1bf>
        list_del(&(page->page_link));
  10c720:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c723:	83 c0 0c             	add    $0xc,%eax
  10c726:	89 45 c8             	mov    %eax,-0x38(%ebp)
    __list_del(listelm->prev, listelm->next);
  10c729:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10c72c:	8b 00                	mov    (%eax),%eax
  10c72e:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10c731:	8b 49 04             	mov    0x4(%ecx),%ecx
  10c734:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10c737:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    prev->next = next;
  10c73a:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10c73d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10c740:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
  10c743:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10c746:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10c749:	89 01                	mov    %eax,(%ecx)
        if (page->property > n) {
  10c74b:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c74e:	8b 40 08             	mov    0x8(%eax),%eax
  10c751:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
  10c754:	0f 86 8b 00 00 00    	jbe    10c7e5 <default_alloc_pages+0x195>
            struct Page *p = page + n;
  10c75a:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c75d:	6b 4d b4 14          	imul   $0x14,-0x4c(%ebp),%ecx
  10c761:	01 c8                	add    %ecx,%eax
  10c763:	89 45 a4             	mov    %eax,-0x5c(%ebp)
            p->property = page->property - n;
  10c766:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c769:	8b 40 08             	mov    0x8(%eax),%eax
  10c76c:	2b 45 b4             	sub    -0x4c(%ebp),%eax
  10c76f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10c772:	89 41 08             	mov    %eax,0x8(%ecx)
            SetPageProperty(p);
  10c775:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10c778:	83 c0 04             	add    $0x4,%eax
  10c77b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  10c782:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10c785:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c788:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10c78b:	0f ab 08             	bts    %ecx,(%eax)
            list_add(list_prev(le), &(p->page_link));
  10c78e:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10c791:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->prev;
  10c794:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c797:	8b 00                	mov    (%eax),%eax
  10c799:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10c79c:	83 c1 0c             	add    $0xc,%ecx
  10c79f:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10c7a2:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    list_add_after(listelm, elm);
  10c7a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10c7a8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10c7ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10c7ae:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
  10c7b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10c7b4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10c7b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10c7ba:	8b 52 04             	mov    0x4(%edx),%edx
  10c7bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10c7c0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10c7c3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    prev->next = next->prev = elm;
  10c7c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10c7c9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10c7cc:	89 01                	mov    %eax,(%ecx)
  10c7ce:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10c7d1:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  10c7d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10c7d7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10c7da:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10c7dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10c7e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10c7e3:	89 01                	mov    %eax,(%ecx)
        }
        nr_free -= n;
  10c7e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10c7e8:	8b 0d 38 49 11 00    	mov    0x114938,%ecx
  10c7ee:	29 c1                	sub    %eax,%ecx
  10c7f0:	89 0d 38 49 11 00    	mov    %ecx,0x114938
        ClearPageProperty(page);
  10c7f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c7f9:	83 c0 04             	add    $0x4,%eax
  10c7fc:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
  10c803:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  10c806:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10c809:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10c80c:	0f b3 08             	btr    %ecx,(%eax)
    }
    return page;
  10c80f:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10c812:	89 45 b8             	mov    %eax,-0x48(%ebp)
}
  10c815:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10c818:	83 c4 74             	add    $0x74,%esp
  10c81b:	5e                   	pop    %esi
  10c81c:	5d                   	pop    %ebp
  10c81d:	c3                   	ret    
  10c81e:	66 90                	xchg   %ax,%ax

0010c820 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
  10c820:	55                   	push   %ebp
  10c821:	89 e5                	mov    %esp,%ebp
  10c823:	56                   	push   %esi
  10c824:	81 ec b4 00 00 00    	sub    $0xb4,%esp
  10c82a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c82d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c830:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
  10c833:	89 45 80             	mov    %eax,-0x80(%ebp)
    assert(n > 0);
  10c836:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
  10c83a:	0f 87 35 00 00 00    	ja     10c875 <default_free_pages+0x55>
  10c840:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10c846:	b9 72 00 00 00       	mov    $0x72,%ecx
  10c84b:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c851:	8d 35 d7 00 11 00    	lea    0x1100d7,%esi
  10c857:	89 04 24             	mov    %eax,(%esp)
  10c85a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
  10c861:	00 
  10c862:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c866:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c86a:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10c870:	e8 db 3b ff ff       	call   100450 <__panic>
  10c875:	e9 00 00 00 00       	jmp    10c87a <default_free_pages+0x5a>
    struct Page *p = base;
  10c87a:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10c87d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
    for (; p != base + n; p ++) {
  10c883:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10c889:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10c88c:	6b 55 80 14          	imul   $0x14,-0x80(%ebp),%edx
  10c890:	01 d1                	add    %edx,%ecx
  10c892:	39 c8                	cmp    %ecx,%eax
  10c894:	0f 84 ec 00 00 00    	je     10c986 <default_free_pages+0x166>
        assert(!PageReserved(p) && !PageProperty(p));
  10c89a:	e9 00 00 00 00       	jmp    10c89f <default_free_pages+0x7f>
  10c89f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10c8a5:	83 c0 04             	add    $0x4,%eax
  10c8a8:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
  10c8af:	89 45 8c             	mov    %eax,-0x74(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10c8b2:	8b 45 8c             	mov    -0x74(%ebp),%eax
  10c8b5:	8b 4d 90             	mov    -0x70(%ebp),%ecx
  10c8b8:	0f a3 08             	bt     %ecx,(%eax)
  10c8bb:	19 c0                	sbb    %eax,%eax
  10c8bd:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
  10c8c0:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
  10c8c4:	0f 95 c2             	setne  %dl
  10c8c7:	80 e2 01             	and    $0x1,%dl
  10c8ca:	0f b6 c2             	movzbl %dl,%eax
  10c8cd:	83 f8 00             	cmp    $0x0,%eax
  10c8d0:	0f 85 37 00 00 00    	jne    10c90d <default_free_pages+0xed>
  10c8d6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10c8dc:	83 c0 04             	add    $0x4,%eax
  10c8df:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
  10c8e6:	89 45 98             	mov    %eax,-0x68(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10c8e9:	8b 45 98             	mov    -0x68(%ebp),%eax
  10c8ec:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10c8ef:	0f a3 08             	bt     %ecx,(%eax)
  10c8f2:	19 c0                	sbb    %eax,%eax
  10c8f4:	89 45 94             	mov    %eax,-0x6c(%ebp)
    return oldbit != 0;
  10c8f7:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
  10c8fb:	0f 95 c2             	setne  %dl
  10c8fe:	80 e2 01             	and    $0x1,%dl
  10c901:	0f b6 c2             	movzbl %dl,%eax
  10c904:	83 f8 00             	cmp    $0x0,%eax
  10c907:	0f 84 35 00 00 00    	je     10c942 <default_free_pages+0x122>
  10c90d:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10c913:	b9 75 00 00 00       	mov    $0x75,%ecx
  10c918:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10c91e:	8d 35 66 04 11 00    	lea    0x110466,%esi
  10c924:	89 04 24             	mov    %eax,(%esp)
  10c927:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
  10c92e:	00 
  10c92f:	89 54 24 08          	mov    %edx,0x8(%esp)
  10c933:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10c937:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  10c93d:	e8 0e 3b ff ff       	call   100450 <__panic>
  10c942:	e9 00 00 00 00       	jmp    10c947 <default_free_pages+0x127>
  10c947:	31 c0                	xor    %eax,%eax
        p->flags = 0;
  10c949:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  10c94f:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
  10c956:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  10c95c:	89 0c 24             	mov    %ecx,(%esp)
  10c95f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10c966:	00 
  10c967:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10c96d:	e8 4e 0c 00 00       	call   10d5c0 <set_page_ref>
    for (; p != base + n; p ++) {
  10c972:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10c978:	83 c0 14             	add    $0x14,%eax
  10c97b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10c981:	e9 fd fe ff ff       	jmp    10c883 <default_free_pages+0x63>
    }
    base->property = n;
  10c986:	8b 45 80             	mov    -0x80(%ebp),%eax
  10c989:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10c98c:	89 41 08             	mov    %eax,0x8(%ecx)
    SetPageProperty(base);
  10c98f:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10c992:	83 c0 04             	add    $0x4,%eax
  10c995:	c7 45 a4 01 00 00 00 	movl   $0x1,-0x5c(%ebp)
  10c99c:	89 45 a0             	mov    %eax,-0x60(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  10c99f:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10c9a2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10c9a5:	0f ab 08             	bts    %ecx,(%eax)
  10c9a8:	8d 05 30 49 11 00    	lea    0x114930,%eax
    // Find insert location
    list_entry_t *next_entry = list_next(&free_list);
  10c9ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return listelm->next;
  10c9b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10c9b4:	8b 40 04             	mov    0x4(%eax),%eax
  10c9b7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10c9bd:	31 c0                	xor    %eax,%eax
  10c9bf:	88 c1                	mov    %al,%cl
  10c9c1:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while (next_entry != &free_list && le2page(next_entry, page_link) < base)
  10c9c7:	39 85 78 ff ff ff    	cmp    %eax,-0x88(%ebp)
  10c9cd:	88 8d 63 ff ff ff    	mov    %cl,-0x9d(%ebp)
  10c9d3:	0f 84 1d 00 00 00    	je     10c9f6 <default_free_pages+0x1d6>
  10c9d9:	31 c0                	xor    %eax,%eax
  10c9db:	89 c1                	mov    %eax,%ecx
  10c9dd:	83 c1 0c             	add    $0xc,%ecx
  10c9e0:	29 c8                	sub    %ecx,%eax
  10c9e2:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  10c9e8:	01 c1                	add    %eax,%ecx
  10c9ea:	3b 4d 84             	cmp    -0x7c(%ebp),%ecx
  10c9ed:	0f 92 c2             	setb   %dl
  10c9f0:	88 95 63 ff ff ff    	mov    %dl,-0x9d(%ebp)
  10c9f6:	8a 85 63 ff ff ff    	mov    -0x9d(%ebp),%al
  10c9fc:	a8 01                	test   $0x1,%al
  10c9fe:	0f 85 05 00 00 00    	jne    10ca09 <default_free_pages+0x1e9>
  10ca04:	e9 1a 00 00 00       	jmp    10ca23 <default_free_pages+0x203>
        next_entry = list_next(next_entry);
  10ca09:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10ca0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10ca12:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10ca15:	8b 40 04             	mov    0x4(%eax),%eax
  10ca18:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
    while (next_entry != &free_list && le2page(next_entry, page_link) < base)
  10ca1e:	e9 9a ff ff ff       	jmp    10c9bd <default_free_pages+0x19d>
  10ca23:	8d 05 30 49 11 00    	lea    0x114930,%eax
    // Merge block
    list_entry_t *prev_entry = list_prev(next_entry);
  10ca29:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  10ca2f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    return listelm->prev;
  10ca32:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10ca35:	8b 09                	mov    (%ecx),%ecx
  10ca37:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
    list_entry_t *insert_entry = prev_entry;
  10ca3d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  10ca43:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
    if (prev_entry != &free_list) {
  10ca49:	39 85 74 ff ff ff    	cmp    %eax,-0x8c(%ebp)
  10ca4f:	0f 84 aa 00 00 00    	je     10caff <default_free_pages+0x2df>
  10ca55:	31 c0                	xor    %eax,%eax
  10ca57:	89 c1                	mov    %eax,%ecx
  10ca59:	83 c1 0c             	add    $0xc,%ecx
  10ca5c:	29 c8                	sub    %ecx,%eax
        p = le2page(prev_entry, page_link);
  10ca5e:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
  10ca64:	01 c1                	add    %eax,%ecx
  10ca66:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
        if (p + p->property == base) {
  10ca6c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10ca72:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  10ca78:	6b 49 08 14          	imul   $0x14,0x8(%ecx),%ecx
  10ca7c:	01 c8                	add    %ecx,%eax
  10ca7e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
  10ca81:	0f 85 73 00 00 00    	jne    10cafa <default_free_pages+0x2da>
            p->property += base->property;
  10ca87:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10ca8a:	8b 40 08             	mov    0x8(%eax),%eax
  10ca8d:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
  10ca93:	03 41 08             	add    0x8(%ecx),%eax
  10ca96:	89 41 08             	mov    %eax,0x8(%ecx)
            ClearPageProperty(base);
  10ca99:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10ca9c:	83 c0 04             	add    $0x4,%eax
  10ca9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
  10caa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
  10caa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10caac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10caaf:	0f b3 08             	btr    %ecx,(%eax)
            base = p;
  10cab2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10cab8:	89 45 84             	mov    %eax,-0x7c(%ebp)
            insert_entry = list_prev(prev_entry);
  10cabb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10cac1:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10cac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10cac7:	8b 00                	mov    (%eax),%eax
  10cac9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
            list_del(prev_entry);
  10cacf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  10cad5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_del(listelm->prev, listelm->next);
  10cad8:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10cadb:	8b 00                	mov    (%eax),%eax
  10cadd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10cae0:	8b 49 04             	mov    0x4(%ecx),%ecx
  10cae3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10cae6:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    prev->next = next;
  10cae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10caec:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10caef:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
  10caf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10caf5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10caf8:	89 01                	mov    %eax,(%ecx)
        }
    }
  10cafa:	e9 00 00 00 00       	jmp    10caff <default_free_pages+0x2df>
  10caff:	8d 05 30 49 11 00    	lea    0x114930,%eax
    if (next_entry != &free_list) {
  10cb05:	39 85 78 ff ff ff    	cmp    %eax,-0x88(%ebp)
  10cb0b:	0f 84 8d 00 00 00    	je     10cb9e <default_free_pages+0x37e>
  10cb11:	31 c0                	xor    %eax,%eax
  10cb13:	89 c1                	mov    %eax,%ecx
  10cb15:	83 c1 0c             	add    $0xc,%ecx
  10cb18:	29 c8                	sub    %ecx,%eax
        p = le2page(next_entry, page_link);
  10cb1a:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  10cb20:	01 c1                	add    %eax,%ecx
  10cb22:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
        if (base + base->property == p) {
  10cb28:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10cb2b:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10cb2e:	6b 49 08 14          	imul   $0x14,0x8(%ecx),%ecx
  10cb32:	01 c8                	add    %ecx,%eax
  10cb34:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
  10cb3a:	0f 85 59 00 00 00    	jne    10cb99 <default_free_pages+0x379>
            base->property += p->property;
  10cb40:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10cb46:	8b 40 08             	mov    0x8(%eax),%eax
  10cb49:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10cb4c:	03 41 08             	add    0x8(%ecx),%eax
  10cb4f:	89 41 08             	mov    %eax,0x8(%ecx)
            ClearPageProperty(p);
  10cb52:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
  10cb58:	83 c0 04             	add    $0x4,%eax
  10cb5b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
  10cb62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10cb65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10cb68:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10cb6b:	0f b3 08             	btr    %ecx,(%eax)
            list_del(next_entry);
  10cb6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
  10cb74:	89 45 c8             	mov    %eax,-0x38(%ebp)
    __list_del(listelm->prev, listelm->next);
  10cb77:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10cb7a:	8b 00                	mov    (%eax),%eax
  10cb7c:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10cb7f:	8b 49 04             	mov    0x4(%ecx),%ecx
  10cb82:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10cb85:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    prev->next = next;
  10cb88:	8b 45 cc             	mov    -0x34(%ebp),%eax
  10cb8b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10cb8e:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
  10cb91:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10cb94:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10cb97:	89 01                	mov    %eax,(%ecx)
        }
    }
  10cb99:	e9 00 00 00 00       	jmp    10cb9e <default_free_pages+0x37e>
    // Insert into free list
    nr_free += n;
  10cb9e:	8b 45 80             	mov    -0x80(%ebp),%eax
  10cba1:	03 05 38 49 11 00    	add    0x114938,%eax
  10cba7:	a3 38 49 11 00       	mov    %eax,0x114938
    list_add(insert_entry, &(base->page_link));
  10cbac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
  10cbb2:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10cbb5:	83 c1 0c             	add    $0xc,%ecx
  10cbb8:	89 45 b0             	mov    %eax,-0x50(%ebp)
  10cbbb:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    list_add_after(listelm, elm);
  10cbbe:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10cbc1:	8b 4d ac             	mov    -0x54(%ebp),%ecx
  10cbc4:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10cbc7:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    __list_add(elm, listelm, listelm->next);
  10cbca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10cbcd:	8b 4d b8             	mov    -0x48(%ebp),%ecx
  10cbd0:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10cbd3:	8b 52 04             	mov    0x4(%edx),%edx
  10cbd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10cbd9:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10cbdc:	89 55 bc             	mov    %edx,-0x44(%ebp)
    prev->next = next->prev = elm;
  10cbdf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10cbe2:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10cbe5:	89 01                	mov    %eax,(%ecx)
  10cbe7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10cbea:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
  10cbed:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10cbf0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10cbf3:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
  10cbf6:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10cbf9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10cbfc:	89 01                	mov    %eax,(%ecx)
}
  10cbfe:	81 c4 b4 00 00 00    	add    $0xb4,%esp
  10cc04:	5e                   	pop    %esi
  10cc05:	5d                   	pop    %ebp
  10cc06:	c3                   	ret    
  10cc07:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10cc0e:	00 00 

0010cc10 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
  10cc10:	55                   	push   %ebp
  10cc11:	89 e5                	mov    %esp,%ebp
    return nr_free;
  10cc13:	a1 38 49 11 00       	mov    0x114938,%eax
  10cc18:	5d                   	pop    %ebp
  10cc19:	c3                   	ret    
  10cc1a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

0010cc20 <default_check>:
}

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
  10cc20:	55                   	push   %ebp
  10cc21:	89 e5                	mov    %esp,%ebp
  10cc23:	56                   	push   %esi
  10cc24:	81 ec 24 01 00 00    	sub    $0x124,%esp
  10cc2a:	8d 05 30 49 11 00    	lea    0x114930,%eax
    int count = 0, total = 0;
  10cc30:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
  10cc37:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
    list_entry_t *le = &free_list;
  10cc3e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10cc41:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while ((le = list_next(le)) != &free_list) {
  10cc47:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10cc4a:	89 4d b0             	mov    %ecx,-0x50(%ebp)
    return listelm->next;
  10cc4d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
  10cc50:	8b 49 04             	mov    0x4(%ecx),%ecx
  10cc53:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10cc56:	39 c1                	cmp    %eax,%ecx
  10cc58:	0f 84 99 00 00 00    	je     10ccf7 <default_check+0xd7>
  10cc5e:	31 c0                	xor    %eax,%eax
  10cc60:	89 c1                	mov    %eax,%ecx
  10cc62:	83 c1 0c             	add    $0xc,%ecx
  10cc65:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
  10cc67:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10cc6a:	01 c1                	add    %eax,%ecx
  10cc6c:	89 4d a0             	mov    %ecx,-0x60(%ebp)
        assert(PageProperty(p));
  10cc6f:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10cc72:	83 c0 04             	add    $0x4,%eax
  10cc75:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
  10cc7c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10cc7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10cc82:	8b 4d cc             	mov    -0x34(%ebp),%ecx
  10cc85:	0f a3 08             	bt     %ecx,(%eax)
  10cc88:	19 c0                	sbb    %eax,%eax
  10cc8a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return oldbit != 0;
  10cc8d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  10cc91:	0f 95 c2             	setne  %dl
  10cc94:	80 e2 01             	and    $0x1,%dl
  10cc97:	0f b6 c2             	movzbl %dl,%eax
  10cc9a:	83 f8 00             	cmp    $0x0,%eax
  10cc9d:	0f 85 35 00 00 00    	jne    10ccd8 <default_check+0xb8>
  10cca3:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cca9:	b9 d9 00 00 00       	mov    $0xd9,%ecx
  10ccae:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10ccb4:	8d 35 7b 04 11 00    	lea    0x11047b,%esi
  10ccba:	89 04 24             	mov    %eax,(%esp)
  10ccbd:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
  10ccc4:	00 
  10ccc5:	89 54 24 08          	mov    %edx,0x8(%esp)
  10ccc9:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10cccd:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
  10ccd3:	e8 78 37 ff ff       	call   100450 <__panic>
  10ccd8:	e9 00 00 00 00       	jmp    10ccdd <default_check+0xbd>
        count ++, total += p->property;
  10ccdd:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10cce0:	83 c0 01             	add    $0x1,%eax
  10cce3:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10cce6:	8b 45 a0             	mov    -0x60(%ebp),%eax
  10cce9:	8b 40 08             	mov    0x8(%eax),%eax
  10ccec:	03 45 a8             	add    -0x58(%ebp),%eax
  10ccef:	89 45 a8             	mov    %eax,-0x58(%ebp)
    while ((le = list_next(le)) != &free_list) {
  10ccf2:	e9 4a ff ff ff       	jmp    10cc41 <default_check+0x21>
    }
    assert(total == nr_free_pages());
  10ccf7:	e9 00 00 00 00       	jmp    10ccfc <default_check+0xdc>
  10ccfc:	8b 45 a8             	mov    -0x58(%ebp),%eax
  10ccff:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10cd05:	e8 06 64 ff ff       	call   103110 <nr_free_pages>
  10cd0a:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
  10cd10:	39 c1                	cmp    %eax,%ecx
  10cd12:	0f 84 35 00 00 00    	je     10cd4d <default_check+0x12d>
  10cd18:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cd1e:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  10cd23:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cd29:	8d 35 0f 02 11 00    	lea    0x11020f,%esi
  10cd2f:	89 04 24             	mov    %eax,(%esp)
  10cd32:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
  10cd39:	00 
  10cd3a:	89 54 24 08          	mov    %edx,0x8(%esp)
  10cd3e:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10cd42:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
  10cd48:	e8 03 37 ff ff       	call   100450 <__panic>
  10cd4d:	e9 00 00 00 00       	jmp    10cd52 <default_check+0x132>

    basic_check();
  10cd52:	e8 89 08 00 00       	call   10d5e0 <basic_check>
  10cd57:	b8 05 00 00 00       	mov    $0x5,%eax

    struct Page *p0 = alloc_pages(5), *p1, *p2;
  10cd5c:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  10cd63:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
  10cd69:	e8 a2 62 ff ff       	call   103010 <alloc_pages>
  10cd6e:	89 45 9c             	mov    %eax,-0x64(%ebp)
    assert(p0 != NULL);
  10cd71:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
  10cd75:	0f 85 35 00 00 00    	jne    10cdb0 <default_check+0x190>
  10cd7b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cd81:	b9 e1 00 00 00       	mov    $0xe1,%ecx
  10cd86:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cd8c:	8d 35 6b fd 10 00    	lea    0x10fd6b,%esi
  10cd92:	89 04 24             	mov    %eax,(%esp)
  10cd95:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
  10cd9c:	00 
  10cd9d:	89 54 24 08          	mov    %edx,0x8(%esp)
  10cda1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10cda5:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
  10cdab:	e8 a0 36 ff ff       	call   100450 <__panic>
  10cdb0:	e9 00 00 00 00       	jmp    10cdb5 <default_check+0x195>
    assert(!PageProperty(p0));
  10cdb5:	e9 00 00 00 00       	jmp    10cdba <default_check+0x19a>
  10cdba:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10cdbd:	83 c0 04             	add    $0x4,%eax
  10cdc0:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
  10cdc7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10cdca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10cdcd:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10cdd0:	0f a3 08             	bt     %ecx,(%eax)
  10cdd3:	19 c0                	sbb    %eax,%eax
  10cdd5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    return oldbit != 0;
  10cdd8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  10cddc:	0f 95 c2             	setne  %dl
  10cddf:	80 e2 01             	and    $0x1,%dl
  10cde2:	0f b6 c2             	movzbl %dl,%eax
  10cde5:	83 f8 00             	cmp    $0x0,%eax
  10cde8:	0f 84 35 00 00 00    	je     10ce23 <default_check+0x203>
  10cdee:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cdf4:	b9 e2 00 00 00       	mov    $0xe2,%ecx
  10cdf9:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cdff:	8d 35 8b 04 11 00    	lea    0x11048b,%esi
  10ce05:	89 04 24             	mov    %eax,(%esp)
  10ce08:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
  10ce0f:	00 
  10ce10:	89 54 24 08          	mov    %edx,0x8(%esp)
  10ce14:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10ce18:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  10ce1e:	e8 2d 36 ff ff       	call   100450 <__panic>
  10ce23:	e9 00 00 00 00       	jmp    10ce28 <default_check+0x208>
  10ce28:	8d 05 30 49 11 00    	lea    0x114930,%eax

    list_entry_t free_list_store = free_list;
  10ce2e:	8b 0d 30 49 11 00    	mov    0x114930,%ecx
  10ce34:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10ce37:	8b 0d 34 49 11 00    	mov    0x114934,%ecx
  10ce3d:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
    list_init(&free_list);
  10ce40:	89 45 dc             	mov    %eax,-0x24(%ebp)
    elm->prev = elm->next = elm;
  10ce43:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10ce46:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10ce49:	89 41 04             	mov    %eax,0x4(%ecx)
  10ce4c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10ce4f:	89 01                	mov    %eax,(%ecx)
  10ce51:	8d 05 30 49 11 00    	lea    0x114930,%eax
    assert(list_empty(&free_list));
  10ce57:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return list->next == list;
  10ce5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10ce5d:	8b 40 04             	mov    0x4(%eax),%eax
  10ce60:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10ce63:	0f 94 c1             	sete   %cl
  10ce66:	80 e1 01             	and    $0x1,%cl
  10ce69:	0f b6 c1             	movzbl %cl,%eax
  10ce6c:	83 f8 00             	cmp    $0x0,%eax
  10ce6f:	0f 85 35 00 00 00    	jne    10ceaa <default_check+0x28a>
  10ce75:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10ce7b:	b9 e6 00 00 00       	mov    $0xe6,%ecx
  10ce80:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10ce86:	8d 35 1a 06 11 00    	lea    0x11061a,%esi
  10ce8c:	89 04 24             	mov    %eax,(%esp)
  10ce8f:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
  10ce96:	00 
  10ce97:	89 54 24 08          	mov    %edx,0x8(%esp)
  10ce9b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10ce9f:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%ebp)
  10cea5:	e8 a6 35 ff ff       	call   100450 <__panic>
  10ceaa:	e9 00 00 00 00       	jmp    10ceaf <default_check+0x28f>
    assert(alloc_page() == NULL);
  10ceaf:	e9 00 00 00 00       	jmp    10ceb4 <default_check+0x294>
  10ceb4:	b8 01 00 00 00       	mov    $0x1,%eax
  10ceb9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10cec0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  10cec6:	e8 45 61 ff ff       	call   103010 <alloc_pages>
  10cecb:	83 f8 00             	cmp    $0x0,%eax
  10cece:	0f 84 35 00 00 00    	je     10cf09 <default_check+0x2e9>
  10ced4:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10ceda:	b9 e7 00 00 00       	mov    $0xe7,%ecx
  10cedf:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cee5:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10ceeb:	89 04 24             	mov    %eax,(%esp)
  10ceee:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
  10cef5:	00 
  10cef6:	89 54 24 08          	mov    %edx,0x8(%esp)
  10cefa:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10cefe:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
  10cf04:	e8 47 35 ff ff       	call   100450 <__panic>
  10cf09:	e9 00 00 00 00       	jmp    10cf0e <default_check+0x2ee>
  10cf0e:	b8 03 00 00 00       	mov    $0x3,%eax

    unsigned int nr_free_store = nr_free;
  10cf13:	8b 0d 38 49 11 00    	mov    0x114938,%ecx
  10cf19:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
    nr_free = 0;
  10cf1c:	c7 05 38 49 11 00 00 	movl   $0x0,0x114938
  10cf23:	00 00 00 

    free_pages(p0 + 2, 3);
  10cf26:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10cf29:	83 c1 28             	add    $0x28,%ecx
  10cf2c:	89 0c 24             	mov    %ecx,(%esp)
  10cf2f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  10cf36:	00 
  10cf37:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  10cf3d:	e8 7e 61 ff ff       	call   1030c0 <free_pages>
  10cf42:	b8 04 00 00 00       	mov    $0x4,%eax
    assert(alloc_pages(4) == NULL);
  10cf47:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10cf4e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  10cf54:	e8 b7 60 ff ff       	call   103010 <alloc_pages>
  10cf59:	83 f8 00             	cmp    $0x0,%eax
  10cf5c:	0f 84 35 00 00 00    	je     10cf97 <default_check+0x377>
  10cf62:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cf68:	b9 ed 00 00 00       	mov    $0xed,%ecx
  10cf6d:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cf73:	8d 35 9d 04 11 00    	lea    0x11049d,%esi
  10cf79:	89 04 24             	mov    %eax,(%esp)
  10cf7c:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
  10cf83:	00 
  10cf84:	89 54 24 08          	mov    %edx,0x8(%esp)
  10cf88:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10cf8c:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
  10cf92:	e8 b9 34 ff ff       	call   100450 <__panic>
  10cf97:	e9 00 00 00 00       	jmp    10cf9c <default_check+0x37c>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
  10cf9c:	e9 00 00 00 00       	jmp    10cfa1 <default_check+0x381>
  10cfa1:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10cfa4:	83 c0 28             	add    $0x28,%eax
  10cfa7:	83 c0 04             	add    $0x4,%eax
  10cfaa:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  10cfb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10cfb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10cfb7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10cfba:	0f a3 08             	bt     %ecx,(%eax)
  10cfbd:	19 c0                	sbb    %eax,%eax
  10cfbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return oldbit != 0;
  10cfc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10cfc6:	0f 95 c2             	setne  %dl
  10cfc9:	80 e2 01             	and    $0x1,%dl
  10cfcc:	0f b6 c2             	movzbl %dl,%eax
  10cfcf:	83 f8 00             	cmp    $0x0,%eax
  10cfd2:	0f 84 0d 00 00 00    	je     10cfe5 <default_check+0x3c5>
  10cfd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10cfdb:	83 78 30 03          	cmpl   $0x3,0x30(%eax)
  10cfdf:	0f 84 35 00 00 00    	je     10d01a <default_check+0x3fa>
  10cfe5:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10cfeb:	b9 ee 00 00 00       	mov    $0xee,%ecx
  10cff0:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10cff6:	8d 35 b4 04 11 00    	lea    0x1104b4,%esi
  10cffc:	89 04 24             	mov    %eax,(%esp)
  10cfff:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
  10d006:	00 
  10d007:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d00b:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d00f:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  10d015:	e8 36 34 ff ff       	call   100450 <__panic>
  10d01a:	e9 00 00 00 00       	jmp    10d01f <default_check+0x3ff>
    assert((p1 = alloc_pages(3)) != NULL);
  10d01f:	e9 00 00 00 00       	jmp    10d024 <default_check+0x404>
  10d024:	b8 03 00 00 00       	mov    $0x3,%eax
  10d029:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  10d030:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  10d036:	e8 d5 5f ff ff       	call   103010 <alloc_pages>
  10d03b:	89 45 98             	mov    %eax,-0x68(%ebp)
  10d03e:	83 f8 00             	cmp    $0x0,%eax
  10d041:	0f 85 35 00 00 00    	jne    10d07c <default_check+0x45c>
  10d047:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d04d:	b9 ef 00 00 00       	mov    $0xef,%ecx
  10d052:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d058:	8d 35 e0 04 11 00    	lea    0x1104e0,%esi
  10d05e:	89 04 24             	mov    %eax,(%esp)
  10d061:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
  10d068:	00 
  10d069:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d06d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d071:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%ebp)
  10d077:	e8 d4 33 ff ff       	call   100450 <__panic>
  10d07c:	e9 00 00 00 00       	jmp    10d081 <default_check+0x461>
    assert(alloc_page() == NULL);
  10d081:	e9 00 00 00 00       	jmp    10d086 <default_check+0x466>
  10d086:	b8 01 00 00 00       	mov    $0x1,%eax
  10d08b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d092:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  10d098:	e8 73 5f ff ff       	call   103010 <alloc_pages>
  10d09d:	83 f8 00             	cmp    $0x0,%eax
  10d0a0:	0f 84 35 00 00 00    	je     10d0db <default_check+0x4bb>
  10d0a6:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d0ac:	b9 f0 00 00 00       	mov    $0xf0,%ecx
  10d0b1:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d0b7:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10d0bd:	89 04 24             	mov    %eax,(%esp)
  10d0c0:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
  10d0c7:	00 
  10d0c8:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d0cc:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d0d0:	89 8d 3c ff ff ff    	mov    %ecx,-0xc4(%ebp)
  10d0d6:	e8 75 33 ff ff       	call   100450 <__panic>
  10d0db:	e9 00 00 00 00       	jmp    10d0e0 <default_check+0x4c0>
    assert(p0 + 2 == p1);
  10d0e0:	e9 00 00 00 00       	jmp    10d0e5 <default_check+0x4c5>
  10d0e5:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10d0e8:	83 c0 28             	add    $0x28,%eax
  10d0eb:	3b 45 98             	cmp    -0x68(%ebp),%eax
  10d0ee:	0f 84 35 00 00 00    	je     10d129 <default_check+0x509>
  10d0f4:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d0fa:	b9 f1 00 00 00       	mov    $0xf1,%ecx
  10d0ff:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d105:	8d 35 eb 03 11 00    	lea    0x1103eb,%esi
  10d10b:	89 04 24             	mov    %eax,(%esp)
  10d10e:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
  10d115:	00 
  10d116:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d11a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d11e:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
  10d124:	e8 27 33 ff ff       	call   100450 <__panic>
  10d129:	e9 00 00 00 00       	jmp    10d12e <default_check+0x50e>
  10d12e:	b8 01 00 00 00       	mov    $0x1,%eax

    p2 = p0 + 1;
  10d133:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10d136:	83 c1 14             	add    $0x14,%ecx
  10d139:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
    free_page(p0);
  10d13c:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10d13f:	89 0c 24             	mov    %ecx,(%esp)
  10d142:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10d149:	00 
  10d14a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
  10d150:	e8 6b 5f ff ff       	call   1030c0 <free_pages>
  10d155:	b8 03 00 00 00       	mov    $0x3,%eax
    free_pages(p1, 3);
  10d15a:	8b 4d 98             	mov    -0x68(%ebp),%ecx
  10d15d:	89 0c 24             	mov    %ecx,(%esp)
  10d160:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  10d167:	00 
  10d168:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
  10d16e:	e8 4d 5f ff ff       	call   1030c0 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
  10d173:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10d176:	83 c0 04             	add    $0x4,%eax
  10d179:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
  10d180:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10d183:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10d186:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10d189:	0f a3 08             	bt     %ecx,(%eax)
  10d18c:	19 c0                	sbb    %eax,%eax
  10d18e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
  10d191:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  10d195:	0f 95 c2             	setne  %dl
  10d198:	80 e2 01             	and    $0x1,%dl
  10d19b:	0f b6 c2             	movzbl %dl,%eax
  10d19e:	83 f8 00             	cmp    $0x0,%eax
  10d1a1:	0f 84 0d 00 00 00    	je     10d1b4 <default_check+0x594>
  10d1a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
  10d1aa:	83 78 08 01          	cmpl   $0x1,0x8(%eax)
  10d1ae:	0f 84 35 00 00 00    	je     10d1e9 <default_check+0x5c9>
  10d1b4:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d1ba:	b9 f6 00 00 00       	mov    $0xf6,%ecx
  10d1bf:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d1c5:	8d 35 fe 04 11 00    	lea    0x1104fe,%esi
  10d1cb:	89 04 24             	mov    %eax,(%esp)
  10d1ce:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
  10d1d5:	00 
  10d1d6:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d1da:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d1de:	89 8d 2c ff ff ff    	mov    %ecx,-0xd4(%ebp)
  10d1e4:	e8 67 32 ff ff       	call   100450 <__panic>
  10d1e9:	e9 00 00 00 00       	jmp    10d1ee <default_check+0x5ce>
    assert(PageProperty(p1) && p1->property == 3);
  10d1ee:	e9 00 00 00 00       	jmp    10d1f3 <default_check+0x5d3>
  10d1f3:	8b 45 98             	mov    -0x68(%ebp),%eax
  10d1f6:	83 c0 04             	add    $0x4,%eax
  10d1f9:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
  10d200:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
  10d203:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10d206:	8b 4d c0             	mov    -0x40(%ebp),%ecx
  10d209:	0f a3 08             	bt     %ecx,(%eax)
  10d20c:	19 c0                	sbb    %eax,%eax
  10d20e:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
  10d211:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  10d215:	0f 95 c2             	setne  %dl
  10d218:	80 e2 01             	and    $0x1,%dl
  10d21b:	0f b6 c2             	movzbl %dl,%eax
  10d21e:	83 f8 00             	cmp    $0x0,%eax
  10d221:	0f 84 0d 00 00 00    	je     10d234 <default_check+0x614>
  10d227:	8b 45 98             	mov    -0x68(%ebp),%eax
  10d22a:	83 78 08 03          	cmpl   $0x3,0x8(%eax)
  10d22e:	0f 84 35 00 00 00    	je     10d269 <default_check+0x649>
  10d234:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d23a:	b9 f7 00 00 00       	mov    $0xf7,%ecx
  10d23f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d245:	8d 35 24 05 11 00    	lea    0x110524,%esi
  10d24b:	89 04 24             	mov    %eax,(%esp)
  10d24e:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
  10d255:	00 
  10d256:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d25a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d25e:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
  10d264:	e8 e7 31 ff ff       	call   100450 <__panic>
  10d269:	e9 00 00 00 00       	jmp    10d26e <default_check+0x64e>

    assert((p0 = alloc_page()) == p2 - 1);
  10d26e:	e9 00 00 00 00       	jmp    10d273 <default_check+0x653>
  10d273:	b8 01 00 00 00       	mov    $0x1,%eax
  10d278:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d27f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
  10d285:	e8 86 5d ff ff       	call   103010 <alloc_pages>
  10d28a:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10d28d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10d290:	83 c1 ec             	add    $0xffffffec,%ecx
  10d293:	39 c8                	cmp    %ecx,%eax
  10d295:	0f 84 35 00 00 00    	je     10d2d0 <default_check+0x6b0>
  10d29b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d2a1:	b9 f9 00 00 00       	mov    $0xf9,%ecx
  10d2a6:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d2ac:	8d 35 4a 05 11 00    	lea    0x11054a,%esi
  10d2b2:	89 04 24             	mov    %eax,(%esp)
  10d2b5:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
  10d2bc:	00 
  10d2bd:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d2c1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d2c5:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%ebp)
  10d2cb:	e8 80 31 ff ff       	call   100450 <__panic>
  10d2d0:	e9 00 00 00 00       	jmp    10d2d5 <default_check+0x6b5>
  10d2d5:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
  10d2da:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10d2dd:	89 0c 24             	mov    %ecx,(%esp)
  10d2e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10d2e7:	00 
  10d2e8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
  10d2ee:	e8 cd 5d ff ff       	call   1030c0 <free_pages>
  10d2f3:	b8 02 00 00 00       	mov    $0x2,%eax
    assert((p0 = alloc_pages(2)) == p2 + 1);
  10d2f8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  10d2ff:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
  10d305:	e8 06 5d ff ff       	call   103010 <alloc_pages>
  10d30a:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10d30d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10d310:	83 c1 14             	add    $0x14,%ecx
  10d313:	39 c8                	cmp    %ecx,%eax
  10d315:	0f 84 35 00 00 00    	je     10d350 <default_check+0x730>
  10d31b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d321:	b9 fb 00 00 00       	mov    $0xfb,%ecx
  10d326:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d32c:	8d 35 68 05 11 00    	lea    0x110568,%esi
  10d332:	89 04 24             	mov    %eax,(%esp)
  10d335:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
  10d33c:	00 
  10d33d:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d341:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d345:	89 8d 14 ff ff ff    	mov    %ecx,-0xec(%ebp)
  10d34b:	e8 00 31 ff ff       	call   100450 <__panic>
  10d350:	e9 00 00 00 00       	jmp    10d355 <default_check+0x735>
  10d355:	b8 02 00 00 00       	mov    $0x2,%eax

    free_pages(p0, 2);
  10d35a:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10d35d:	89 0c 24             	mov    %ecx,(%esp)
  10d360:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10d367:	00 
  10d368:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
  10d36e:	e8 4d 5d ff ff       	call   1030c0 <free_pages>
  10d373:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
  10d378:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10d37b:	89 0c 24             	mov    %ecx,(%esp)
  10d37e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10d385:	00 
  10d386:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
  10d38c:	e8 2f 5d ff ff       	call   1030c0 <free_pages>
  10d391:	b8 05 00 00 00       	mov    $0x5,%eax

    assert((p0 = alloc_pages(5)) != NULL);
  10d396:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  10d39d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
  10d3a3:	e8 68 5c ff ff       	call   103010 <alloc_pages>
  10d3a8:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10d3ab:	83 f8 00             	cmp    $0x0,%eax
  10d3ae:	0f 85 35 00 00 00    	jne    10d3e9 <default_check+0x7c9>
  10d3b4:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d3ba:	b9 00 01 00 00       	mov    $0x100,%ecx
  10d3bf:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d3c5:	8d 35 88 05 11 00    	lea    0x110588,%esi
  10d3cb:	89 04 24             	mov    %eax,(%esp)
  10d3ce:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
  10d3d5:	00 
  10d3d6:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d3da:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d3de:	89 8d 04 ff ff ff    	mov    %ecx,-0xfc(%ebp)
  10d3e4:	e8 67 30 ff ff       	call   100450 <__panic>
  10d3e9:	e9 00 00 00 00       	jmp    10d3ee <default_check+0x7ce>
    assert(alloc_page() == NULL);
  10d3ee:	e9 00 00 00 00       	jmp    10d3f3 <default_check+0x7d3>
  10d3f3:	b8 01 00 00 00       	mov    $0x1,%eax
  10d3f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d3ff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
  10d405:	e8 06 5c ff ff       	call   103010 <alloc_pages>
  10d40a:	83 f8 00             	cmp    $0x0,%eax
  10d40d:	0f 84 35 00 00 00    	je     10d448 <default_check+0x828>
  10d413:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d419:	b9 01 01 00 00       	mov    $0x101,%ecx
  10d41e:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d424:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10d42a:	89 04 24             	mov    %eax,(%esp)
  10d42d:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
  10d434:	00 
  10d435:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d439:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d43d:	89 8d fc fe ff ff    	mov    %ecx,-0x104(%ebp)
  10d443:	e8 08 30 ff ff       	call   100450 <__panic>
  10d448:	e9 00 00 00 00       	jmp    10d44d <default_check+0x82d>

    assert(nr_free == 0);
  10d44d:	e9 00 00 00 00       	jmp    10d452 <default_check+0x832>
  10d452:	83 3d 38 49 11 00 00 	cmpl   $0x0,0x114938
  10d459:	0f 84 35 00 00 00    	je     10d494 <default_check+0x874>
  10d45f:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d465:	b9 03 01 00 00       	mov    $0x103,%ecx
  10d46a:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d470:	8d 35 13 04 11 00    	lea    0x110413,%esi
  10d476:	89 04 24             	mov    %eax,(%esp)
  10d479:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
  10d480:	00 
  10d481:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d485:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d489:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
  10d48f:	e8 bc 2f ff ff       	call   100450 <__panic>
  10d494:	e9 00 00 00 00       	jmp    10d499 <default_check+0x879>
  10d499:	b8 05 00 00 00       	mov    $0x5,%eax
    nr_free = nr_free_store;
  10d49e:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
  10d4a1:	89 0d 38 49 11 00    	mov    %ecx,0x114938

    free_list = free_list_store;
  10d4a7:	8b 4d 88             	mov    -0x78(%ebp),%ecx
  10d4aa:	89 0d 30 49 11 00    	mov    %ecx,0x114930
  10d4b0:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
  10d4b3:	89 0d 34 49 11 00    	mov    %ecx,0x114934
    free_pages(p0, 5);
  10d4b9:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
  10d4bc:	89 0c 24             	mov    %ecx,(%esp)
  10d4bf:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  10d4c6:	00 
  10d4c7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
  10d4cd:	e8 ee 5b ff ff       	call   1030c0 <free_pages>
  10d4d2:	8d 05 30 49 11 00    	lea    0x114930,%eax

    le = &free_list;
  10d4d8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10d4db:	8d 05 30 49 11 00    	lea    0x114930,%eax
    while ((le = list_next(le)) != &free_list) {
  10d4e1:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10d4e4:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    return listelm->next;
  10d4e7:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  10d4ea:	8b 49 04             	mov    0x4(%ecx),%ecx
  10d4ed:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10d4f0:	39 c1                	cmp    %eax,%ecx
  10d4f2:	0f 84 2d 00 00 00    	je     10d525 <default_check+0x905>
  10d4f8:	31 c0                	xor    %eax,%eax
  10d4fa:	89 c1                	mov    %eax,%ecx
  10d4fc:	83 c1 0c             	add    $0xc,%ecx
  10d4ff:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
  10d501:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
  10d504:	01 c1                	add    %eax,%ecx
  10d506:	89 4d 80             	mov    %ecx,-0x80(%ebp)
        count --, total -= p->property;
  10d509:	8b 45 ac             	mov    -0x54(%ebp),%eax
  10d50c:	83 c0 ff             	add    $0xffffffff,%eax
  10d50f:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10d512:	8b 45 80             	mov    -0x80(%ebp),%eax
  10d515:	8b 40 08             	mov    0x8(%eax),%eax
  10d518:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  10d51b:	29 c1                	sub    %eax,%ecx
  10d51d:	89 4d a8             	mov    %ecx,-0x58(%ebp)
    while ((le = list_next(le)) != &free_list) {
  10d520:	e9 b6 ff ff ff       	jmp    10d4db <default_check+0x8bb>
    }
    assert(count == 0);
  10d525:	e9 00 00 00 00       	jmp    10d52a <default_check+0x90a>
  10d52a:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
  10d52e:	0f 84 35 00 00 00    	je     10d569 <default_check+0x949>
  10d534:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d53a:	b9 0e 01 00 00       	mov    $0x10e,%ecx
  10d53f:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d545:	8d 35 a6 05 11 00    	lea    0x1105a6,%esi
  10d54b:	89 04 24             	mov    %eax,(%esp)
  10d54e:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
  10d555:	00 
  10d556:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d55a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d55e:	89 8d f0 fe ff ff    	mov    %ecx,-0x110(%ebp)
  10d564:	e8 e7 2e ff ff       	call   100450 <__panic>
  10d569:	e9 00 00 00 00       	jmp    10d56e <default_check+0x94e>
    assert(total == 0);
  10d56e:	e9 00 00 00 00       	jmp    10d573 <default_check+0x953>
  10d573:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
  10d577:	0f 84 35 00 00 00    	je     10d5b2 <default_check+0x992>
  10d57d:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d583:	b9 0f 01 00 00       	mov    $0x10f,%ecx
  10d588:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d58e:	8d 35 b1 05 11 00    	lea    0x1105b1,%esi
  10d594:	89 04 24             	mov    %eax,(%esp)
  10d597:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
  10d59e:	00 
  10d59f:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d5a3:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d5a7:	89 8d ec fe ff ff    	mov    %ecx,-0x114(%ebp)
  10d5ad:	e8 9e 2e ff ff       	call   100450 <__panic>
  10d5b2:	e9 00 00 00 00       	jmp    10d5b7 <default_check+0x997>
}
  10d5b7:	81 c4 24 01 00 00    	add    $0x124,%esp
  10d5bd:	5e                   	pop    %esi
  10d5be:	5d                   	pop    %ebp
  10d5bf:	c3                   	ret    

0010d5c0 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
  10d5c0:	55                   	push   %ebp
  10d5c1:	89 e5                	mov    %esp,%ebp
  10d5c3:	83 ec 08             	sub    $0x8,%esp
  10d5c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  10d5c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10d5cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10d5cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
  10d5d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10d5d5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10d5d8:	89 01                	mov    %eax,(%ecx)
}
  10d5da:	83 c4 08             	add    $0x8,%esp
  10d5dd:	5d                   	pop    %ebp
  10d5de:	c3                   	ret    
  10d5df:	90                   	nop

0010d5e0 <basic_check>:
basic_check(void) {
  10d5e0:	55                   	push   %ebp
  10d5e1:	89 e5                	mov    %esp,%ebp
    p0 = p1 = p2 = NULL;
  10d5e3:	56                   	push   %esi
  10d5e4:	81 ec d4 00 00 00    	sub    $0xd4,%esp
  10d5ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  10d5f1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10d5f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10d5ff:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p0 = alloc_page()) != NULL);
  10d604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d60b:	89 45 cc             	mov    %eax,-0x34(%ebp)
  10d60e:	e8 fd 59 ff ff       	call   103010 <alloc_pages>
  10d613:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10d616:	83 f8 00             	cmp    $0x0,%eax
  10d619:	0f 85 32 00 00 00    	jne    10d651 <basic_check+0x71>
  10d61f:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d625:	b9 a2 00 00 00       	mov    $0xa2,%ecx
  10d62a:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d630:	8d 35 28 02 11 00    	lea    0x110228,%esi
  10d636:	89 04 24             	mov    %eax,(%esp)
  10d639:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
  10d640:	00 
  10d641:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d645:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d649:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  10d64c:	e8 ff 2d ff ff       	call   100450 <__panic>
  10d651:	e9 00 00 00 00       	jmp    10d656 <basic_check+0x76>
    assert((p1 = alloc_page()) != NULL);
  10d656:	e9 00 00 00 00       	jmp    10d65b <basic_check+0x7b>
  10d65b:	b8 01 00 00 00       	mov    $0x1,%eax
  10d660:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d667:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10d66a:	e8 a1 59 ff ff       	call   103010 <alloc_pages>
  10d66f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10d672:	83 f8 00             	cmp    $0x0,%eax
  10d675:	0f 85 32 00 00 00    	jne    10d6ad <basic_check+0xcd>
  10d67b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d681:	b9 a3 00 00 00       	mov    $0xa3,%ecx
  10d686:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d68c:	8d 35 44 02 11 00    	lea    0x110244,%esi
  10d692:	89 04 24             	mov    %eax,(%esp)
  10d695:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
  10d69c:	00 
  10d69d:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d6a1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d6a5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
  10d6a8:	e8 a3 2d ff ff       	call   100450 <__panic>
  10d6ad:	e9 00 00 00 00       	jmp    10d6b2 <basic_check+0xd2>
    assert((p2 = alloc_page()) != NULL);
  10d6b2:	e9 00 00 00 00       	jmp    10d6b7 <basic_check+0xd7>
  10d6b7:	b8 01 00 00 00       	mov    $0x1,%eax
  10d6bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d6c3:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10d6c6:	e8 45 59 ff ff       	call   103010 <alloc_pages>
  10d6cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10d6ce:	83 f8 00             	cmp    $0x0,%eax
  10d6d1:	0f 85 32 00 00 00    	jne    10d709 <basic_check+0x129>
  10d6d7:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d6dd:	b9 a4 00 00 00       	mov    $0xa4,%ecx
  10d6e2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d6e8:	8d 35 60 02 11 00    	lea    0x110260,%esi
  10d6ee:	89 04 24             	mov    %eax,(%esp)
  10d6f1:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
  10d6f8:	00 
  10d6f9:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d6fd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d701:	89 4d b8             	mov    %ecx,-0x48(%ebp)
  10d704:	e8 47 2d ff ff       	call   100450 <__panic>
  10d709:	e9 00 00 00 00       	jmp    10d70e <basic_check+0x12e>
    assert(p0 != p1 && p0 != p2 && p1 != p2);
  10d70e:	e9 00 00 00 00       	jmp    10d713 <basic_check+0x133>
  10d713:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10d716:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  10d719:	0f 84 18 00 00 00    	je     10d737 <basic_check+0x157>
  10d71f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10d722:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  10d725:	0f 84 0c 00 00 00    	je     10d737 <basic_check+0x157>
  10d72b:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10d72e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  10d731:	0f 85 32 00 00 00    	jne    10d769 <basic_check+0x189>
  10d737:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d73d:	b9 a6 00 00 00       	mov    $0xa6,%ecx
  10d742:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d748:	8d 35 bc 05 11 00    	lea    0x1105bc,%esi
  10d74e:	89 04 24             	mov    %eax,(%esp)
  10d751:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
  10d758:	00 
  10d759:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d75d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d761:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10d764:	e8 e7 2c ff ff       	call   100450 <__panic>
  10d769:	e9 00 00 00 00       	jmp    10d76e <basic_check+0x18e>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
  10d76e:	e9 00 00 00 00       	jmp    10d773 <basic_check+0x193>
  10d773:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10d776:	89 04 24             	mov    %eax,(%esp)
  10d779:	e8 72 06 00 00       	call   10ddf0 <page_ref>
  10d77e:	83 f8 00             	cmp    $0x0,%eax
  10d781:	0f 85 28 00 00 00    	jne    10d7af <basic_check+0x1cf>
  10d787:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10d78a:	89 04 24             	mov    %eax,(%esp)
  10d78d:	e8 5e 06 00 00       	call   10ddf0 <page_ref>
  10d792:	83 f8 00             	cmp    $0x0,%eax
  10d795:	0f 85 14 00 00 00    	jne    10d7af <basic_check+0x1cf>
  10d79b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10d79e:	89 04 24             	mov    %eax,(%esp)
  10d7a1:	e8 4a 06 00 00       	call   10ddf0 <page_ref>
  10d7a6:	83 f8 00             	cmp    $0x0,%eax
  10d7a9:	0f 84 32 00 00 00    	je     10d7e1 <basic_check+0x201>
  10d7af:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d7b5:	b9 a7 00 00 00       	mov    $0xa7,%ecx
  10d7ba:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d7c0:	8d 35 dd 05 11 00    	lea    0x1105dd,%esi
  10d7c6:	89 04 24             	mov    %eax,(%esp)
  10d7c9:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
  10d7d0:	00 
  10d7d1:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d7d5:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d7d9:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  10d7dc:	e8 6f 2c ff ff       	call   100450 <__panic>
  10d7e1:	e9 00 00 00 00       	jmp    10d7e6 <basic_check+0x206>
    assert(page2pa(p0) < npage * PGSIZE);
  10d7e6:	e9 00 00 00 00       	jmp    10d7eb <basic_check+0x20b>
  10d7eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10d7ee:	89 04 24             	mov    %eax,(%esp)
  10d7f1:	e8 1a 06 00 00       	call   10de10 <page2pa>
  10d7f6:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10d7fc:	c1 e1 0c             	shl    $0xc,%ecx
  10d7ff:	39 c8                	cmp    %ecx,%eax
  10d801:	0f 82 32 00 00 00    	jb     10d839 <basic_check+0x259>
  10d807:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d80d:	b9 a9 00 00 00       	mov    $0xa9,%ecx
  10d812:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d818:	8d 35 10 03 11 00    	lea    0x110310,%esi
  10d81e:	89 04 24             	mov    %eax,(%esp)
  10d821:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
  10d828:	00 
  10d829:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d82d:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d831:	89 4d ac             	mov    %ecx,-0x54(%ebp)
  10d834:	e8 17 2c ff ff       	call   100450 <__panic>
  10d839:	e9 00 00 00 00       	jmp    10d83e <basic_check+0x25e>
    assert(page2pa(p1) < npage * PGSIZE);
  10d83e:	e9 00 00 00 00       	jmp    10d843 <basic_check+0x263>
  10d843:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10d846:	89 04 24             	mov    %eax,(%esp)
  10d849:	e8 c2 05 00 00       	call   10de10 <page2pa>
  10d84e:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10d854:	c1 e1 0c             	shl    $0xc,%ecx
  10d857:	39 c8                	cmp    %ecx,%eax
  10d859:	0f 82 32 00 00 00    	jb     10d891 <basic_check+0x2b1>
  10d85f:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d865:	b9 aa 00 00 00       	mov    $0xaa,%ecx
  10d86a:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d870:	8d 35 2d 03 11 00    	lea    0x11032d,%esi
  10d876:	89 04 24             	mov    %eax,(%esp)
  10d879:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
  10d880:	00 
  10d881:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d885:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d889:	89 4d a8             	mov    %ecx,-0x58(%ebp)
  10d88c:	e8 bf 2b ff ff       	call   100450 <__panic>
  10d891:	e9 00 00 00 00       	jmp    10d896 <basic_check+0x2b6>
    assert(page2pa(p2) < npage * PGSIZE);
  10d896:	e9 00 00 00 00       	jmp    10d89b <basic_check+0x2bb>
  10d89b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10d89e:	89 04 24             	mov    %eax,(%esp)
  10d8a1:	e8 6a 05 00 00       	call   10de10 <page2pa>
  10d8a6:	8b 0d 2c 48 11 00    	mov    0x11482c,%ecx
  10d8ac:	c1 e1 0c             	shl    $0xc,%ecx
  10d8af:	39 c8                	cmp    %ecx,%eax
  10d8b1:	0f 82 32 00 00 00    	jb     10d8e9 <basic_check+0x309>
  10d8b7:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d8bd:	b9 ab 00 00 00       	mov    $0xab,%ecx
  10d8c2:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d8c8:	8d 35 4a 03 11 00    	lea    0x11034a,%esi
  10d8ce:	89 04 24             	mov    %eax,(%esp)
  10d8d1:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
  10d8d8:	00 
  10d8d9:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d8dd:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d8e1:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
  10d8e4:	e8 67 2b ff ff       	call   100450 <__panic>
  10d8e9:	e9 00 00 00 00       	jmp    10d8ee <basic_check+0x30e>
  10d8ee:	8d 05 30 49 11 00    	lea    0x114930,%eax
    list_entry_t free_list_store = free_list;
  10d8f4:	8b 0d 30 49 11 00    	mov    0x114930,%ecx
  10d8fa:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  10d8fd:	8b 0d 34 49 11 00    	mov    0x114934,%ecx
  10d903:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    list_init(&free_list);
  10d906:	89 45 f0             	mov    %eax,-0x10(%ebp)
    elm->prev = elm->next = elm;
  10d909:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10d90c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10d90f:	89 41 04             	mov    %eax,0x4(%ecx)
  10d912:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10d915:	89 01                	mov    %eax,(%ecx)
  10d917:	8d 05 30 49 11 00    	lea    0x114930,%eax
    assert(list_empty(&free_list));
  10d91d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return list->next == list;
  10d920:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10d923:	8b 40 04             	mov    0x4(%eax),%eax
  10d926:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10d929:	0f 94 c1             	sete   %cl
  10d92c:	80 e1 01             	and    $0x1,%cl
  10d92f:	0f b6 c1             	movzbl %cl,%eax
  10d932:	83 f8 00             	cmp    $0x0,%eax
  10d935:	0f 85 32 00 00 00    	jne    10d96d <basic_check+0x38d>
  10d93b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d941:	b9 af 00 00 00       	mov    $0xaf,%ecx
  10d946:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d94c:	8d 35 1a 06 11 00    	lea    0x11061a,%esi
  10d952:	89 04 24             	mov    %eax,(%esp)
  10d955:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
  10d95c:	00 
  10d95d:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d961:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d965:	89 4d a0             	mov    %ecx,-0x60(%ebp)
  10d968:	e8 e3 2a ff ff       	call   100450 <__panic>
  10d96d:	e9 00 00 00 00       	jmp    10d972 <basic_check+0x392>
    unsigned int nr_free_store = nr_free;
  10d972:	a1 38 49 11 00       	mov    0x114938,%eax
  10d977:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    nr_free = 0;
  10d97a:	c7 05 38 49 11 00 00 	movl   $0x0,0x114938
  10d981:	00 00 00 
  10d984:	b8 01 00 00 00       	mov    $0x1,%eax
    assert(alloc_page() == NULL);
  10d989:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10d990:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10d993:	e8 78 56 ff ff       	call   103010 <alloc_pages>
  10d998:	83 f8 00             	cmp    $0x0,%eax
  10d99b:	0f 84 32 00 00 00    	je     10d9d3 <basic_check+0x3f3>
  10d9a1:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10d9a7:	b9 b4 00 00 00       	mov    $0xb4,%ecx
  10d9ac:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10d9b2:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10d9b8:	89 04 24             	mov    %eax,(%esp)
  10d9bb:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
  10d9c2:	00 
  10d9c3:	89 54 24 08          	mov    %edx,0x8(%esp)
  10d9c7:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10d9cb:	89 4d 98             	mov    %ecx,-0x68(%ebp)
  10d9ce:	e8 7d 2a ff ff       	call   100450 <__panic>
  10d9d3:	e9 00 00 00 00       	jmp    10d9d8 <basic_check+0x3f8>
  10d9d8:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
  10d9dd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10d9e0:	89 0c 24             	mov    %ecx,(%esp)
  10d9e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10d9ea:	00 
  10d9eb:	89 45 94             	mov    %eax,-0x6c(%ebp)
  10d9ee:	e8 cd 56 ff ff       	call   1030c0 <free_pages>
  10d9f3:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
  10d9f8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10d9fb:	89 0c 24             	mov    %ecx,(%esp)
  10d9fe:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10da05:	00 
  10da06:	89 45 90             	mov    %eax,-0x70(%ebp)
  10da09:	e8 b2 56 ff ff       	call   1030c0 <free_pages>
  10da0e:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
  10da13:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10da16:	89 0c 24             	mov    %ecx,(%esp)
  10da19:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10da20:	00 
  10da21:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10da24:	e8 97 56 ff ff       	call   1030c0 <free_pages>
    assert(nr_free == 3);
  10da29:	83 3d 38 49 11 00 03 	cmpl   $0x3,0x114938
  10da30:	0f 84 32 00 00 00    	je     10da68 <basic_check+0x488>
  10da36:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10da3c:	b9 b9 00 00 00       	mov    $0xb9,%ecx
  10da41:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10da47:	8d 35 c0 03 11 00    	lea    0x1103c0,%esi
  10da4d:	89 04 24             	mov    %eax,(%esp)
  10da50:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  10da57:	00 
  10da58:	89 54 24 08          	mov    %edx,0x8(%esp)
  10da5c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10da60:	89 4d 88             	mov    %ecx,-0x78(%ebp)
  10da63:	e8 e8 29 ff ff       	call   100450 <__panic>
  10da68:	e9 00 00 00 00       	jmp    10da6d <basic_check+0x48d>
    assert((p0 = alloc_page()) != NULL);
  10da6d:	e9 00 00 00 00       	jmp    10da72 <basic_check+0x492>
  10da72:	b8 01 00 00 00       	mov    $0x1,%eax
  10da77:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10da7e:	89 45 84             	mov    %eax,-0x7c(%ebp)
  10da81:	e8 8a 55 ff ff       	call   103010 <alloc_pages>
  10da86:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10da89:	83 f8 00             	cmp    $0x0,%eax
  10da8c:	0f 85 32 00 00 00    	jne    10dac4 <basic_check+0x4e4>
  10da92:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10da98:	b9 bb 00 00 00       	mov    $0xbb,%ecx
  10da9d:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10daa3:	8d 35 28 02 11 00    	lea    0x110228,%esi
  10daa9:	89 04 24             	mov    %eax,(%esp)
  10daac:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
  10dab3:	00 
  10dab4:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dab8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dabc:	89 4d 80             	mov    %ecx,-0x80(%ebp)
  10dabf:	e8 8c 29 ff ff       	call   100450 <__panic>
  10dac4:	e9 00 00 00 00       	jmp    10dac9 <basic_check+0x4e9>
    assert((p1 = alloc_page()) != NULL);
  10dac9:	e9 00 00 00 00       	jmp    10dace <basic_check+0x4ee>
  10dace:	b8 01 00 00 00       	mov    $0x1,%eax
  10dad3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10dada:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10dae0:	e8 2b 55 ff ff       	call   103010 <alloc_pages>
  10dae5:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10dae8:	83 f8 00             	cmp    $0x0,%eax
  10daeb:	0f 85 35 00 00 00    	jne    10db26 <basic_check+0x546>
  10daf1:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10daf7:	b9 bc 00 00 00       	mov    $0xbc,%ecx
  10dafc:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10db02:	8d 35 44 02 11 00    	lea    0x110244,%esi
  10db08:	89 04 24             	mov    %eax,(%esp)
  10db0b:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  10db12:	00 
  10db13:	89 54 24 08          	mov    %edx,0x8(%esp)
  10db17:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10db1b:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
  10db21:	e8 2a 29 ff ff       	call   100450 <__panic>
  10db26:	e9 00 00 00 00       	jmp    10db2b <basic_check+0x54b>
    assert((p2 = alloc_page()) != NULL);
  10db2b:	e9 00 00 00 00       	jmp    10db30 <basic_check+0x550>
  10db30:	b8 01 00 00 00       	mov    $0x1,%eax
  10db35:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10db3c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10db42:	e8 c9 54 ff ff       	call   103010 <alloc_pages>
  10db47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10db4a:	83 f8 00             	cmp    $0x0,%eax
  10db4d:	0f 85 35 00 00 00    	jne    10db88 <basic_check+0x5a8>
  10db53:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10db59:	b9 bd 00 00 00       	mov    $0xbd,%ecx
  10db5e:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10db64:	8d 35 60 02 11 00    	lea    0x110260,%esi
  10db6a:	89 04 24             	mov    %eax,(%esp)
  10db6d:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
  10db74:	00 
  10db75:	89 54 24 08          	mov    %edx,0x8(%esp)
  10db79:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10db7d:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
  10db83:	e8 c8 28 ff ff       	call   100450 <__panic>
  10db88:	e9 00 00 00 00       	jmp    10db8d <basic_check+0x5ad>
    assert(alloc_page() == NULL);
  10db8d:	e9 00 00 00 00       	jmp    10db92 <basic_check+0x5b2>
  10db92:	b8 01 00 00 00       	mov    $0x1,%eax
  10db97:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10db9e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  10dba4:	e8 67 54 ff ff       	call   103010 <alloc_pages>
  10dba9:	83 f8 00             	cmp    $0x0,%eax
  10dbac:	0f 84 35 00 00 00    	je     10dbe7 <basic_check+0x607>
  10dbb2:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10dbb8:	b9 bf 00 00 00       	mov    $0xbf,%ecx
  10dbbd:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10dbc3:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10dbc9:	89 04 24             	mov    %eax,(%esp)
  10dbcc:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
  10dbd3:	00 
  10dbd4:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dbd8:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dbdc:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
  10dbe2:	e8 69 28 ff ff       	call   100450 <__panic>
  10dbe7:	e9 00 00 00 00       	jmp    10dbec <basic_check+0x60c>
  10dbec:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
  10dbf1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10dbf4:	89 0c 24             	mov    %ecx,(%esp)
  10dbf7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10dbfe:	00 
  10dbff:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10dc05:	e8 b6 54 ff ff       	call   1030c0 <free_pages>
  10dc0a:	8d 05 30 49 11 00    	lea    0x114930,%eax
    assert(!list_empty(&free_list));
  10dc10:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10dc13:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10dc16:	8b 40 04             	mov    0x4(%eax),%eax
  10dc19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10dc1c:	0f 94 c1             	sete   %cl
  10dc1f:	80 e1 01             	and    $0x1,%cl
  10dc22:	0f b6 c1             	movzbl %cl,%eax
  10dc25:	83 f8 00             	cmp    $0x0,%eax
  10dc28:	0f 84 35 00 00 00    	je     10dc63 <basic_check+0x683>
  10dc2e:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10dc34:	b9 c2 00 00 00       	mov    $0xc2,%ecx
  10dc39:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10dc3f:	8d 35 19 06 11 00    	lea    0x110619,%esi
  10dc45:	89 04 24             	mov    %eax,(%esp)
  10dc48:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  10dc4f:	00 
  10dc50:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dc54:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dc58:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
  10dc5e:	e8 ed 27 ff ff       	call   100450 <__panic>
  10dc63:	e9 00 00 00 00       	jmp    10dc68 <basic_check+0x688>
  10dc68:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p = alloc_page()) == p0);
  10dc6d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10dc74:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
  10dc7a:	e8 91 53 ff ff       	call   103010 <alloc_pages>
  10dc7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10dc82:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10dc85:	0f 84 35 00 00 00    	je     10dcc0 <basic_check+0x6e0>
  10dc8b:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10dc91:	b9 c5 00 00 00       	mov    $0xc5,%ecx
  10dc96:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10dc9c:	8d 35 31 06 11 00    	lea    0x110631,%esi
  10dca2:	89 04 24             	mov    %eax,(%esp)
  10dca5:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
  10dcac:	00 
  10dcad:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dcb1:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dcb5:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
  10dcbb:	e8 90 27 ff ff       	call   100450 <__panic>
  10dcc0:	e9 00 00 00 00       	jmp    10dcc5 <basic_check+0x6e5>
    assert(alloc_page() == NULL);
  10dcc5:	e9 00 00 00 00       	jmp    10dcca <basic_check+0x6ea>
  10dcca:	b8 01 00 00 00       	mov    $0x1,%eax
  10dccf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  10dcd6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
  10dcdc:	e8 2f 53 ff ff       	call   103010 <alloc_pages>
  10dce1:	83 f8 00             	cmp    $0x0,%eax
  10dce4:	0f 84 35 00 00 00    	je     10dd1f <basic_check+0x73f>
  10dcea:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10dcf0:	b9 c6 00 00 00       	mov    $0xc6,%ecx
  10dcf5:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10dcfb:	8d 35 ab 03 11 00    	lea    0x1103ab,%esi
  10dd01:	89 04 24             	mov    %eax,(%esp)
  10dd04:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
  10dd0b:	00 
  10dd0c:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dd10:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dd14:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
  10dd1a:	e8 31 27 ff ff       	call   100450 <__panic>
  10dd1f:	e9 00 00 00 00       	jmp    10dd24 <basic_check+0x744>
    assert(nr_free == 0);
  10dd24:	e9 00 00 00 00       	jmp    10dd29 <basic_check+0x749>
  10dd29:	83 3d 38 49 11 00 00 	cmpl   $0x0,0x114938
  10dd30:	0f 84 35 00 00 00    	je     10dd6b <basic_check+0x78b>
  10dd36:	8d 05 50 04 11 00    	lea    0x110450,%eax
  10dd3c:	b9 c8 00 00 00       	mov    $0xc8,%ecx
  10dd41:	8d 15 8e f8 10 00    	lea    0x10f88e,%edx
  10dd47:	8d 35 13 04 11 00    	lea    0x110413,%esi
  10dd4d:	89 04 24             	mov    %eax,(%esp)
  10dd50:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
  10dd57:	00 
  10dd58:	89 54 24 08          	mov    %edx,0x8(%esp)
  10dd5c:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10dd60:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
  10dd66:	e8 e5 26 ff ff       	call   100450 <__panic>
  10dd6b:	e9 00 00 00 00       	jmp    10dd70 <basic_check+0x790>
  10dd70:	b8 01 00 00 00       	mov    $0x1,%eax
    free_list = free_list_store;
  10dd75:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10dd78:	89 0d 30 49 11 00    	mov    %ecx,0x114930
  10dd7e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10dd81:	89 0d 34 49 11 00    	mov    %ecx,0x114934
    nr_free = nr_free_store;
  10dd87:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10dd8a:	89 0d 38 49 11 00    	mov    %ecx,0x114938
    free_page(p);
  10dd90:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10dd93:	89 0c 24             	mov    %ecx,(%esp)
  10dd96:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10dd9d:	00 
  10dd9e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
  10dda4:	e8 17 53 ff ff       	call   1030c0 <free_pages>
  10dda9:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
  10ddae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10ddb1:	89 0c 24             	mov    %ecx,(%esp)
  10ddb4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10ddbb:	00 
  10ddbc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
  10ddc2:	e8 f9 52 ff ff       	call   1030c0 <free_pages>
  10ddc7:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
  10ddcc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10ddcf:	89 0c 24             	mov    %ecx,(%esp)
  10ddd2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10ddd9:	00 
  10ddda:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
  10dde0:	e8 db 52 ff ff       	call   1030c0 <free_pages>
}
  10dde5:	81 c4 d4 00 00 00    	add    $0xd4,%esp
  10ddeb:	5e                   	pop    %esi
  10ddec:	5d                   	pop    %ebp
  10dded:	c3                   	ret    
  10ddee:	66 90                	xchg   %ax,%ax

0010ddf0 <page_ref>:
page_ref(struct Page *page) {
  10ddf0:	55                   	push   %ebp
  10ddf1:	89 e5                	mov    %esp,%ebp
  10ddf3:	50                   	push   %eax
  10ddf4:	8b 45 08             	mov    0x8(%ebp),%eax
  10ddf7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
  10ddfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10ddfd:	8b 00                	mov    (%eax),%eax
  10ddff:	83 c4 04             	add    $0x4,%esp
  10de02:	5d                   	pop    %ebp
  10de03:	c3                   	ret    
  10de04:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10de0b:	00 00 00 00 00 

0010de10 <page2pa>:
page2pa(struct Page *page) {
  10de10:	55                   	push   %ebp
  10de11:	89 e5                	mov    %esp,%ebp
  10de13:	83 ec 08             	sub    $0x8,%esp
  10de16:	8b 45 08             	mov    0x8(%ebp),%eax
  10de19:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
  10de1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10de1f:	89 04 24             	mov    %eax,(%esp)
  10de22:	e8 09 00 00 00       	call   10de30 <page2ppn>
  10de27:	c1 e0 0c             	shl    $0xc,%eax
  10de2a:	83 c4 08             	add    $0x8,%esp
  10de2d:	5d                   	pop    %ebp
  10de2e:	c3                   	ret    
  10de2f:	90                   	nop

0010de30 <page2ppn>:
page2ppn(struct Page *page) {
  10de30:	55                   	push   %ebp
  10de31:	89 e5                	mov    %esp,%ebp
  10de33:	50                   	push   %eax
  10de34:	8b 45 08             	mov    0x8(%ebp),%eax
  10de37:	b9 14 00 00 00       	mov    $0x14,%ecx
  10de3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
  10de3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10de42:	8b 15 2c 49 11 00    	mov    0x11492c,%edx
  10de48:	29 d0                	sub    %edx,%eax
  10de4a:	99                   	cltd   
  10de4b:	f7 f9                	idiv   %ecx
  10de4d:	83 c4 04             	add    $0x4,%esp
  10de50:	5d                   	pop    %ebp
  10de51:	c3                   	ret    
  10de52:	66 90                	xchg   %ax,%ax
  10de54:	66 90                	xchg   %ax,%ax
  10de56:	66 90                	xchg   %ax,%ax
  10de58:	66 90                	xchg   %ax,%ax
  10de5a:	66 90                	xchg   %ax,%ax
  10de5c:	66 90                	xchg   %ax,%ax
  10de5e:	66 90                	xchg   %ax,%ax

0010de60 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
  10de60:	55                   	push   %ebp
  10de61:	89 e5                	mov    %esp,%ebp
  10de63:	83 ec 08             	sub    $0x8,%esp
  10de66:	8b 45 08             	mov    0x8(%ebp),%eax
  10de69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t cnt = 0;
  10de6c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*s ++ != '\0') {
  10de73:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10de76:	89 c1                	mov    %eax,%ecx
  10de78:	83 c1 01             	add    $0x1,%ecx
  10de7b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10de7e:	0f be 00             	movsbl (%eax),%eax
  10de81:	83 f8 00             	cmp    $0x0,%eax
  10de84:	0f 84 0e 00 00 00    	je     10de98 <strlen+0x38>
        cnt ++;
  10de8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10de8d:	83 c0 01             	add    $0x1,%eax
  10de90:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*s ++ != '\0') {
  10de93:	e9 db ff ff ff       	jmp    10de73 <strlen+0x13>
    }
    return cnt;
  10de98:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10de9b:	83 c4 08             	add    $0x8,%esp
  10de9e:	5d                   	pop    %ebp
  10de9f:	c3                   	ret    

0010dea0 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
  10dea0:	55                   	push   %ebp
  10dea1:	89 e5                	mov    %esp,%ebp
  10dea3:	83 ec 10             	sub    $0x10,%esp
  10dea6:	8b 45 0c             	mov    0xc(%ebp),%eax
  10dea9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10deac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10deaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t cnt = 0;
  10deb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10deb9:	31 c0                	xor    %eax,%eax
  10debb:	88 c1                	mov    %al,%cl
    while (cnt < len && *s ++ != '\0') {
  10debd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10dec0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
  10dec3:	88 4d f3             	mov    %cl,-0xd(%ebp)
  10dec6:	0f 83 17 00 00 00    	jae    10dee3 <strnlen+0x43>
  10decc:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10decf:	89 c1                	mov    %eax,%ecx
  10ded1:	83 c1 01             	add    $0x1,%ecx
  10ded4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10ded7:	0f be 00             	movsbl (%eax),%eax
  10deda:	83 f8 00             	cmp    $0x0,%eax
  10dedd:	0f 95 c2             	setne  %dl
  10dee0:	88 55 f3             	mov    %dl,-0xd(%ebp)
  10dee3:	8a 45 f3             	mov    -0xd(%ebp),%al
  10dee6:	a8 01                	test   $0x1,%al
  10dee8:	0f 85 05 00 00 00    	jne    10def3 <strnlen+0x53>
  10deee:	e9 0e 00 00 00       	jmp    10df01 <strnlen+0x61>
        cnt ++;
  10def3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10def6:	83 c0 01             	add    $0x1,%eax
  10def9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (cnt < len && *s ++ != '\0') {
  10defc:	e9 b8 ff ff ff       	jmp    10deb9 <strnlen+0x19>
    }
    return cnt;
  10df01:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10df04:	83 c4 10             	add    $0x10,%esp
  10df07:	5d                   	pop    %ebp
  10df08:	c3                   	ret    
  10df09:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

0010df10 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
  10df10:	55                   	push   %ebp
  10df11:	89 e5                	mov    %esp,%ebp
  10df13:	57                   	push   %edi
  10df14:	56                   	push   %esi
  10df15:	83 ec 1c             	sub    $0x1c,%esp
  10df18:	8b 45 0c             	mov    0xc(%ebp),%eax
  10df1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10df1e:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10df21:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
  10df24:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10df27:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10df2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10df2d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
        "1: lodsb;"
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
  10df30:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10df33:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    asm volatile (
  10df36:	89 c6                	mov    %eax,%esi
  10df38:	89 cf                	mov    %ecx,%edi
  10df3a:	ac                   	lods   %ds:(%esi),%al
  10df3b:	aa                   	stos   %al,%es:(%edi)
  10df3c:	84 c0                	test   %al,%al
  10df3e:	0f 85 f6 ff ff ff    	jne    10df3a <strcpy+0x2a>
  10df44:	89 75 ec             	mov    %esi,-0x14(%ebp)
  10df47:	89 7d e8             	mov    %edi,-0x18(%ebp)
  10df4a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return dst;
  10df4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10df50:	83 c4 1c             	add    $0x1c,%esp
  10df53:	5e                   	pop    %esi
  10df54:	5f                   	pop    %edi
  10df55:	5d                   	pop    %ebp
  10df56:	c3                   	ret    
  10df57:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
  10df5e:	00 00 

0010df60 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
  10df60:	55                   	push   %ebp
  10df61:	89 e5                	mov    %esp,%ebp
  10df63:	83 ec 10             	sub    $0x10,%esp
  10df66:	8b 45 10             	mov    0x10(%ebp),%eax
  10df69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10df6c:	8b 55 08             	mov    0x8(%ebp),%edx
  10df6f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10df72:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10df75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = dst;
  10df78:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10df7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (len > 0) {
  10df7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10df82:	0f 86 36 00 00 00    	jbe    10dfbe <strncpy+0x5e>
        if ((*p = *src) != '\0') {
  10df88:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10df8b:	8a 08                	mov    (%eax),%cl
  10df8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10df90:	88 08                	mov    %cl,(%eax)
  10df92:	0f be c1             	movsbl %cl,%eax
  10df95:	83 f8 00             	cmp    $0x0,%eax
  10df98:	0f 84 09 00 00 00    	je     10dfa7 <strncpy+0x47>
            src ++;
  10df9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10dfa1:	83 c0 01             	add    $0x1,%eax
  10dfa4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        p ++, len --;
  10dfa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10dfaa:	83 c0 01             	add    $0x1,%eax
  10dfad:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10dfb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10dfb3:	83 c0 ff             	add    $0xffffffff,%eax
  10dfb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (len > 0) {
  10dfb9:	e9 c0 ff ff ff       	jmp    10df7e <strncpy+0x1e>
    }
    return dst;
  10dfbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10dfc1:	83 c4 10             	add    $0x10,%esp
  10dfc4:	5d                   	pop    %ebp
  10dfc5:	c3                   	ret    
  10dfc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
  10dfcd:	00 00 00 

0010dfd0 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
  10dfd0:	55                   	push   %ebp
  10dfd1:	89 e5                	mov    %esp,%ebp
  10dfd3:	57                   	push   %edi
  10dfd4:	56                   	push   %esi
  10dfd5:	83 ec 1c             	sub    $0x1c,%esp
  10dfd8:	8b 45 0c             	mov    0xc(%ebp),%eax
  10dfdb:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10dfde:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10dfe1:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
  10dfe4:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10dfe7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10dfea:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10dfed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
        : "1" (s1), "2" (s2)
  10dff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10dff3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    asm volatile (
  10dff6:	89 c6                	mov    %eax,%esi
  10dff8:	89 cf                	mov    %ecx,%edi
  10dffa:	ac                   	lods   %ds:(%esi),%al
  10dffb:	ae                   	scas   %es:(%edi),%al
  10dffc:	0f 85 0f 00 00 00    	jne    10e011 <strcmp+0x41>
  10e002:	84 c0                	test   %al,%al
  10e004:	0f 85 f0 ff ff ff    	jne    10dffa <strcmp+0x2a>
  10e00a:	31 c0                	xor    %eax,%eax
  10e00c:	e9 04 00 00 00       	jmp    10e015 <strcmp+0x45>
  10e011:	19 c0                	sbb    %eax,%eax
  10e013:	0c 01                	or     $0x1,%al
  10e015:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10e018:	89 75 ec             	mov    %esi,-0x14(%ebp)
  10e01b:	89 7d e8             	mov    %edi,-0x18(%ebp)
    return ret;
  10e01e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10e021:	83 c4 1c             	add    $0x1c,%esp
  10e024:	5e                   	pop    %esi
  10e025:	5f                   	pop    %edi
  10e026:	5d                   	pop    %ebp
  10e027:	c3                   	ret    
  10e028:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
  10e02f:	00 

0010e030 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
  10e030:	55                   	push   %ebp
  10e031:	89 e5                	mov    %esp,%ebp
  10e033:	83 ec 14             	sub    $0x14,%esp
  10e036:	8b 45 10             	mov    0x10(%ebp),%eax
  10e039:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e03c:	8b 55 08             	mov    0x8(%ebp),%edx
  10e03f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10e042:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10e045:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10e048:	31 c0                	xor    %eax,%eax
  10e04a:	88 c1                	mov    %al,%cl
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
  10e04c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10e050:	88 4d f3             	mov    %cl,-0xd(%ebp)
  10e053:	0f 86 2a 00 00 00    	jbe    10e083 <strncmp+0x53>
  10e059:	31 c0                	xor    %eax,%eax
  10e05b:	88 c1                	mov    %al,%cl
  10e05d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e060:	0f be 00             	movsbl (%eax),%eax
  10e063:	83 f8 00             	cmp    $0x0,%eax
  10e066:	88 4d f3             	mov    %cl,-0xd(%ebp)
  10e069:	0f 84 14 00 00 00    	je     10e083 <strncmp+0x53>
  10e06f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e072:	0f be 00             	movsbl (%eax),%eax
  10e075:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10e078:	0f be 09             	movsbl (%ecx),%ecx
  10e07b:	39 c8                	cmp    %ecx,%eax
  10e07d:	0f 94 c2             	sete   %dl
  10e080:	88 55 f3             	mov    %dl,-0xd(%ebp)
  10e083:	8a 45 f3             	mov    -0xd(%ebp),%al
  10e086:	a8 01                	test   $0x1,%al
  10e088:	0f 85 05 00 00 00    	jne    10e093 <strncmp+0x63>
  10e08e:	e9 20 00 00 00       	jmp    10e0b3 <strncmp+0x83>
        n --, s1 ++, s2 ++;
  10e093:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10e096:	83 c0 ff             	add    $0xffffffff,%eax
  10e099:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10e09c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e09f:	83 c0 01             	add    $0x1,%eax
  10e0a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e0a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e0a8:	83 c0 01             	add    $0x1,%eax
  10e0ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
  10e0ae:	e9 95 ff ff ff       	jmp    10e048 <strncmp+0x18>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
  10e0b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10e0b7:	0f 85 0a 00 00 00    	jne    10e0c7 <strncmp+0x97>
  10e0bd:	31 c0                	xor    %eax,%eax
  10e0bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10e0c2:	e9 11 00 00 00       	jmp    10e0d8 <strncmp+0xa8>
  10e0c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e0ca:	0f b6 00             	movzbl (%eax),%eax
  10e0cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10e0d0:	0f b6 09             	movzbl (%ecx),%ecx
  10e0d3:	29 c8                	sub    %ecx,%eax
  10e0d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10e0d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e0db:	83 c4 14             	add    $0x14,%esp
  10e0de:	5d                   	pop    %ebp
  10e0df:	c3                   	ret    

0010e0e0 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
  10e0e0:	55                   	push   %ebp
  10e0e1:	89 e5                	mov    %esp,%ebp
  10e0e3:	83 ec 0c             	sub    $0xc,%esp
  10e0e6:	8a 45 0c             	mov    0xc(%ebp),%al
  10e0e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10e0ec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10e0ef:	88 45 f7             	mov    %al,-0x9(%ebp)
    while (*s != '\0') {
  10e0f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e0f5:	0f be 00             	movsbl (%eax),%eax
  10e0f8:	83 f8 00             	cmp    $0x0,%eax
  10e0fb:	0f 84 2b 00 00 00    	je     10e12c <strchr+0x4c>
        if (*s == c) {
  10e101:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e104:	0f be 00             	movsbl (%eax),%eax
  10e107:	0f be 4d f7          	movsbl -0x9(%ebp),%ecx
  10e10b:	39 c8                	cmp    %ecx,%eax
  10e10d:	0f 85 0b 00 00 00    	jne    10e11e <strchr+0x3e>
            return (char *)s;
  10e113:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e116:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e119:	e9 15 00 00 00       	jmp    10e133 <strchr+0x53>
        }
        s ++;
  10e11e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e121:	83 c0 01             	add    $0x1,%eax
  10e124:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*s != '\0') {
  10e127:	e9 c6 ff ff ff       	jmp    10e0f2 <strchr+0x12>
    }
    return NULL;
  10e12c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10e133:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e136:	83 c4 0c             	add    $0xc,%esp
  10e139:	5d                   	pop    %ebp
  10e13a:	c3                   	ret    
  10e13b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

0010e140 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
  10e140:	55                   	push   %ebp
  10e141:	89 e5                	mov    %esp,%ebp
  10e143:	83 ec 08             	sub    $0x8,%esp
  10e146:	8a 45 0c             	mov    0xc(%ebp),%al
  10e149:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10e14c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10e14f:	88 45 fb             	mov    %al,-0x5(%ebp)
    while (*s != '\0') {
  10e152:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e155:	0f be 00             	movsbl (%eax),%eax
  10e158:	83 f8 00             	cmp    $0x0,%eax
  10e15b:	0f 84 25 00 00 00    	je     10e186 <strfind+0x46>
        if (*s == c) {
  10e161:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e164:	0f be 00             	movsbl (%eax),%eax
  10e167:	0f be 4d fb          	movsbl -0x5(%ebp),%ecx
  10e16b:	39 c8                	cmp    %ecx,%eax
  10e16d:	0f 85 05 00 00 00    	jne    10e178 <strfind+0x38>
            break;
  10e173:	e9 0e 00 00 00       	jmp    10e186 <strfind+0x46>
        }
        s ++;
  10e178:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e17b:	83 c0 01             	add    $0x1,%eax
  10e17e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s != '\0') {
  10e181:	e9 cc ff ff ff       	jmp    10e152 <strfind+0x12>
    }
    return (char *)s;
  10e186:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e189:	83 c4 08             	add    $0x8,%esp
  10e18c:	5d                   	pop    %ebp
  10e18d:	c3                   	ret    
  10e18e:	66 90                	xchg   %ax,%ax

0010e190 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
  10e190:	55                   	push   %ebp
  10e191:	89 e5                	mov    %esp,%ebp
  10e193:	83 ec 20             	sub    $0x20,%esp
  10e196:	8b 45 10             	mov    0x10(%ebp),%eax
  10e199:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e19c:	8b 55 08             	mov    0x8(%ebp),%edx
  10e19f:	89 55 fc             	mov    %edx,-0x4(%ebp)
  10e1a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10e1a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int neg = 0;
  10e1a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    long val = 0;
  10e1af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  10e1b6:	b0 01                	mov    $0x1,%al

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
  10e1b8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  10e1bb:	0f be 09             	movsbl (%ecx),%ecx
  10e1be:	83 f9 20             	cmp    $0x20,%ecx
  10e1c1:	88 45 e7             	mov    %al,-0x19(%ebp)
  10e1c4:	0f 84 0f 00 00 00    	je     10e1d9 <strtol+0x49>
  10e1ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e1cd:	0f be 00             	movsbl (%eax),%eax
  10e1d0:	83 f8 09             	cmp    $0x9,%eax
  10e1d3:	0f 94 c1             	sete   %cl
  10e1d6:	88 4d e7             	mov    %cl,-0x19(%ebp)
  10e1d9:	8a 45 e7             	mov    -0x19(%ebp),%al
  10e1dc:	a8 01                	test   $0x1,%al
  10e1de:	0f 85 05 00 00 00    	jne    10e1e9 <strtol+0x59>
  10e1e4:	e9 0e 00 00 00       	jmp    10e1f7 <strtol+0x67>
        s ++;
  10e1e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e1ec:	83 c0 01             	add    $0x1,%eax
  10e1ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s == ' ' || *s == '\t') {
  10e1f2:	e9 bf ff ff ff       	jmp    10e1b6 <strtol+0x26>
    }

    // plus/minus sign
    if (*s == '+') {
  10e1f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e1fa:	0f be 00             	movsbl (%eax),%eax
  10e1fd:	83 f8 2b             	cmp    $0x2b,%eax
  10e200:	0f 85 0e 00 00 00    	jne    10e214 <strtol+0x84>
        s ++;
  10e206:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e209:	83 c0 01             	add    $0x1,%eax
  10e20c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
  10e20f:	e9 24 00 00 00       	jmp    10e238 <strtol+0xa8>
    else if (*s == '-') {
  10e214:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e217:	0f be 00             	movsbl (%eax),%eax
  10e21a:	83 f8 2d             	cmp    $0x2d,%eax
  10e21d:	0f 85 10 00 00 00    	jne    10e233 <strtol+0xa3>
        s ++, neg = 1;
  10e223:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e226:	83 c0 01             	add    $0x1,%eax
  10e229:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e22c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  10e233:	e9 00 00 00 00       	jmp    10e238 <strtol+0xa8>
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
  10e238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10e23c:	0f 84 0a 00 00 00    	je     10e24c <strtol+0xbc>
  10e242:	83 7d f4 10          	cmpl   $0x10,-0xc(%ebp)
  10e246:	0f 85 34 00 00 00    	jne    10e280 <strtol+0xf0>
  10e24c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e24f:	0f be 00             	movsbl (%eax),%eax
  10e252:	83 f8 30             	cmp    $0x30,%eax
  10e255:	0f 85 25 00 00 00    	jne    10e280 <strtol+0xf0>
  10e25b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e25e:	0f be 40 01          	movsbl 0x1(%eax),%eax
  10e262:	83 f8 78             	cmp    $0x78,%eax
  10e265:	0f 85 15 00 00 00    	jne    10e280 <strtol+0xf0>
        s += 2, base = 16;
  10e26b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e26e:	83 c0 02             	add    $0x2,%eax
  10e271:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e274:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
    }
  10e27b:	e9 49 00 00 00       	jmp    10e2c9 <strtol+0x139>
    else if (base == 0 && s[0] == '0') {
  10e280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10e284:	0f 85 24 00 00 00    	jne    10e2ae <strtol+0x11e>
  10e28a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e28d:	0f be 00             	movsbl (%eax),%eax
  10e290:	83 f8 30             	cmp    $0x30,%eax
  10e293:	0f 85 15 00 00 00    	jne    10e2ae <strtol+0x11e>
        s ++, base = 8;
  10e299:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e29c:	83 c0 01             	add    $0x1,%eax
  10e29f:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e2a2:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    }
  10e2a9:	e9 16 00 00 00       	jmp    10e2c4 <strtol+0x134>
    else if (base == 0) {
  10e2ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10e2b2:	0f 85 07 00 00 00    	jne    10e2bf <strtol+0x12f>
        base = 10;
  10e2b8:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
  10e2bf:	e9 00 00 00 00       	jmp    10e2c4 <strtol+0x134>
  10e2c4:	e9 00 00 00 00       	jmp    10e2c9 <strtol+0x139>
    }

    // digits
    while (1) {
  10e2c9:	e9 00 00 00 00       	jmp    10e2ce <strtol+0x13e>
        int dig;

        if (*s >= '0' && *s <= '9') {
  10e2ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e2d1:	0f be 00             	movsbl (%eax),%eax
  10e2d4:	83 f8 30             	cmp    $0x30,%eax
  10e2d7:	0f 8c 20 00 00 00    	jl     10e2fd <strtol+0x16d>
  10e2dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e2e0:	0f be 00             	movsbl (%eax),%eax
  10e2e3:	83 f8 39             	cmp    $0x39,%eax
  10e2e6:	0f 8f 11 00 00 00    	jg     10e2fd <strtol+0x16d>
            dig = *s - '0';
  10e2ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e2ef:	0f be 00             	movsbl (%eax),%eax
  10e2f2:	83 e8 30             	sub    $0x30,%eax
  10e2f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
  10e2f8:	e9 73 00 00 00       	jmp    10e370 <strtol+0x1e0>
        else if (*s >= 'a' && *s <= 'z') {
  10e2fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e300:	0f be 00             	movsbl (%eax),%eax
  10e303:	83 f8 61             	cmp    $0x61,%eax
  10e306:	0f 8c 23 00 00 00    	jl     10e32f <strtol+0x19f>
  10e30c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e30f:	0f be 00             	movsbl (%eax),%eax
  10e312:	83 f8 7a             	cmp    $0x7a,%eax
  10e315:	0f 8f 14 00 00 00    	jg     10e32f <strtol+0x19f>
            dig = *s - 'a' + 10;
  10e31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e31e:	0f be 00             	movsbl (%eax),%eax
  10e321:	83 e8 61             	sub    $0x61,%eax
  10e324:	83 c0 0a             	add    $0xa,%eax
  10e327:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
  10e32a:	e9 3c 00 00 00       	jmp    10e36b <strtol+0x1db>
        else if (*s >= 'A' && *s <= 'Z') {
  10e32f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e332:	0f be 00             	movsbl (%eax),%eax
  10e335:	83 f8 41             	cmp    $0x41,%eax
  10e338:	0f 8c 23 00 00 00    	jl     10e361 <strtol+0x1d1>
  10e33e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e341:	0f be 00             	movsbl (%eax),%eax
  10e344:	83 f8 5a             	cmp    $0x5a,%eax
  10e347:	0f 8f 14 00 00 00    	jg     10e361 <strtol+0x1d1>
            dig = *s - 'A' + 10;
  10e34d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e350:	0f be 00             	movsbl (%eax),%eax
  10e353:	83 e8 41             	sub    $0x41,%eax
  10e356:	83 c0 0a             	add    $0xa,%eax
  10e359:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
  10e35c:	e9 05 00 00 00       	jmp    10e366 <strtol+0x1d6>
        else {
            break;
  10e361:	e9 36 00 00 00       	jmp    10e39c <strtol+0x20c>
  10e366:	e9 00 00 00 00       	jmp    10e36b <strtol+0x1db>
  10e36b:	e9 00 00 00 00       	jmp    10e370 <strtol+0x1e0>
        }
        if (dig >= base) {
  10e370:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e373:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10e376:	0f 8c 05 00 00 00    	jl     10e381 <strtol+0x1f1>
            break;
  10e37c:	e9 1b 00 00 00       	jmp    10e39c <strtol+0x20c>
        }
        s ++, val = (val * base) + dig;
  10e381:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e384:	83 c0 01             	add    $0x1,%eax
  10e387:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e38a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e38d:	0f af 45 f4          	imul   -0xc(%ebp),%eax
  10e391:	03 45 e8             	add    -0x18(%ebp),%eax
  10e394:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (1) {
  10e397:	e9 32 ff ff ff       	jmp    10e2ce <strtol+0x13e>
        // we don't properly detect overflow!
    }

    if (endptr) {
  10e39c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10e3a0:	0f 84 08 00 00 00    	je     10e3ae <strtol+0x21e>
        *endptr = (char *) s;
  10e3a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e3a9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  10e3ac:	89 01                	mov    %eax,(%ecx)
    }
    return (neg ? -val : val);
  10e3ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10e3b2:	0f 84 0d 00 00 00    	je     10e3c5 <strtol+0x235>
  10e3b8:	31 c0                	xor    %eax,%eax
  10e3ba:	2b 45 ec             	sub    -0x14(%ebp),%eax
  10e3bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10e3c0:	e9 06 00 00 00       	jmp    10e3cb <strtol+0x23b>
  10e3c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e3c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10e3cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10e3ce:	83 c4 20             	add    $0x20,%esp
  10e3d1:	5d                   	pop    %ebp
  10e3d2:	c3                   	ret    
  10e3d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10e3da:	84 00 00 00 00 00 

0010e3e0 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
  10e3e0:	55                   	push   %ebp
  10e3e1:	89 e5                	mov    %esp,%ebp
  10e3e3:	57                   	push   %edi
  10e3e4:	83 ec 24             	sub    $0x24,%esp
  10e3e7:	8b 45 10             	mov    0x10(%ebp),%eax
  10e3ea:	8a 4d 0c             	mov    0xc(%ebp),%cl
  10e3ed:	8b 55 08             	mov    0x8(%ebp),%edx
  10e3f0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  10e3f3:	88 4d e3             	mov    %cl,-0x1d(%ebp)
  10e3f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
  10e3f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10e3fc:	8a 4d e3             	mov    -0x1d(%ebp),%cl
  10e3ff:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10e402:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10e405:	88 4d f7             	mov    %cl,-0x9(%ebp)
  10e408:	89 55 f0             	mov    %edx,-0x10(%ebp)
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
  10e40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10e40e:	8a 4d f7             	mov    -0x9(%ebp),%cl
  10e411:	8b 55 f8             	mov    -0x8(%ebp),%edx
    asm volatile (
  10e414:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10e417:	88 c8                	mov    %cl,%al
  10e419:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10e41c:	89 d7                	mov    %edx,%edi
  10e41e:	f3 aa                	rep stos %al,%es:(%edi)
  10e420:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10e423:	89 7d e8             	mov    %edi,-0x18(%ebp)
        : "memory");
    return s;
  10e426:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e429:	83 c4 24             	add    $0x24,%esp
  10e42c:	5f                   	pop    %edi
  10e42d:	5d                   	pop    %ebp
  10e42e:	c3                   	ret    
  10e42f:	90                   	nop

0010e430 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
  10e430:	55                   	push   %ebp
  10e431:	89 e5                	mov    %esp,%ebp
  10e433:	57                   	push   %edi
  10e434:	56                   	push   %esi
  10e435:	83 ec 48             	sub    $0x48,%esp
  10e438:	8b 45 10             	mov    0x10(%ebp),%eax
  10e43b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e43e:	8b 55 08             	mov    0x8(%ebp),%edx
  10e441:	89 55 c0             	mov    %edx,-0x40(%ebp)
  10e444:	89 4d bc             	mov    %ecx,-0x44(%ebp)
  10e447:	89 45 b8             	mov    %eax,-0x48(%ebp)
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
  10e44a:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10e44d:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10e450:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10e453:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10e456:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
  10e459:	89 55 d0             	mov    %edx,-0x30(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
  10e45c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10e45f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
  10e462:	0f 83 4c 00 00 00    	jae    10e4b4 <memmove+0x84>
        return __memcpy(dst, src, n);
  10e468:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10e46b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10e46e:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10e471:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10e474:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10e477:	89 55 ec             	mov    %edx,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
  10e47a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e47d:	c1 e8 02             	shr    $0x2,%eax
  10e480:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10e483:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10e486:	8b 75 f0             	mov    -0x10(%ebp),%esi
    asm volatile (
  10e489:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10e48c:	89 c1                	mov    %eax,%ecx
  10e48e:	89 d7                	mov    %edx,%edi
  10e490:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  10e492:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
  10e495:	83 e1 03             	and    $0x3,%ecx
  10e498:	0f 84 02 00 00 00    	je     10e4a0 <memmove+0x70>
  10e49e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e4a0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10e4a3:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10e4a6:	89 75 e0             	mov    %esi,-0x20(%ebp)
        : "memory");
    return dst;
  10e4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return __memcpy(dst, src, n);
  10e4ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10e4af:	e9 32 00 00 00       	jmp    10e4e6 <memmove+0xb6>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
  10e4b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10e4b7:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10e4ba:	83 e9 01             	sub    $0x1,%ecx
  10e4bd:	03 4d d4             	add    -0x2c(%ebp),%ecx
  10e4c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10e4c3:	83 ea 01             	sub    $0x1,%edx
  10e4c6:	03 55 d8             	add    -0x28(%ebp),%edx
    asm volatile (
  10e4c9:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  10e4cc:	89 c1                	mov    %eax,%ecx
  10e4ce:	89 d7                	mov    %edx,%edi
  10e4d0:	8b 75 b0             	mov    -0x50(%ebp),%esi
  10e4d3:	fd                   	std    
  10e4d4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e4d6:	fc                   	cld    
  10e4d7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
  10e4da:	89 75 c8             	mov    %esi,-0x38(%ebp)
  10e4dd:	89 7d c4             	mov    %edi,-0x3c(%ebp)
    return dst;
  10e4e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10e4e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
}
  10e4e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10e4e9:	83 c4 48             	add    $0x48,%esp
  10e4ec:	5e                   	pop    %esi
  10e4ed:	5f                   	pop    %edi
  10e4ee:	5d                   	pop    %ebp
  10e4ef:	c3                   	ret    

0010e4f0 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
  10e4f0:	55                   	push   %ebp
  10e4f1:	89 e5                	mov    %esp,%ebp
  10e4f3:	57                   	push   %edi
  10e4f4:	56                   	push   %esi
  10e4f5:	83 ec 28             	sub    $0x28,%esp
  10e4f8:	8b 45 10             	mov    0x10(%ebp),%eax
  10e4fb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e4fe:	8b 55 08             	mov    0x8(%ebp),%edx
  10e501:	89 55 dc             	mov    %edx,-0x24(%ebp)
  10e504:	89 4d d8             	mov    %ecx,-0x28(%ebp)
  10e507:	89 45 d4             	mov    %eax,-0x2c(%ebp)
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
  10e50a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10e50d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
  10e510:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10e513:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10e516:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10e519:	89 55 ec             	mov    %edx,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
  10e51c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e51f:	c1 e8 02             	shr    $0x2,%eax
  10e522:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10e525:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10e528:	8b 75 f0             	mov    -0x10(%ebp),%esi
    asm volatile (
  10e52b:	89 4d d0             	mov    %ecx,-0x30(%ebp)
  10e52e:	89 d7                	mov    %edx,%edi
  10e530:	89 c1                	mov    %eax,%ecx
  10e532:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  10e534:	8b 4d d0             	mov    -0x30(%ebp),%ecx
  10e537:	83 e1 03             	and    $0x3,%ecx
  10e53a:	0f 84 02 00 00 00    	je     10e542 <memcpy+0x52>
  10e540:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
  10e542:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10e545:	89 7d e4             	mov    %edi,-0x1c(%ebp)
  10e548:	89 75 e0             	mov    %esi,-0x20(%ebp)
    return dst;
  10e54b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10e54e:	83 c4 28             	add    $0x28,%esp
  10e551:	5e                   	pop    %esi
  10e552:	5f                   	pop    %edi
  10e553:	5d                   	pop    %ebp
  10e554:	c3                   	ret    
  10e555:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10e55c:	00 00 00 00 

0010e560 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
  10e560:	55                   	push   %ebp
  10e561:	89 e5                	mov    %esp,%ebp
  10e563:	83 ec 18             	sub    $0x18,%esp
  10e566:	8b 45 10             	mov    0x10(%ebp),%eax
  10e569:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e56c:	8b 55 08             	mov    0x8(%ebp),%edx
  10e56f:	89 55 f8             	mov    %edx,-0x8(%ebp)
  10e572:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10e575:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *s1 = (const char *)v1;
  10e578:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10e57b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const char *s2 = (const char *)v2;
  10e57e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10e581:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (n -- > 0) {
  10e584:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10e587:	89 c1                	mov    %eax,%ecx
  10e589:	83 c1 ff             	add    $0xffffffff,%ecx
  10e58c:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10e58f:	83 f8 00             	cmp    $0x0,%eax
  10e592:	0f 86 41 00 00 00    	jbe    10e5d9 <memcmp+0x79>
        if (*s1 != *s2) {
  10e598:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e59b:	0f be 00             	movsbl (%eax),%eax
  10e59e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10e5a1:	0f be 09             	movsbl (%ecx),%ecx
  10e5a4:	39 c8                	cmp    %ecx,%eax
  10e5a6:	0f 84 16 00 00 00    	je     10e5c2 <memcmp+0x62>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
  10e5ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e5af:	0f b6 00             	movzbl (%eax),%eax
  10e5b2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10e5b5:	0f b6 09             	movzbl (%ecx),%ecx
  10e5b8:	29 c8                	sub    %ecx,%eax
  10e5ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10e5bd:	e9 1e 00 00 00       	jmp    10e5e0 <memcmp+0x80>
        }
        s1 ++, s2 ++;
  10e5c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10e5c5:	83 c0 01             	add    $0x1,%eax
  10e5c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10e5cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e5ce:	83 c0 01             	add    $0x1,%eax
  10e5d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (n -- > 0) {
  10e5d4:	e9 ab ff ff ff       	jmp    10e584 <memcmp+0x24>
    }
    return 0;
  10e5d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10e5e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10e5e3:	83 c4 18             	add    $0x18,%esp
  10e5e6:	5d                   	pop    %ebp
  10e5e7:	c3                   	ret    
  10e5e8:	66 90                	xchg   %ax,%ax
  10e5ea:	66 90                	xchg   %ax,%ax
  10e5ec:	66 90                	xchg   %ax,%ax
  10e5ee:	66 90                	xchg   %ax,%ax

0010e5f0 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
  10e5f0:	55                   	push   %ebp
  10e5f1:	89 e5                	mov    %esp,%ebp
  10e5f3:	57                   	push   %edi
  10e5f4:	56                   	push   %esi
  10e5f5:	83 ec 20             	sub    $0x20,%esp
  10e5f8:	8b 45 10             	mov    0x10(%ebp),%eax
  10e5fb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10e5fe:	8b 55 08             	mov    0x8(%ebp),%edx
  10e601:	89 55 f4             	mov    %edx,-0xc(%ebp)
  10e604:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10e607:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10e60a:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;

    va_start(ap, fmt);
  10e60d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
  10e610:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10e613:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10e616:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10e619:	89 e7                	mov    %esp,%edi
  10e61b:	89 47 0c             	mov    %eax,0xc(%edi)
  10e61e:	89 77 08             	mov    %esi,0x8(%edi)
  10e621:	89 57 04             	mov    %edx,0x4(%edi)
  10e624:	89 0f                	mov    %ecx,(%edi)
  10e626:	e8 15 00 00 00       	call   10e640 <vprintfmt>
    va_end(ap);
}
  10e62b:	83 c4 20             	add    $0x20,%esp
  10e62e:	5e                   	pop    %esi
  10e62f:	5f                   	pop    %edi
  10e630:	5d                   	pop    %ebp
  10e631:	c3                   	ret    
  10e632:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10e639:	1f 84 00 00 00 00 00 

0010e640 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
  10e640:	55                   	push   %ebp
  10e641:	89 e5                	mov    %esp,%ebp
  10e643:	53                   	push   %ebx
  10e644:	57                   	push   %edi
  10e645:	56                   	push   %esi
  10e646:	81 ec bc 00 00 00    	sub    $0xbc,%esp
  10e64c:	8b 45 14             	mov    0x14(%ebp),%eax
  10e64f:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10e652:	8b 55 0c             	mov    0xc(%ebp),%edx
  10e655:	8b 75 08             	mov    0x8(%ebp),%esi
  10e658:	89 75 f0             	mov    %esi,-0x10(%ebp)
  10e65b:	89 55 ec             	mov    %edx,-0x14(%ebp)
  10e65e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10e661:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
  10e664:	e9 00 00 00 00       	jmp    10e669 <vprintfmt+0x29>
  10e669:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e66c:	89 c1                	mov    %eax,%ecx
  10e66e:	83 c1 01             	add    $0x1,%ecx
  10e671:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10e674:	0f b6 00             	movzbl (%eax),%eax
  10e677:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10e67a:	83 f8 25             	cmp    $0x25,%eax
  10e67d:	0f 84 2c 00 00 00    	je     10e6af <vprintfmt+0x6f>
            if (ch == '\0') {
  10e683:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  10e687:	0f 85 0b 00 00 00    	jne    10e698 <vprintfmt+0x58>
                return;
  10e68d:	81 c4 bc 00 00 00    	add    $0xbc,%esp
  10e693:	5e                   	pop    %esi
  10e694:	5f                   	pop    %edi
  10e695:	5b                   	pop    %ebx
  10e696:	5d                   	pop    %ebp
  10e697:	c3                   	ret    
            }
            putch(ch, putdat);
  10e698:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10e69b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10e69e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10e6a1:	89 0c 24             	mov    %ecx,(%esp)
  10e6a4:	89 54 24 04          	mov    %edx,0x4(%esp)
  10e6a8:	ff d0                	call   *%eax
        while ((ch = *(unsigned char *)fmt ++) != '%') {
  10e6aa:	e9 ba ff ff ff       	jmp    10e669 <vprintfmt+0x29>
        }

        // Process a %-escape sequence
        char padc = ' ';
  10e6af:	c6 45 bb 20          	movb   $0x20,-0x45(%ebp)
        width = precision = -1;
  10e6b3:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
  10e6ba:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
        lflag = altflag = 0;
  10e6c1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
  10e6c8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
  10e6cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e6d2:	89 c1                	mov    %eax,%ecx
  10e6d4:	41                   	inc    %ecx
  10e6d5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
  10e6d8:	0f b6 00             	movzbl (%eax),%eax
  10e6db:	89 c1                	mov    %eax,%ecx
  10e6dd:	83 e9 23             	sub    $0x23,%ecx
  10e6e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10e6e3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  10e6e6:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  10e6e9:	0f 84 c8 01 00 00    	je     10e8b7 <vprintfmt+0x277>
  10e6ef:	e9 00 00 00 00       	jmp    10e6f4 <vprintfmt+0xb4>
  10e6f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e6f7:	83 e8 25             	sub    $0x25,%eax
  10e6fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10e6fd:	0f 84 95 05 00 00    	je     10ec98 <vprintfmt+0x658>
  10e703:	e9 00 00 00 00       	jmp    10e708 <vprintfmt+0xc8>
  10e708:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e70b:	83 e8 2a             	sub    $0x2a,%eax
  10e70e:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10e711:	0f 84 75 01 00 00    	je     10e88c <vprintfmt+0x24c>
  10e717:	e9 00 00 00 00       	jmp    10e71c <vprintfmt+0xdc>
  10e71c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e71f:	83 e8 2d             	sub    $0x2d,%eax
  10e722:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10e725:	0f 84 01 01 00 00    	je     10e82c <vprintfmt+0x1ec>
  10e72b:	e9 00 00 00 00       	jmp    10e730 <vprintfmt+0xf0>
  10e730:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e733:	83 e8 2e             	sub    $0x2e,%eax
  10e736:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10e739:	0f 84 62 01 00 00    	je     10e8a1 <vprintfmt+0x261>
  10e73f:	e9 00 00 00 00       	jmp    10e744 <vprintfmt+0x104>
  10e744:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e747:	83 e8 30             	sub    $0x30,%eax
  10e74a:	89 45 9c             	mov    %eax,-0x64(%ebp)
  10e74d:	0f 84 e2 00 00 00    	je     10e835 <vprintfmt+0x1f5>
  10e753:	e9 00 00 00 00       	jmp    10e758 <vprintfmt+0x118>
  10e758:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e75b:	83 c0 cf             	add    $0xffffffcf,%eax
  10e75e:	83 e8 09             	sub    $0x9,%eax
  10e761:	89 45 98             	mov    %eax,-0x68(%ebp)
  10e764:	0f 82 d4 00 00 00    	jb     10e83e <vprintfmt+0x1fe>
  10e76a:	e9 00 00 00 00       	jmp    10e76f <vprintfmt+0x12f>
  10e76f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e772:	83 e8 63             	sub    $0x63,%eax
  10e775:	89 45 94             	mov    %eax,-0x6c(%ebp)
  10e778:	0f 84 6f 01 00 00    	je     10e8ed <vprintfmt+0x2ad>
  10e77e:	e9 00 00 00 00       	jmp    10e783 <vprintfmt+0x143>
  10e783:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e786:	83 e8 64             	sub    $0x64,%eax
  10e789:	89 45 90             	mov    %eax,-0x70(%ebp)
  10e78c:	0f 84 a6 03 00 00    	je     10eb38 <vprintfmt+0x4f8>
  10e792:	e9 00 00 00 00       	jmp    10e797 <vprintfmt+0x157>
  10e797:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e79a:	83 e8 65             	sub    $0x65,%eax
  10e79d:	89 45 8c             	mov    %eax,-0x74(%ebp)
  10e7a0:	0f 84 68 01 00 00    	je     10e90e <vprintfmt+0x2ce>
  10e7a6:	e9 00 00 00 00       	jmp    10e7ab <vprintfmt+0x16b>
  10e7ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e7ae:	83 e8 6c             	sub    $0x6c,%eax
  10e7b1:	89 45 88             	mov    %eax,-0x78(%ebp)
  10e7b4:	0f 84 25 01 00 00    	je     10e8df <vprintfmt+0x29f>
  10e7ba:	e9 00 00 00 00       	jmp    10e7bf <vprintfmt+0x17f>
  10e7bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e7c2:	83 e8 6f             	sub    $0x6f,%eax
  10e7c5:	89 45 84             	mov    %eax,-0x7c(%ebp)
  10e7c8:	0f 84 e4 03 00 00    	je     10ebb2 <vprintfmt+0x572>
  10e7ce:	e9 00 00 00 00       	jmp    10e7d3 <vprintfmt+0x193>
  10e7d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e7d6:	83 e8 70             	sub    $0x70,%eax
  10e7d9:	89 45 80             	mov    %eax,-0x80(%ebp)
  10e7dc:	0f 84 f4 03 00 00    	je     10ebd6 <vprintfmt+0x596>
  10e7e2:	e9 00 00 00 00       	jmp    10e7e7 <vprintfmt+0x1a7>
  10e7e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e7ea:	83 e8 73             	sub    $0x73,%eax
  10e7ed:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
  10e7f3:	0f 84 a7 01 00 00    	je     10e9a0 <vprintfmt+0x360>
  10e7f9:	e9 00 00 00 00       	jmp    10e7fe <vprintfmt+0x1be>
  10e7fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e801:	83 e8 75             	sub    $0x75,%eax
  10e804:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
  10e80a:	0f 84 7e 03 00 00    	je     10eb8e <vprintfmt+0x54e>
  10e810:	e9 00 00 00 00       	jmp    10e815 <vprintfmt+0x1d5>
  10e815:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10e818:	83 e8 78             	sub    $0x78,%eax
  10e81b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
  10e821:	0f 84 f8 03 00 00    	je     10ec1f <vprintfmt+0x5df>
  10e827:	e9 83 04 00 00       	jmp    10ecaf <vprintfmt+0x66f>

        // flag to pad on the right
        case '-':
            padc = '-';
  10e82c:	c6 45 bb 2d          	movb   $0x2d,-0x45(%ebp)
            goto reswitch;
  10e830:	e9 9a fe ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
  10e835:	c6 45 bb 30          	movb   $0x30,-0x45(%ebp)
            goto reswitch;
  10e839:	e9 91 fe ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
  10e83e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
                precision = precision * 10 + ch - '0';
  10e845:	6b 45 c4 0a          	imul   $0xa,-0x3c(%ebp),%eax
  10e849:	03 45 dc             	add    -0x24(%ebp),%eax
  10e84c:	83 e8 30             	sub    $0x30,%eax
  10e84f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
                ch = *fmt;
  10e852:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e855:	0f be 00             	movsbl (%eax),%eax
  10e858:	89 45 dc             	mov    %eax,-0x24(%ebp)
                if (ch < '0' || ch > '9') {
  10e85b:	83 7d dc 30          	cmpl   $0x30,-0x24(%ebp)
  10e85f:	0f 8c 0a 00 00 00    	jl     10e86f <vprintfmt+0x22f>
  10e865:	83 7d dc 39          	cmpl   $0x39,-0x24(%ebp)
  10e869:	0f 8e 05 00 00 00    	jle    10e874 <vprintfmt+0x234>
                    break;
  10e86f:	e9 13 00 00 00       	jmp    10e887 <vprintfmt+0x247>
                }
            }
  10e874:	e9 00 00 00 00       	jmp    10e879 <vprintfmt+0x239>
            for (precision = 0; ; ++ fmt) {
  10e879:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10e87c:	83 c0 01             	add    $0x1,%eax
  10e87f:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10e882:	e9 be ff ff ff       	jmp    10e845 <vprintfmt+0x205>
            goto process_precision;
  10e887:	e9 37 00 00 00       	jmp    10e8c3 <vprintfmt+0x283>

        case '*':
            precision = va_arg(ap, int);
  10e88c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10e88f:	89 c1                	mov    %eax,%ecx
  10e891:	83 c1 04             	add    $0x4,%ecx
  10e894:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10e897:	8b 00                	mov    (%eax),%eax
  10e899:	89 45 c4             	mov    %eax,-0x3c(%ebp)
            goto process_precision;
  10e89c:	e9 22 00 00 00       	jmp    10e8c3 <vprintfmt+0x283>

        case '.':
            if (width < 0)
  10e8a1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10e8a5:	0f 8d 07 00 00 00    	jge    10e8b2 <vprintfmt+0x272>
                width = 0;
  10e8ab:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
            goto reswitch;
  10e8b2:	e9 18 fe ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        case '#':
            altflag = 1;
  10e8b7:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
            goto reswitch;
  10e8be:	e9 0c fe ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        process_precision:
            if (width < 0)
  10e8c3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10e8c7:	0f 8d 0d 00 00 00    	jge    10e8da <vprintfmt+0x29a>
                width = precision, precision = -1;
  10e8cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10e8d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10e8d3:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
            goto reswitch;
  10e8da:	e9 f0 fd ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
  10e8df:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10e8e2:	83 c0 01             	add    $0x1,%eax
  10e8e5:	89 45 c0             	mov    %eax,-0x40(%ebp)
            goto reswitch;
  10e8e8:	e9 e2 fd ff ff       	jmp    10e6cf <vprintfmt+0x8f>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
  10e8ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10e8f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10e8f3:	89 ca                	mov    %ecx,%edx
  10e8f5:	83 c2 04             	add    $0x4,%edx
  10e8f8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
  10e8fb:	8b 09                	mov    (%ecx),%ecx
  10e8fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10e900:	89 0c 24             	mov    %ecx,(%esp)
  10e903:	89 54 24 04          	mov    %edx,0x4(%esp)
  10e907:	ff d0                	call   *%eax
            break;
  10e909:	e9 f0 03 00 00       	jmp    10ecfe <vprintfmt+0x6be>

        // error message
        case 'e':
            err = va_arg(ap, int);
  10e90e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10e911:	89 c1                	mov    %eax,%ecx
  10e913:	83 c1 04             	add    $0x4,%ecx
  10e916:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10e919:	8b 00                	mov    (%eax),%eax
  10e91b:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
  10e91e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
  10e922:	0f 8d 08 00 00 00    	jge    10e930 <vprintfmt+0x2f0>
  10e928:	31 c0                	xor    %eax,%eax
                err = -err;
  10e92a:	2b 45 d8             	sub    -0x28(%ebp),%eax
  10e92d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
  10e930:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
  10e934:	0f 8f 16 00 00 00    	jg     10e950 <vprintfmt+0x310>
  10e93a:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10e93d:	8b 04 85 68 06 11 00 	mov    0x110668(,%eax,4),%eax
  10e944:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10e947:	83 f8 00             	cmp    $0x0,%eax
  10e94a:	0f 85 28 00 00 00    	jne    10e978 <vprintfmt+0x338>
  10e950:	8d 05 84 06 11 00    	lea    0x110684,%eax
                printfmt(putch, putdat, "error %d", err);
  10e956:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10e959:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10e95c:	8b 75 d8             	mov    -0x28(%ebp),%esi
  10e95f:	89 0c 24             	mov    %ecx,(%esp)
  10e962:	89 54 24 04          	mov    %edx,0x4(%esp)
  10e966:	89 44 24 08          	mov    %eax,0x8(%esp)
  10e96a:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10e96e:	e8 7d fc ff ff       	call   10e5f0 <printfmt>
            }
  10e973:	e9 23 00 00 00       	jmp    10e99b <vprintfmt+0x35b>
  10e978:	8d 05 a0 f8 10 00    	lea    0x10f8a0,%eax
            else {
                printfmt(putch, putdat, "%s", p);
  10e97e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10e981:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10e984:	8b 75 e0             	mov    -0x20(%ebp),%esi
  10e987:	89 0c 24             	mov    %ecx,(%esp)
  10e98a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10e98e:	89 44 24 08          	mov    %eax,0x8(%esp)
  10e992:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10e996:	e8 55 fc ff ff       	call   10e5f0 <printfmt>
            }
            break;
  10e99b:	e9 5e 03 00 00       	jmp    10ecfe <vprintfmt+0x6be>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
  10e9a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10e9a3:	89 c1                	mov    %eax,%ecx
  10e9a5:	83 c1 04             	add    $0x4,%ecx
  10e9a8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10e9ab:	8b 00                	mov    (%eax),%eax
  10e9ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
  10e9b0:	83 f8 00             	cmp    $0x0,%eax
  10e9b3:	0f 85 09 00 00 00    	jne    10e9c2 <vprintfmt+0x382>
  10e9b9:	8d 05 8d 06 11 00    	lea    0x11068d,%eax
                p = "(null)";
  10e9bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
            }
            if (width > 0 && padc != '-') {
  10e9c2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10e9c6:	0f 8e 57 00 00 00    	jle    10ea23 <vprintfmt+0x3e3>
  10e9cc:	0f be 45 bb          	movsbl -0x45(%ebp),%eax
  10e9d0:	83 f8 2d             	cmp    $0x2d,%eax
  10e9d3:	0f 84 4a 00 00 00    	je     10ea23 <vprintfmt+0x3e3>
                for (width -= strnlen(p, precision); width > 0; width --) {
  10e9d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10e9dc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10e9df:	89 04 24             	mov    %eax,(%esp)
  10e9e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10e9e6:	e8 b5 f4 ff ff       	call   10dea0 <strnlen>
  10e9eb:	8b 4d c8             	mov    -0x38(%ebp),%ecx
  10e9ee:	29 c1                	sub    %eax,%ecx
  10e9f0:	89 4d c8             	mov    %ecx,-0x38(%ebp)
  10e9f3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10e9f7:	0f 8e 21 00 00 00    	jle    10ea1e <vprintfmt+0x3de>
                    putch(padc, putdat);
  10e9fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ea00:	0f be 4d bb          	movsbl -0x45(%ebp),%ecx
  10ea04:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10ea07:	89 0c 24             	mov    %ecx,(%esp)
  10ea0a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10ea0e:	ff d0                	call   *%eax
                for (width -= strnlen(p, precision); width > 0; width --) {
  10ea10:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10ea13:	83 c0 ff             	add    $0xffffffff,%eax
  10ea16:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10ea19:	e9 d5 ff ff ff       	jmp    10e9f3 <vprintfmt+0x3b3>
                }
            }
  10ea1e:	e9 00 00 00 00       	jmp    10ea23 <vprintfmt+0x3e3>
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
  10ea23:	e9 00 00 00 00       	jmp    10ea28 <vprintfmt+0x3e8>
  10ea28:	31 c0                	xor    %eax,%eax
  10ea2a:	88 c1                	mov    %al,%cl
  10ea2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10ea2f:	89 c2                	mov    %eax,%edx
  10ea31:	83 c2 01             	add    $0x1,%edx
  10ea34:	89 55 e0             	mov    %edx,-0x20(%ebp)
  10ea37:	0f be 00             	movsbl (%eax),%eax
  10ea3a:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10ea3d:	83 f8 00             	cmp    $0x0,%eax
  10ea40:	88 8d 73 ff ff ff    	mov    %cl,-0x8d(%ebp)
  10ea46:	0f 84 33 00 00 00    	je     10ea7f <vprintfmt+0x43f>
  10ea4c:	b0 01                	mov    $0x1,%al
  10ea4e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
  10ea52:	88 85 72 ff ff ff    	mov    %al,-0x8e(%ebp)
  10ea58:	0f 8c 15 00 00 00    	jl     10ea73 <vprintfmt+0x433>
  10ea5e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  10ea61:	83 c0 ff             	add    $0xffffffff,%eax
  10ea64:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  10ea67:	83 f8 00             	cmp    $0x0,%eax
  10ea6a:	0f 9d c1             	setge  %cl
  10ea6d:	88 8d 72 ff ff ff    	mov    %cl,-0x8e(%ebp)
  10ea73:	8a 85 72 ff ff ff    	mov    -0x8e(%ebp),%al
  10ea79:	88 85 73 ff ff ff    	mov    %al,-0x8d(%ebp)
  10ea7f:	8a 85 73 ff ff ff    	mov    -0x8d(%ebp),%al
  10ea85:	a8 01                	test   $0x1,%al
  10ea87:	0f 85 05 00 00 00    	jne    10ea92 <vprintfmt+0x452>
  10ea8d:	e9 66 00 00 00       	jmp    10eaf8 <vprintfmt+0x4b8>
                if (altflag && (ch < ' ' || ch > '~')) {
  10ea92:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
  10ea96:	0f 84 37 00 00 00    	je     10ead3 <vprintfmt+0x493>
  10ea9c:	83 7d dc 20          	cmpl   $0x20,-0x24(%ebp)
  10eaa0:	0f 8c 0a 00 00 00    	jl     10eab0 <vprintfmt+0x470>
  10eaa6:	83 7d dc 7e          	cmpl   $0x7e,-0x24(%ebp)
  10eaaa:	0f 8e 23 00 00 00    	jle    10ead3 <vprintfmt+0x493>
  10eab0:	b8 3f 00 00 00       	mov    $0x3f,%eax
                    putch('?', putdat);
  10eab5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10eab8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10eabb:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
  10eac2:	89 54 24 04          	mov    %edx,0x4(%esp)
  10eac6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
  10eacc:	ff d1                	call   *%ecx
                }
  10eace:	e9 12 00 00 00       	jmp    10eae5 <vprintfmt+0x4a5>
                else {
                    putch(ch, putdat);
  10ead3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ead6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10ead9:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10eadc:	89 0c 24             	mov    %ecx,(%esp)
  10eadf:	89 54 24 04          	mov    %edx,0x4(%esp)
  10eae3:	ff d0                	call   *%eax
                }
            }
  10eae5:	e9 00 00 00 00       	jmp    10eaea <vprintfmt+0x4aa>
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
  10eaea:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10eaed:	83 c0 ff             	add    $0xffffffff,%eax
  10eaf0:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10eaf3:	e9 30 ff ff ff       	jmp    10ea28 <vprintfmt+0x3e8>
            for (; width > 0; width --) {
  10eaf8:	e9 00 00 00 00       	jmp    10eafd <vprintfmt+0x4bd>
  10eafd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10eb01:	0f 8e 2c 00 00 00    	jle    10eb33 <vprintfmt+0x4f3>
  10eb07:	b8 20 00 00 00       	mov    $0x20,%eax
                putch(' ', putdat);
  10eb0c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10eb0f:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10eb12:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  10eb19:	89 54 24 04          	mov    %edx,0x4(%esp)
  10eb1d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
  10eb23:	ff d1                	call   *%ecx
            for (; width > 0; width --) {
  10eb25:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10eb28:	83 c0 ff             	add    $0xffffffff,%eax
  10eb2b:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10eb2e:	e9 ca ff ff ff       	jmp    10eafd <vprintfmt+0x4bd>
            }
            break;
  10eb33:	e9 c6 01 00 00       	jmp    10ecfe <vprintfmt+0x6be>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
  10eb38:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10eb3b:	89 e1                	mov    %esp,%ecx
  10eb3d:	89 41 04             	mov    %eax,0x4(%ecx)
  10eb40:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10eb43:	89 01                	mov    %eax,(%ecx)
  10eb45:	e8 c6 01 00 00       	call   10ed10 <getint>
  10eb4a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  10eb4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if ((long long)num < 0) {
  10eb50:	85 d2                	test   %edx,%edx
  10eb52:	0f 89 2a 00 00 00    	jns    10eb82 <vprintfmt+0x542>
  10eb58:	e9 00 00 00 00       	jmp    10eb5d <vprintfmt+0x51d>
                putch('-', putdat);
  10eb5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10eb60:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10eb63:	89 e2                	mov    %esp,%edx
  10eb65:	89 4a 04             	mov    %ecx,0x4(%edx)
  10eb68:	c7 02 2d 00 00 00    	movl   $0x2d,(%edx)
  10eb6e:	ff d0                	call   *%eax
                num = -(long long)num;
  10eb70:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10eb73:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10eb76:	31 d2                	xor    %edx,%edx
  10eb78:	f7 d8                	neg    %eax
  10eb7a:	19 ca                	sbb    %ecx,%edx
  10eb7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10eb7f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
            }
            base = 10;
  10eb82:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%ebp)
            goto number;
  10eb89:	e9 b0 00 00 00       	jmp    10ec3e <vprintfmt+0x5fe>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
  10eb8e:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10eb91:	89 e1                	mov    %esp,%ecx
  10eb93:	89 41 04             	mov    %eax,0x4(%ecx)
  10eb96:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10eb99:	89 01                	mov    %eax,(%ecx)
  10eb9b:	e8 00 02 00 00       	call   10eda0 <getuint>
  10eba0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  10eba3:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 10;
  10eba6:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%ebp)
            goto number;
  10ebad:	e9 8c 00 00 00       	jmp    10ec3e <vprintfmt+0x5fe>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
  10ebb2:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10ebb5:	89 e1                	mov    %esp,%ecx
  10ebb7:	89 41 04             	mov    %eax,0x4(%ecx)
  10ebba:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10ebbd:	89 01                	mov    %eax,(%ecx)
  10ebbf:	e8 dc 01 00 00       	call   10eda0 <getuint>
  10ebc4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  10ebc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 8;
  10ebca:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%ebp)
            goto number;
  10ebd1:	e9 68 00 00 00       	jmp    10ec3e <vprintfmt+0x5fe>

        // pointer
        case 'p':
            putch('0', putdat);
  10ebd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ebd9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10ebdc:	89 e2                	mov    %esp,%edx
  10ebde:	89 4a 04             	mov    %ecx,0x4(%edx)
  10ebe1:	c7 02 30 00 00 00    	movl   $0x30,(%edx)
  10ebe7:	ff d0                	call   *%eax
            putch('x', putdat);
  10ebe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ebec:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10ebef:	89 e2                	mov    %esp,%edx
  10ebf1:	89 4a 04             	mov    %ecx,0x4(%edx)
  10ebf4:	c7 02 78 00 00 00    	movl   $0x78,(%edx)
  10ebfa:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
  10ebfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10ebff:	89 c1                	mov    %eax,%ecx
  10ec01:	83 c1 04             	add    $0x4,%ecx
  10ec04:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
  10ec07:	8b 00                	mov    (%eax),%eax
  10ec09:	89 45 d0             	mov    %eax,-0x30(%ebp)
  10ec0c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            base = 16;
  10ec13:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)
            goto number;
  10ec1a:	e9 1f 00 00 00       	jmp    10ec3e <vprintfmt+0x5fe>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
  10ec1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
  10ec22:	89 e1                	mov    %esp,%ecx
  10ec24:	89 41 04             	mov    %eax,0x4(%ecx)
  10ec27:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10ec2a:	89 01                	mov    %eax,(%ecx)
  10ec2c:	e8 6f 01 00 00       	call   10eda0 <getuint>
  10ec31:	89 55 d4             	mov    %edx,-0x2c(%ebp)
  10ec34:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 16;
  10ec37:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
  10ec3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ec41:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10ec44:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10ec47:	8b 75 d4             	mov    -0x2c(%ebp),%esi
  10ec4a:	8b 7d cc             	mov    -0x34(%ebp),%edi
  10ec4d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  10ec50:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
  10ec56:	0f be 45 bb          	movsbl -0x45(%ebp),%eax
  10ec5a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
  10ec60:	89 e0                	mov    %esp,%eax
  10ec62:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
  10ec68:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
  10ec6e:	89 48 18             	mov    %ecx,0x18(%eax)
  10ec71:	89 58 14             	mov    %ebx,0x14(%eax)
  10ec74:	89 78 10             	mov    %edi,0x10(%eax)
  10ec77:	89 70 0c             	mov    %esi,0xc(%eax)
  10ec7a:	89 50 08             	mov    %edx,0x8(%eax)
  10ec7d:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
  10ec83:	89 50 04             	mov    %edx,0x4(%eax)
  10ec86:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
  10ec8c:	89 30                	mov    %esi,(%eax)
  10ec8e:	e8 9d 01 00 00       	call   10ee30 <printnum>
            break;
  10ec93:	e9 66 00 00 00       	jmp    10ecfe <vprintfmt+0x6be>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
  10ec98:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ec9b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10ec9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10eca1:	89 0c 24             	mov    %ecx,(%esp)
  10eca4:	89 54 24 04          	mov    %edx,0x4(%esp)
  10eca8:	ff d0                	call   *%eax
            break;
  10ecaa:	e9 4f 00 00 00       	jmp    10ecfe <vprintfmt+0x6be>
  10ecaf:	b8 25 00 00 00       	mov    $0x25,%eax

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
  10ecb4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10ecb7:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10ecba:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  10ecc1:	89 54 24 04          	mov    %edx,0x4(%esp)
  10ecc5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
  10eccb:	ff d1                	call   *%ecx
            for (fmt --; fmt[-1] != '%'; fmt --)
  10eccd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ecd0:	83 c0 ff             	add    $0xffffffff,%eax
  10ecd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10ecd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ecd9:	0f be 40 ff          	movsbl -0x1(%eax),%eax
  10ecdd:	83 f8 25             	cmp    $0x25,%eax
  10ece0:	0f 84 13 00 00 00    	je     10ecf9 <vprintfmt+0x6b9>
  10ece6:	e9 00 00 00 00       	jmp    10eceb <vprintfmt+0x6ab>
  10eceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10ecee:	83 c0 ff             	add    $0xffffffff,%eax
  10ecf1:	89 45 e8             	mov    %eax,-0x18(%ebp)
  10ecf4:	e9 dd ff ff ff       	jmp    10ecd6 <vprintfmt+0x696>
                /* do nothing */;
            break;
  10ecf9:	e9 00 00 00 00       	jmp    10ecfe <vprintfmt+0x6be>
    while (1) {
  10ecfe:	e9 61 f9 ff ff       	jmp    10e664 <vprintfmt+0x24>
  10ed03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10ed0a:	84 00 00 00 00 00 

0010ed10 <getint>:
getint(va_list *ap, int lflag) {
  10ed10:	55                   	push   %ebp
  10ed11:	89 e5                	mov    %esp,%ebp
  10ed13:	83 ec 10             	sub    $0x10,%esp
  10ed16:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ed19:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10ed1c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10ed1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (lflag >= 2) {
  10ed22:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
  10ed26:	0f 8c 1c 00 00 00    	jl     10ed48 <getint+0x38>
        return va_arg(*ap, long long);
  10ed2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ed2f:	8b 08                	mov    (%eax),%ecx
  10ed31:	89 ca                	mov    %ecx,%edx
  10ed33:	83 c2 08             	add    $0x8,%edx
  10ed36:	89 10                	mov    %edx,(%eax)
  10ed38:	8b 01                	mov    (%ecx),%eax
  10ed3a:	8b 49 04             	mov    0x4(%ecx),%ecx
  10ed3d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10ed40:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10ed43:	e9 41 00 00 00       	jmp    10ed89 <getint+0x79>
    else if (lflag) {
  10ed48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10ed4c:	0f 84 1e 00 00 00    	je     10ed70 <getint+0x60>
        return va_arg(*ap, long);
  10ed52:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ed55:	8b 08                	mov    (%eax),%ecx
  10ed57:	89 ca                	mov    %ecx,%edx
  10ed59:	83 c2 04             	add    $0x4,%edx
  10ed5c:	89 10                	mov    %edx,(%eax)
  10ed5e:	8b 01                	mov    (%ecx),%eax
  10ed60:	89 c1                	mov    %eax,%ecx
  10ed62:	c1 f9 1f             	sar    $0x1f,%ecx
  10ed65:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10ed68:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10ed6b:	e9 19 00 00 00       	jmp    10ed89 <getint+0x79>
        return va_arg(*ap, int);
  10ed70:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ed73:	8b 08                	mov    (%eax),%ecx
  10ed75:	89 ca                	mov    %ecx,%edx
  10ed77:	83 c2 04             	add    $0x4,%edx
  10ed7a:	89 10                	mov    %edx,(%eax)
  10ed7c:	8b 01                	mov    (%ecx),%eax
  10ed7e:	89 c1                	mov    %eax,%ecx
  10ed80:	c1 f9 1f             	sar    $0x1f,%ecx
  10ed83:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10ed86:	89 4d fc             	mov    %ecx,-0x4(%ebp)
}
  10ed89:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10ed8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10ed8f:	83 c4 10             	add    $0x10,%esp
  10ed92:	5d                   	pop    %ebp
  10ed93:	c3                   	ret    
  10ed94:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10ed9b:	00 00 00 00 00 

0010eda0 <getuint>:
getuint(va_list *ap, int lflag) {
  10eda0:	55                   	push   %ebp
  10eda1:	89 e5                	mov    %esp,%ebp
  10eda3:	83 ec 10             	sub    $0x10,%esp
  10eda6:	8b 45 0c             	mov    0xc(%ebp),%eax
  10eda9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10edac:	89 4d f4             	mov    %ecx,-0xc(%ebp)
  10edaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (lflag >= 2) {
  10edb2:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
  10edb6:	0f 8c 1c 00 00 00    	jl     10edd8 <getuint+0x38>
        return va_arg(*ap, unsigned long long);
  10edbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10edbf:	8b 08                	mov    (%eax),%ecx
  10edc1:	89 ca                	mov    %ecx,%edx
  10edc3:	83 c2 08             	add    $0x8,%edx
  10edc6:	89 10                	mov    %edx,(%eax)
  10edc8:	8b 01                	mov    (%ecx),%eax
  10edca:	8b 49 04             	mov    0x4(%ecx),%ecx
  10edcd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
  10edd0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10edd3:	e9 3f 00 00 00       	jmp    10ee17 <getuint+0x77>
    else if (lflag) {
  10edd8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10eddc:	0f 84 1d 00 00 00    	je     10edff <getuint+0x5f>
        return va_arg(*ap, unsigned long);
  10ede2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ede5:	8b 08                	mov    (%eax),%ecx
  10ede7:	89 ca                	mov    %ecx,%edx
  10ede9:	83 c2 04             	add    $0x4,%edx
  10edec:	89 10                	mov    %edx,(%eax)
  10edee:	8b 01                	mov    (%ecx),%eax
  10edf0:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10edf3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  10edfa:	e9 18 00 00 00       	jmp    10ee17 <getuint+0x77>
        return va_arg(*ap, unsigned int);
  10edff:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ee02:	8b 08                	mov    (%eax),%ecx
  10ee04:	89 ca                	mov    %ecx,%edx
  10ee06:	83 c2 04             	add    $0x4,%edx
  10ee09:	89 10                	mov    %edx,(%eax)
  10ee0b:	8b 01                	mov    (%ecx),%eax
  10ee0d:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10ee10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
  10ee17:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10ee1a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10ee1d:	83 c4 10             	add    $0x10,%esp
  10ee20:	5d                   	pop    %ebp
  10ee21:	c3                   	ret    
  10ee22:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10ee29:	1f 84 00 00 00 00 00 

0010ee30 <printnum>:
        unsigned long long num, unsigned base, int width, int padc) {
  10ee30:	55                   	push   %ebp
  10ee31:	89 e5                	mov    %esp,%ebp
  10ee33:	53                   	push   %ebx
  10ee34:	57                   	push   %edi
  10ee35:	56                   	push   %esi
  10ee36:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
  10ee3c:	8b 45 14             	mov    0x14(%ebp),%eax
  10ee3f:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10ee42:	8b 55 20             	mov    0x20(%ebp),%edx
  10ee45:	8b 75 1c             	mov    0x1c(%ebp),%esi
  10ee48:	8b 7d 18             	mov    0x18(%ebp),%edi
  10ee4b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  10ee4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
  10ee51:	8b 45 08             	mov    0x8(%ebp),%eax
  10ee54:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10ee57:	89 5d ec             	mov    %ebx,-0x14(%ebp)
  10ee5a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  10ee5d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10ee60:	89 4d e0             	mov    %ecx,-0x20(%ebp)
  10ee63:	89 7d dc             	mov    %edi,-0x24(%ebp)
  10ee66:	89 75 d8             	mov    %esi,-0x28(%ebp)
  10ee69:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    unsigned long long result = num;
  10ee6c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
  10ee6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  10ee72:	89 55 cc             	mov    %edx,-0x34(%ebp)
  10ee75:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    unsigned mod = do_div(result, base);
  10ee78:	8b 4d dc             	mov    -0x24(%ebp),%ecx
  10ee7b:	89 4d b0             	mov    %ecx,-0x50(%ebp)
  10ee7e:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10ee81:	8b 55 cc             	mov    -0x34(%ebp),%edx
  10ee84:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10ee87:	89 55 b8             	mov    %edx,-0x48(%ebp)
  10ee8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10ee8d:	89 45 c0             	mov    %eax,-0x40(%ebp)
  10ee90:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
  10ee94:	0f 84 18 00 00 00    	je     10eeb2 <printnum+0x82>
  10ee9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10ee9d:	31 d2                	xor    %edx,%edx
  10ee9f:	f7 75 b0             	divl   -0x50(%ebp)
  10eea2:	89 55 c0             	mov    %edx,-0x40(%ebp)
  10eea5:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10eea8:	89 d0                	mov    %edx,%eax
  10eeaa:	31 d2                	xor    %edx,%edx
  10eeac:	f7 75 b0             	divl   -0x50(%ebp)
  10eeaf:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10eeb2:	8b 45 b0             	mov    -0x50(%ebp),%eax
  10eeb5:	8b 4d bc             	mov    -0x44(%ebp),%ecx
  10eeb8:	8b 55 c0             	mov    -0x40(%ebp),%edx
  10eebb:	89 45 a8             	mov    %eax,-0x58(%ebp)
  10eebe:	89 c8                	mov    %ecx,%eax
  10eec0:	f7 75 a8             	divl   -0x58(%ebp)
  10eec3:	89 45 bc             	mov    %eax,-0x44(%ebp)
  10eec6:	89 55 b4             	mov    %edx,-0x4c(%ebp)
  10eec9:	8b 45 bc             	mov    -0x44(%ebp),%eax
  10eecc:	8b 55 b8             	mov    -0x48(%ebp),%edx
  10eecf:	89 55 cc             	mov    %edx,-0x34(%ebp)
  10eed2:	89 45 c8             	mov    %eax,-0x38(%ebp)
  10eed5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10eed8:	89 45 ac             	mov    %eax,-0x54(%ebp)
  10eedb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if (num >= base) {
  10eede:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10eee1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10eee4:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10eee7:	29 d0                	sub    %edx,%eax
  10eee9:	83 d9 00             	sbb    $0x0,%ecx
  10eeec:	89 45 a0             	mov    %eax,-0x60(%ebp)
  10eeef:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
  10eef2:	0f 82 4f 00 00 00    	jb     10ef47 <printnum+0x117>
  10eef8:	e9 00 00 00 00       	jmp    10eefd <printnum+0xcd>
        printnum(putch, putdat, result, base, width - 1, padc);
  10eefd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ef00:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10ef03:	8b 55 c8             	mov    -0x38(%ebp),%edx
  10ef06:	8b 75 cc             	mov    -0x34(%ebp),%esi
  10ef09:	8b 7d dc             	mov    -0x24(%ebp),%edi
  10ef0c:	8b 5d d8             	mov    -0x28(%ebp),%ebx
  10ef0f:	83 eb 01             	sub    $0x1,%ebx
  10ef12:	89 45 98             	mov    %eax,-0x68(%ebp)
  10ef15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10ef18:	89 45 94             	mov    %eax,-0x6c(%ebp)
  10ef1b:	89 e0                	mov    %esp,%eax
  10ef1d:	89 4d 90             	mov    %ecx,-0x70(%ebp)
  10ef20:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
  10ef23:	89 48 18             	mov    %ecx,0x18(%eax)
  10ef26:	89 58 14             	mov    %ebx,0x14(%eax)
  10ef29:	89 78 10             	mov    %edi,0x10(%eax)
  10ef2c:	89 70 0c             	mov    %esi,0xc(%eax)
  10ef2f:	89 50 08             	mov    %edx,0x8(%eax)
  10ef32:	8b 55 90             	mov    -0x70(%ebp),%edx
  10ef35:	89 50 04             	mov    %edx,0x4(%eax)
  10ef38:	8b 75 98             	mov    -0x68(%ebp),%esi
  10ef3b:	89 30                	mov    %esi,(%eax)
  10ef3d:	e8 ee fe ff ff       	call   10ee30 <printnum>
    } else {
  10ef42:	e9 33 00 00 00       	jmp    10ef7a <printnum+0x14a>
        while (-- width > 0)
  10ef47:	e9 00 00 00 00       	jmp    10ef4c <printnum+0x11c>
  10ef4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10ef4f:	83 c0 ff             	add    $0xffffffff,%eax
  10ef52:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10ef55:	83 f8 00             	cmp    $0x0,%eax
  10ef58:	0f 8e 17 00 00 00    	jle    10ef75 <printnum+0x145>
            putch(padc, putdat);
  10ef5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ef61:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
  10ef64:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10ef67:	89 0c 24             	mov    %ecx,(%esp)
  10ef6a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10ef6e:	ff d0                	call   *%eax
        while (-- width > 0)
  10ef70:	e9 d7 ff ff ff       	jmp    10ef4c <printnum+0x11c>
  10ef75:	e9 00 00 00 00       	jmp    10ef7a <printnum+0x14a>
    putch("0123456789abcdef"[mod], putdat);
  10ef7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ef7d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
  10ef80:	0f be 0c 0d f6 06 11 	movsbl 0x1106f6(,%ecx,1),%ecx
  10ef87:	00 
  10ef88:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10ef8b:	89 0c 24             	mov    %ecx,(%esp)
  10ef8e:	89 54 24 04          	mov    %edx,0x4(%esp)
  10ef92:	ff d0                	call   *%eax
}
  10ef94:	81 c4 8c 00 00 00    	add    $0x8c,%esp
  10ef9a:	5e                   	pop    %esi
  10ef9b:	5f                   	pop    %edi
  10ef9c:	5b                   	pop    %ebx
  10ef9d:	5d                   	pop    %ebp
  10ef9e:	c3                   	ret    
  10ef9f:	90                   	nop

0010efa0 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
  10efa0:	55                   	push   %ebp
  10efa1:	89 e5                	mov    %esp,%ebp
  10efa3:	57                   	push   %edi
  10efa4:	56                   	push   %esi
  10efa5:	83 ec 30             	sub    $0x30,%esp
  10efa8:	8b 45 10             	mov    0x10(%ebp),%eax
  10efab:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10efae:	8b 55 08             	mov    0x8(%ebp),%edx
  10efb1:	89 55 f4             	mov    %edx,-0xc(%ebp)
  10efb4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
  10efb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
  10efba:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;
    int cnt;
    va_start(ap, fmt);
  10efbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
  10efc0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10efc3:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10efc6:	8b 75 ec             	mov    -0x14(%ebp),%esi
  10efc9:	89 e7                	mov    %esp,%edi
  10efcb:	89 47 0c             	mov    %eax,0xc(%edi)
  10efce:	89 77 08             	mov    %esi,0x8(%edi)
  10efd1:	89 57 04             	mov    %edx,0x4(%edi)
  10efd4:	89 0f                	mov    %ecx,(%edi)
  10efd6:	e8 15 00 00 00       	call   10eff0 <vsnprintf>
  10efdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    va_end(ap);
    return cnt;
  10efde:	83 c4 30             	add    $0x30,%esp
  10efe1:	5e                   	pop    %esi
  10efe2:	5f                   	pop    %edi
  10efe3:	5d                   	pop    %ebp
  10efe4:	c3                   	ret    
  10efe5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
  10efec:	00 00 00 00 

0010eff0 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
  10eff0:	55                   	push   %ebp
  10eff1:	89 e5                	mov    %esp,%ebp
  10eff3:	56                   	push   %esi
  10eff4:	83 ec 34             	sub    $0x34,%esp
  10eff7:	8b 45 14             	mov    0x14(%ebp),%eax
  10effa:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10effd:	8b 55 0c             	mov    0xc(%ebp),%edx
  10f000:	8b 75 08             	mov    0x8(%ebp),%esi
  10f003:	89 75 f4             	mov    %esi,-0xc(%ebp)
  10f006:	89 55 f0             	mov    %edx,-0x10(%ebp)
  10f009:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10f00c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sprintbuf b = {str, str + size - 1, 0};
  10f00f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10f012:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10f015:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10f018:	03 45 f0             	add    -0x10(%ebp),%eax
  10f01b:	83 c0 ff             	add    $0xffffffff,%eax
  10f01e:	89 45 dc             	mov    %eax,-0x24(%ebp)
  10f021:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
  10f028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10f02c:	0f 84 0c 00 00 00    	je     10f03e <vsnprintf+0x4e>
  10f032:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10f035:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  10f038:	0f 86 0c 00 00 00    	jbe    10f04a <vsnprintf+0x5a>
        return -E_INVAL;
  10f03e:	c7 45 f8 fd ff ff ff 	movl   $0xfffffffd,-0x8(%ebp)
  10f045:	e9 2f 00 00 00       	jmp    10f079 <vsnprintf+0x89>
  10f04a:	8d 05 90 f0 10 00    	lea    0x10f090,%eax
  10f050:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
  10f053:	8b 55 ec             	mov    -0x14(%ebp),%edx
  10f056:	8b 75 e8             	mov    -0x18(%ebp),%esi
  10f059:	89 04 24             	mov    %eax,(%esp)
  10f05c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10f060:	89 54 24 08          	mov    %edx,0x8(%esp)
  10f064:	89 74 24 0c          	mov    %esi,0xc(%esp)
  10f068:	e8 d3 f5 ff ff       	call   10e640 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
  10f06d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10f070:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
  10f073:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10f076:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
  10f079:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10f07c:	83 c4 34             	add    $0x34,%esp
  10f07f:	5e                   	pop    %esi
  10f080:	5d                   	pop    %ebp
  10f081:	c3                   	ret    
  10f082:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
  10f089:	1f 84 00 00 00 00 00 

0010f090 <sprintputch>:
sprintputch(int ch, struct sprintbuf *b) {
  10f090:	55                   	push   %ebp
  10f091:	89 e5                	mov    %esp,%ebp
  10f093:	56                   	push   %esi
  10f094:	83 ec 08             	sub    $0x8,%esp
  10f097:	8b 45 0c             	mov    0xc(%ebp),%eax
  10f09a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10f09d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
  10f0a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    b->cnt ++;
  10f0a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10f0a6:	8b 48 08             	mov    0x8(%eax),%ecx
  10f0a9:	83 c1 01             	add    $0x1,%ecx
  10f0ac:	89 48 08             	mov    %ecx,0x8(%eax)
    if (b->buf < b->ebuf) {
  10f0af:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10f0b2:	8b 00                	mov    (%eax),%eax
  10f0b4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10f0b7:	3b 41 04             	cmp    0x4(%ecx),%eax
  10f0ba:	0f 83 13 00 00 00    	jae    10f0d3 <sprintputch+0x43>
        *b->buf ++ = ch;
  10f0c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10f0c3:	88 c1                	mov    %al,%cl
  10f0c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10f0c8:	8b 10                	mov    (%eax),%edx
  10f0ca:	89 d6                	mov    %edx,%esi
  10f0cc:	83 c6 01             	add    $0x1,%esi
  10f0cf:	89 30                	mov    %esi,(%eax)
  10f0d1:	88 0a                	mov    %cl,(%edx)
}
  10f0d3:	83 c4 08             	add    $0x8,%esp
  10f0d6:	5e                   	pop    %esi
  10f0d7:	5d                   	pop    %ebp
  10f0d8:	c3                   	ret    
