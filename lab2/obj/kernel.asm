
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
    movl $KERNEL_DS, %eax
    movw %ax, %ds
c0100000:	0f 01 15 18 30 11 00 	lgdtl  0x113018
    movw %ax, %es
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ss
c010000c:	66 8e d8             	mov    %ax,%ds

c010000f:	66 8e c0             	mov    %ax,%es
    ljmp $KERNEL_CS, $relocated
c0100012:	66 8e d0             	mov    %ax,%ss

relocated:
c0100015:	ea 1c 00 10 c0 08 00 	ljmp   $0x8,$0xc010001c

c010001c <relocated>:

    # set ebp, esp
    movl $0x0, %ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001c:	bd 00 00 00 00       	mov    $0x0,%ebp
    # now kernel stack is ready , call the first C function
    call kern_init

# should never get here
spin:
c0100021:	bc 00 30 11 c0       	mov    $0xc0113000,%esp
    jmp spin

.data
c0100026:	e8 05 00 00 00       	call   c0100030 <kern_init>

c010002b <spin>:
.align PGSIZE
    .globl bootstack
bootstack:
    .space KSTACKSIZE
    .globl bootstacktop
c010002b:	eb fe                	jmp    c010002b <spin>
c010002d:	66 90                	xchg   %ax,%ax
c010002f:	90                   	nop

c0100030 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100030:	55                   	push   %ebp
c0100031:	89 e5                	mov    %esp,%ebp
c0100033:	83 ec 28             	sub    $0x28,%esp
c0100036:	8d 05 04 3a 11 c0    	lea    0xc0113a04,%eax
c010003c:	31 c9                	xor    %ecx,%ecx
c010003e:	8d 15 3c 49 11 c0    	lea    0xc011493c,%edx
c0100044:	29 c2                	sub    %eax,%edx
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100046:	89 04 24             	mov    %eax,(%esp)
c0100049:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100050:	00 
c0100051:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100055:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0100058:	e8 83 e3 00 00       	call   c010e3e0 <memset>

    cons_init();                // init the console
c010005d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100060:	e8 6b 11 00 00       	call   c01011d0 <cons_init>
c0100065:	8d 05 f8 f0 10 c0    	lea    0xc010f0f8,%eax
c010006b:	8d 0d dc f0 10 c0    	lea    0xc010f0dc,%ecx

    const char *message = "(THU.CST) os is loading ...";
c0100071:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    cprintf("%s\n\n", message);
c0100074:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0100077:	89 04 24             	mov    %eax,(%esp)
c010007a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010007e:	e8 bd 01 00 00       	call   c0100240 <cprintf>

    print_kerninfo();
c0100083:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100086:	e8 55 0a 00 00       	call   c0100ae0 <print_kerninfo>

    grade_backtrace();
c010008b:	e8 30 00 00 00       	call   c01000c0 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100090:	e8 ab 30 00 00       	call   c0103140 <pmm_init>

    kmem_int();
c0100095:	e8 a6 61 00 00       	call   c0106240 <kmem_int>

    pic_init();                 // init interrupt controller
c010009a:	e8 31 1c 00 00       	call   c0101cd0 <pic_init>
    idt_init();                 // init interrupt descriptor table
c010009f:	e8 8c 1d 00 00       	call   c0101e30 <idt_init>

    clock_init();               // init clock interrupt
c01000a4:	e8 a7 0f 00 00       	call   c0101050 <clock_init>
    intr_enable();              // enable irq interrupt
c01000a9:	e8 62 1d 00 00       	call   c0101e10 <intr_enable>
    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();

    /* do nothing */
    while (1);
c01000ae:	e9 fb ff ff ff       	jmp    c01000ae <kern_init+0x7e>
c01000b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c01000ba:	84 00 00 00 00 00 

c01000c0 <grade_backtrace>:
grade_backtrace0(int arg0, int arg1, int arg2) {
    grade_backtrace1(arg0, arg2);
}

void
grade_backtrace(void) {
c01000c0:	55                   	push   %ebp
c01000c1:	89 e5                	mov    %esp,%ebp
c01000c3:	83 ec 18             	sub    $0x18,%esp
c01000c6:	31 c0                	xor    %eax,%eax
c01000c8:	8d 0d 30 00 10 c0    	lea    0xc0100030,%ecx
c01000ce:	ba 00 00 ff ff       	mov    $0xffff0000,%edx
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c01000d3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000da:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01000de:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c01000e5:	ff 
c01000e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01000e9:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01000ec:	e8 9f 00 00 00       	call   c0100190 <grade_backtrace0>
}
c01000f1:	83 c4 18             	add    $0x18,%esp
c01000f4:	5d                   	pop    %ebp
c01000f5:	c3                   	ret    
c01000f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c01000fd:	00 00 00 

c0100100 <grade_backtrace2>:
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c0100100:	55                   	push   %ebp
c0100101:	89 e5                	mov    %esp,%ebp
c0100103:	57                   	push   %edi
c0100104:	56                   	push   %esi
c0100105:	83 ec 30             	sub    $0x30,%esp
c0100108:	8b 45 14             	mov    0x14(%ebp),%eax
c010010b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010010e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100111:	8b 75 08             	mov    0x8(%ebp),%esi
c0100114:	31 ff                	xor    %edi,%edi
c0100116:	89 75 f4             	mov    %esi,-0xc(%ebp)
c0100119:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010011c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010011f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    mon_backtrace(0, NULL, NULL);
c0100122:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100129:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100130:	00 
c0100131:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0100138:	00 
c0100139:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010013c:	e8 af 0d 00 00       	call   c0100ef0 <mon_backtrace>
}
c0100141:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100144:	83 c4 30             	add    $0x30,%esp
c0100147:	5e                   	pop    %esi
c0100148:	5f                   	pop    %edi
c0100149:	5d                   	pop    %ebp
c010014a:	c3                   	ret    
c010014b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

c0100150 <grade_backtrace1>:
grade_backtrace1(int arg0, int arg1) {
c0100150:	55                   	push   %ebp
c0100151:	89 e5                	mov    %esp,%ebp
c0100153:	56                   	push   %esi
c0100154:	83 ec 24             	sub    $0x24,%esp
c0100157:	8b 45 0c             	mov    0xc(%ebp),%eax
c010015a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010015d:	8d 55 f4             	lea    -0xc(%ebp),%edx
c0100160:	8d 75 f8             	lea    -0x8(%ebp),%esi
c0100163:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0100166:	89 45 f4             	mov    %eax,-0xc(%ebp)
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c0100169:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010016c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010016f:	89 04 24             	mov    %eax,(%esp)
c0100172:	89 74 24 04          	mov    %esi,0x4(%esp)
c0100176:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010017a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010017e:	e8 7d ff ff ff       	call   c0100100 <grade_backtrace2>
}
c0100183:	83 c4 24             	add    $0x24,%esp
c0100186:	5e                   	pop    %esi
c0100187:	5d                   	pop    %ebp
c0100188:	c3                   	ret    
c0100189:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c0100190 <grade_backtrace0>:
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100190:	55                   	push   %ebp
c0100191:	89 e5                	mov    %esp,%ebp
c0100193:	83 ec 18             	sub    $0x18,%esp
c0100196:	8b 45 10             	mov    0x10(%ebp),%eax
c0100199:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010019c:	8b 55 08             	mov    0x8(%ebp),%edx
c010019f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c01001a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c01001a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    grade_backtrace1(arg0, arg2);
c01001a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01001ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01001ae:	89 04 24             	mov    %eax,(%esp)
c01001b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01001b5:	e8 96 ff ff ff       	call   c0100150 <grade_backtrace1>
}
c01001ba:	83 c4 18             	add    $0x18,%esp
c01001bd:	5d                   	pop    %ebp
c01001be:	c3                   	ret    
c01001bf:	90                   	nop

c01001c0 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c01001c0:	55                   	push   %ebp
c01001c1:	89 e5                	mov    %esp,%ebp
c01001c3:	56                   	push   %esi
c01001c4:	83 ec 24             	sub    $0x24,%esp
c01001c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01001ca:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01001cd:	8d 15 10 02 10 c0    	lea    0xc0100210,%edx
c01001d3:	8d 75 f0             	lea    -0x10(%ebp),%esi
c01001d6:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c01001d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int cnt = 0;
c01001dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c01001e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01001e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01001e9:	89 14 24             	mov    %edx,(%esp)
c01001ec:	89 74 24 04          	mov    %esi,0x4(%esp)
c01001f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01001f4:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01001f8:	e8 43 e4 00 00       	call   c010e640 <vprintfmt>
    return cnt;
c01001fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100200:	83 c4 24             	add    $0x24,%esp
c0100203:	5e                   	pop    %esi
c0100204:	5d                   	pop    %ebp
c0100205:	c3                   	ret    
c0100206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c010020d:	00 00 00 

c0100210 <cputch>:
cputch(int c, int *cnt) {
c0100210:	55                   	push   %ebp
c0100211:	89 e5                	mov    %esp,%ebp
c0100213:	83 ec 18             	sub    $0x18,%esp
c0100216:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100219:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010021c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010021f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cons_putc(c);
c0100222:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100225:	89 04 24             	mov    %eax,(%esp)
c0100228:	e8 f3 11 00 00       	call   c0101420 <cons_putc>
    (*cnt) ++;
c010022d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100230:	8b 08                	mov    (%eax),%ecx
c0100232:	83 c1 01             	add    $0x1,%ecx
c0100235:	89 08                	mov    %ecx,(%eax)
}
c0100237:	83 c4 18             	add    $0x18,%esp
c010023a:	5d                   	pop    %ebp
c010023b:	c3                   	ret    
c010023c:	0f 1f 40 00          	nopl   0x0(%eax)

c0100240 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100240:	55                   	push   %ebp
c0100241:	89 e5                	mov    %esp,%ebp
c0100243:	83 ec 18             	sub    $0x18,%esp
c0100246:	8b 45 08             	mov    0x8(%ebp),%eax
c0100249:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010024c:	8d 45 0c             	lea    0xc(%ebp),%eax
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010024f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cnt = vcprintf(fmt, ap);
c0100252:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0100255:	89 e2                	mov    %esp,%edx
c0100257:	89 42 04             	mov    %eax,0x4(%edx)
c010025a:	89 0a                	mov    %ecx,(%edx)
c010025c:	e8 5f ff ff ff       	call   c01001c0 <vcprintf>
c0100261:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100264:	83 c4 18             	add    $0x18,%esp
c0100267:	5d                   	pop    %ebp
c0100268:	c3                   	ret    
c0100269:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c0100270 <cputchar>:
}

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c0100270:	55                   	push   %ebp
c0100271:	89 e5                	mov    %esp,%ebp
c0100273:	83 ec 08             	sub    $0x8,%esp
c0100276:	8b 45 08             	mov    0x8(%ebp),%eax
c0100279:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cons_putc(c);
c010027c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010027f:	89 04 24             	mov    %eax,(%esp)
c0100282:	e8 99 11 00 00       	call   c0101420 <cons_putc>
}
c0100287:	83 c4 08             	add    $0x8,%esp
c010028a:	5d                   	pop    %ebp
c010028b:	c3                   	ret    
c010028c:	0f 1f 40 00          	nopl   0x0(%eax)

c0100290 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100290:	55                   	push   %ebp
c0100291:	89 e5                	mov    %esp,%ebp
c0100293:	83 ec 18             	sub    $0x18,%esp
c0100296:	8b 45 08             	mov    0x8(%ebp),%eax
c0100299:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int cnt = 0;
c010029c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01002a6:	89 c1                	mov    %eax,%ecx
c01002a8:	83 c1 01             	add    $0x1,%ecx
c01002ab:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c01002ae:	8a 10                	mov    (%eax),%dl
c01002b0:	88 55 f7             	mov    %dl,-0x9(%ebp)
c01002b3:	0f be c2             	movsbl %dl,%eax
c01002b6:	83 f8 00             	cmp    $0x0,%eax
c01002b9:	0f 84 18 00 00 00    	je     c01002d7 <cputs+0x47>
c01002bf:	8d 45 f8             	lea    -0x8(%ebp),%eax
        cputch(c, &cnt);
c01002c2:	0f be 4d f7          	movsbl -0x9(%ebp),%ecx
c01002c6:	89 0c 24             	mov    %ecx,(%esp)
c01002c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01002cd:	e8 3e ff ff ff       	call   c0100210 <cputch>
    while ((c = *str ++) != '\0') {
c01002d2:	e9 cc ff ff ff       	jmp    c01002a3 <cputs+0x13>
c01002d7:	b8 0a 00 00 00       	mov    $0xa,%eax
c01002dc:	8d 4d f8             	lea    -0x8(%ebp),%ecx
    }
    cputch('\n', &cnt);
c01002df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01002e6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01002ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01002ed:	e8 1e ff ff ff       	call   c0100210 <cputch>
    return cnt;
c01002f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01002f5:	83 c4 18             	add    $0x18,%esp
c01002f8:	5d                   	pop    %ebp
c01002f9:	c3                   	ret    
c01002fa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0100300 <getchar>:
}

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100300:	55                   	push   %ebp
c0100301:	89 e5                	mov    %esp,%ebp
c0100303:	83 ec 08             	sub    $0x8,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100306:	e8 d5 14 00 00       	call   c01017e0 <cons_getc>
c010030b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010030e:	83 f8 00             	cmp    $0x0,%eax
c0100311:	0f 85 05 00 00 00    	jne    c010031c <getchar+0x1c>
c0100317:	e9 ea ff ff ff       	jmp    c0100306 <getchar+0x6>
        /* do nothing */;
    return c;
c010031c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010031f:	83 c4 08             	add    $0x8,%esp
c0100322:	5d                   	pop    %ebp
c0100323:	c3                   	ret    
c0100324:	66 90                	xchg   %ax,%ax
c0100326:	66 90                	xchg   %ax,%ax
c0100328:	66 90                	xchg   %ax,%ax
c010032a:	66 90                	xchg   %ax,%ax
c010032c:	66 90                	xchg   %ax,%ax
c010032e:	66 90                	xchg   %ax,%ax

c0100330 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100330:	55                   	push   %ebp
c0100331:	89 e5                	mov    %esp,%ebp
c0100333:	83 ec 28             	sub    $0x28,%esp
c0100336:	8b 45 08             	mov    0x8(%ebp),%eax
c0100339:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (prompt != NULL) {
c010033c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0100340:	0f 84 18 00 00 00    	je     c010035e <readline+0x2e>
c0100346:	8d 05 a0 f8 10 c0    	lea    0xc010f8a0,%eax
        cprintf("%s", prompt);
c010034c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010034f:	89 04 24             	mov    %eax,(%esp)
c0100352:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100356:	e8 e5 fe ff ff       	call   c0100240 <cprintf>
c010035b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    }
    int i = 0, c;
c010035e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100365:	e8 96 ff ff ff       	call   c0100300 <getchar>
c010036a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010036d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100371:	0f 8d 0c 00 00 00    	jge    c0100383 <readline+0x53>
            return NULL;
c0100377:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010037e:	e9 b7 00 00 00       	jmp    c010043a <readline+0x10a>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100383:	83 7d f0 20          	cmpl   $0x20,-0x10(%ebp)
c0100387:	0f 8c 34 00 00 00    	jl     c01003c1 <readline+0x91>
c010038d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c0100394:	0f 8d 27 00 00 00    	jge    c01003c1 <readline+0x91>
            cputchar(c);
c010039a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010039d:	89 04 24             	mov    %eax,(%esp)
c01003a0:	e8 cb fe ff ff       	call   c0100270 <cputchar>
            buf[i ++] = c;
c01003a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003a8:	88 c1                	mov    %al,%cl
c01003aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003ad:	89 c2                	mov    %eax,%edx
c01003af:	83 c2 01             	add    $0x1,%edx
c01003b2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01003b5:	88 0c 05 04 3a 11 c0 	mov    %cl,-0x3feec5fc(,%eax,1)
        }
c01003bc:	e9 6f 00 00 00       	jmp    c0100430 <readline+0x100>
        else if (c == '\b' && i > 0) {
c01003c1:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003c5:	0f 85 23 00 00 00    	jne    c01003ee <readline+0xbe>
c01003cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003cf:	0f 8e 19 00 00 00    	jle    c01003ee <readline+0xbe>
            cputchar(c);
c01003d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003d8:	89 04 24             	mov    %eax,(%esp)
c01003db:	e8 90 fe ff ff       	call   c0100270 <cputchar>
            i --;
c01003e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e3:	83 c0 ff             	add    $0xffffffff,%eax
c01003e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
c01003e9:	e9 3d 00 00 00       	jmp    c010042b <readline+0xfb>
        else if (c == '\n' || c == '\r') {
c01003ee:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003f2:	0f 84 0a 00 00 00    	je     c0100402 <readline+0xd2>
c01003f8:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003fc:	0f 85 24 00 00 00    	jne    c0100426 <readline+0xf6>
            cputchar(c);
c0100402:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100405:	89 04 24             	mov    %eax,(%esp)
c0100408:	e8 63 fe ff ff       	call   c0100270 <cputchar>
c010040d:	8d 05 04 3a 11 c0    	lea    0xc0113a04,%eax
            buf[i] = '\0';
c0100413:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100416:	c6 04 0d 04 3a 11 c0 	movb   $0x0,-0x3feec5fc(,%ecx,1)
c010041d:	00 
            return buf;
c010041e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100421:	e9 14 00 00 00       	jmp    c010043a <readline+0x10a>
c0100426:	e9 00 00 00 00       	jmp    c010042b <readline+0xfb>
c010042b:	e9 00 00 00 00       	jmp    c0100430 <readline+0x100>
c0100430:	e9 00 00 00 00       	jmp    c0100435 <readline+0x105>
    while (1) {
c0100435:	e9 2b ff ff ff       	jmp    c0100365 <readline+0x35>
        }
    }
}
c010043a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010043d:	83 c4 28             	add    $0x28,%esp
c0100440:	5d                   	pop    %ebp
c0100441:	c3                   	ret    
c0100442:	66 90                	xchg   %ax,%ax
c0100444:	66 90                	xchg   %ax,%ax
c0100446:	66 90                	xchg   %ax,%ax
c0100448:	66 90                	xchg   %ax,%ax
c010044a:	66 90                	xchg   %ax,%ax
c010044c:	66 90                	xchg   %ax,%ax
c010044e:	66 90                	xchg   %ax,%ax

c0100450 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100450:	55                   	push   %ebp
c0100451:	89 e5                	mov    %esp,%ebp
c0100453:	83 ec 38             	sub    $0x38,%esp
c0100456:	8b 45 10             	mov    0x10(%ebp),%eax
c0100459:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010045c:	8b 55 08             	mov    0x8(%ebp),%edx
c010045f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0100462:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0100465:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (is_panic) {
c0100468:	83 3d 04 3e 11 c0 00 	cmpl   $0x0,0xc0113e04
c010046f:	0f 84 05 00 00 00    	je     c010047a <__panic+0x2a>
        goto panic_dead;
c0100475:	e9 57 00 00 00       	jmp    c01004d1 <__panic+0x81>
c010047a:	8d 05 fd f0 10 c0    	lea    0xc010f0fd,%eax
c0100480:	8d 4d f0             	lea    -0x10(%ebp),%ecx
    }
    is_panic = 1;
c0100483:	c7 05 04 3e 11 c0 01 	movl   $0x1,0xc0113e04
c010048a:	00 00 00 
c010048d:	8d 55 14             	lea    0x14(%ebp),%edx

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100490:	89 11                	mov    %edx,(%ecx)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100492:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0100495:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0100498:	89 04 24             	mov    %eax,(%esp)
c010049b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010049f:	89 54 24 08          	mov    %edx,0x8(%esp)
c01004a3:	e8 98 fd ff ff       	call   c0100240 <cprintf>
    vcprintf(fmt, ap);
c01004a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01004ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ae:	89 0c 24             	mov    %ecx,(%esp)
c01004b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01004b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01004b8:	e8 03 fd ff ff       	call   c01001c0 <vcprintf>
c01004bd:	8d 0d fb f0 10 c0    	lea    0xc010f0fb,%ecx
    cprintf("\n");
c01004c3:	89 0c 24             	mov    %ecx,(%esp)
c01004c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01004c9:	e8 72 fd ff ff       	call   c0100240 <cprintf>
c01004ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    va_end(ap);

panic_dead:
    intr_disable();
c01004d1:	e8 4a 19 00 00       	call   c0101e20 <intr_disable>
c01004d6:	31 c0                	xor    %eax,%eax
    while (1) {
        kmonitor(NULL);
c01004d8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01004df:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01004e2:	e8 d9 07 00 00       	call   c0100cc0 <kmonitor>
    while (1) {
c01004e7:	e9 ea ff ff ff       	jmp    c01004d6 <__panic+0x86>
c01004ec:	0f 1f 40 00          	nopl   0x0(%eax)

c01004f0 <__warn>:
    }
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01004f0:	55                   	push   %ebp
c01004f1:	89 e5                	mov    %esp,%ebp
c01004f3:	56                   	push   %esi
c01004f4:	83 ec 34             	sub    $0x34,%esp
c01004f7:	8b 45 10             	mov    0x10(%ebp),%eax
c01004fa:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01004fd:	8b 55 08             	mov    0x8(%ebp),%edx
c0100500:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0100503:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0100506:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100509:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;
    va_start(ap, fmt);
c010050c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010050f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100512:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100515:	89 e2                	mov    %esp,%edx
c0100517:	89 4a 08             	mov    %ecx,0x8(%edx)
c010051a:	89 42 04             	mov    %eax,0x4(%edx)
c010051d:	c7 02 19 f1 10 c0    	movl   $0xc010f119,(%edx)
c0100523:	e8 18 fd ff ff       	call   c0100240 <cprintf>
    vcprintf(fmt, ap);
c0100528:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010052b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010052e:	89 e6                	mov    %esp,%esi
c0100530:	89 56 04             	mov    %edx,0x4(%esi)
c0100533:	89 0e                	mov    %ecx,(%esi)
c0100535:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100538:	e8 83 fc ff ff       	call   c01001c0 <vcprintf>
    cprintf("\n");
c010053d:	89 e1                	mov    %esp,%ecx
c010053f:	c7 01 fb f0 10 c0    	movl   $0xc010f0fb,(%ecx)
c0100545:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100548:	e8 f3 fc ff ff       	call   c0100240 <cprintf>
    va_end(ap);
}
c010054d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100550:	83 c4 34             	add    $0x34,%esp
c0100553:	5e                   	pop    %esi
c0100554:	5d                   	pop    %ebp
c0100555:	c3                   	ret    
c0100556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c010055d:	00 00 00 

c0100560 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100560:	55                   	push   %ebp
c0100561:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100563:	a1 04 3e 11 c0       	mov    0xc0113e04,%eax
c0100568:	5d                   	pop    %ebp
c0100569:	c3                   	ret    
c010056a:	66 90                	xchg   %ax,%ax
c010056c:	66 90                	xchg   %ax,%ax
c010056e:	66 90                	xchg   %ax,%ax

c0100570 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100570:	55                   	push   %ebp
c0100571:	89 e5                	mov    %esp,%ebp
c0100573:	53                   	push   %ebx
c0100574:	57                   	push   %edi
c0100575:	56                   	push   %esi
c0100576:	83 ec 6c             	sub    $0x6c,%esp
c0100579:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010057f:	8d 15 08 07 11 c0    	lea    0xc0110708,%edx
c0100585:	8d 35 08 07 11 c0    	lea    0xc0110708,%esi
c010058b:	8d 3d 07 07 11 c0    	lea    0xc0110707,%edi
c0100591:	8d 1d 07 07 11 c0    	lea    0xc0110707,%ebx
c0100597:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010059a:	8d 05 37 f1 10 c0    	lea    0xc010f137,%eax
c01005a0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01005a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c01005a6:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c01005a9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01005ac:	89 01                	mov    %eax,(%ecx)
    info->eip_line = 0;
c01005ae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01005b1:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
    info->eip_fn_name = "<unknown>";
c01005b8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01005bb:	89 41 08             	mov    %eax,0x8(%ecx)
    info->eip_fn_namelen = 9;
c01005be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01005c1:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01005c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005cb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01005ce:	89 41 10             	mov    %eax,0x10(%ecx)
    info->eip_fn_narg = 0;
c01005d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01005d4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    stabs = __STAB_BEGIN__;
c01005db:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    stab_end = __STAB_END__;
c01005de:	89 7d e0             	mov    %edi,-0x20(%ebp)
    stabstr = __STABSTR_BEGIN__;
c01005e1:	89 75 dc             	mov    %esi,-0x24(%ebp)
    stabstr_end = __STABSTR_END__;
c01005e4:	89 55 d8             	mov    %edx,-0x28(%ebp)

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01005e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01005ea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01005ed:	0f 86 10 00 00 00    	jbe    c0100603 <debuginfo_eip+0x93>
c01005f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01005f6:	0f be 40 ff          	movsbl -0x1(%eax),%eax
c01005fa:	83 f8 00             	cmp    $0x0,%eax
c01005fd:	0f 84 0c 00 00 00    	je     c010060f <debuginfo_eip+0x9f>
        return -1;
c0100603:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010060a:	e9 f0 02 00 00       	jmp    c01008ff <debuginfo_eip+0x38f>
c010060f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100612:	8d 4d d0             	lea    -0x30(%ebp),%ecx
c0100615:	ba 64 00 00 00       	mov    $0x64,%edx
c010061a:	be 0c 00 00 00       	mov    $0xc,%esi
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010061f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c0100626:	8b 7d e0             	mov    -0x20(%ebp),%edi
c0100629:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010062c:	29 df                	sub    %ebx,%edi
c010062e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0100631:	89 f8                	mov    %edi,%eax
c0100633:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0100636:	99                   	cltd   
c0100637:	f7 fe                	idiv   %esi
c0100639:	83 e8 01             	sub    $0x1,%eax
c010063c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010063f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100642:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0100645:	89 04 24             	mov    %eax,(%esp)
c0100648:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010064b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010064f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100653:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c010065a:	00 
c010065b:	89 74 24 10          	mov    %esi,0x10(%esp)
c010065f:	e8 ac 02 00 00       	call   c0100910 <stab_binsearch>
    if (lfile == 0)
c0100664:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0100668:	0f 85 0c 00 00 00    	jne    c010067a <debuginfo_eip+0x10a>
        return -1;
c010066e:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c0100675:	e9 85 02 00 00       	jmp    c01008ff <debuginfo_eip+0x38f>
c010067a:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010067d:	8d 4d c8             	lea    -0x38(%ebp),%ecx
c0100680:	ba 24 00 00 00       	mov    $0x24,%edx

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100685:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0100688:	89 75 cc             	mov    %esi,-0x34(%ebp)
c010068b:	8b 75 d0             	mov    -0x30(%ebp),%esi
c010068e:	89 75 c8             	mov    %esi,-0x38(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100691:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0100694:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0100697:	89 34 24             	mov    %esi,(%esp)
c010069a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010069e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01006a2:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c01006a9:	00 
c01006aa:	89 7c 24 10          	mov    %edi,0x10(%esp)
c01006ae:	89 55 b0             	mov    %edx,-0x50(%ebp)
c01006b1:	e8 5a 02 00 00       	call   c0100910 <stab_binsearch>

    if (lfun <= rfun) {
c01006b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01006b9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01006bc:	0f 8f 60 00 00 00    	jg     c0100722 <debuginfo_eip+0x1b2>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01006c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01006c5:	6b c0 0c             	imul   $0xc,%eax,%eax
c01006c8:	03 45 e4             	add    -0x1c(%ebp),%eax
c01006cb:	8b 00                	mov    (%eax),%eax
c01006cd:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c01006d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01006d3:	29 d1                	sub    %edx,%ecx
c01006d5:	39 c8                	cmp    %ecx,%eax
c01006d7:	0f 83 14 00 00 00    	jae    c01006f1 <debuginfo_eip+0x181>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c01006dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01006e0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01006e3:	6b c9 0c             	imul   $0xc,%ecx,%ecx
c01006e6:	03 4d e4             	add    -0x1c(%ebp),%ecx
c01006e9:	03 01                	add    (%ecx),%eax
c01006eb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01006ee:	89 41 08             	mov    %eax,0x8(%ecx)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01006f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01006f4:	6b c0 0c             	imul   $0xc,%eax,%eax
c01006f7:	03 45 e4             	add    -0x1c(%ebp),%eax
c01006fa:	8b 40 08             	mov    0x8(%eax),%eax
c01006fd:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100700:	89 41 10             	mov    %eax,0x10(%ecx)
        addr -= info->eip_fn_addr;
c0100703:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100706:	8b 40 10             	mov    0x10(%eax),%eax
c0100709:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010070c:	29 c1                	sub    %eax,%ecx
c010070e:	89 4d ec             	mov    %ecx,-0x14(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0100711:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100714:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        rline = rfun;
c0100717:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010071a:	89 45 c0             	mov    %eax,-0x40(%ebp)
    } else {
c010071d:	e9 15 00 00 00       	jmp    c0100737 <debuginfo_eip+0x1c7>
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100722:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100725:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100728:	89 41 10             	mov    %eax,0x10(%ecx)
        lline = lfile;
c010072b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010072e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        rline = rfile;
c0100731:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100734:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100737:	b8 3a 00 00 00       	mov    $0x3a,%eax
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c010073c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010073f:	8b 49 08             	mov    0x8(%ecx),%ecx
c0100742:	89 0c 24             	mov    %ecx,(%esp)
c0100745:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010074c:	00 
c010074d:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0100750:	e8 eb d9 00 00       	call   c010e140 <strfind>
c0100755:	8d 4d c4             	lea    -0x3c(%ebp),%ecx
c0100758:	8d 55 c0             	lea    -0x40(%ebp),%edx
c010075b:	be 44 00 00 00       	mov    $0x44,%esi
c0100760:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0100763:	8b 7f 08             	mov    0x8(%edi),%edi
c0100766:	29 f8                	sub    %edi,%eax
c0100768:	8b 7d e8             	mov    -0x18(%ebp),%edi
c010076b:	89 47 0c             	mov    %eax,0xc(%edi)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010076e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100771:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0100774:	89 04 24             	mov    %eax,(%esp)
c0100777:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010077b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010077f:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c0100786:	00 
c0100787:	89 7c 24 10          	mov    %edi,0x10(%esp)
c010078b:	89 75 a8             	mov    %esi,-0x58(%ebp)
c010078e:	e8 7d 01 00 00       	call   c0100910 <stab_binsearch>
    if (lline <= rline) {
c0100793:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0100796:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0100799:	0f 8f 18 00 00 00    	jg     c01007b7 <debuginfo_eip+0x247>
        info->eip_line = stabs[rline].n_desc;
c010079f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01007a2:	6b c0 0c             	imul   $0xc,%eax,%eax
c01007a5:	03 45 e4             	add    -0x1c(%ebp),%eax
c01007a8:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01007ac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01007af:	89 41 04             	mov    %eax,0x4(%ecx)
    } else {
c01007b2:	e9 0c 00 00 00       	jmp    c01007c3 <debuginfo_eip+0x253>
        return -1;
c01007b7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c01007be:	e9 3c 01 00 00       	jmp    c01008ff <debuginfo_eip+0x38f>

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01007c3:	e9 00 00 00 00       	jmp    c01007c8 <debuginfo_eip+0x258>
c01007c8:	31 c0                	xor    %eax,%eax
c01007ca:	88 c1                	mov    %al,%cl
c01007cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01007cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
           && stabs[lline].n_type != N_SOL
c01007d2:	88 4d a7             	mov    %cl,-0x59(%ebp)
c01007d5:	0f 8c 56 00 00 00    	jl     c0100831 <debuginfo_eip+0x2c1>
c01007db:	31 c0                	xor    %eax,%eax
c01007dd:	88 c1                	mov    %al,%cl
c01007df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01007e2:	6b c0 0c             	imul   $0xc,%eax,%eax
c01007e5:	03 45 e4             	add    -0x1c(%ebp),%eax
c01007e8:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01007ec:	3d 84 00 00 00       	cmp    $0x84,%eax
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01007f1:	88 4d a7             	mov    %cl,-0x59(%ebp)
c01007f4:	0f 84 37 00 00 00    	je     c0100831 <debuginfo_eip+0x2c1>
c01007fa:	b0 01                	mov    $0x1,%al
c01007fc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01007ff:	6b c9 0c             	imul   $0xc,%ecx,%ecx
c0100802:	03 4d e4             	add    -0x1c(%ebp),%ecx
c0100805:	0f b6 49 04          	movzbl 0x4(%ecx),%ecx
c0100809:	83 f9 64             	cmp    $0x64,%ecx
c010080c:	88 45 a6             	mov    %al,-0x5a(%ebp)
c010080f:	0f 85 16 00 00 00    	jne    c010082b <debuginfo_eip+0x2bb>
c0100815:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0100818:	6b c0 0c             	imul   $0xc,%eax,%eax
c010081b:	03 45 e4             	add    -0x1c(%ebp),%eax
c010081e:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
c0100822:	0f 95 c1             	setne  %cl
c0100825:	80 f1 ff             	xor    $0xff,%cl
c0100828:	88 4d a6             	mov    %cl,-0x5a(%ebp)
c010082b:	8a 45 a6             	mov    -0x5a(%ebp),%al
c010082e:	88 45 a7             	mov    %al,-0x59(%ebp)
c0100831:	8a 45 a7             	mov    -0x59(%ebp),%al
    while (lline >= lfile
c0100834:	a8 01                	test   $0x1,%al
c0100836:	0f 85 05 00 00 00    	jne    c0100841 <debuginfo_eip+0x2d1>
c010083c:	e9 0e 00 00 00       	jmp    c010084f <debuginfo_eip+0x2df>
        lline --;
c0100841:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0100844:	83 c0 ff             	add    $0xffffffff,%eax
c0100847:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    while (lline >= lfile
c010084a:	e9 79 ff ff ff       	jmp    c01007c8 <debuginfo_eip+0x258>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c010084f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0100852:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0100855:	0f 8c 2e 00 00 00    	jl     c0100889 <debuginfo_eip+0x319>
c010085b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010085e:	6b c0 0c             	imul   $0xc,%eax,%eax
c0100861:	03 45 e4             	add    -0x1c(%ebp),%eax
c0100864:	8b 00                	mov    (%eax),%eax
c0100866:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0100869:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010086c:	29 d1                	sub    %edx,%ecx
c010086e:	39 c8                	cmp    %ecx,%eax
c0100870:	0f 83 13 00 00 00    	jae    c0100889 <debuginfo_eip+0x319>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010087c:	6b c9 0c             	imul   $0xc,%ecx,%ecx
c010087f:	03 4d e4             	add    -0x1c(%ebp),%ecx
c0100882:	03 01                	add    (%ecx),%eax
c0100884:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100887:	89 01                	mov    %eax,(%ecx)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100889:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010088c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010088f:	0f 8d 63 00 00 00    	jge    c01008f8 <debuginfo_eip+0x388>
        for (lline = lfun + 1;
c0100895:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100898:	83 c0 01             	add    $0x1,%eax
c010089b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010089e:	31 c0                	xor    %eax,%eax
c01008a0:	88 c1                	mov    %al,%cl
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01008a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01008a5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01008a8:	88 4d a5             	mov    %cl,-0x5b(%ebp)
c01008ab:	0f 8d 18 00 00 00    	jge    c01008c9 <debuginfo_eip+0x359>
c01008b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01008b4:	6b c0 0c             	imul   $0xc,%eax,%eax
c01008b7:	03 45 e4             	add    -0x1c(%ebp),%eax
c01008ba:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008be:	3d a0 00 00 00       	cmp    $0xa0,%eax
c01008c3:	0f 94 c1             	sete   %cl
c01008c6:	88 4d a5             	mov    %cl,-0x5b(%ebp)
c01008c9:	8a 45 a5             	mov    -0x5b(%ebp),%al
        for (lline = lfun + 1;
c01008cc:	a8 01                	test   $0x1,%al
c01008ce:	0f 85 05 00 00 00    	jne    c01008d9 <debuginfo_eip+0x369>
c01008d4:	e9 1a 00 00 00       	jmp    c01008f3 <debuginfo_eip+0x383>
             lline ++) {
            info->eip_fn_narg ++;
c01008d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01008dc:	8b 48 14             	mov    0x14(%eax),%ecx
c01008df:	83 c1 01             	add    $0x1,%ecx
c01008e2:	89 48 14             	mov    %ecx,0x14(%eax)
             lline ++) {
c01008e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01008e8:	83 c0 01             	add    $0x1,%eax
c01008eb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        for (lline = lfun + 1;
c01008ee:	e9 ab ff ff ff       	jmp    c010089e <debuginfo_eip+0x32e>
        }
    }
c01008f3:	e9 00 00 00 00       	jmp    c01008f8 <debuginfo_eip+0x388>
    return 0;
c01008f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
}
c01008ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100902:	83 c4 6c             	add    $0x6c,%esp
c0100905:	5e                   	pop    %esi
c0100906:	5f                   	pop    %edi
c0100907:	5b                   	pop    %ebx
c0100908:	5d                   	pop    %ebp
c0100909:	c3                   	ret    
c010090a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0100910 <stab_binsearch>:
           int type, uintptr_t addr) {
c0100910:	55                   	push   %ebp
c0100911:	89 e5                	mov    %esp,%ebp
c0100913:	57                   	push   %edi
c0100914:	56                   	push   %esi
c0100915:	83 ec 30             	sub    $0x30,%esp
c0100918:	8b 45 18             	mov    0x18(%ebp),%eax
c010091b:	8b 4d 14             	mov    0x14(%ebp),%ecx
c010091e:	8b 55 10             	mov    0x10(%ebp),%edx
c0100921:	8b 75 0c             	mov    0xc(%ebp),%esi
c0100924:	8b 7d 08             	mov    0x8(%ebp),%edi
c0100927:	89 7d f4             	mov    %edi,-0xc(%ebp)
c010092a:	89 75 f0             	mov    %esi,-0x10(%ebp)
c010092d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0100930:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0100933:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int l = *region_left, r = *region_right, any_matches = 0;
c0100936:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100939:	8b 00                	mov    (%eax),%eax
c010093b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010093e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100941:	8b 00                	mov    (%eax),%eax
c0100943:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0100946:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
    while (l <= r) {
c010094d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100950:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0100953:	0f 8f 01 01 00 00    	jg     c0100a5a <stab_binsearch+0x14a>
c0100959:	b8 02 00 00 00       	mov    $0x2,%eax
        int true_m = (l + r) / 2, m = true_m;
c010095e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0100961:	03 4d dc             	add    -0x24(%ebp),%ecx
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100967:	89 c8                	mov    %ecx,%eax
c0100969:	99                   	cltd   
c010096a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010096d:	f7 f9                	idiv   %ecx
c010096f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100972:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100975:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0100978:	31 c0                	xor    %eax,%eax
c010097a:	88 c1                	mov    %al,%cl
        while (m >= l && stabs[m].n_type != type) {
c010097c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010097f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0100982:	88 4d cb             	mov    %cl,-0x35(%ebp)
c0100985:	0f 8c 16 00 00 00    	jl     c01009a1 <stab_binsearch+0x91>
c010098b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010098e:	6b c0 0c             	imul   $0xc,%eax,%eax
c0100991:	03 45 f4             	add    -0xc(%ebp),%eax
c0100994:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100998:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010099b:	0f 95 c1             	setne  %cl
c010099e:	88 4d cb             	mov    %cl,-0x35(%ebp)
c01009a1:	8a 45 cb             	mov    -0x35(%ebp),%al
c01009a4:	a8 01                	test   $0x1,%al
c01009a6:	0f 85 05 00 00 00    	jne    c01009b1 <stab_binsearch+0xa1>
c01009ac:	e9 0e 00 00 00       	jmp    c01009bf <stab_binsearch+0xaf>
            m --;
c01009b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b4:	83 c0 ff             	add    $0xffffffff,%eax
c01009b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
        while (m >= l && stabs[m].n_type != type) {
c01009ba:	e9 b9 ff ff ff       	jmp    c0100978 <stab_binsearch+0x68>
        if (m < l) {    // no match in [l, m]
c01009bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009c2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01009c5:	0f 8d 0e 00 00 00    	jge    c01009d9 <stab_binsearch+0xc9>
            l = true_m + 1;
c01009cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009ce:	83 c0 01             	add    $0x1,%eax
c01009d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
            continue;
c01009d4:	e9 74 ff ff ff       	jmp    c010094d <stab_binsearch+0x3d>
        any_matches = 1;
c01009d9:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
        if (stabs[m].n_value < addr) {
c01009e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009e3:	6b c0 0c             	imul   $0xc,%eax,%eax
c01009e6:	03 45 f4             	add    -0xc(%ebp),%eax
c01009e9:	8b 40 08             	mov    0x8(%eax),%eax
c01009ec:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c01009ef:	0f 83 16 00 00 00    	jae    c0100a0b <stab_binsearch+0xfb>
            *region_left = m;
c01009f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009f8:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01009fb:	89 01                	mov    %eax,(%ecx)
            l = true_m + 1;
c01009fd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a00:	83 c0 01             	add    $0x1,%eax
c0100a03:	89 45 e0             	mov    %eax,-0x20(%ebp)
        } else if (stabs[m].n_value > addr) {
c0100a06:	e9 4a 00 00 00       	jmp    c0100a55 <stab_binsearch+0x145>
c0100a0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a0e:	6b c0 0c             	imul   $0xc,%eax,%eax
c0100a11:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a14:	8b 40 08             	mov    0x8(%eax),%eax
c0100a17:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0100a1a:	0f 86 19 00 00 00    	jbe    c0100a39 <stab_binsearch+0x129>
            *region_right = m - 1;
c0100a20:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a23:	83 e8 01             	sub    $0x1,%eax
c0100a26:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0100a29:	89 01                	mov    %eax,(%ecx)
            r = m - 1;
c0100a2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a2e:	83 e8 01             	sub    $0x1,%eax
c0100a31:	89 45 dc             	mov    %eax,-0x24(%ebp)
        } else {
c0100a34:	e9 17 00 00 00       	jmp    c0100a50 <stab_binsearch+0x140>
            *region_left = m;
c0100a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a3c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100a3f:	89 01                	mov    %eax,(%ecx)
            l = m;
c0100a41:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a44:	89 45 e0             	mov    %eax,-0x20(%ebp)
            addr ++;
c0100a47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100a4a:	83 c0 01             	add    $0x1,%eax
c0100a4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100a50:	e9 00 00 00 00       	jmp    c0100a55 <stab_binsearch+0x145>
    while (l <= r) {
c0100a55:	e9 f3 fe ff ff       	jmp    c010094d <stab_binsearch+0x3d>
    if (!any_matches) {
c0100a5a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0100a5e:	0f 85 12 00 00 00    	jne    c0100a76 <stab_binsearch+0x166>
        *region_right = *region_left - 1;
c0100a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a67:	8b 00                	mov    (%eax),%eax
c0100a69:	83 e8 01             	sub    $0x1,%eax
c0100a6c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0100a6f:	89 01                	mov    %eax,(%ecx)
    }
c0100a71:	e9 5e 00 00 00       	jmp    c0100ad4 <stab_binsearch+0x1c4>
        l = *region_right;
c0100a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a79:	8b 00                	mov    (%eax),%eax
c0100a7b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100a7e:	31 c0                	xor    %eax,%eax
c0100a80:	88 c1                	mov    %al,%cl
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100a82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100a85:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100a88:	3b 02                	cmp    (%edx),%eax
c0100a8a:	88 4d ca             	mov    %cl,-0x36(%ebp)
c0100a8d:	0f 8e 16 00 00 00    	jle    c0100aa9 <stab_binsearch+0x199>
c0100a93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100a96:	6b c0 0c             	imul   $0xc,%eax,%eax
c0100a99:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a9c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100aa0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100aa3:	0f 95 c1             	setne  %cl
c0100aa6:	88 4d ca             	mov    %cl,-0x36(%ebp)
c0100aa9:	8a 45 ca             	mov    -0x36(%ebp),%al
c0100aac:	a8 01                	test   $0x1,%al
c0100aae:	0f 85 05 00 00 00    	jne    c0100ab9 <stab_binsearch+0x1a9>
c0100ab4:	e9 13 00 00 00       	jmp    c0100acc <stab_binsearch+0x1bc>
c0100ab9:	e9 00 00 00 00       	jmp    c0100abe <stab_binsearch+0x1ae>
c0100abe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100ac1:	83 c0 ff             	add    $0xffffffff,%eax
c0100ac4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100ac7:	e9 b2 ff ff ff       	jmp    c0100a7e <stab_binsearch+0x16e>
        *region_left = l;
c0100acc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100acf:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100ad2:	89 01                	mov    %eax,(%ecx)
}
c0100ad4:	83 c4 30             	add    $0x30,%esp
c0100ad7:	5e                   	pop    %esi
c0100ad8:	5f                   	pop    %edi
c0100ad9:	5d                   	pop    %ebp
c0100ada:	c3                   	ret    
c0100adb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

c0100ae0 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100ae0:	55                   	push   %ebp
c0100ae1:	89 e5                	mov    %esp,%ebp
c0100ae3:	53                   	push   %ebx
c0100ae4:	57                   	push   %edi
c0100ae5:	56                   	push   %esi
c0100ae6:	83 ec 2c             	sub    $0x2c,%esp
c0100ae9:	8d 05 41 f1 10 c0    	lea    0xc010f141,%eax
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100aef:	89 04 24             	mov    %eax,(%esp)
c0100af2:	e8 49 f7 ff ff       	call   c0100240 <cprintf>
c0100af7:	8d 0d 5a f1 10 c0    	lea    0xc010f15a,%ecx
c0100afd:	8d 15 30 00 10 c0    	lea    0xc0100030,%edx
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b03:	89 0c 24             	mov    %ecx,(%esp)
c0100b06:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100b0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b0d:	e8 2e f7 ff ff       	call   c0100240 <cprintf>
c0100b12:	8d 0d 72 f1 10 c0    	lea    0xc010f172,%ecx
c0100b18:	8d 15 d9 f0 10 c0    	lea    0xc010f0d9,%edx
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b1e:	89 0c 24             	mov    %ecx,(%esp)
c0100b21:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100b25:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100b28:	e8 13 f7 ff ff       	call   c0100240 <cprintf>
c0100b2d:	8d 0d 8a f1 10 c0    	lea    0xc010f18a,%ecx
c0100b33:	8d 15 04 3a 11 c0    	lea    0xc0113a04,%edx
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b39:	89 0c 24             	mov    %ecx,(%esp)
c0100b3c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100b43:	e8 f8 f6 ff ff       	call   c0100240 <cprintf>
c0100b48:	8d 0d a2 f1 10 c0    	lea    0xc010f1a2,%ecx
c0100b4e:	8d 15 3c 49 11 c0    	lea    0xc011493c,%edx
    cprintf("  end    0x%08x (phys)\n", end);
c0100b54:	89 0c 24             	mov    %ecx,(%esp)
c0100b57:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100b5e:	e8 dd f6 ff ff       	call   c0100240 <cprintf>
c0100b63:	8d 0d ba f1 10 c0    	lea    0xc010f1ba,%ecx
c0100b69:	8d 15 3c 49 11 c0    	lea    0xc011493c,%edx
c0100b6f:	8d 35 30 00 10 c0    	lea    0xc0100030,%esi
c0100b75:	29 f2                	sub    %esi,%edx
c0100b77:	81 c2 ff 03 00 00    	add    $0x3ff,%edx
c0100b7d:	be 00 04 00 00       	mov    $0x400,%esi
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100b82:	bf 30 00 10 c0       	mov    $0xc0100030,%edi
c0100b87:	bb 3c 49 11 c0       	mov    $0xc011493c,%ebx
c0100b8c:	29 fb                	sub    %edi,%ebx
c0100b8e:	89 df                	mov    %ebx,%edi
c0100b90:	81 c7 ff 03 00 00    	add    $0x3ff,%edi
c0100b96:	c1 ff 1f             	sar    $0x1f,%edi
c0100b99:	c1 ef 16             	shr    $0x16,%edi
c0100b9c:	8d bc 3b ff 03 00 00 	lea    0x3ff(%ebx,%edi,1),%edi
c0100ba3:	c1 ff 0a             	sar    $0xa,%edi
c0100ba6:	89 e3                	mov    %esp,%ebx
c0100ba8:	89 7b 04             	mov    %edi,0x4(%ebx)
c0100bab:	c7 03 ba f1 10 c0    	movl   $0xc010f1ba,(%ebx)
c0100bb1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100bb4:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0100bb7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0100bba:	89 75 d4             	mov    %esi,-0x2c(%ebp)
c0100bbd:	e8 7e f6 ff ff       	call   c0100240 <cprintf>
}
c0100bc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0100bc5:	83 c4 2c             	add    $0x2c,%esp
c0100bc8:	5e                   	pop    %esi
c0100bc9:	5f                   	pop    %edi
c0100bca:	5b                   	pop    %ebx
c0100bcb:	5d                   	pop    %ebp
c0100bcc:	c3                   	ret    
c0100bcd:	0f 1f 00             	nopl   (%eax)

c0100bd0 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100bd0:	55                   	push   %ebp
c0100bd1:	89 e5                	mov    %esp,%ebp
c0100bd3:	57                   	push   %edi
c0100bd4:	56                   	push   %esi
c0100bd5:	81 ec 40 01 00 00    	sub    $0x140,%esp
c0100bdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bde:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0100be1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be7:	89 04 24             	mov    %eax,(%esp)
c0100bea:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100bee:	e8 7d f9 ff ff       	call   c0100570 <debuginfo_eip>
c0100bf3:	83 f8 00             	cmp    $0x0,%eax
c0100bf6:	0f 84 20 00 00 00    	je     c0100c1c <print_debuginfo+0x4c>
c0100bfc:	8d 05 e4 f1 10 c0    	lea    0xc010f1e4,%eax
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100c02:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100c05:	89 04 24             	mov    %eax,(%esp)
c0100c08:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c0c:	e8 2f f6 ff ff       	call   c0100240 <cprintf>
    }
c0100c11:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
c0100c17:	e9 8a 00 00 00       	jmp    c0100ca6 <print_debuginfo+0xd6>
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100c1c:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%ebp)
c0100c23:	00 00 00 
c0100c26:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0100c2c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0100c2f:	0f 8d 2d 00 00 00    	jge    c0100c62 <print_debuginfo+0x92>
            fnname[j] = info.eip_fn_name[j];
c0100c35:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0100c3b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0100c3e:	8a 14 01             	mov    (%ecx,%eax,1),%dl
c0100c41:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0100c47:	88 94 05 d8 fe ff ff 	mov    %dl,-0x128(%ebp,%eax,1)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100c4e:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0100c54:	83 c0 01             	add    $0x1,%eax
c0100c57:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
c0100c5d:	e9 c4 ff ff ff       	jmp    c0100c26 <print_debuginfo+0x56>
c0100c62:	8d 05 00 f2 10 c0    	lea    0xc010f200,%eax
c0100c68:	8d 8d d8 fe ff ff    	lea    -0x128(%ebp),%ecx
        }
        fnname[j] = '\0';
c0100c6e:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
c0100c74:	c6 84 15 d8 fe ff ff 	movb   $0x0,-0x128(%ebp,%edx,1)
c0100c7b:	00 
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c7c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100c7f:	8b 75 dc             	mov    -0x24(%ebp),%esi
                fnname, eip - info.eip_fn_addr);
c0100c82:	8b 7d f4             	mov    -0xc(%ebp),%edi
c0100c85:	2b 7d e8             	sub    -0x18(%ebp),%edi
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c88:	89 04 24             	mov    %eax,(%esp)
c0100c8b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100c8f:	89 74 24 08          	mov    %esi,0x8(%esp)
c0100c93:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100c97:	89 7c 24 10          	mov    %edi,0x10(%esp)
c0100c9b:	e8 a0 f5 ff ff       	call   c0100240 <cprintf>
c0100ca0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
    }
}
c0100ca6:	81 c4 40 01 00 00    	add    $0x140,%esp
c0100cac:	5e                   	pop    %esi
c0100cad:	5f                   	pop    %edi
c0100cae:	5d                   	pop    %ebp
c0100caf:	c3                   	ret    

c0100cb0 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100cb0:	55                   	push   %ebp
c0100cb1:	89 e5                	mov    %esp,%ebp
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
}
c0100cb3:	5d                   	pop    %ebp
c0100cb4:	c3                   	ret    
c0100cb5:	66 90                	xchg   %ax,%ax
c0100cb7:	66 90                	xchg   %ax,%ax
c0100cb9:	66 90                	xchg   %ax,%ax
c0100cbb:	66 90                	xchg   %ax,%ax
c0100cbd:	66 90                	xchg   %ax,%ax
c0100cbf:	90                   	nop

c0100cc0 <kmonitor>:
}

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cc0:	55                   	push   %ebp
c0100cc1:	89 e5                	mov    %esp,%ebp
c0100cc3:	83 ec 18             	sub    $0x18,%esp
c0100cc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc9:	8d 0d 12 f2 10 c0    	lea    0xc010f212,%ecx
c0100ccf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cd2:	89 0c 24             	mov    %ecx,(%esp)
c0100cd5:	e8 66 f5 ff ff       	call   c0100240 <cprintf>
c0100cda:	8d 0d 39 f2 10 c0    	lea    0xc010f239,%ecx
    cprintf("Type 'help' for a list of commands.\n");
c0100ce0:	89 0c 24             	mov    %ecx,(%esp)
c0100ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ce6:	e8 55 f5 ff ff       	call   c0100240 <cprintf>

    if (tf != NULL) {
c0100ceb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0100cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100cf2:	0f 84 0b 00 00 00    	je     c0100d03 <kmonitor+0x43>
        print_trapframe(tf);
c0100cf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100cfb:	89 04 24             	mov    %eax,(%esp)
c0100cfe:	e8 1d 13 00 00       	call   c0102020 <print_trapframe>
c0100d03:	8d 05 5e f2 10 c0    	lea    0xc010f25e,%eax
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d09:	89 04 24             	mov    %eax,(%esp)
c0100d0c:	e8 1f f6 ff ff       	call   c0100330 <readline>
c0100d11:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100d14:	83 f8 00             	cmp    $0x0,%eax
c0100d17:	0f 84 25 00 00 00    	je     c0100d42 <kmonitor+0x82>
            if (runcmd(buf, tf) < 0) {
c0100d1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100d20:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0100d23:	89 04 24             	mov    %eax,(%esp)
c0100d26:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d2a:	e8 21 00 00 00       	call   c0100d50 <runcmd>
c0100d2f:	83 f8 00             	cmp    $0x0,%eax
c0100d32:	0f 8d 05 00 00 00    	jge    c0100d3d <kmonitor+0x7d>
                break;
c0100d38:	e9 0a 00 00 00       	jmp    c0100d47 <kmonitor+0x87>
            }
        }
c0100d3d:	e9 00 00 00 00       	jmp    c0100d42 <kmonitor+0x82>
    while (1) {
c0100d42:	e9 bc ff ff ff       	jmp    c0100d03 <kmonitor+0x43>
    }
}
c0100d47:	83 c4 18             	add    $0x18,%esp
c0100d4a:	5d                   	pop    %ebp
c0100d4b:	c3                   	ret    
c0100d4c:	0f 1f 40 00          	nopl   0x0(%eax)

c0100d50 <runcmd>:
runcmd(char *buf, struct trapframe *tf) {
c0100d50:	55                   	push   %ebp
c0100d51:	89 e5                	mov    %esp,%ebp
c0100d53:	56                   	push   %esi
c0100d54:	83 ec 64             	sub    $0x64,%esp
c0100d57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0100d5d:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100d60:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0100d63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int argc = parse(buf, argv);
c0100d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d69:	89 04 24             	mov    %eax,(%esp)
c0100d6c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100d70:	e8 ab 01 00 00       	call   c0100f20 <parse>
c0100d75:	89 45 ac             	mov    %eax,-0x54(%ebp)
    if (argc == 0) {
c0100d78:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0100d7c:	0f 85 0c 00 00 00    	jne    c0100d8e <runcmd+0x3e>
        return 0;
c0100d82:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0100d89:	e9 9c 00 00 00       	jmp    c0100e2a <runcmd+0xda>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d8e:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
c0100d95:	83 7d a8 03          	cmpl   $0x3,-0x58(%ebp)
c0100d99:	0f 83 6c 00 00 00    	jae    c0100e0b <runcmd+0xbb>
c0100d9f:	8d 05 20 30 11 c0    	lea    0xc0113020,%eax
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100da5:	6b 4d a8 0c          	imul   $0xc,-0x58(%ebp),%ecx
c0100da9:	01 c8                	add    %ecx,%eax
c0100dab:	8b 00                	mov    (%eax),%eax
c0100dad:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100db0:	89 04 24             	mov    %eax,(%esp)
c0100db3:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100db7:	e8 14 d2 00 00       	call   c010dfd0 <strcmp>
c0100dbc:	83 f8 00             	cmp    $0x0,%eax
c0100dbf:	0f 85 33 00 00 00    	jne    c0100df8 <runcmd+0xa8>
c0100dc5:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100dc8:	8d 0d 20 30 11 c0    	lea    0xc0113020,%ecx
            return commands[i].func(argc - 1, argv + 1, tf);
c0100dce:	6b 55 a8 0c          	imul   $0xc,-0x58(%ebp),%edx
c0100dd2:	01 d1                	add    %edx,%ecx
c0100dd4:	8b 49 08             	mov    0x8(%ecx),%ecx
c0100dd7:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0100dda:	83 ea 01             	sub    $0x1,%edx
c0100ddd:	83 c0 04             	add    $0x4,%eax
c0100de0:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0100de3:	89 14 24             	mov    %edx,(%esp)
c0100de6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dea:	89 74 24 08          	mov    %esi,0x8(%esp)
c0100dee:	ff d1                	call   *%ecx
c0100df0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100df3:	e9 32 00 00 00       	jmp    c0100e2a <runcmd+0xda>
    }
c0100df8:	e9 00 00 00 00       	jmp    c0100dfd <runcmd+0xad>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dfd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0100e00:	83 c0 01             	add    $0x1,%eax
c0100e03:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0100e06:	e9 8a ff ff ff       	jmp    c0100d95 <runcmd+0x45>
c0100e0b:	8d 05 6b f2 10 c0    	lea    0xc010f26b,%eax
    cprintf("Unknown command '%s'\n", argv[0]);
c0100e11:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100e14:	89 04 24             	mov    %eax,(%esp)
c0100e17:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100e1b:	e8 20 f4 ff ff       	call   c0100240 <cprintf>
    return 0;
c0100e20:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0100e27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
}
c0100e2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100e2d:	83 c4 64             	add    $0x64,%esp
c0100e30:	5e                   	pop    %esi
c0100e31:	5d                   	pop    %ebp
c0100e32:	c3                   	ret    
c0100e33:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0100e3a:	84 00 00 00 00 00 

c0100e40 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e40:	55                   	push   %ebp
c0100e41:	89 e5                	mov    %esp,%ebp
c0100e43:	56                   	push   %esi
c0100e44:	83 ec 24             	sub    $0x24,%esp
c0100e47:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e4a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0100e4d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100e50:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0100e53:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0100e56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100e60:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0100e64:	0f 83 40 00 00 00    	jae    c0100eaa <mon_help+0x6a>
c0100e6a:	8d 05 62 f2 10 c0    	lea    0xc010f262,%eax
c0100e70:	8d 0d 20 30 11 c0    	lea    0xc0113020,%ecx
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e76:	6b 55 ec 0c          	imul   $0xc,-0x14(%ebp),%edx
c0100e7a:	89 ce                	mov    %ecx,%esi
c0100e7c:	01 d6                	add    %edx,%esi
c0100e7e:	8b 16                	mov    (%esi),%edx
c0100e80:	6b 75 ec 0c          	imul   $0xc,-0x14(%ebp),%esi
c0100e84:	01 f1                	add    %esi,%ecx
c0100e86:	8b 49 04             	mov    0x4(%ecx),%ecx
c0100e89:	89 04 24             	mov    %eax,(%esp)
c0100e8c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100e90:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e94:	e8 a7 f3 ff ff       	call   c0100240 <cprintf>
c0100e99:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100e9f:	83 c0 01             	add    $0x1,%eax
c0100ea2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100ea5:	e9 b6 ff ff ff       	jmp    c0100e60 <mon_help+0x20>
c0100eaa:	31 c0                	xor    %eax,%eax
    }
    return 0;
c0100eac:	83 c4 24             	add    $0x24,%esp
c0100eaf:	5e                   	pop    %esi
c0100eb0:	5d                   	pop    %ebp
c0100eb1:	c3                   	ret    
c0100eb2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0100eb9:	1f 84 00 00 00 00 00 

c0100ec0 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ec0:	55                   	push   %ebp
c0100ec1:	89 e5                	mov    %esp,%ebp
c0100ec3:	83 ec 18             	sub    $0x18,%esp
c0100ec6:	8b 45 10             	mov    0x10(%ebp),%eax
c0100ec9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0100ecc:	8b 55 08             	mov    0x8(%ebp),%edx
c0100ecf:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0100ed2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0100ed5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    print_kerninfo();
c0100ed8:	e8 03 fc ff ff       	call   c0100ae0 <print_kerninfo>
c0100edd:	31 c0                	xor    %eax,%eax
    return 0;
c0100edf:	83 c4 18             	add    $0x18,%esp
c0100ee2:	5d                   	pop    %ebp
c0100ee3:	c3                   	ret    
c0100ee4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0100eeb:	00 00 00 00 00 

c0100ef0 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100ef0:	55                   	push   %ebp
c0100ef1:	89 e5                	mov    %esp,%ebp
c0100ef3:	83 ec 18             	sub    $0x18,%esp
c0100ef6:	8b 45 10             	mov    0x10(%ebp),%eax
c0100ef9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0100efc:	8b 55 08             	mov    0x8(%ebp),%edx
c0100eff:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0100f02:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0100f05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    print_stackframe();
c0100f08:	e8 a3 fd ff ff       	call   c0100cb0 <print_stackframe>
c0100f0d:	31 c0                	xor    %eax,%eax
    return 0;
c0100f0f:	83 c4 18             	add    $0x18,%esp
c0100f12:	5d                   	pop    %ebp
c0100f13:	c3                   	ret    
c0100f14:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0100f1b:	00 00 00 00 00 

c0100f20 <parse>:
parse(char *buf, char **argv) {
c0100f20:	55                   	push   %ebp
c0100f21:	89 e5                	mov    %esp,%ebp
c0100f23:	83 ec 28             	sub    $0x28,%esp
c0100f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f29:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0100f2c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0100f2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int argc = 0;
c0100f32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100f39:	e9 00 00 00 00       	jmp    c0100f3e <parse+0x1e>
c0100f3e:	31 c0                	xor    %eax,%eax
c0100f40:	88 c1                	mov    %al,%cl
c0100f42:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f45:	0f be 00             	movsbl (%eax),%eax
c0100f48:	83 f8 00             	cmp    $0x0,%eax
c0100f4b:	88 4d f3             	mov    %cl,-0xd(%ebp)
c0100f4e:	0f 84 21 00 00 00    	je     c0100f75 <parse+0x55>
c0100f54:	8d 05 81 f2 10 c0    	lea    0xc010f281,%eax
c0100f5a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0100f5d:	89 04 24             	mov    %eax,(%esp)
c0100f60:	0f be 01             	movsbl (%ecx),%eax
c0100f63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f67:	e8 74 d1 00 00       	call   c010e0e0 <strchr>
c0100f6c:	83 f8 00             	cmp    $0x0,%eax
c0100f6f:	0f 95 c2             	setne  %dl
c0100f72:	88 55 f3             	mov    %dl,-0xd(%ebp)
c0100f75:	8a 45 f3             	mov    -0xd(%ebp),%al
c0100f78:	a8 01                	test   $0x1,%al
c0100f7a:	0f 85 05 00 00 00    	jne    c0100f85 <parse+0x65>
c0100f80:	e9 13 00 00 00       	jmp    c0100f98 <parse+0x78>
            *buf ++ = '\0';
c0100f85:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f88:	89 c1                	mov    %eax,%ecx
c0100f8a:	83 c1 01             	add    $0x1,%ecx
c0100f8d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0100f90:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100f93:	e9 a6 ff ff ff       	jmp    c0100f3e <parse+0x1e>
        if (*buf == '\0') {
c0100f98:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f9b:	0f be 00             	movsbl (%eax),%eax
c0100f9e:	83 f8 00             	cmp    $0x0,%eax
c0100fa1:	0f 85 05 00 00 00    	jne    c0100fac <parse+0x8c>
            break;
c0100fa7:	e9 99 00 00 00       	jmp    c0101045 <parse+0x125>
        if (argc == MAXARGS - 1) {
c0100fac:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100fb0:	0f 85 21 00 00 00    	jne    c0100fd7 <parse+0xb7>
c0100fb6:	8d 05 86 f2 10 c0    	lea    0xc010f286,%eax
c0100fbc:	b9 10 00 00 00       	mov    $0x10,%ecx
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100fc1:	89 04 24             	mov    %eax,(%esp)
c0100fc4:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100fcb:	00 
c0100fcc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0100fcf:	e8 6c f2 ff ff       	call   c0100240 <cprintf>
c0100fd4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        argv[argc ++] = buf;
c0100fd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fda:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100fdd:	89 ca                	mov    %ecx,%edx
c0100fdf:	83 c2 01             	add    $0x1,%edx
c0100fe2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100fe5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0100fe8:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
c0100feb:	31 c0                	xor    %eax,%eax
c0100fed:	88 c1                	mov    %al,%cl
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100fef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ff2:	0f be 00             	movsbl (%eax),%eax
c0100ff5:	83 f8 00             	cmp    $0x0,%eax
c0100ff8:	88 4d e7             	mov    %cl,-0x19(%ebp)
c0100ffb:	0f 84 21 00 00 00    	je     c0101022 <parse+0x102>
c0101001:	8d 05 81 f2 10 c0    	lea    0xc010f281,%eax
c0101007:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010100a:	89 04 24             	mov    %eax,(%esp)
c010100d:	0f be 01             	movsbl (%ecx),%eax
c0101010:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101014:	e8 c7 d0 00 00       	call   c010e0e0 <strchr>
c0101019:	83 f8 00             	cmp    $0x0,%eax
c010101c:	0f 94 c2             	sete   %dl
c010101f:	88 55 e7             	mov    %dl,-0x19(%ebp)
c0101022:	8a 45 e7             	mov    -0x19(%ebp),%al
c0101025:	a8 01                	test   $0x1,%al
c0101027:	0f 85 05 00 00 00    	jne    c0101032 <parse+0x112>
c010102d:	e9 0e 00 00 00       	jmp    c0101040 <parse+0x120>
            buf ++;
c0101032:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101035:	83 c0 01             	add    $0x1,%eax
c0101038:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c010103b:	e9 ab ff ff ff       	jmp    c0100feb <parse+0xcb>
    while (1) {
c0101040:	e9 f4 fe ff ff       	jmp    c0100f39 <parse+0x19>
    return argc;
c0101045:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101048:	83 c4 28             	add    $0x28,%esp
c010104b:	5d                   	pop    %ebp
c010104c:	c3                   	ret    
c010104d:	66 90                	xchg   %ax,%ax
c010104f:	90                   	nop

c0101050 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0101050:	55                   	push   %ebp
c0101051:	89 e5                	mov    %esp,%ebp
    // set 8253 timer-chip
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
c0101053:	83 ec 18             	sub    $0x18,%esp
c0101056:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c010105c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101060:	8a 45 f5             	mov    -0xb(%ebp),%al
c0101063:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101067:	ee                   	out    %al,(%dx)
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
c0101068:	66 c7 45 fa 40 00    	movw   $0x40,-0x6(%ebp)
c010106e:	c6 45 f9 9c          	movb   $0x9c,-0x7(%ebp)
c0101072:	8a 45 f9             	mov    -0x7(%ebp),%al
c0101075:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c0101079:	ee                   	out    %al,(%dx)
    outb(IO_TIMER1, TIMER_DIV(100) / 256);
c010107a:	66 c7 45 fe 40 00    	movw   $0x40,-0x2(%ebp)
c0101080:	c6 45 fd 2e          	movb   $0x2e,-0x3(%ebp)
c0101084:	8a 45 fd             	mov    -0x3(%ebp),%al
c0101087:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c010108b:	ee                   	out    %al,(%dx)
c010108c:	8d 0d 21 f3 10 c0    	lea    0xc010f321,%ecx

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0101092:	c7 05 20 49 11 c0 00 	movl   $0x0,0xc0114920
c0101099:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c010109c:	89 0c 24             	mov    %ecx,(%esp)
c010109f:	e8 9c f1 ff ff       	call   c0100240 <cprintf>
c01010a4:	31 c9                	xor    %ecx,%ecx
    pic_enable(IRQ_TIMER);
c01010a6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01010ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01010b0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01010b3:	e8 68 0b 00 00       	call   c0101c20 <pic_enable>
}
c01010b8:	83 c4 18             	add    $0x18,%esp
c01010bb:	5d                   	pop    %ebp
c01010bc:	c3                   	ret    
c01010bd:	66 90                	xchg   %ax,%ax
c01010bf:	90                   	nop

c01010c0 <serial_intr>:
    return c;
}

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c01010c0:	55                   	push   %ebp
c01010c1:	89 e5                	mov    %esp,%ebp
    if (serial_exists) {
c01010c3:	83 ec 08             	sub    $0x8,%esp
c01010c6:	83 3d 08 3e 11 c0 00 	cmpl   $0x0,0xc0113e08
c01010cd:	0f 84 0e 00 00 00    	je     c01010e1 <serial_intr+0x21>
c01010d3:	8d 05 60 11 10 c0    	lea    0xc0101160,%eax
        cons_intr(serial_proc_data);
c01010d9:	89 04 24             	mov    %eax,(%esp)
c01010dc:	e8 0f 00 00 00       	call   c01010f0 <cons_intr>
    }
}
c01010e1:	83 c4 08             	add    $0x8,%esp
c01010e4:	5d                   	pop    %ebp
c01010e5:	c3                   	ret    
c01010e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c01010ed:	00 00 00 

c01010f0 <cons_intr>:
cons_intr(int (*proc)(void)) {
c01010f0:	55                   	push   %ebp
c01010f1:	89 e5                	mov    %esp,%ebp
c01010f3:	83 ec 08             	sub    $0x8,%esp
c01010f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01010f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while ((c = (*proc)()) != -1) {
c01010fc:	ff 55 fc             	call   *-0x4(%ebp)
c01010ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101102:	83 f8 ff             	cmp    $0xffffffff,%eax
c0101105:	0f 84 4a 00 00 00    	je     c0101155 <cons_intr+0x65>
        if (c != 0) {
c010110b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010110f:	0f 84 3b 00 00 00    	je     c0101150 <cons_intr+0x60>
            cons.buf[cons.wpos ++] = c;
c0101115:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101118:	88 c1                	mov    %al,%cl
c010111a:	a1 10 40 11 c0       	mov    0xc0114010,%eax
c010111f:	89 c2                	mov    %eax,%edx
c0101121:	83 c2 01             	add    $0x1,%edx
c0101124:	89 15 10 40 11 c0    	mov    %edx,0xc0114010
c010112a:	88 0c 05 0c 3e 11 c0 	mov    %cl,-0x3feec1f4(,%eax,1)
            if (cons.wpos == CONSBUFSIZE) {
c0101131:	81 3d 10 40 11 c0 00 	cmpl   $0x200,0xc0114010
c0101138:	02 00 00 
c010113b:	0f 85 0a 00 00 00    	jne    c010114b <cons_intr+0x5b>
                cons.wpos = 0;
c0101141:	c7 05 10 40 11 c0 00 	movl   $0x0,0xc0114010
c0101148:	00 00 00 
        }
c010114b:	e9 00 00 00 00       	jmp    c0101150 <cons_intr+0x60>
    while ((c = (*proc)()) != -1) {
c0101150:	e9 a7 ff ff ff       	jmp    c01010fc <cons_intr+0xc>
}
c0101155:	83 c4 08             	add    $0x8,%esp
c0101158:	5d                   	pop    %ebp
c0101159:	c3                   	ret    
c010115a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0101160 <serial_proc_data>:
serial_proc_data(void) {
c0101160:	55                   	push   %ebp
c0101161:	89 e5                	mov    %esp,%ebp
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101163:	83 ec 10             	sub    $0x10,%esp
c0101166:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010116c:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c0101170:	ec                   	in     (%dx),%al
c0101171:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101174:	0f b6 4d f9          	movzbl -0x7(%ebp),%ecx
c0101178:	83 e1 01             	and    $0x1,%ecx
c010117b:	83 f9 00             	cmp    $0x0,%ecx
c010117e:	0f 85 0c 00 00 00    	jne    c0101190 <serial_proc_data+0x30>
        return -1;
c0101184:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
c010118b:	e9 2c 00 00 00       	jmp    c01011bc <serial_proc_data+0x5c>
    int c = inb(COM1 + COM_RX);
c0101190:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
c0101196:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c010119a:	ec                   	in     (%dx),%al
c010119b:	88 45 fd             	mov    %al,-0x3(%ebp)
c010119e:	0f b6 4d fd          	movzbl -0x3(%ebp),%ecx
c01011a2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    if (c == 127) {
c01011a5:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
c01011a9:	0f 85 07 00 00 00    	jne    c01011b6 <serial_proc_data+0x56>
        c = '\b';
c01011af:	c7 45 f0 08 00 00 00 	movl   $0x8,-0x10(%ebp)
    return c;
c01011b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01011b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
}
c01011bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011bf:	83 c4 10             	add    $0x10,%esp
c01011c2:	5d                   	pop    %ebp
c01011c3:	c3                   	ret    
c01011c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c01011cb:	00 00 00 00 00 

c01011d0 <cons_init>:
    pic_enable(IRQ_KBD);
}

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01011d0:	55                   	push   %ebp
c01011d1:	89 e5                	mov    %esp,%ebp
    cga_init();
c01011d3:	83 ec 08             	sub    $0x8,%esp
c01011d6:	e8 35 00 00 00       	call   c0101210 <cga_init>
    serial_init();
c01011db:	e8 20 01 00 00       	call   c0101300 <serial_init>
    kbd_init();
c01011e0:	e8 0b 02 00 00       	call   c01013f0 <kbd_init>
    if (!serial_exists) {
c01011e5:	83 3d 08 3e 11 c0 00 	cmpl   $0x0,0xc0113e08
c01011ec:	0f 85 11 00 00 00    	jne    c0101203 <cons_init+0x33>
c01011f2:	8d 05 3c f3 10 c0    	lea    0xc010f33c,%eax
        cprintf("serial port does not exist!!\n");
c01011f8:	89 04 24             	mov    %eax,(%esp)
c01011fb:	e8 40 f0 ff ff       	call   c0100240 <cprintf>
c0101200:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
}
c0101203:	83 c4 08             	add    $0x8,%esp
c0101206:	5d                   	pop    %ebp
c0101207:	c3                   	ret    
c0101208:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010120f:	00 

c0101210 <cga_init>:
cga_init(void) {
c0101210:	55                   	push   %ebp
c0101211:	89 e5                	mov    %esp,%ebp
c0101213:	83 ec 1c             	sub    $0x1c,%esp
c0101216:	b8 00 80 0b c0       	mov    $0xc00b8000,%eax
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010121b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint16_t was = *cp;
c010121e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101221:	66 8b 08             	mov    (%eax),%cx
c0101224:	66 89 4d ea          	mov    %cx,-0x16(%ebp)
    *cp = (uint16_t) 0xA55A;
c0101228:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010122b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101230:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101233:	66 8b 08             	mov    (%eax),%cx
c0101236:	0f b7 c1             	movzwl %cx,%eax
c0101239:	3d 5a a5 00 00       	cmp    $0xa55a,%eax
c010123e:	0f 84 16 00 00 00    	je     c010125a <cga_init+0x4a>
c0101244:	b8 00 00 0b c0       	mov    $0xc00b0000,%eax
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0101249:	89 45 ec             	mov    %eax,-0x14(%ebp)
        addr_6845 = MONO_BASE;
c010124c:	66 c7 05 14 40 11 c0 	movw   $0x3b4,0xc0114014
c0101253:	b4 03 
    } else {
c0101255:	e9 13 00 00 00       	jmp    c010126d <cga_init+0x5d>
        *cp = was;
c010125a:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
c010125e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0101261:	66 89 01             	mov    %ax,(%ecx)
        addr_6845 = CGA_BASE;
c0101264:	66 c7 05 14 40 11 c0 	movw   $0x3d4,0xc0114014
c010126b:	d4 03 
    outb(addr_6845, 14);
c010126d:	66 a1 14 40 11 c0    	mov    0xc0114014,%ax
c0101273:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101277:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010127b:	8a 45 f1             	mov    -0xf(%ebp),%al
c010127e:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101282:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101283:	0f b7 0d 14 40 11 c0 	movzwl 0xc0114014,%ecx
c010128a:	83 c1 01             	add    $0x1,%ecx
c010128d:	66 89 ca             	mov    %cx,%dx
c0101290:	66 89 55 f6          	mov    %dx,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101294:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101298:	ec                   	in     (%dx),%al
c0101299:	88 45 f5             	mov    %al,-0xb(%ebp)
c010129c:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
c01012a0:	c1 e1 08             	shl    $0x8,%ecx
c01012a3:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    outb(addr_6845, 15);
c01012a6:	66 8b 15 14 40 11 c0 	mov    0xc0114014,%dx
c01012ad:	66 89 55 fa          	mov    %dx,-0x6(%ebp)
c01012b1:	c6 45 f9 0f          	movb   $0xf,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01012b5:	8a 45 f9             	mov    -0x7(%ebp),%al
c01012b8:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c01012bc:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c01012bd:	0f b7 0d 14 40 11 c0 	movzwl 0xc0114014,%ecx
c01012c4:	83 c1 01             	add    $0x1,%ecx
c01012c7:	66 89 ca             	mov    %cx,%dx
c01012ca:	66 89 55 fe          	mov    %dx,-0x2(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01012ce:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c01012d2:	ec                   	in     (%dx),%al
c01012d3:	88 45 fd             	mov    %al,-0x3(%ebp)
c01012d6:	0f b6 4d fd          	movzbl -0x3(%ebp),%ecx
c01012da:	0b 4d e4             	or     -0x1c(%ebp),%ecx
c01012dd:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    crt_buf = (uint16_t*) cp;
c01012e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01012e3:	89 0d 18 40 11 c0    	mov    %ecx,0xc0114018
    crt_pos = pos;
c01012e9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01012ec:	66 89 ca             	mov    %cx,%dx
c01012ef:	66 89 15 1c 40 11 c0 	mov    %dx,0xc011401c
}
c01012f6:	83 c4 1c             	add    $0x1c,%esp
c01012f9:	5d                   	pop    %ebp
c01012fa:	c3                   	ret    
c01012fb:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

c0101300 <serial_init>:
serial_init(void) {
c0101300:	55                   	push   %ebp
c0101301:	89 e5                	mov    %esp,%ebp
    outb(COM1 + COM_FCR, 0);
c0101303:	83 ec 38             	sub    $0x38,%esp
c0101306:	66 c7 45 da fa 03    	movw   $0x3fa,-0x26(%ebp)
c010130c:	c6 45 d9 00          	movb   $0x0,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101310:	8a 45 d9             	mov    -0x27(%ebp),%al
c0101313:	66 8b 55 da          	mov    -0x26(%ebp),%dx
c0101317:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_LCR, COM_LCR_DLAB);
c0101318:	66 c7 45 de fb 03    	movw   $0x3fb,-0x22(%ebp)
c010131e:	c6 45 dd 80          	movb   $0x80,-0x23(%ebp)
c0101322:	8a 45 dd             	mov    -0x23(%ebp),%al
c0101325:	66 8b 55 de          	mov    -0x22(%ebp),%dx
c0101329:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_DLL, (uint8_t) (115200 / 9600));
c010132a:	66 c7 45 e2 f8 03    	movw   $0x3f8,-0x1e(%ebp)
c0101330:	c6 45 e1 0c          	movb   $0xc,-0x1f(%ebp)
c0101334:	8a 45 e1             	mov    -0x1f(%ebp),%al
c0101337:	66 8b 55 e2          	mov    -0x1e(%ebp),%dx
c010133b:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_DLM, 0);
c010133c:	66 c7 45 e6 f9 03    	movw   $0x3f9,-0x1a(%ebp)
c0101342:	c6 45 e5 00          	movb   $0x0,-0x1b(%ebp)
c0101346:	8a 45 e5             	mov    -0x1b(%ebp),%al
c0101349:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
c010134d:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_LCR, COM_LCR_WLEN8 & ~COM_LCR_DLAB);
c010134e:	66 c7 45 ea fb 03    	movw   $0x3fb,-0x16(%ebp)
c0101354:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0101358:	8a 45 e9             	mov    -0x17(%ebp),%al
c010135b:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
c010135f:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_MCR, 0);
c0101360:	66 c7 45 ee fc 03    	movw   $0x3fc,-0x12(%ebp)
c0101366:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
c010136a:	8a 45 ed             	mov    -0x13(%ebp),%al
c010136d:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
c0101371:	ee                   	out    %al,(%dx)
    outb(COM1 + COM_IER, COM_IER_RDI);
c0101372:	66 c7 45 f2 f9 03    	movw   $0x3f9,-0xe(%ebp)
c0101378:	c6 45 f1 01          	movb   $0x1,-0xf(%ebp)
c010137c:	8a 45 f1             	mov    -0xf(%ebp),%al
c010137f:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101383:	ee                   	out    %al,(%dx)
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101384:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010138a:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c010138e:	ec                   	in     (%dx),%al
c010138f:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101392:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
c0101396:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
c010139c:	0f 95 c0             	setne  %al
c010139f:	24 01                	and    $0x1,%al
c01013a1:	0f b6 c8             	movzbl %al,%ecx
c01013a4:	89 0d 08 3e 11 c0    	mov    %ecx,0xc0113e08
    (void) inb(COM1+COM_IIR);
c01013aa:	66 c7 45 fa fa 03    	movw   $0x3fa,-0x6(%ebp)
c01013b0:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c01013b4:	ec                   	in     (%dx),%al
c01013b5:	88 45 f9             	mov    %al,-0x7(%ebp)
    (void) inb(COM1+COM_RX);
c01013b8:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
c01013be:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c01013c2:	ec                   	in     (%dx),%al
c01013c3:	88 45 fd             	mov    %al,-0x3(%ebp)
    if (serial_exists) {
c01013c6:	83 3d 08 3e 11 c0 00 	cmpl   $0x0,0xc0113e08
c01013cd:	0f 84 14 00 00 00    	je     c01013e7 <serial_init+0xe7>
c01013d3:	b8 04 00 00 00       	mov    $0x4,%eax
        pic_enable(IRQ_COM1);
c01013d8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01013df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01013e2:	e8 39 08 00 00       	call   c0101c20 <pic_enable>
}
c01013e7:	83 c4 38             	add    $0x38,%esp
c01013ea:	5d                   	pop    %ebp
c01013eb:	c3                   	ret    
c01013ec:	0f 1f 40 00          	nopl   0x0(%eax)

c01013f0 <kbd_init>:
kbd_init(void) {
c01013f0:	55                   	push   %ebp
c01013f1:	89 e5                	mov    %esp,%ebp
    kbd_intr();
c01013f3:	83 ec 08             	sub    $0x8,%esp
c01013f6:	e8 65 04 00 00       	call   c0101860 <kbd_intr>
c01013fb:	b8 01 00 00 00       	mov    $0x1,%eax
    pic_enable(IRQ_KBD);
c0101400:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101407:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010140a:	e8 11 08 00 00       	call   c0101c20 <pic_enable>
}
c010140f:	83 c4 08             	add    $0x8,%esp
c0101412:	5d                   	pop    %ebp
c0101413:	c3                   	ret    
c0101414:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010141b:	00 00 00 00 00 

c0101420 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101420:	55                   	push   %ebp
c0101421:	89 e5                	mov    %esp,%ebp
c0101423:	83 ec 18             	sub    $0x18,%esp
c0101426:	8b 45 08             	mov    0x8(%ebp),%eax
c0101429:	89 45 fc             	mov    %eax,-0x4(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010142c:	e8 3f 00 00 00       	call   c0101470 <__intr_save>
c0101431:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        lpt_putc(c);
c0101434:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101437:	89 04 24             	mov    %eax,(%esp)
c010143a:	e8 71 00 00 00       	call   c01014b0 <lpt_putc>
        cga_putc(c);
c010143f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101442:	89 04 24             	mov    %eax,(%esp)
c0101445:	e8 d6 00 00 00       	call   c0101520 <cga_putc>
        serial_putc(c);
c010144a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010144d:	89 04 24             	mov    %eax,(%esp)
c0101450:	e8 fb 02 00 00       	call   c0101750 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101455:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101458:	89 04 24             	mov    %eax,(%esp)
c010145b:	e8 60 03 00 00       	call   c01017c0 <__intr_restore>
}
c0101460:	83 c4 18             	add    $0x18,%esp
c0101463:	5d                   	pop    %ebp
c0101464:	c3                   	ret    
c0101465:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010146c:	00 00 00 00 

c0101470 <__intr_save>:
#include <x86.h>
#include <intr.h>
#include <mmu.h>

static inline bool
__intr_save(void) {
c0101470:	55                   	push   %ebp
c0101471:	89 e5                	mov    %esp,%ebp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101473:	83 ec 08             	sub    $0x8,%esp
c0101476:	9c                   	pushf  
c0101477:	58                   	pop    %eax
c0101478:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
c010147b:	8b 45 fc             	mov    -0x4(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010147e:	25 00 02 00 00       	and    $0x200,%eax
c0101483:	83 f8 00             	cmp    $0x0,%eax
c0101486:	0f 84 11 00 00 00    	je     c010149d <__intr_save+0x2d>
        intr_disable();
c010148c:	e8 8f 09 00 00       	call   c0101e20 <intr_disable>
        return 1;
c0101491:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
c0101498:	e9 07 00 00 00       	jmp    c01014a4 <__intr_save+0x34>
    }
    return 0;
c010149d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
c01014a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01014a7:	83 c4 08             	add    $0x8,%esp
c01014aa:	5d                   	pop    %ebp
c01014ab:	c3                   	ret    
c01014ac:	0f 1f 40 00          	nopl   0x0(%eax)

c01014b0 <lpt_putc>:
lpt_putc(int c) {
c01014b0:	55                   	push   %ebp
c01014b1:	89 e5                	mov    %esp,%ebp
c01014b3:	83 ec 18             	sub    $0x18,%esp
c01014b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c != '\b') {
c01014bc:	83 7d fc 08          	cmpl   $0x8,-0x4(%ebp)
c01014c0:	0f 84 10 00 00 00    	je     c01014d6 <lpt_putc+0x26>
        lpt_putc_sub(c);
c01014c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01014c9:	89 04 24             	mov    %eax,(%esp)
c01014cc:	e8 af 03 00 00       	call   c0101880 <lpt_putc_sub>
    }
c01014d1:	e9 3c 00 00 00       	jmp    c0101512 <lpt_putc+0x62>
c01014d6:	b8 08 00 00 00       	mov    $0x8,%eax
        lpt_putc_sub('\b');
c01014db:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01014e5:	e8 96 03 00 00       	call   c0101880 <lpt_putc_sub>
c01014ea:	b8 20 00 00 00       	mov    $0x20,%eax
        lpt_putc_sub(' ');
c01014ef:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01014f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014f9:	e8 82 03 00 00       	call   c0101880 <lpt_putc_sub>
c01014fe:	b8 08 00 00 00       	mov    $0x8,%eax
        lpt_putc_sub('\b');
c0101503:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010150a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010150d:	e8 6e 03 00 00       	call   c0101880 <lpt_putc_sub>
}
c0101512:	83 c4 18             	add    $0x18,%esp
c0101515:	5d                   	pop    %ebp
c0101516:	c3                   	ret    
c0101517:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c010151e:	00 00 

c0101520 <cga_putc>:
cga_putc(int c) {
c0101520:	55                   	push   %ebp
c0101521:	89 e5                	mov    %esp,%ebp
c0101523:	53                   	push   %ebx
c0101524:	57                   	push   %edi
c0101525:	56                   	push   %esi
c0101526:	83 ec 4c             	sub    $0x4c,%esp
c0101529:	8b 45 08             	mov    0x8(%ebp),%eax
c010152c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!(c & ~0xFF)) {
c010152f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101532:	25 00 ff ff ff       	and    $0xffffff00,%eax
c0101537:	83 f8 00             	cmp    $0x0,%eax
c010153a:	0f 85 0b 00 00 00    	jne    c010154b <cga_putc+0x2b>
        c |= 0x0700;
c0101540:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101543:	0d 00 07 00 00       	or     $0x700,%eax
c0101548:	89 45 e0             	mov    %eax,-0x20(%ebp)
    switch (c & 0xff) {
c010154b:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010154f:	89 c1                	mov    %eax,%ecx
c0101551:	83 e9 08             	sub    $0x8,%ecx
c0101554:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0101557:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c010155a:	0f 84 2d 00 00 00    	je     c010158d <cga_putc+0x6d>
c0101560:	e9 00 00 00 00       	jmp    c0101565 <cga_putc+0x45>
c0101565:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101568:	83 e8 0a             	sub    $0xa,%eax
c010156b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010156e:	0f 84 5e 00 00 00    	je     c01015d2 <cga_putc+0xb2>
c0101574:	e9 00 00 00 00       	jmp    c0101579 <cga_putc+0x59>
c0101579:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010157c:	83 e8 0d             	sub    $0xd,%eax
c010157f:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101582:	0f 84 5e 00 00 00    	je     c01015e6 <cga_putc+0xc6>
c0101588:	e9 88 00 00 00       	jmp    c0101615 <cga_putc+0xf5>
        if (crt_pos > 0) {
c010158d:	0f b7 05 1c 40 11 c0 	movzwl 0xc011401c,%eax
c0101594:	83 f8 00             	cmp    $0x0,%eax
c0101597:	0f 8e 30 00 00 00    	jle    c01015cd <cga_putc+0xad>
            crt_pos --;
c010159d:	66 a1 1c 40 11 c0    	mov    0xc011401c,%ax
c01015a3:	66 83 c0 ff          	add    $0xffff,%ax
c01015a7:	66 a3 1c 40 11 c0    	mov    %ax,0xc011401c
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01015ad:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01015b0:	81 e1 00 ff ff ff    	and    $0xffffff00,%ecx
c01015b6:	83 c9 20             	or     $0x20,%ecx
c01015b9:	66 89 c8             	mov    %cx,%ax
c01015bc:	0f b7 0d 1c 40 11 c0 	movzwl 0xc011401c,%ecx
c01015c3:	8b 15 18 40 11 c0    	mov    0xc0114018,%edx
c01015c9:	66 89 04 4a          	mov    %ax,(%edx,%ecx,2)
        break;
c01015cd:	e9 6b 00 00 00       	jmp    c010163d <cga_putc+0x11d>
        crt_pos += CRT_COLS;
c01015d2:	0f b7 05 1c 40 11 c0 	movzwl 0xc011401c,%eax
c01015d9:	83 c0 50             	add    $0x50,%eax
c01015dc:	66 89 c1             	mov    %ax,%cx
c01015df:	66 89 0d 1c 40 11 c0 	mov    %cx,0xc011401c
c01015e6:	b8 50 00 00 00       	mov    $0x50,%eax
        crt_pos -= (crt_pos % CRT_COLS);
c01015eb:	0f b7 0d 1c 40 11 c0 	movzwl 0xc011401c,%ecx
c01015f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01015f5:	89 c8                	mov    %ecx,%eax
c01015f7:	99                   	cltd   
c01015f8:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c01015fb:	f7 f9                	idiv   %ecx
c01015fd:	0f b7 35 1c 40 11 c0 	movzwl 0xc011401c,%esi
c0101604:	29 d6                	sub    %edx,%esi
c0101606:	66 89 f7             	mov    %si,%di
c0101609:	66 89 3d 1c 40 11 c0 	mov    %di,0xc011401c
        break;
c0101610:	e9 28 00 00 00       	jmp    c010163d <cga_putc+0x11d>
        crt_buf[crt_pos ++] = c;     // write the character
c0101615:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101618:	66 89 c1             	mov    %ax,%cx
c010161b:	66 8b 15 1c 40 11 c0 	mov    0xc011401c,%dx
c0101622:	66 89 d6             	mov    %dx,%si
c0101625:	66 83 c6 01          	add    $0x1,%si
c0101629:	66 89 35 1c 40 11 c0 	mov    %si,0xc011401c
c0101630:	0f b7 c2             	movzwl %dx,%eax
c0101633:	8b 3d 18 40 11 c0    	mov    0xc0114018,%edi
c0101639:	66 89 0c 47          	mov    %cx,(%edi,%eax,2)
    if (crt_pos >= CRT_SIZE) {
c010163d:	0f b7 05 1c 40 11 c0 	movzwl 0xc011401c,%eax
c0101644:	3d d0 07 00 00       	cmp    $0x7d0,%eax
c0101649:	0f 8c 76 00 00 00    	jl     c01016c5 <cga_putc+0x1a5>
c010164f:	b8 00 0f 00 00       	mov    $0xf00,%eax
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101654:	8b 0d 18 40 11 c0    	mov    0xc0114018,%ecx
c010165a:	8b 15 18 40 11 c0    	mov    0xc0114018,%edx
c0101660:	81 c2 a0 00 00 00    	add    $0xa0,%edx
c0101666:	89 0c 24             	mov    %ecx,(%esp)
c0101669:	89 54 24 04          	mov    %edx,0x4(%esp)
c010166d:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101674:	00 
c0101675:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101678:	e8 b3 cd 00 00       	call   c010e430 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010167d:	c7 45 dc 80 07 00 00 	movl   $0x780,-0x24(%ebp)
c0101684:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101687:	81 7d dc d0 07 00 00 	cmpl   $0x7d0,-0x24(%ebp)
c010168e:	0f 8d 1d 00 00 00    	jge    c01016b1 <cga_putc+0x191>
            crt_buf[i] = 0x0700 | ' ';
c0101694:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101697:	8b 0d 18 40 11 c0    	mov    0xc0114018,%ecx
c010169d:	66 c7 04 41 20 07    	movw   $0x720,(%ecx,%eax,2)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c01016a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01016a6:	83 c0 01             	add    $0x1,%eax
c01016a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01016ac:	e9 d6 ff ff ff       	jmp    c0101687 <cga_putc+0x167>
        crt_pos -= CRT_COLS;
c01016b1:	0f b7 05 1c 40 11 c0 	movzwl 0xc011401c,%eax
c01016b8:	83 e8 50             	sub    $0x50,%eax
c01016bb:	66 89 c1             	mov    %ax,%cx
c01016be:	66 89 0d 1c 40 11 c0 	mov    %cx,0xc011401c
    outb(addr_6845, 14);
c01016c5:	66 a1 14 40 11 c0    	mov    0xc0114014,%ax
c01016cb:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c01016cf:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016d3:	8a 45 e5             	mov    -0x1b(%ebp),%al
c01016d6:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
c01016da:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01016db:	0f b7 0d 14 40 11 c0 	movzwl 0xc0114014,%ecx
c01016e2:	83 c1 01             	add    $0x1,%ecx
c01016e5:	66 89 ca             	mov    %cx,%dx
c01016e8:	0f b7 0d 1c 40 11 c0 	movzwl 0xc011401c,%ecx
c01016ef:	c1 f9 08             	sar    $0x8,%ecx
c01016f2:	88 c8                	mov    %cl,%al
c01016f4:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01016f8:	88 45 e9             	mov    %al,-0x17(%ebp)
c01016fb:	8a 45 e9             	mov    -0x17(%ebp),%al
c01016fe:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
c0101702:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101703:	66 8b 15 14 40 11 c0 	mov    0xc0114014,%dx
c010170a:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010170e:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
c0101712:	8a 45 ed             	mov    -0x13(%ebp),%al
c0101715:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
c0101719:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010171a:	0f b7 0d 14 40 11 c0 	movzwl 0xc0114014,%ecx
c0101721:	83 c1 01             	add    $0x1,%ecx
c0101724:	66 89 ca             	mov    %cx,%dx
c0101727:	66 8b 35 1c 40 11 c0 	mov    0xc011401c,%si
c010172e:	66 89 f3             	mov    %si,%bx
c0101731:	88 d8                	mov    %bl,%al
c0101733:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
c0101737:	88 45 f1             	mov    %al,-0xf(%ebp)
c010173a:	8a 45 f1             	mov    -0xf(%ebp),%al
c010173d:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101741:	ee                   	out    %al,(%dx)
}
c0101742:	83 c4 4c             	add    $0x4c,%esp
c0101745:	5e                   	pop    %esi
c0101746:	5f                   	pop    %edi
c0101747:	5b                   	pop    %ebx
c0101748:	5d                   	pop    %ebp
c0101749:	c3                   	ret    
c010174a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0101750 <serial_putc>:
serial_putc(int c) {
c0101750:	55                   	push   %ebp
c0101751:	89 e5                	mov    %esp,%ebp
c0101753:	83 ec 18             	sub    $0x18,%esp
c0101756:	8b 45 08             	mov    0x8(%ebp),%eax
c0101759:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c != '\b') {
c010175c:	83 7d fc 08          	cmpl   $0x8,-0x4(%ebp)
c0101760:	0f 84 10 00 00 00    	je     c0101776 <serial_putc+0x26>
        serial_putc_sub(c);
c0101766:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101769:	89 04 24             	mov    %eax,(%esp)
c010176c:	e8 0f 02 00 00       	call   c0101980 <serial_putc_sub>
    }
c0101771:	e9 3c 00 00 00       	jmp    c01017b2 <serial_putc+0x62>
c0101776:	b8 08 00 00 00       	mov    $0x8,%eax
        serial_putc_sub('\b');
c010177b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101782:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101785:	e8 f6 01 00 00       	call   c0101980 <serial_putc_sub>
c010178a:	b8 20 00 00 00       	mov    $0x20,%eax
        serial_putc_sub(' ');
c010178f:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101796:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101799:	e8 e2 01 00 00       	call   c0101980 <serial_putc_sub>
c010179e:	b8 08 00 00 00       	mov    $0x8,%eax
        serial_putc_sub('\b');
c01017a3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01017aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01017ad:	e8 ce 01 00 00       	call   c0101980 <serial_putc_sub>
}
c01017b2:	83 c4 18             	add    $0x18,%esp
c01017b5:	5d                   	pop    %ebp
c01017b6:	c3                   	ret    
c01017b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c01017be:	00 00 

c01017c0 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01017c0:	55                   	push   %ebp
c01017c1:	89 e5                	mov    %esp,%ebp
c01017c3:	83 ec 08             	sub    $0x8,%esp
c01017c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (flag) {
c01017cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01017d0:	0f 84 05 00 00 00    	je     c01017db <__intr_restore+0x1b>
        intr_enable();
c01017d6:	e8 35 06 00 00       	call   c0101e10 <intr_enable>
    }
}
c01017db:	83 c4 08             	add    $0x8,%esp
c01017de:	5d                   	pop    %ebp
c01017df:	c3                   	ret    

c01017e0 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01017e0:	55                   	push   %ebp
c01017e1:	89 e5                	mov    %esp,%ebp
    int c = 0;
c01017e3:	83 ec 18             	sub    $0x18,%esp
c01017e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01017ed:	e8 7e fc ff ff       	call   c0101470 <__intr_save>
c01017f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01017f5:	e8 c6 f8 ff ff       	call   c01010c0 <serial_intr>
        kbd_intr();
c01017fa:	e8 61 00 00 00       	call   c0101860 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01017ff:	a1 0c 40 11 c0       	mov    0xc011400c,%eax
c0101804:	3b 05 10 40 11 c0    	cmp    0xc0114010,%eax
c010180a:	0f 84 3a 00 00 00    	je     c010184a <cons_getc+0x6a>
            c = cons.buf[cons.rpos ++];
c0101810:	a1 0c 40 11 c0       	mov    0xc011400c,%eax
c0101815:	89 c1                	mov    %eax,%ecx
c0101817:	83 c1 01             	add    $0x1,%ecx
c010181a:	89 0d 0c 40 11 c0    	mov    %ecx,0xc011400c
c0101820:	0f b6 04 05 0c 3e 11 	movzbl -0x3feec1f4(,%eax,1),%eax
c0101827:	c0 
c0101828:	89 45 fc             	mov    %eax,-0x4(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010182b:	81 3d 0c 40 11 c0 00 	cmpl   $0x200,0xc011400c
c0101832:	02 00 00 
c0101835:	0f 85 0a 00 00 00    	jne    c0101845 <cons_getc+0x65>
                cons.rpos = 0;
c010183b:	c7 05 0c 40 11 c0 00 	movl   $0x0,0xc011400c
c0101842:	00 00 00 
            }
        }
c0101845:	e9 00 00 00 00       	jmp    c010184a <cons_getc+0x6a>
    }
    local_intr_restore(intr_flag);
c010184a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010184d:	89 04 24             	mov    %eax,(%esp)
c0101850:	e8 6b ff ff ff       	call   c01017c0 <__intr_restore>
    return c;
c0101855:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101858:	83 c4 18             	add    $0x18,%esp
c010185b:	5d                   	pop    %ebp
c010185c:	c3                   	ret    
c010185d:	0f 1f 00             	nopl   (%eax)

c0101860 <kbd_intr>:
kbd_intr(void) {
c0101860:	55                   	push   %ebp
c0101861:	89 e5                	mov    %esp,%ebp
c0101863:	83 ec 08             	sub    $0x8,%esp
c0101866:	8d 05 10 1a 10 c0    	lea    0xc0101a10,%eax
    cons_intr(kbd_proc_data);
c010186c:	89 04 24             	mov    %eax,(%esp)
c010186f:	e8 7c f8 ff ff       	call   c01010f0 <cons_intr>
}
c0101874:	83 c4 08             	add    $0x8,%esp
c0101877:	5d                   	pop    %ebp
c0101878:	c3                   	ret    
c0101879:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c0101880 <lpt_putc_sub>:
lpt_putc_sub(int c) {
c0101880:	55                   	push   %ebp
c0101881:	89 e5                	mov    %esp,%ebp
c0101883:	83 ec 28             	sub    $0x28,%esp
c0101886:	8b 45 08             	mov    0x8(%ebp),%eax
c0101889:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010188c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101893:	66 c7 45 f2 79 03    	movw   $0x379,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101899:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c010189d:	ec                   	in     (%dx),%al
c010189e:	31 c9                	xor    %ecx,%ecx
c01018a0:	88 cc                	mov    %cl,%ah
c01018a2:	88 45 f1             	mov    %al,-0xf(%ebp)
c01018a5:	0f b6 4d f1          	movzbl -0xf(%ebp),%ecx
c01018a9:	81 e1 80 00 00 00    	and    $0x80,%ecx
c01018af:	83 f9 00             	cmp    $0x0,%ecx
c01018b2:	88 65 e7             	mov    %ah,-0x19(%ebp)
c01018b5:	0f 85 0d 00 00 00    	jne    c01018c8 <lpt_putc_sub+0x48>
c01018bb:	81 7d e8 00 32 00 00 	cmpl   $0x3200,-0x18(%ebp)
c01018c2:	0f 9c c0             	setl   %al
c01018c5:	88 45 e7             	mov    %al,-0x19(%ebp)
c01018c8:	8a 45 e7             	mov    -0x19(%ebp),%al
c01018cb:	a8 01                	test   $0x1,%al
c01018cd:	0f 85 05 00 00 00    	jne    c01018d8 <lpt_putc_sub+0x58>
c01018d3:	e9 13 00 00 00       	jmp    c01018eb <lpt_putc_sub+0x6b>
        delay();
c01018d8:	e8 53 00 00 00       	call   c0101930 <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01018dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01018e0:	83 c0 01             	add    $0x1,%eax
c01018e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01018e6:	e9 a8 ff ff ff       	jmp    c0101893 <lpt_putc_sub+0x13>
    outb(LPTPORT + 0, c);
c01018eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018ee:	88 c1                	mov    %al,%cl
c01018f0:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c01018f6:	88 4d f5             	mov    %cl,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018f9:	8a 45 f5             	mov    -0xb(%ebp),%al
c01018fc:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101900:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
c0101901:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c0101907:	c6 45 f9 0d          	movb   $0xd,-0x7(%ebp)
c010190b:	8a 45 f9             	mov    -0x7(%ebp),%al
c010190e:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c0101912:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08);
c0101913:	66 c7 45 fe 7a 03    	movw   $0x37a,-0x2(%ebp)
c0101919:	c6 45 fd 08          	movb   $0x8,-0x3(%ebp)
c010191d:	8a 45 fd             	mov    -0x3(%ebp),%al
c0101920:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c0101924:	ee                   	out    %al,(%dx)
}
c0101925:	83 c4 28             	add    $0x28,%esp
c0101928:	5d                   	pop    %ebp
c0101929:	c3                   	ret    
c010192a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0101930 <delay>:
delay(void) {
c0101930:	55                   	push   %ebp
c0101931:	89 e5                	mov    %esp,%ebp
    inb(0x84);
c0101933:	83 ec 10             	sub    $0x10,%esp
c0101936:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010193c:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101940:	ec                   	in     (%dx),%al
c0101941:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
c0101944:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010194a:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c010194e:	ec                   	in     (%dx),%al
c010194f:	88 45 f5             	mov    %al,-0xb(%ebp)
    inb(0x84);
c0101952:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101958:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c010195c:	ec                   	in     (%dx),%al
c010195d:	88 45 f9             	mov    %al,-0x7(%ebp)
    inb(0x84);
c0101960:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
c0101966:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c010196a:	ec                   	in     (%dx),%al
c010196b:	88 45 fd             	mov    %al,-0x3(%ebp)
}
c010196e:	83 c4 10             	add    $0x10,%esp
c0101971:	5d                   	pop    %ebp
c0101972:	c3                   	ret    
c0101973:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010197a:	84 00 00 00 00 00 

c0101980 <serial_putc_sub>:
serial_putc_sub(int c) {
c0101980:	55                   	push   %ebp
c0101981:	89 e5                	mov    %esp,%ebp
c0101983:	83 ec 18             	sub    $0x18,%esp
c0101986:	8b 45 08             	mov    0x8(%ebp),%eax
c0101989:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c010198c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0101993:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
c0101999:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c010199d:	ec                   	in     (%dx),%al
c010199e:	31 c9                	xor    %ecx,%ecx
c01019a0:	88 cc                	mov    %cl,%ah
c01019a2:	88 45 f9             	mov    %al,-0x7(%ebp)
c01019a5:	0f b6 4d f9          	movzbl -0x7(%ebp),%ecx
c01019a9:	83 e1 20             	and    $0x20,%ecx
c01019ac:	83 f9 00             	cmp    $0x0,%ecx
c01019af:	88 65 ef             	mov    %ah,-0x11(%ebp)
c01019b2:	0f 85 0d 00 00 00    	jne    c01019c5 <serial_putc_sub+0x45>
c01019b8:	81 7d f0 00 32 00 00 	cmpl   $0x3200,-0x10(%ebp)
c01019bf:	0f 9c c0             	setl   %al
c01019c2:	88 45 ef             	mov    %al,-0x11(%ebp)
c01019c5:	8a 45 ef             	mov    -0x11(%ebp),%al
c01019c8:	a8 01                	test   $0x1,%al
c01019ca:	0f 85 05 00 00 00    	jne    c01019d5 <serial_putc_sub+0x55>
c01019d0:	e9 13 00 00 00       	jmp    c01019e8 <serial_putc_sub+0x68>
        delay();
c01019d5:	e8 56 ff ff ff       	call   c0101930 <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01019da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019dd:	83 c0 01             	add    $0x1,%eax
c01019e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01019e3:	e9 ab ff ff ff       	jmp    c0101993 <serial_putc_sub+0x13>
    outb(COM1 + COM_TX, c);
c01019e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01019eb:	88 c1                	mov    %al,%cl
c01019ed:	66 c7 45 fe f8 03    	movw   $0x3f8,-0x2(%ebp)
c01019f3:	88 4d fd             	mov    %cl,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019f6:	8a 45 fd             	mov    -0x3(%ebp),%al
c01019f9:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c01019fd:	ee                   	out    %al,(%dx)
}
c01019fe:	83 c4 18             	add    $0x18,%esp
c0101a01:	5d                   	pop    %ebp
c0101a02:	c3                   	ret    
c0101a03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0101a0a:	84 00 00 00 00 00 

c0101a10 <kbd_proc_data>:
kbd_proc_data(void) {
c0101a10:	55                   	push   %ebp
c0101a11:	89 e5                	mov    %esp,%ebp
    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101a13:	83 ec 28             	sub    $0x28,%esp
c0101a16:	66 c7 45 f6 64 00    	movw   $0x64,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a1c:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101a20:	ec                   	in     (%dx),%al
c0101a21:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101a24:	0f b6 4d f5          	movzbl -0xb(%ebp),%ecx
c0101a28:	83 e1 01             	and    $0x1,%ecx
c0101a2b:	83 f9 00             	cmp    $0x0,%ecx
c0101a2e:	0f 85 0c 00 00 00    	jne    c0101a40 <kbd_proc_data+0x30>
        return -1;
c0101a34:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c0101a3b:	e9 d4 01 00 00       	jmp    c0101c14 <kbd_proc_data+0x204>
    data = inb(KBDATAP);
c0101a40:	66 c7 45 fa 60 00    	movw   $0x60,-0x6(%ebp)
c0101a46:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c0101a4a:	ec                   	in     (%dx),%al
c0101a4b:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101a4e:	8a 45 f9             	mov    -0x7(%ebp),%al
c0101a51:	88 45 eb             	mov    %al,-0x15(%ebp)
    if (data == 0xE0) {
c0101a54:	0f b6 4d eb          	movzbl -0x15(%ebp),%ecx
c0101a58:	81 f9 e0 00 00 00    	cmp    $0xe0,%ecx
c0101a5e:	0f 85 19 00 00 00    	jne    c0101a7d <kbd_proc_data+0x6d>
        shift |= E0ESC;
c0101a64:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101a69:	83 c8 40             	or     $0x40,%eax
c0101a6c:	a3 20 40 11 c0       	mov    %eax,0xc0114020
        return 0;
c0101a71:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0101a78:	e9 97 01 00 00       	jmp    c0101c14 <kbd_proc_data+0x204>
    } else if (data & 0x80) {
c0101a7d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101a81:	25 80 00 00 00       	and    $0x80,%eax
c0101a86:	83 f8 00             	cmp    $0x0,%eax
c0101a89:	0f 84 58 00 00 00    	je     c0101ae7 <kbd_proc_data+0xd7>
        data = (shift & E0ESC ? data : data & 0x7F);
c0101a8f:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101a94:	83 e0 40             	and    $0x40,%eax
c0101a97:	83 f8 00             	cmp    $0x0,%eax
c0101a9a:	0f 84 0c 00 00 00    	je     c0101aac <kbd_proc_data+0x9c>
c0101aa0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101aa4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101aa7:	e9 0a 00 00 00       	jmp    c0101ab6 <kbd_proc_data+0xa6>
c0101aac:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101ab0:	83 e0 7f             	and    $0x7f,%eax
c0101ab3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101ab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ab9:	88 c1                	mov    %al,%cl
c0101abb:	88 4d eb             	mov    %cl,-0x15(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101abe:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101ac2:	0f b6 04 05 44 30 11 	movzbl -0x3feecfbc(,%eax,1),%eax
c0101ac9:	c0 
c0101aca:	83 c8 40             	or     $0x40,%eax
c0101acd:	83 f0 ff             	xor    $0xffffffff,%eax
c0101ad0:	23 05 20 40 11 c0    	and    0xc0114020,%eax
c0101ad6:	a3 20 40 11 c0       	mov    %eax,0xc0114020
        return 0;
c0101adb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0101ae2:	e9 2d 01 00 00       	jmp    c0101c14 <kbd_proc_data+0x204>
    } else if (shift & E0ESC) {
c0101ae7:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101aec:	83 e0 40             	and    $0x40,%eax
c0101aef:	83 f8 00             	cmp    $0x0,%eax
c0101af2:	0f 84 1b 00 00 00    	je     c0101b13 <kbd_proc_data+0x103>
        data |= 0x80;
c0101af8:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101afc:	0d 80 00 00 00       	or     $0x80,%eax
c0101b01:	88 c1                	mov    %al,%cl
c0101b03:	88 4d eb             	mov    %cl,-0x15(%ebp)
        shift &= ~E0ESC;
c0101b06:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101b0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101b0e:	a3 20 40 11 c0       	mov    %eax,0xc0114020
c0101b13:	e9 00 00 00 00       	jmp    c0101b18 <kbd_proc_data+0x108>
c0101b18:	e9 00 00 00 00       	jmp    c0101b1d <kbd_proc_data+0x10d>
    shift |= shiftcode[data];
c0101b1d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101b21:	0f b6 04 05 44 30 11 	movzbl -0x3feecfbc(,%eax,1),%eax
c0101b28:	c0 
c0101b29:	0b 05 20 40 11 c0    	or     0xc0114020,%eax
c0101b2f:	a3 20 40 11 c0       	mov    %eax,0xc0114020
    shift ^= togglecode[data];
c0101b34:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101b38:	0f b6 04 05 44 31 11 	movzbl -0x3feecebc(,%eax,1),%eax
c0101b3f:	c0 
c0101b40:	33 05 20 40 11 c0    	xor    0xc0114020,%eax
c0101b46:	a3 20 40 11 c0       	mov    %eax,0xc0114020
    c = charcode[shift & (CTL | SHIFT)][data];
c0101b4b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101b4f:	8b 0d 20 40 11 c0    	mov    0xc0114020,%ecx
c0101b55:	83 e1 03             	and    $0x3,%ecx
c0101b58:	8b 0c 8d 44 32 11 c0 	mov    -0x3feecdbc(,%ecx,4),%ecx
c0101b5f:	0f b6 04 01          	movzbl (%ecx,%eax,1),%eax
c0101b63:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (shift & CAPSLOCK) {
c0101b66:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101b6b:	83 e0 08             	and    $0x8,%eax
c0101b6e:	83 f8 00             	cmp    $0x0,%eax
c0101b71:	0f 84 51 00 00 00    	je     c0101bc8 <kbd_proc_data+0x1b8>
c0101b77:	b8 61 00 00 00       	mov    $0x61,%eax
        if ('a' <= c && c <= 'z')
c0101b7c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101b7f:	0f 8f 18 00 00 00    	jg     c0101b9d <kbd_proc_data+0x18d>
c0101b85:	83 7d ec 7a          	cmpl   $0x7a,-0x14(%ebp)
c0101b89:	0f 8f 0e 00 00 00    	jg     c0101b9d <kbd_proc_data+0x18d>
            c += 'A' - 'a';
c0101b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b92:	83 c0 e0             	add    $0xffffffe0,%eax
c0101b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101b98:	e9 26 00 00 00       	jmp    c0101bc3 <kbd_proc_data+0x1b3>
c0101b9d:	b8 41 00 00 00       	mov    $0x41,%eax
        else if ('A' <= c && c <= 'Z')
c0101ba2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101ba5:	0f 8f 13 00 00 00    	jg     c0101bbe <kbd_proc_data+0x1ae>
c0101bab:	83 7d ec 5a          	cmpl   $0x5a,-0x14(%ebp)
c0101baf:	0f 8f 09 00 00 00    	jg     c0101bbe <kbd_proc_data+0x1ae>
            c += 'a' - 'A';
c0101bb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101bb8:	83 c0 20             	add    $0x20,%eax
c0101bbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101bbe:	e9 00 00 00 00       	jmp    c0101bc3 <kbd_proc_data+0x1b3>
    }
c0101bc3:	e9 00 00 00 00       	jmp    c0101bc8 <kbd_proc_data+0x1b8>
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101bc8:	a1 20 40 11 c0       	mov    0xc0114020,%eax
c0101bcd:	83 f0 ff             	xor    $0xffffffff,%eax
c0101bd0:	83 e0 06             	and    $0x6,%eax
c0101bd3:	83 f8 00             	cmp    $0x0,%eax
c0101bd6:	0f 85 32 00 00 00    	jne    c0101c0e <kbd_proc_data+0x1fe>
c0101bdc:	81 7d ec e9 00 00 00 	cmpl   $0xe9,-0x14(%ebp)
c0101be3:	0f 85 25 00 00 00    	jne    c0101c0e <kbd_proc_data+0x1fe>
c0101be9:	8d 05 5a f3 10 c0    	lea    0xc010f35a,%eax
        cprintf("Rebooting!\n");
c0101bef:	89 04 24             	mov    %eax,(%esp)
c0101bf2:	e8 49 e6 ff ff       	call   c0100240 <cprintf>
        outb(0x92, 0x3); // courtesy of Chris Frost
c0101bf7:	66 c7 45 fe 92 00    	movw   $0x92,-0x2(%ebp)
c0101bfd:	c6 45 fd 03          	movb   $0x3,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c01:	8a 4d fd             	mov    -0x3(%ebp),%cl
c0101c04:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c0101c08:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101c0b:	88 c8                	mov    %cl,%al
c0101c0d:	ee                   	out    %al,(%dx)
    return c;
c0101c0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101c11:	89 45 f0             	mov    %eax,-0x10(%ebp)
}
c0101c14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101c17:	83 c4 28             	add    $0x28,%esp
c0101c1a:	5d                   	pop    %ebp
c0101c1b:	c3                   	ret    
c0101c1c:	66 90                	xchg   %ax,%ax
c0101c1e:	66 90                	xchg   %ax,%ax

c0101c20 <pic_enable>:
        outb(IO_PIC2 + 1, mask >> 8);
    }
}

void
pic_enable(unsigned int irq) {
c0101c20:	55                   	push   %ebp
c0101c21:	89 e5                	mov    %esp,%ebp
c0101c23:	56                   	push   %esi
c0101c24:	83 ec 14             	sub    $0x14,%esp
c0101c27:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2a:	b9 01 00 00 00       	mov    $0x1,%ecx
c0101c2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pic_setmask(irq_mask & ~(1 << irq));
c0101c32:	0f b7 05 54 35 11 c0 	movzwl 0xc0113554,%eax
c0101c39:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0101c3c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0101c3f:	89 d1                	mov    %edx,%ecx
c0101c41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c44:	d3 e2                	shl    %cl,%edx
c0101c46:	83 f2 ff             	xor    $0xffffffff,%edx
c0101c49:	21 d0                	and    %edx,%eax
c0101c4b:	66 89 c6             	mov    %ax,%si
c0101c4e:	0f b7 c6             	movzwl %si,%eax
c0101c51:	89 04 24             	mov    %eax,(%esp)
c0101c54:	e8 07 00 00 00       	call   c0101c60 <pic_setmask>
}
c0101c59:	83 c4 14             	add    $0x14,%esp
c0101c5c:	5e                   	pop    %esi
c0101c5d:	5d                   	pop    %ebp
c0101c5e:	c3                   	ret    
c0101c5f:	90                   	nop

c0101c60 <pic_setmask>:
pic_setmask(uint16_t mask) {
c0101c60:	55                   	push   %ebp
c0101c61:	89 e5                	mov    %esp,%ebp
c0101c63:	53                   	push   %ebx
c0101c64:	56                   	push   %esi
c0101c65:	83 ec 0c             	sub    $0xc,%esp
c0101c68:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
c0101c6c:	66 89 c1             	mov    %ax,%cx
c0101c6f:	66 89 4d ee          	mov    %cx,-0x12(%ebp)
    irq_mask = mask;
c0101c73:	66 8b 4d ee          	mov    -0x12(%ebp),%cx
c0101c77:	66 89 0d 54 35 11 c0 	mov    %cx,0xc0113554
    if (did_init) {
c0101c7e:	83 3d 24 40 11 c0 00 	cmpl   $0x0,0xc0114024
c0101c85:	0f 84 33 00 00 00    	je     c0101cbe <pic_setmask+0x5e>
        outb(IO_PIC1 + 1, mask);
c0101c8b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
c0101c8f:	88 c1                	mov    %al,%cl
c0101c91:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0101c97:	88 4d f1             	mov    %cl,-0xf(%ebp)
c0101c9a:	8a 45 f1             	mov    -0xf(%ebp),%al
c0101c9d:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101ca1:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0101ca2:	0f b7 75 ee          	movzwl -0x12(%ebp),%esi
c0101ca6:	c1 fe 08             	sar    $0x8,%esi
c0101ca9:	89 f3                	mov    %esi,%ebx
c0101cab:	88 d8                	mov    %bl,%al
c0101cad:	66 c7 45 f6 a1 00    	movw   $0xa1,-0xa(%ebp)
c0101cb3:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101cb6:	8a 45 f5             	mov    -0xb(%ebp),%al
c0101cb9:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101cbd:	ee                   	out    %al,(%dx)
}
c0101cbe:	83 c4 0c             	add    $0xc,%esp
c0101cc1:	5e                   	pop    %esi
c0101cc2:	5b                   	pop    %ebx
c0101cc3:	5d                   	pop    %ebp
c0101cc4:	c3                   	ret    
c0101cc5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c0101ccc:	00 00 00 00 

c0101cd0 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0101cd0:	55                   	push   %ebp
c0101cd1:	89 e5                	mov    %esp,%ebp
    did_init = 1;
c0101cd3:	83 ec 48             	sub    $0x48,%esp
c0101cd6:	c7 05 24 40 11 c0 01 	movl   $0x1,0xc0114024
c0101cdd:	00 00 00 

    // mask all interrupts
    outb(IO_PIC1 + 1, 0xFF);
c0101ce0:	66 c7 45 ca 21 00    	movw   $0x21,-0x36(%ebp)
c0101ce6:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
c0101cea:	8a 45 c9             	mov    -0x37(%ebp),%al
c0101ced:	66 8b 55 ca          	mov    -0x36(%ebp),%dx
c0101cf1:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, 0xFF);
c0101cf2:	66 c7 45 ce a1 00    	movw   $0xa1,-0x32(%ebp)
c0101cf8:	c6 45 cd ff          	movb   $0xff,-0x33(%ebp)
c0101cfc:	8a 45 cd             	mov    -0x33(%ebp),%al
c0101cff:	66 8b 55 ce          	mov    -0x32(%ebp),%dx
c0101d03:	ee                   	out    %al,(%dx)

    // ICW1:  0001g0hi
    //    g:  0 = edge triggering, 1 = level triggering
    //    h:  0 = cascaded PICs, 1 = master only
    //    i:  0 = no ICW4, 1 = ICW4 required
    outb(IO_PIC1, 0x11);
c0101d04:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0101d0a:	c6 45 d1 11          	movb   $0x11,-0x2f(%ebp)
c0101d0e:	8a 45 d1             	mov    -0x2f(%ebp),%al
c0101d11:	66 8b 55 d2          	mov    -0x2e(%ebp),%dx
c0101d15:	ee                   	out    %al,(%dx)

    // ICW2:  Vector offset
    outb(IO_PIC1 + 1, IRQ_OFFSET);
c0101d16:	66 c7 45 d6 21 00    	movw   $0x21,-0x2a(%ebp)
c0101d1c:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d20:	8a 45 d5             	mov    -0x2b(%ebp),%al
c0101d23:	66 8b 55 d6          	mov    -0x2a(%ebp),%dx
c0101d27:	ee                   	out    %al,(%dx)

    // ICW3:  (master PIC) bit mask of IR lines connected to slaves
    //        (slave PIC) 3-bit # of slave's connection to master
    outb(IO_PIC1 + 1, 1 << IRQ_SLAVE);
c0101d28:	66 c7 45 da 21 00    	movw   $0x21,-0x26(%ebp)
c0101d2e:	c6 45 d9 04          	movb   $0x4,-0x27(%ebp)
c0101d32:	8a 45 d9             	mov    -0x27(%ebp),%al
c0101d35:	66 8b 55 da          	mov    -0x26(%ebp),%dx
c0101d39:	ee                   	out    %al,(%dx)
    //    m:  0 = slave PIC, 1 = master PIC
    //        (ignored when b is 0, as the master/slave role
    //         can be hardwired).
    //    a:  1 = Automatic EOI mode
    //    p:  0 = MCS-80/85 mode, 1 = intel x86 mode
    outb(IO_PIC1 + 1, 0x3);
c0101d3a:	66 c7 45 de 21 00    	movw   $0x21,-0x22(%ebp)
c0101d40:	c6 45 dd 03          	movb   $0x3,-0x23(%ebp)
c0101d44:	8a 45 dd             	mov    -0x23(%ebp),%al
c0101d47:	66 8b 55 de          	mov    -0x22(%ebp),%dx
c0101d4b:	ee                   	out    %al,(%dx)

    // Set up slave (8259A-2)
    outb(IO_PIC2, 0x11);    // ICW1
c0101d4c:	66 c7 45 e2 a0 00    	movw   $0xa0,-0x1e(%ebp)
c0101d52:	c6 45 e1 11          	movb   $0x11,-0x1f(%ebp)
c0101d56:	8a 45 e1             	mov    -0x1f(%ebp),%al
c0101d59:	66 8b 55 e2          	mov    -0x1e(%ebp),%dx
c0101d5d:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, IRQ_OFFSET + 8);  // ICW2
c0101d5e:	66 c7 45 e6 a1 00    	movw   $0xa1,-0x1a(%ebp)
c0101d64:	c6 45 e5 28          	movb   $0x28,-0x1b(%ebp)
c0101d68:	8a 45 e5             	mov    -0x1b(%ebp),%al
c0101d6b:	66 8b 55 e6          	mov    -0x1a(%ebp),%dx
c0101d6f:	ee                   	out    %al,(%dx)
    outb(IO_PIC2 + 1, IRQ_SLAVE);       // ICW3
c0101d70:	66 c7 45 ea a1 00    	movw   $0xa1,-0x16(%ebp)
c0101d76:	c6 45 e9 02          	movb   $0x2,-0x17(%ebp)
c0101d7a:	8a 45 e9             	mov    -0x17(%ebp),%al
c0101d7d:	66 8b 55 ea          	mov    -0x16(%ebp),%dx
c0101d81:	ee                   	out    %al,(%dx)
    // NB Automatic EOI mode doesn't tend to work on the slave.
    // Linux source code says it's "to be investigated".
    outb(IO_PIC2 + 1, 0x3);             // ICW4
c0101d82:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0101d88:	c6 45 ed 03          	movb   $0x3,-0x13(%ebp)
c0101d8c:	8a 45 ed             	mov    -0x13(%ebp),%al
c0101d8f:	66 8b 55 ee          	mov    -0x12(%ebp),%dx
c0101d93:	ee                   	out    %al,(%dx)

    // OCW3:  0ef01prs
    //   ef:  0x = NOP, 10 = clear specific mask, 11 = set specific mask
    //    p:  0 = no polling, 1 = polling mode
    //   rs:  0x = NOP, 10 = read IRR, 11 = read ISR
    outb(IO_PIC1, 0x68);    // clear specific mask
c0101d94:	66 c7 45 f2 20 00    	movw   $0x20,-0xe(%ebp)
c0101d9a:	c6 45 f1 68          	movb   $0x68,-0xf(%ebp)
c0101d9e:	8a 45 f1             	mov    -0xf(%ebp),%al
c0101da1:	66 8b 55 f2          	mov    -0xe(%ebp),%dx
c0101da5:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default
c0101da6:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0101dac:	c6 45 f5 0a          	movb   $0xa,-0xb(%ebp)
c0101db0:	8a 45 f5             	mov    -0xb(%ebp),%al
c0101db3:	66 8b 55 f6          	mov    -0xa(%ebp),%dx
c0101db7:	ee                   	out    %al,(%dx)

    outb(IO_PIC2, 0x68);    // OCW3
c0101db8:	66 c7 45 fa a0 00    	movw   $0xa0,-0x6(%ebp)
c0101dbe:	c6 45 f9 68          	movb   $0x68,-0x7(%ebp)
c0101dc2:	8a 45 f9             	mov    -0x7(%ebp),%al
c0101dc5:	66 8b 55 fa          	mov    -0x6(%ebp),%dx
c0101dc9:	ee                   	out    %al,(%dx)
    outb(IO_PIC2, 0x0a);    // OCW3
c0101dca:	66 c7 45 fe a0 00    	movw   $0xa0,-0x2(%ebp)
c0101dd0:	c6 45 fd 0a          	movb   $0xa,-0x3(%ebp)
c0101dd4:	8a 45 fd             	mov    -0x3(%ebp),%al
c0101dd7:	66 8b 55 fe          	mov    -0x2(%ebp),%dx
c0101ddb:	ee                   	out    %al,(%dx)

    if (irq_mask != 0xFFFF) {
c0101ddc:	0f b7 0d 54 35 11 c0 	movzwl 0xc0113554,%ecx
c0101de3:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
c0101de9:	0f 84 0f 00 00 00    	je     c0101dfe <pic_init+0x12e>
        pic_setmask(irq_mask);
c0101def:	0f b7 05 54 35 11 c0 	movzwl 0xc0113554,%eax
c0101df6:	89 04 24             	mov    %eax,(%esp)
c0101df9:	e8 62 fe ff ff       	call   c0101c60 <pic_setmask>
    }
}
c0101dfe:	83 c4 48             	add    $0x48,%esp
c0101e01:	5d                   	pop    %ebp
c0101e02:	c3                   	ret    
c0101e03:	66 90                	xchg   %ax,%ax
c0101e05:	66 90                	xchg   %ax,%ax
c0101e07:	66 90                	xchg   %ax,%ax
c0101e09:	66 90                	xchg   %ax,%ax
c0101e0b:	66 90                	xchg   %ax,%ax
c0101e0d:	66 90                	xchg   %ax,%ax
c0101e0f:	90                   	nop

c0101e10 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0101e10:	55                   	push   %ebp
c0101e11:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
c0101e13:	fb                   	sti    
    sti();
}
c0101e14:	5d                   	pop    %ebp
c0101e15:	c3                   	ret    
c0101e16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c0101e1d:	00 00 00 

c0101e20 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0101e20:	55                   	push   %ebp
c0101e21:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
c0101e23:	fa                   	cli    
    cli();
}
c0101e24:	5d                   	pop    %ebp
c0101e25:	c3                   	ret    
c0101e26:	66 90                	xchg   %ax,%ax
c0101e28:	66 90                	xchg   %ax,%ax
c0101e2a:	66 90                	xchg   %ax,%ax
c0101e2c:	66 90                	xchg   %ax,%ax
c0101e2e:	66 90                	xchg   %ax,%ax

c0101e30 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0101e30:	55                   	push   %ebp
c0101e31:	89 e5                	mov    %esp,%ebp
      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using 'lidt' instruction.
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    extern uintptr_t __vectors[];
    for (int i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
c0101e33:	56                   	push   %esi
c0101e34:	83 ec 08             	sub    $0x8,%esp
c0101e37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101e3e:	81 7d f4 00 01 00 00 	cmpl   $0x100,-0xc(%ebp)
c0101e45:	0f 83 22 01 00 00    	jae    c0101f6d <idt_init+0x13d>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0101e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e4e:	66 8b 0c 85 c0 35 11 	mov    -0x3feeca40(,%eax,4),%cx
c0101e55:	c0 
c0101e56:	66 89 0c c5 28 40 11 	mov    %cx,-0x3feebfd8(,%eax,8)
c0101e5d:	c0 
c0101e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e61:	66 c7 04 c5 2a 40 11 	movw   $0x8,-0x3feebfd6(,%eax,8)
c0101e68:	c0 08 00 
c0101e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e6e:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101e75:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101e7c:	83 e6 e0             	and    $0xffffffe0,%esi
c0101e7f:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101e86:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e90:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101e97:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101e9e:	81 e6 1f ff ff ff    	and    $0xffffff1f,%esi
c0101ea4:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101eab:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101eb5:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101ebc:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101ec3:	81 e6 ff f0 ff ff    	and    $0xfffff0ff,%esi
c0101ec9:	81 ce 00 0e 00 00    	or     $0xe00,%esi
c0101ecf:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101ed6:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101edd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ee0:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101ee7:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101eee:	81 e6 ff ef ff ff    	and    $0xffffefff,%esi
c0101ef4:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101efb:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101f02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f05:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101f0c:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101f13:	81 e6 ff 9f ff ff    	and    $0xffff9fff,%esi
c0101f19:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101f20:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f2a:	8b 14 c5 28 40 11 c0 	mov    -0x3feebfd8(,%eax,8),%edx
c0101f31:	8b 34 c5 2c 40 11 c0 	mov    -0x3feebfd4(,%eax,8),%esi
c0101f38:	81 ce 00 80 00 00    	or     $0x8000,%esi
c0101f3e:	89 14 c5 28 40 11 c0 	mov    %edx,-0x3feebfd8(,%eax,8)
c0101f45:	89 34 c5 2c 40 11 c0 	mov    %esi,-0x3feebfd4(,%eax,8)
c0101f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f4f:	66 8b 0c 85 c2 35 11 	mov    -0x3feeca3e(,%eax,4),%cx
c0101f56:	c0 
c0101f57:	66 89 0c c5 2e 40 11 	mov    %cx,-0x3feebfd2(,%eax,8)
c0101f5e:	c0 
    for (int i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i++)
c0101f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f62:	83 c0 01             	add    $0x1,%eax
c0101f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101f68:	e9 d1 fe ff ff       	jmp    c0101e3e <idt_init+0xe>
c0101f6d:	8d 05 58 35 11 c0    	lea    0xc0113558,%eax
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0101f73:	66 8b 0d c0 37 11 c0 	mov    0xc01137c0,%cx
c0101f7a:	66 89 0d 28 44 11 c0 	mov    %cx,0xc0114428
c0101f81:	66 c7 05 2a 44 11 c0 	movw   $0x8,0xc011442a
c0101f88:	08 00 
c0101f8a:	8a 15 2c 44 11 c0    	mov    0xc011442c,%dl
c0101f90:	80 e2 e0             	and    $0xe0,%dl
c0101f93:	88 15 2c 44 11 c0    	mov    %dl,0xc011442c
c0101f99:	c6 05 2c 44 11 c0 00 	movb   $0x0,0xc011442c
c0101fa0:	8a 15 2d 44 11 c0    	mov    0xc011442d,%dl
c0101fa6:	80 ca 0f             	or     $0xf,%dl
c0101fa9:	88 15 2d 44 11 c0    	mov    %dl,0xc011442d
c0101faf:	80 e2 ef             	and    $0xef,%dl
c0101fb2:	88 15 2d 44 11 c0    	mov    %dl,0xc011442d
c0101fb8:	80 ca 60             	or     $0x60,%dl
c0101fbb:	88 15 2d 44 11 c0    	mov    %dl,0xc011442d
c0101fc1:	c6 05 2d 44 11 c0 ef 	movb   $0xef,0xc011442d
c0101fc8:	66 8b 0d c2 37 11 c0 	mov    0xc01137c2,%cx
c0101fcf:	66 89 0d 2e 44 11 c0 	mov    %cx,0xc011442e
    lidt(&idt_pd);
c0101fd6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0101fd9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101fdc:	0f 01 18             	lidtl  (%eax)
}
c0101fdf:	83 c4 08             	add    $0x8,%esp
c0101fe2:	5e                   	pop    %esi
c0101fe3:	5d                   	pop    %ebp
c0101fe4:	c3                   	ret    
c0101fe5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c0101fec:	00 00 00 00 

c0101ff0 <trap_in_kernel>:
    return "(unknown trap)";
}

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0101ff0:	55                   	push   %ebp
c0101ff1:	89 e5                	mov    %esp,%ebp
c0101ff3:	50                   	push   %eax
c0101ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0101ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101ffd:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102001:	83 f8 08             	cmp    $0x8,%eax
c0102004:	0f 94 c1             	sete   %cl
c0102007:	80 e1 01             	and    $0x1,%cl
c010200a:	0f b6 c1             	movzbl %cl,%eax
c010200d:	83 c4 04             	add    $0x4,%esp
c0102010:	5d                   	pop    %ebp
c0102011:	c3                   	ret    
c0102012:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0102019:	1f 84 00 00 00 00 00 

c0102020 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102020:	55                   	push   %ebp
c0102021:	89 e5                	mov    %esp,%ebp
c0102023:	83 ec 58             	sub    $0x58,%esp
c0102026:	8b 45 08             	mov    0x8(%ebp),%eax
c0102029:	8d 0d 66 f3 10 c0    	lea    0xc010f366,%ecx
c010202f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("trapframe at %p\n", tf);
c0102032:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102035:	89 0c 24             	mov    %ecx,(%esp)
c0102038:	89 44 24 04          	mov    %eax,0x4(%esp)
c010203c:	e8 ff e1 ff ff       	call   c0100240 <cprintf>
    print_regs(&tf->tf_regs);
c0102041:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0102044:	89 0c 24             	mov    %ecx,(%esp)
c0102047:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010204a:	e8 01 02 00 00       	call   c0102250 <print_regs>
c010204f:	8d 05 77 f3 10 c0    	lea    0xc010f377,%eax
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102055:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0102058:	0f b7 49 2c          	movzwl 0x2c(%ecx),%ecx
c010205c:	89 04 24             	mov    %eax,(%esp)
c010205f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0102063:	e8 d8 e1 ff ff       	call   c0100240 <cprintf>
c0102068:	8d 0d 8a f3 10 c0    	lea    0xc010f38a,%ecx
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010206e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102071:	0f b7 52 28          	movzwl 0x28(%edx),%edx
c0102075:	89 0c 24             	mov    %ecx,(%esp)
c0102078:	89 54 24 04          	mov    %edx,0x4(%esp)
c010207c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010207f:	e8 bc e1 ff ff       	call   c0100240 <cprintf>
c0102084:	8d 0d 9d f3 10 c0    	lea    0xc010f39d,%ecx
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010208a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010208d:	0f b7 52 24          	movzwl 0x24(%edx),%edx
c0102091:	89 0c 24             	mov    %ecx,(%esp)
c0102094:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102098:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010209b:	e8 a0 e1 ff ff       	call   c0100240 <cprintf>
c01020a0:	8d 0d b0 f3 10 c0    	lea    0xc010f3b0,%ecx
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01020a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01020a9:	0f b7 52 20          	movzwl 0x20(%edx),%edx
c01020ad:	89 0c 24             	mov    %ecx,(%esp)
c01020b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01020b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01020b7:	e8 84 e1 ff ff       	call   c0100240 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01020bc:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01020bf:	8b 49 30             	mov    0x30(%ecx),%ecx
c01020c2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01020c5:	8b 52 30             	mov    0x30(%edx),%edx
c01020c8:	89 14 24             	mov    %edx,(%esp)
c01020cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01020ce:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c01020d1:	e8 6a 02 00 00       	call   c0102340 <trapname>
c01020d6:	8d 0d c3 f3 10 c0    	lea    0xc010f3c3,%ecx
c01020dc:	89 0c 24             	mov    %ecx,(%esp)
c01020df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01020e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01020e6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01020ea:	e8 51 e1 ff ff       	call   c0100240 <cprintf>
c01020ef:	8d 0d d5 f3 10 c0    	lea    0xc010f3d5,%ecx
    cprintf("  err  0x%08x\n", tf->tf_err);
c01020f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01020f8:	8b 52 34             	mov    0x34(%edx),%edx
c01020fb:	89 0c 24             	mov    %ecx,(%esp)
c01020fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102102:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0102105:	e8 36 e1 ff ff       	call   c0100240 <cprintf>
c010210a:	8d 0d e4 f3 10 c0    	lea    0xc010f3e4,%ecx
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102110:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102113:	8b 52 38             	mov    0x38(%edx),%edx
c0102116:	89 0c 24             	mov    %ecx,(%esp)
c0102119:	89 54 24 04          	mov    %edx,0x4(%esp)
c010211d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0102120:	e8 1b e1 ff ff       	call   c0100240 <cprintf>
c0102125:	8d 0d f3 f3 10 c0    	lea    0xc010f3f3,%ecx
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010212b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010212e:	0f b7 52 3c          	movzwl 0x3c(%edx),%edx
c0102132:	89 0c 24             	mov    %ecx,(%esp)
c0102135:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102139:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010213c:	e8 ff e0 ff ff       	call   c0100240 <cprintf>
c0102141:	8d 0d 06 f4 10 c0    	lea    0xc010f406,%ecx
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102147:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010214a:	8b 52 40             	mov    0x40(%edx),%edx
c010214d:	89 0c 24             	mov    %ecx,(%esp)
c0102150:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102154:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0102157:	e8 e4 e0 ff ff       	call   c0100240 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010215c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0102163:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010216a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010216d:	83 7d f8 18          	cmpl   $0x18,-0x8(%ebp)
c0102171:	0f 83 5e 00 00 00    	jae    c01021d5 <print_trapframe+0x1b5>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102177:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010217a:	8b 40 40             	mov    0x40(%eax),%eax
c010217d:	23 45 f4             	and    -0xc(%ebp),%eax
c0102180:	83 f8 00             	cmp    $0x0,%eax
c0102183:	0f 84 30 00 00 00    	je     c01021b9 <print_trapframe+0x199>
c0102189:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010218c:	83 3c 85 60 35 11 c0 	cmpl   $0x0,-0x3feecaa0(,%eax,4)
c0102193:	00 
c0102194:	0f 84 1f 00 00 00    	je     c01021b9 <print_trapframe+0x199>
c010219a:	8d 05 15 f4 10 c0    	lea    0xc010f415,%eax
            cprintf("%s,", IA32flags[i]);
c01021a0:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c01021a3:	8b 0c 8d 60 35 11 c0 	mov    -0x3feecaa0(,%ecx,4),%ecx
c01021aa:	89 04 24             	mov    %eax,(%esp)
c01021ad:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01021b1:	e8 8a e0 ff ff       	call   c0100240 <cprintf>
c01021b6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        }
    }
c01021b9:	e9 00 00 00 00       	jmp    c01021be <print_trapframe+0x19e>
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01021be:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01021c1:	83 c0 01             	add    $0x1,%eax
c01021c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01021c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01021ca:	c1 e0 01             	shl    $0x1,%eax
c01021cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01021d0:	e9 98 ff ff ff       	jmp    c010216d <print_trapframe+0x14d>
c01021d5:	8d 05 19 f4 10 c0    	lea    0xc010f419,%eax
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01021db:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01021de:	8b 49 40             	mov    0x40(%ecx),%ecx
c01021e1:	81 e1 00 30 00 00    	and    $0x3000,%ecx
c01021e7:	c1 e9 0c             	shr    $0xc,%ecx
c01021ea:	89 04 24             	mov    %eax,(%esp)
c01021ed:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01021f1:	e8 4a e0 ff ff       	call   c0100240 <cprintf>

    if (!trap_in_kernel(tf)) {
c01021f6:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01021f9:	89 0c 24             	mov    %ecx,(%esp)
c01021fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01021ff:	e8 ec fd ff ff       	call   c0101ff0 <trap_in_kernel>
c0102204:	83 f8 00             	cmp    $0x0,%eax
c0102207:	0f 85 37 00 00 00    	jne    c0102244 <print_trapframe+0x224>
c010220d:	8d 05 22 f4 10 c0    	lea    0xc010f422,%eax
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102213:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0102216:	8b 49 44             	mov    0x44(%ecx),%ecx
c0102219:	89 04 24             	mov    %eax,(%esp)
c010221c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0102220:	e8 1b e0 ff ff       	call   c0100240 <cprintf>
c0102225:	8d 0d 31 f4 10 c0    	lea    0xc010f431,%ecx
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010222b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010222e:	0f b7 52 48          	movzwl 0x48(%edx),%edx
c0102232:	89 0c 24             	mov    %ecx,(%esp)
c0102235:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102239:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010223c:	e8 ff df ff ff       	call   c0100240 <cprintf>
c0102241:	89 45 b8             	mov    %eax,-0x48(%ebp)
    }
}
c0102244:	83 c4 58             	add    $0x58,%esp
c0102247:	5d                   	pop    %ebp
c0102248:	c3                   	ret    
c0102249:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c0102250 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102250:	55                   	push   %ebp
c0102251:	89 e5                	mov    %esp,%ebp
c0102253:	83 ec 38             	sub    $0x38,%esp
c0102256:	8b 45 08             	mov    0x8(%ebp),%eax
c0102259:	8d 0d 44 f4 10 c0    	lea    0xc010f444,%ecx
c010225f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102262:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102265:	8b 00                	mov    (%eax),%eax
c0102267:	89 0c 24             	mov    %ecx,(%esp)
c010226a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010226e:	e8 cd df ff ff       	call   c0100240 <cprintf>
c0102273:	8d 0d 53 f4 10 c0    	lea    0xc010f453,%ecx
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102279:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010227c:	8b 52 04             	mov    0x4(%edx),%edx
c010227f:	89 0c 24             	mov    %ecx,(%esp)
c0102282:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102286:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0102289:	e8 b2 df ff ff       	call   c0100240 <cprintf>
c010228e:	8d 0d 62 f4 10 c0    	lea    0xc010f462,%ecx
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102294:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102297:	8b 52 08             	mov    0x8(%edx),%edx
c010229a:	89 0c 24             	mov    %ecx,(%esp)
c010229d:	89 54 24 04          	mov    %edx,0x4(%esp)
c01022a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01022a4:	e8 97 df ff ff       	call   c0100240 <cprintf>
c01022a9:	8d 0d 71 f4 10 c0    	lea    0xc010f471,%ecx
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01022af:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01022b2:	8b 52 0c             	mov    0xc(%edx),%edx
c01022b5:	89 0c 24             	mov    %ecx,(%esp)
c01022b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01022bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01022bf:	e8 7c df ff ff       	call   c0100240 <cprintf>
c01022c4:	8d 0d 80 f4 10 c0    	lea    0xc010f480,%ecx
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01022ca:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01022cd:	8b 52 10             	mov    0x10(%edx),%edx
c01022d0:	89 0c 24             	mov    %ecx,(%esp)
c01022d3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01022d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01022da:	e8 61 df ff ff       	call   c0100240 <cprintf>
c01022df:	8d 0d 8f f4 10 c0    	lea    0xc010f48f,%ecx
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01022e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01022e8:	8b 52 14             	mov    0x14(%edx),%edx
c01022eb:	89 0c 24             	mov    %ecx,(%esp)
c01022ee:	89 54 24 04          	mov    %edx,0x4(%esp)
c01022f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01022f5:	e8 46 df ff ff       	call   c0100240 <cprintf>
c01022fa:	8d 0d 9e f4 10 c0    	lea    0xc010f49e,%ecx
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102300:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0102303:	8b 52 18             	mov    0x18(%edx),%edx
c0102306:	89 0c 24             	mov    %ecx,(%esp)
c0102309:	89 54 24 04          	mov    %edx,0x4(%esp)
c010230d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102310:	e8 2b df ff ff       	call   c0100240 <cprintf>
c0102315:	8d 0d ad f4 10 c0    	lea    0xc010f4ad,%ecx
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010231b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010231e:	8b 52 1c             	mov    0x1c(%edx),%edx
c0102321:	89 0c 24             	mov    %ecx,(%esp)
c0102324:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102328:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010232b:	e8 10 df ff ff       	call   c0100240 <cprintf>
}
c0102330:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0102333:	83 c4 38             	add    $0x38,%esp
c0102336:	5d                   	pop    %ebp
c0102337:	c3                   	ret    
c0102338:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010233f:	00 

c0102340 <trapname>:
trapname(int trapno) {
c0102340:	55                   	push   %ebp
c0102341:	89 e5                	mov    %esp,%ebp
c0102343:	83 ec 08             	sub    $0x8,%esp
c0102346:	8b 45 08             	mov    0x8(%ebp),%eax
c0102349:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010234c:	83 7d f8 14          	cmpl   $0x14,-0x8(%ebp)
c0102350:	0f 83 12 00 00 00    	jae    c0102368 <trapname+0x28>
        return excnames[trapno];
c0102356:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102359:	8b 04 85 a8 f6 10 c0 	mov    -0x3fef0958(,%eax,4),%eax
c0102360:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0102363:	e9 2b 00 00 00       	jmp    c0102393 <trapname+0x53>
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102368:	83 7d f8 20          	cmpl   $0x20,-0x8(%ebp)
c010236c:	0f 8c 18 00 00 00    	jl     c010238a <trapname+0x4a>
c0102372:	83 7d f8 30          	cmpl   $0x30,-0x8(%ebp)
c0102376:	0f 8d 0e 00 00 00    	jge    c010238a <trapname+0x4a>
c010237c:	8d 05 0e f6 10 c0    	lea    0xc010f60e,%eax
        return "Hardware Interrupt";
c0102382:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0102385:	e9 09 00 00 00       	jmp    c0102393 <trapname+0x53>
c010238a:	8d 05 a6 f5 10 c0    	lea    0xc010f5a6,%eax
    return "(unknown trap)";
c0102390:	89 45 fc             	mov    %eax,-0x4(%ebp)
}
c0102393:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102396:	83 c4 08             	add    $0x8,%esp
c0102399:	5d                   	pop    %ebp
c010239a:	c3                   	ret    
c010239b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

c01023a0 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01023a0:	55                   	push   %ebp
c01023a1:	89 e5                	mov    %esp,%ebp
c01023a3:	83 ec 08             	sub    $0x8,%esp
c01023a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01023a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // dispatch based on what type of trap occurred
    trap_dispatch(tf);
c01023ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023af:	89 04 24             	mov    %eax,(%esp)
c01023b2:	e8 09 00 00 00       	call   c01023c0 <trap_dispatch>
}
c01023b7:	83 c4 08             	add    $0x8,%esp
c01023ba:	5d                   	pop    %ebp
c01023bb:	c3                   	ret    
c01023bc:	0f 1f 40 00          	nopl   0x0(%eax)

c01023c0 <trap_dispatch>:
trap_dispatch(struct trapframe *tf) {
c01023c0:	55                   	push   %ebp
c01023c1:	89 e5                	mov    %esp,%ebp
c01023c3:	56                   	push   %esi
c01023c4:	83 ec 44             	sub    $0x44,%esp
c01023c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
    switch (tf->tf_trapno) {
c01023cd:	8b 40 30             	mov    0x30(%eax),%eax
c01023d0:	89 c1                	mov    %eax,%ecx
c01023d2:	83 e9 20             	sub    $0x20,%ecx
c01023d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01023d8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01023db:	0f 84 5b 00 00 00    	je     c010243c <trap_dispatch+0x7c>
c01023e1:	e9 00 00 00 00       	jmp    c01023e6 <trap_dispatch+0x26>
c01023e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01023e9:	83 e8 21             	sub    $0x21,%eax
c01023ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01023ef:	0f 84 a8 00 00 00    	je     c010249d <trap_dispatch+0xdd>
c01023f5:	e9 00 00 00 00       	jmp    c01023fa <trap_dispatch+0x3a>
c01023fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01023fd:	83 e8 24             	sub    $0x24,%eax
c0102400:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102403:	0f 84 64 00 00 00    	je     c010246d <trap_dispatch+0xad>
c0102409:	e9 00 00 00 00       	jmp    c010240e <trap_dispatch+0x4e>
c010240e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102411:	83 c0 d2             	add    $0xffffffd2,%eax
c0102414:	83 e8 02             	sub    $0x2,%eax
c0102417:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010241a:	0f 82 b2 00 00 00    	jb     c01024d2 <trap_dispatch+0x112>
c0102420:	e9 00 00 00 00       	jmp    c0102425 <trap_dispatch+0x65>
c0102425:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102428:	83 c0 88             	add    $0xffffff88,%eax
c010242b:	83 e8 02             	sub    $0x2,%eax
c010242e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0102431:	0f 82 96 00 00 00    	jb     c01024cd <trap_dispatch+0x10d>
c0102437:	e9 9b 00 00 00       	jmp    c01024d7 <trap_dispatch+0x117>
        tick_count++;
c010243c:	a1 28 48 11 c0       	mov    0xc0114828,%eax
c0102441:	83 c0 01             	add    $0x1,%eax
c0102444:	a3 28 48 11 c0       	mov    %eax,0xc0114828
        if (tick_count == TICK_NUM) {
c0102449:	83 3d 28 48 11 c0 64 	cmpl   $0x64,0xc0114828
c0102450:	0f 85 12 00 00 00    	jne    c0102468 <trap_dispatch+0xa8>
            tick_count -= TICK_NUM;
c0102456:	a1 28 48 11 c0       	mov    0xc0114828,%eax
c010245b:	83 e8 64             	sub    $0x64,%eax
c010245e:	a3 28 48 11 c0       	mov    %eax,0xc0114828
            print_ticks();
c0102463:	e8 c8 00 00 00       	call   c0102530 <print_ticks>
        break;
c0102468:	e9 b5 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
        c = cons_getc();
c010246d:	e8 6e f3 ff ff       	call   c01017e0 <cons_getc>
c0102472:	8d 0d 50 f6 10 c0    	lea    0xc010f650,%ecx
c0102478:	88 c2                	mov    %al,%dl
c010247a:	88 55 f7             	mov    %dl,-0x9(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010247d:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c0102481:	0f be 75 f7          	movsbl -0x9(%ebp),%esi
c0102485:	89 0c 24             	mov    %ecx,(%esp)
c0102488:	89 44 24 04          	mov    %eax,0x4(%esp)
c010248c:	89 74 24 08          	mov    %esi,0x8(%esp)
c0102490:	e8 ab dd ff ff       	call   c0100240 <cprintf>
        break;
c0102495:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0102498:	e9 85 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
        c = cons_getc();
c010249d:	e8 3e f3 ff ff       	call   c01017e0 <cons_getc>
c01024a2:	8d 0d 62 f6 10 c0    	lea    0xc010f662,%ecx
c01024a8:	88 c2                	mov    %al,%dl
c01024aa:	88 55 f7             	mov    %dl,-0x9(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01024ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01024b1:	0f be 75 f7          	movsbl -0x9(%ebp),%esi
c01024b5:	89 0c 24             	mov    %ecx,(%esp)
c01024b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024bc:	89 74 24 08          	mov    %esi,0x8(%esp)
c01024c0:	e8 7b dd ff ff       	call   c0100240 <cprintf>
        break;
c01024c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01024c8:	e9 55 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
        break;
c01024cd:	e9 50 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
        break;
c01024d2:	e9 4b 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
        if ((tf->tf_cs & 3) == 0) {
c01024d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01024da:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024de:	83 e0 03             	and    $0x3,%eax
c01024e1:	83 f8 00             	cmp    $0x0,%eax
c01024e4:	0f 85 33 00 00 00    	jne    c010251d <trap_dispatch+0x15d>
            print_trapframe(tf);
c01024ea:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01024ed:	89 04 24             	mov    %eax,(%esp)
c01024f0:	e8 2b fb ff ff       	call   c0102020 <print_trapframe>
c01024f5:	8d 05 71 f6 10 c0    	lea    0xc010f671,%eax
c01024fb:	b9 b8 00 00 00       	mov    $0xb8,%ecx
c0102500:	8d 15 82 f6 10 c0    	lea    0xc010f682,%edx
            panic("unexpected trap in kernel.\n");
c0102506:	89 04 24             	mov    %eax,(%esp)
c0102509:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0102510:	00 
c0102511:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102515:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c0102518:	e8 33 df ff ff       	call   c0100450 <__panic>
    }
c010251d:	e9 00 00 00 00       	jmp    c0102522 <trap_dispatch+0x162>
}
c0102522:	83 c4 44             	add    $0x44,%esp
c0102525:	5e                   	pop    %esi
c0102526:	5d                   	pop    %ebp
c0102527:	c3                   	ret    
c0102528:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010252f:	00 

c0102530 <print_ticks>:
static void print_ticks() {
c0102530:	55                   	push   %ebp
c0102531:	89 e5                	mov    %esp,%ebp
c0102533:	83 ec 18             	sub    $0x18,%esp
c0102536:	8d 05 9e f6 10 c0    	lea    0xc010f69e,%eax
c010253c:	b9 64 00 00 00       	mov    $0x64,%ecx
    cprintf("%d ticks\n",TICK_NUM);
c0102541:	89 04 24             	mov    %eax,(%esp)
c0102544:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c010254b:	00 
c010254c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010254f:	e8 ec dc ff ff       	call   c0100240 <cprintf>
}
c0102554:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0102557:	83 c4 18             	add    $0x18,%esp
c010255a:	5d                   	pop    %ebp
c010255b:	c3                   	ret    

c010255c <vector0>:
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
  pushl $0
c010255c:	6a 00                	push   $0x0
  jmp __alltraps
c010255e:	6a 00                	push   $0x0
.globl vector1
c0102560:	e9 67 0a 00 00       	jmp    c0102fcc <__alltraps>

c0102565 <vector1>:
vector1:
  pushl $0
  pushl $1
c0102565:	6a 00                	push   $0x0
  jmp __alltraps
c0102567:	6a 01                	push   $0x1
.globl vector2
c0102569:	e9 5e 0a 00 00       	jmp    c0102fcc <__alltraps>

c010256e <vector2>:
vector2:
  pushl $0
  pushl $2
c010256e:	6a 00                	push   $0x0
  jmp __alltraps
c0102570:	6a 02                	push   $0x2
.globl vector3
c0102572:	e9 55 0a 00 00       	jmp    c0102fcc <__alltraps>

c0102577 <vector3>:
vector3:
  pushl $0
  pushl $3
c0102577:	6a 00                	push   $0x0
  jmp __alltraps
c0102579:	6a 03                	push   $0x3
.globl vector4
c010257b:	e9 4c 0a 00 00       	jmp    c0102fcc <__alltraps>

c0102580 <vector4>:
vector4:
  pushl $0
  pushl $4
c0102580:	6a 00                	push   $0x0
  jmp __alltraps
c0102582:	6a 04                	push   $0x4
.globl vector5
c0102584:	e9 43 0a 00 00       	jmp    c0102fcc <__alltraps>

c0102589 <vector5>:
vector5:
  pushl $0
  pushl $5
c0102589:	6a 00                	push   $0x0
  jmp __alltraps
c010258b:	6a 05                	push   $0x5
.globl vector6
c010258d:	e9 3a 0a 00 00       	jmp    c0102fcc <__alltraps>

c0102592 <vector6>:
vector6:
  pushl $0
  pushl $6
c0102592:	6a 00                	push   $0x0
  jmp __alltraps
c0102594:	6a 06                	push   $0x6
.globl vector7
c0102596:	e9 31 0a 00 00       	jmp    c0102fcc <__alltraps>

c010259b <vector7>:
vector7:
  pushl $0
  pushl $7
c010259b:	6a 00                	push   $0x0
  jmp __alltraps
c010259d:	6a 07                	push   $0x7
.globl vector8
c010259f:	e9 28 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025a4 <vector8>:
vector8:
  pushl $8
  jmp __alltraps
c01025a4:	6a 08                	push   $0x8
.globl vector9
c01025a6:	e9 21 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025ab <vector9>:
vector9:
  pushl $9
  jmp __alltraps
c01025ab:	6a 09                	push   $0x9
.globl vector10
c01025ad:	e9 1a 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025b2 <vector10>:
vector10:
  pushl $10
  jmp __alltraps
c01025b2:	6a 0a                	push   $0xa
.globl vector11
c01025b4:	e9 13 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025b9 <vector11>:
vector11:
  pushl $11
  jmp __alltraps
c01025b9:	6a 0b                	push   $0xb
.globl vector12
c01025bb:	e9 0c 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025c0 <vector12>:
vector12:
  pushl $12
  jmp __alltraps
c01025c0:	6a 0c                	push   $0xc
.globl vector13
c01025c2:	e9 05 0a 00 00       	jmp    c0102fcc <__alltraps>

c01025c7 <vector13>:
vector13:
  pushl $13
  jmp __alltraps
c01025c7:	6a 0d                	push   $0xd
.globl vector14
c01025c9:	e9 fe 09 00 00       	jmp    c0102fcc <__alltraps>

c01025ce <vector14>:
vector14:
  pushl $14
  jmp __alltraps
c01025ce:	6a 0e                	push   $0xe
.globl vector15
c01025d0:	e9 f7 09 00 00       	jmp    c0102fcc <__alltraps>

c01025d5 <vector15>:
vector15:
  pushl $0
  pushl $15
c01025d5:	6a 00                	push   $0x0
  jmp __alltraps
c01025d7:	6a 0f                	push   $0xf
.globl vector16
c01025d9:	e9 ee 09 00 00       	jmp    c0102fcc <__alltraps>

c01025de <vector16>:
vector16:
  pushl $0
  pushl $16
c01025de:	6a 00                	push   $0x0
  jmp __alltraps
c01025e0:	6a 10                	push   $0x10
.globl vector17
c01025e2:	e9 e5 09 00 00       	jmp    c0102fcc <__alltraps>

c01025e7 <vector17>:
vector17:
  pushl $17
  jmp __alltraps
c01025e7:	6a 11                	push   $0x11
.globl vector18
c01025e9:	e9 de 09 00 00       	jmp    c0102fcc <__alltraps>

c01025ee <vector18>:
vector18:
  pushl $0
  pushl $18
c01025ee:	6a 00                	push   $0x0
  jmp __alltraps
c01025f0:	6a 12                	push   $0x12
.globl vector19
c01025f2:	e9 d5 09 00 00       	jmp    c0102fcc <__alltraps>

c01025f7 <vector19>:
vector19:
  pushl $0
  pushl $19
c01025f7:	6a 00                	push   $0x0
  jmp __alltraps
c01025f9:	6a 13                	push   $0x13
.globl vector20
c01025fb:	e9 cc 09 00 00       	jmp    c0102fcc <__alltraps>

c0102600 <vector20>:
vector20:
  pushl $0
  pushl $20
c0102600:	6a 00                	push   $0x0
  jmp __alltraps
c0102602:	6a 14                	push   $0x14
.globl vector21
c0102604:	e9 c3 09 00 00       	jmp    c0102fcc <__alltraps>

c0102609 <vector21>:
vector21:
  pushl $0
  pushl $21
c0102609:	6a 00                	push   $0x0
  jmp __alltraps
c010260b:	6a 15                	push   $0x15
.globl vector22
c010260d:	e9 ba 09 00 00       	jmp    c0102fcc <__alltraps>

c0102612 <vector22>:
vector22:
  pushl $0
  pushl $22
c0102612:	6a 00                	push   $0x0
  jmp __alltraps
c0102614:	6a 16                	push   $0x16
.globl vector23
c0102616:	e9 b1 09 00 00       	jmp    c0102fcc <__alltraps>

c010261b <vector23>:
vector23:
  pushl $0
  pushl $23
c010261b:	6a 00                	push   $0x0
  jmp __alltraps
c010261d:	6a 17                	push   $0x17
.globl vector24
c010261f:	e9 a8 09 00 00       	jmp    c0102fcc <__alltraps>

c0102624 <vector24>:
vector24:
  pushl $0
  pushl $24
c0102624:	6a 00                	push   $0x0
  jmp __alltraps
c0102626:	6a 18                	push   $0x18
.globl vector25
c0102628:	e9 9f 09 00 00       	jmp    c0102fcc <__alltraps>

c010262d <vector25>:
vector25:
  pushl $0
  pushl $25
c010262d:	6a 00                	push   $0x0
  jmp __alltraps
c010262f:	6a 19                	push   $0x19
.globl vector26
c0102631:	e9 96 09 00 00       	jmp    c0102fcc <__alltraps>

c0102636 <vector26>:
vector26:
  pushl $0
  pushl $26
c0102636:	6a 00                	push   $0x0
  jmp __alltraps
c0102638:	6a 1a                	push   $0x1a
.globl vector27
c010263a:	e9 8d 09 00 00       	jmp    c0102fcc <__alltraps>

c010263f <vector27>:
vector27:
  pushl $0
  pushl $27
c010263f:	6a 00                	push   $0x0
  jmp __alltraps
c0102641:	6a 1b                	push   $0x1b
.globl vector28
c0102643:	e9 84 09 00 00       	jmp    c0102fcc <__alltraps>

c0102648 <vector28>:
vector28:
  pushl $0
  pushl $28
c0102648:	6a 00                	push   $0x0
  jmp __alltraps
c010264a:	6a 1c                	push   $0x1c
.globl vector29
c010264c:	e9 7b 09 00 00       	jmp    c0102fcc <__alltraps>

c0102651 <vector29>:
vector29:
  pushl $0
  pushl $29
c0102651:	6a 00                	push   $0x0
  jmp __alltraps
c0102653:	6a 1d                	push   $0x1d
.globl vector30
c0102655:	e9 72 09 00 00       	jmp    c0102fcc <__alltraps>

c010265a <vector30>:
vector30:
  pushl $0
  pushl $30
c010265a:	6a 00                	push   $0x0
  jmp __alltraps
c010265c:	6a 1e                	push   $0x1e
.globl vector31
c010265e:	e9 69 09 00 00       	jmp    c0102fcc <__alltraps>

c0102663 <vector31>:
vector31:
  pushl $0
  pushl $31
c0102663:	6a 00                	push   $0x0
  jmp __alltraps
c0102665:	6a 1f                	push   $0x1f
.globl vector32
c0102667:	e9 60 09 00 00       	jmp    c0102fcc <__alltraps>

c010266c <vector32>:
vector32:
  pushl $0
  pushl $32
c010266c:	6a 00                	push   $0x0
  jmp __alltraps
c010266e:	6a 20                	push   $0x20
.globl vector33
c0102670:	e9 57 09 00 00       	jmp    c0102fcc <__alltraps>

c0102675 <vector33>:
vector33:
  pushl $0
  pushl $33
c0102675:	6a 00                	push   $0x0
  jmp __alltraps
c0102677:	6a 21                	push   $0x21
.globl vector34
c0102679:	e9 4e 09 00 00       	jmp    c0102fcc <__alltraps>

c010267e <vector34>:
vector34:
  pushl $0
  pushl $34
c010267e:	6a 00                	push   $0x0
  jmp __alltraps
c0102680:	6a 22                	push   $0x22
.globl vector35
c0102682:	e9 45 09 00 00       	jmp    c0102fcc <__alltraps>

c0102687 <vector35>:
vector35:
  pushl $0
  pushl $35
c0102687:	6a 00                	push   $0x0
  jmp __alltraps
c0102689:	6a 23                	push   $0x23
.globl vector36
c010268b:	e9 3c 09 00 00       	jmp    c0102fcc <__alltraps>

c0102690 <vector36>:
vector36:
  pushl $0
  pushl $36
c0102690:	6a 00                	push   $0x0
  jmp __alltraps
c0102692:	6a 24                	push   $0x24
.globl vector37
c0102694:	e9 33 09 00 00       	jmp    c0102fcc <__alltraps>

c0102699 <vector37>:
vector37:
  pushl $0
  pushl $37
c0102699:	6a 00                	push   $0x0
  jmp __alltraps
c010269b:	6a 25                	push   $0x25
.globl vector38
c010269d:	e9 2a 09 00 00       	jmp    c0102fcc <__alltraps>

c01026a2 <vector38>:
vector38:
  pushl $0
  pushl $38
c01026a2:	6a 00                	push   $0x0
  jmp __alltraps
c01026a4:	6a 26                	push   $0x26
.globl vector39
c01026a6:	e9 21 09 00 00       	jmp    c0102fcc <__alltraps>

c01026ab <vector39>:
vector39:
  pushl $0
  pushl $39
c01026ab:	6a 00                	push   $0x0
  jmp __alltraps
c01026ad:	6a 27                	push   $0x27
.globl vector40
c01026af:	e9 18 09 00 00       	jmp    c0102fcc <__alltraps>

c01026b4 <vector40>:
vector40:
  pushl $0
  pushl $40
c01026b4:	6a 00                	push   $0x0
  jmp __alltraps
c01026b6:	6a 28                	push   $0x28
.globl vector41
c01026b8:	e9 0f 09 00 00       	jmp    c0102fcc <__alltraps>

c01026bd <vector41>:
vector41:
  pushl $0
  pushl $41
c01026bd:	6a 00                	push   $0x0
  jmp __alltraps
c01026bf:	6a 29                	push   $0x29
.globl vector42
c01026c1:	e9 06 09 00 00       	jmp    c0102fcc <__alltraps>

c01026c6 <vector42>:
vector42:
  pushl $0
  pushl $42
c01026c6:	6a 00                	push   $0x0
  jmp __alltraps
c01026c8:	6a 2a                	push   $0x2a
.globl vector43
c01026ca:	e9 fd 08 00 00       	jmp    c0102fcc <__alltraps>

c01026cf <vector43>:
vector43:
  pushl $0
  pushl $43
c01026cf:	6a 00                	push   $0x0
  jmp __alltraps
c01026d1:	6a 2b                	push   $0x2b
.globl vector44
c01026d3:	e9 f4 08 00 00       	jmp    c0102fcc <__alltraps>

c01026d8 <vector44>:
vector44:
  pushl $0
  pushl $44
c01026d8:	6a 00                	push   $0x0
  jmp __alltraps
c01026da:	6a 2c                	push   $0x2c
.globl vector45
c01026dc:	e9 eb 08 00 00       	jmp    c0102fcc <__alltraps>

c01026e1 <vector45>:
vector45:
  pushl $0
  pushl $45
c01026e1:	6a 00                	push   $0x0
  jmp __alltraps
c01026e3:	6a 2d                	push   $0x2d
.globl vector46
c01026e5:	e9 e2 08 00 00       	jmp    c0102fcc <__alltraps>

c01026ea <vector46>:
vector46:
  pushl $0
  pushl $46
c01026ea:	6a 00                	push   $0x0
  jmp __alltraps
c01026ec:	6a 2e                	push   $0x2e
.globl vector47
c01026ee:	e9 d9 08 00 00       	jmp    c0102fcc <__alltraps>

c01026f3 <vector47>:
vector47:
  pushl $0
  pushl $47
c01026f3:	6a 00                	push   $0x0
  jmp __alltraps
c01026f5:	6a 2f                	push   $0x2f
.globl vector48
c01026f7:	e9 d0 08 00 00       	jmp    c0102fcc <__alltraps>

c01026fc <vector48>:
vector48:
  pushl $0
  pushl $48
c01026fc:	6a 00                	push   $0x0
  jmp __alltraps
c01026fe:	6a 30                	push   $0x30
.globl vector49
c0102700:	e9 c7 08 00 00       	jmp    c0102fcc <__alltraps>

c0102705 <vector49>:
vector49:
  pushl $0
  pushl $49
c0102705:	6a 00                	push   $0x0
  jmp __alltraps
c0102707:	6a 31                	push   $0x31
.globl vector50
c0102709:	e9 be 08 00 00       	jmp    c0102fcc <__alltraps>

c010270e <vector50>:
vector50:
  pushl $0
  pushl $50
c010270e:	6a 00                	push   $0x0
  jmp __alltraps
c0102710:	6a 32                	push   $0x32
.globl vector51
c0102712:	e9 b5 08 00 00       	jmp    c0102fcc <__alltraps>

c0102717 <vector51>:
vector51:
  pushl $0
  pushl $51
c0102717:	6a 00                	push   $0x0
  jmp __alltraps
c0102719:	6a 33                	push   $0x33
.globl vector52
c010271b:	e9 ac 08 00 00       	jmp    c0102fcc <__alltraps>

c0102720 <vector52>:
vector52:
  pushl $0
  pushl $52
c0102720:	6a 00                	push   $0x0
  jmp __alltraps
c0102722:	6a 34                	push   $0x34
.globl vector53
c0102724:	e9 a3 08 00 00       	jmp    c0102fcc <__alltraps>

c0102729 <vector53>:
vector53:
  pushl $0
  pushl $53
c0102729:	6a 00                	push   $0x0
  jmp __alltraps
c010272b:	6a 35                	push   $0x35
.globl vector54
c010272d:	e9 9a 08 00 00       	jmp    c0102fcc <__alltraps>

c0102732 <vector54>:
vector54:
  pushl $0
  pushl $54
c0102732:	6a 00                	push   $0x0
  jmp __alltraps
c0102734:	6a 36                	push   $0x36
.globl vector55
c0102736:	e9 91 08 00 00       	jmp    c0102fcc <__alltraps>

c010273b <vector55>:
vector55:
  pushl $0
  pushl $55
c010273b:	6a 00                	push   $0x0
  jmp __alltraps
c010273d:	6a 37                	push   $0x37
.globl vector56
c010273f:	e9 88 08 00 00       	jmp    c0102fcc <__alltraps>

c0102744 <vector56>:
vector56:
  pushl $0
  pushl $56
c0102744:	6a 00                	push   $0x0
  jmp __alltraps
c0102746:	6a 38                	push   $0x38
.globl vector57
c0102748:	e9 7f 08 00 00       	jmp    c0102fcc <__alltraps>

c010274d <vector57>:
vector57:
  pushl $0
  pushl $57
c010274d:	6a 00                	push   $0x0
  jmp __alltraps
c010274f:	6a 39                	push   $0x39
.globl vector58
c0102751:	e9 76 08 00 00       	jmp    c0102fcc <__alltraps>

c0102756 <vector58>:
vector58:
  pushl $0
  pushl $58
c0102756:	6a 00                	push   $0x0
  jmp __alltraps
c0102758:	6a 3a                	push   $0x3a
.globl vector59
c010275a:	e9 6d 08 00 00       	jmp    c0102fcc <__alltraps>

c010275f <vector59>:
vector59:
  pushl $0
  pushl $59
c010275f:	6a 00                	push   $0x0
  jmp __alltraps
c0102761:	6a 3b                	push   $0x3b
.globl vector60
c0102763:	e9 64 08 00 00       	jmp    c0102fcc <__alltraps>

c0102768 <vector60>:
vector60:
  pushl $0
  pushl $60
c0102768:	6a 00                	push   $0x0
  jmp __alltraps
c010276a:	6a 3c                	push   $0x3c
.globl vector61
c010276c:	e9 5b 08 00 00       	jmp    c0102fcc <__alltraps>

c0102771 <vector61>:
vector61:
  pushl $0
  pushl $61
c0102771:	6a 00                	push   $0x0
  jmp __alltraps
c0102773:	6a 3d                	push   $0x3d
.globl vector62
c0102775:	e9 52 08 00 00       	jmp    c0102fcc <__alltraps>

c010277a <vector62>:
vector62:
  pushl $0
  pushl $62
c010277a:	6a 00                	push   $0x0
  jmp __alltraps
c010277c:	6a 3e                	push   $0x3e
.globl vector63
c010277e:	e9 49 08 00 00       	jmp    c0102fcc <__alltraps>

c0102783 <vector63>:
vector63:
  pushl $0
  pushl $63
c0102783:	6a 00                	push   $0x0
  jmp __alltraps
c0102785:	6a 3f                	push   $0x3f
.globl vector64
c0102787:	e9 40 08 00 00       	jmp    c0102fcc <__alltraps>

c010278c <vector64>:
vector64:
  pushl $0
  pushl $64
c010278c:	6a 00                	push   $0x0
  jmp __alltraps
c010278e:	6a 40                	push   $0x40
.globl vector65
c0102790:	e9 37 08 00 00       	jmp    c0102fcc <__alltraps>

c0102795 <vector65>:
vector65:
  pushl $0
  pushl $65
c0102795:	6a 00                	push   $0x0
  jmp __alltraps
c0102797:	6a 41                	push   $0x41
.globl vector66
c0102799:	e9 2e 08 00 00       	jmp    c0102fcc <__alltraps>

c010279e <vector66>:
vector66:
  pushl $0
  pushl $66
c010279e:	6a 00                	push   $0x0
  jmp __alltraps
c01027a0:	6a 42                	push   $0x42
.globl vector67
c01027a2:	e9 25 08 00 00       	jmp    c0102fcc <__alltraps>

c01027a7 <vector67>:
vector67:
  pushl $0
  pushl $67
c01027a7:	6a 00                	push   $0x0
  jmp __alltraps
c01027a9:	6a 43                	push   $0x43
.globl vector68
c01027ab:	e9 1c 08 00 00       	jmp    c0102fcc <__alltraps>

c01027b0 <vector68>:
vector68:
  pushl $0
  pushl $68
c01027b0:	6a 00                	push   $0x0
  jmp __alltraps
c01027b2:	6a 44                	push   $0x44
.globl vector69
c01027b4:	e9 13 08 00 00       	jmp    c0102fcc <__alltraps>

c01027b9 <vector69>:
vector69:
  pushl $0
  pushl $69
c01027b9:	6a 00                	push   $0x0
  jmp __alltraps
c01027bb:	6a 45                	push   $0x45
.globl vector70
c01027bd:	e9 0a 08 00 00       	jmp    c0102fcc <__alltraps>

c01027c2 <vector70>:
vector70:
  pushl $0
  pushl $70
c01027c2:	6a 00                	push   $0x0
  jmp __alltraps
c01027c4:	6a 46                	push   $0x46
.globl vector71
c01027c6:	e9 01 08 00 00       	jmp    c0102fcc <__alltraps>

c01027cb <vector71>:
vector71:
  pushl $0
  pushl $71
c01027cb:	6a 00                	push   $0x0
  jmp __alltraps
c01027cd:	6a 47                	push   $0x47
.globl vector72
c01027cf:	e9 f8 07 00 00       	jmp    c0102fcc <__alltraps>

c01027d4 <vector72>:
vector72:
  pushl $0
  pushl $72
c01027d4:	6a 00                	push   $0x0
  jmp __alltraps
c01027d6:	6a 48                	push   $0x48
.globl vector73
c01027d8:	e9 ef 07 00 00       	jmp    c0102fcc <__alltraps>

c01027dd <vector73>:
vector73:
  pushl $0
  pushl $73
c01027dd:	6a 00                	push   $0x0
  jmp __alltraps
c01027df:	6a 49                	push   $0x49
.globl vector74
c01027e1:	e9 e6 07 00 00       	jmp    c0102fcc <__alltraps>

c01027e6 <vector74>:
vector74:
  pushl $0
  pushl $74
c01027e6:	6a 00                	push   $0x0
  jmp __alltraps
c01027e8:	6a 4a                	push   $0x4a
.globl vector75
c01027ea:	e9 dd 07 00 00       	jmp    c0102fcc <__alltraps>

c01027ef <vector75>:
vector75:
  pushl $0
  pushl $75
c01027ef:	6a 00                	push   $0x0
  jmp __alltraps
c01027f1:	6a 4b                	push   $0x4b
.globl vector76
c01027f3:	e9 d4 07 00 00       	jmp    c0102fcc <__alltraps>

c01027f8 <vector76>:
vector76:
  pushl $0
  pushl $76
c01027f8:	6a 00                	push   $0x0
  jmp __alltraps
c01027fa:	6a 4c                	push   $0x4c
.globl vector77
c01027fc:	e9 cb 07 00 00       	jmp    c0102fcc <__alltraps>

c0102801 <vector77>:
vector77:
  pushl $0
  pushl $77
c0102801:	6a 00                	push   $0x0
  jmp __alltraps
c0102803:	6a 4d                	push   $0x4d
.globl vector78
c0102805:	e9 c2 07 00 00       	jmp    c0102fcc <__alltraps>

c010280a <vector78>:
vector78:
  pushl $0
  pushl $78
c010280a:	6a 00                	push   $0x0
  jmp __alltraps
c010280c:	6a 4e                	push   $0x4e
.globl vector79
c010280e:	e9 b9 07 00 00       	jmp    c0102fcc <__alltraps>

c0102813 <vector79>:
vector79:
  pushl $0
  pushl $79
c0102813:	6a 00                	push   $0x0
  jmp __alltraps
c0102815:	6a 4f                	push   $0x4f
.globl vector80
c0102817:	e9 b0 07 00 00       	jmp    c0102fcc <__alltraps>

c010281c <vector80>:
vector80:
  pushl $0
  pushl $80
c010281c:	6a 00                	push   $0x0
  jmp __alltraps
c010281e:	6a 50                	push   $0x50
.globl vector81
c0102820:	e9 a7 07 00 00       	jmp    c0102fcc <__alltraps>

c0102825 <vector81>:
vector81:
  pushl $0
  pushl $81
c0102825:	6a 00                	push   $0x0
  jmp __alltraps
c0102827:	6a 51                	push   $0x51
.globl vector82
c0102829:	e9 9e 07 00 00       	jmp    c0102fcc <__alltraps>

c010282e <vector82>:
vector82:
  pushl $0
  pushl $82
c010282e:	6a 00                	push   $0x0
  jmp __alltraps
c0102830:	6a 52                	push   $0x52
.globl vector83
c0102832:	e9 95 07 00 00       	jmp    c0102fcc <__alltraps>

c0102837 <vector83>:
vector83:
  pushl $0
  pushl $83
c0102837:	6a 00                	push   $0x0
  jmp __alltraps
c0102839:	6a 53                	push   $0x53
.globl vector84
c010283b:	e9 8c 07 00 00       	jmp    c0102fcc <__alltraps>

c0102840 <vector84>:
vector84:
  pushl $0
  pushl $84
c0102840:	6a 00                	push   $0x0
  jmp __alltraps
c0102842:	6a 54                	push   $0x54
.globl vector85
c0102844:	e9 83 07 00 00       	jmp    c0102fcc <__alltraps>

c0102849 <vector85>:
vector85:
  pushl $0
  pushl $85
c0102849:	6a 00                	push   $0x0
  jmp __alltraps
c010284b:	6a 55                	push   $0x55
.globl vector86
c010284d:	e9 7a 07 00 00       	jmp    c0102fcc <__alltraps>

c0102852 <vector86>:
vector86:
  pushl $0
  pushl $86
c0102852:	6a 00                	push   $0x0
  jmp __alltraps
c0102854:	6a 56                	push   $0x56
.globl vector87
c0102856:	e9 71 07 00 00       	jmp    c0102fcc <__alltraps>

c010285b <vector87>:
vector87:
  pushl $0
  pushl $87
c010285b:	6a 00                	push   $0x0
  jmp __alltraps
c010285d:	6a 57                	push   $0x57
.globl vector88
c010285f:	e9 68 07 00 00       	jmp    c0102fcc <__alltraps>

c0102864 <vector88>:
vector88:
  pushl $0
  pushl $88
c0102864:	6a 00                	push   $0x0
  jmp __alltraps
c0102866:	6a 58                	push   $0x58
.globl vector89
c0102868:	e9 5f 07 00 00       	jmp    c0102fcc <__alltraps>

c010286d <vector89>:
vector89:
  pushl $0
  pushl $89
c010286d:	6a 00                	push   $0x0
  jmp __alltraps
c010286f:	6a 59                	push   $0x59
.globl vector90
c0102871:	e9 56 07 00 00       	jmp    c0102fcc <__alltraps>

c0102876 <vector90>:
vector90:
  pushl $0
  pushl $90
c0102876:	6a 00                	push   $0x0
  jmp __alltraps
c0102878:	6a 5a                	push   $0x5a
.globl vector91
c010287a:	e9 4d 07 00 00       	jmp    c0102fcc <__alltraps>

c010287f <vector91>:
vector91:
  pushl $0
  pushl $91
c010287f:	6a 00                	push   $0x0
  jmp __alltraps
c0102881:	6a 5b                	push   $0x5b
.globl vector92
c0102883:	e9 44 07 00 00       	jmp    c0102fcc <__alltraps>

c0102888 <vector92>:
vector92:
  pushl $0
  pushl $92
c0102888:	6a 00                	push   $0x0
  jmp __alltraps
c010288a:	6a 5c                	push   $0x5c
.globl vector93
c010288c:	e9 3b 07 00 00       	jmp    c0102fcc <__alltraps>

c0102891 <vector93>:
vector93:
  pushl $0
  pushl $93
c0102891:	6a 00                	push   $0x0
  jmp __alltraps
c0102893:	6a 5d                	push   $0x5d
.globl vector94
c0102895:	e9 32 07 00 00       	jmp    c0102fcc <__alltraps>

c010289a <vector94>:
vector94:
  pushl $0
  pushl $94
c010289a:	6a 00                	push   $0x0
  jmp __alltraps
c010289c:	6a 5e                	push   $0x5e
.globl vector95
c010289e:	e9 29 07 00 00       	jmp    c0102fcc <__alltraps>

c01028a3 <vector95>:
vector95:
  pushl $0
  pushl $95
c01028a3:	6a 00                	push   $0x0
  jmp __alltraps
c01028a5:	6a 5f                	push   $0x5f
.globl vector96
c01028a7:	e9 20 07 00 00       	jmp    c0102fcc <__alltraps>

c01028ac <vector96>:
vector96:
  pushl $0
  pushl $96
c01028ac:	6a 00                	push   $0x0
  jmp __alltraps
c01028ae:	6a 60                	push   $0x60
.globl vector97
c01028b0:	e9 17 07 00 00       	jmp    c0102fcc <__alltraps>

c01028b5 <vector97>:
vector97:
  pushl $0
  pushl $97
c01028b5:	6a 00                	push   $0x0
  jmp __alltraps
c01028b7:	6a 61                	push   $0x61
.globl vector98
c01028b9:	e9 0e 07 00 00       	jmp    c0102fcc <__alltraps>

c01028be <vector98>:
vector98:
  pushl $0
  pushl $98
c01028be:	6a 00                	push   $0x0
  jmp __alltraps
c01028c0:	6a 62                	push   $0x62
.globl vector99
c01028c2:	e9 05 07 00 00       	jmp    c0102fcc <__alltraps>

c01028c7 <vector99>:
vector99:
  pushl $0
  pushl $99
c01028c7:	6a 00                	push   $0x0
  jmp __alltraps
c01028c9:	6a 63                	push   $0x63
.globl vector100
c01028cb:	e9 fc 06 00 00       	jmp    c0102fcc <__alltraps>

c01028d0 <vector100>:
vector100:
  pushl $0
  pushl $100
c01028d0:	6a 00                	push   $0x0
  jmp __alltraps
c01028d2:	6a 64                	push   $0x64
.globl vector101
c01028d4:	e9 f3 06 00 00       	jmp    c0102fcc <__alltraps>

c01028d9 <vector101>:
vector101:
  pushl $0
  pushl $101
c01028d9:	6a 00                	push   $0x0
  jmp __alltraps
c01028db:	6a 65                	push   $0x65
.globl vector102
c01028dd:	e9 ea 06 00 00       	jmp    c0102fcc <__alltraps>

c01028e2 <vector102>:
vector102:
  pushl $0
  pushl $102
c01028e2:	6a 00                	push   $0x0
  jmp __alltraps
c01028e4:	6a 66                	push   $0x66
.globl vector103
c01028e6:	e9 e1 06 00 00       	jmp    c0102fcc <__alltraps>

c01028eb <vector103>:
vector103:
  pushl $0
  pushl $103
c01028eb:	6a 00                	push   $0x0
  jmp __alltraps
c01028ed:	6a 67                	push   $0x67
.globl vector104
c01028ef:	e9 d8 06 00 00       	jmp    c0102fcc <__alltraps>

c01028f4 <vector104>:
vector104:
  pushl $0
  pushl $104
c01028f4:	6a 00                	push   $0x0
  jmp __alltraps
c01028f6:	6a 68                	push   $0x68
.globl vector105
c01028f8:	e9 cf 06 00 00       	jmp    c0102fcc <__alltraps>

c01028fd <vector105>:
vector105:
  pushl $0
  pushl $105
c01028fd:	6a 00                	push   $0x0
  jmp __alltraps
c01028ff:	6a 69                	push   $0x69
.globl vector106
c0102901:	e9 c6 06 00 00       	jmp    c0102fcc <__alltraps>

c0102906 <vector106>:
vector106:
  pushl $0
  pushl $106
c0102906:	6a 00                	push   $0x0
  jmp __alltraps
c0102908:	6a 6a                	push   $0x6a
.globl vector107
c010290a:	e9 bd 06 00 00       	jmp    c0102fcc <__alltraps>

c010290f <vector107>:
vector107:
  pushl $0
  pushl $107
c010290f:	6a 00                	push   $0x0
  jmp __alltraps
c0102911:	6a 6b                	push   $0x6b
.globl vector108
c0102913:	e9 b4 06 00 00       	jmp    c0102fcc <__alltraps>

c0102918 <vector108>:
vector108:
  pushl $0
  pushl $108
c0102918:	6a 00                	push   $0x0
  jmp __alltraps
c010291a:	6a 6c                	push   $0x6c
.globl vector109
c010291c:	e9 ab 06 00 00       	jmp    c0102fcc <__alltraps>

c0102921 <vector109>:
vector109:
  pushl $0
  pushl $109
c0102921:	6a 00                	push   $0x0
  jmp __alltraps
c0102923:	6a 6d                	push   $0x6d
.globl vector110
c0102925:	e9 a2 06 00 00       	jmp    c0102fcc <__alltraps>

c010292a <vector110>:
vector110:
  pushl $0
  pushl $110
c010292a:	6a 00                	push   $0x0
  jmp __alltraps
c010292c:	6a 6e                	push   $0x6e
.globl vector111
c010292e:	e9 99 06 00 00       	jmp    c0102fcc <__alltraps>

c0102933 <vector111>:
vector111:
  pushl $0
  pushl $111
c0102933:	6a 00                	push   $0x0
  jmp __alltraps
c0102935:	6a 6f                	push   $0x6f
.globl vector112
c0102937:	e9 90 06 00 00       	jmp    c0102fcc <__alltraps>

c010293c <vector112>:
vector112:
  pushl $0
  pushl $112
c010293c:	6a 00                	push   $0x0
  jmp __alltraps
c010293e:	6a 70                	push   $0x70
.globl vector113
c0102940:	e9 87 06 00 00       	jmp    c0102fcc <__alltraps>

c0102945 <vector113>:
vector113:
  pushl $0
  pushl $113
c0102945:	6a 00                	push   $0x0
  jmp __alltraps
c0102947:	6a 71                	push   $0x71
.globl vector114
c0102949:	e9 7e 06 00 00       	jmp    c0102fcc <__alltraps>

c010294e <vector114>:
vector114:
  pushl $0
  pushl $114
c010294e:	6a 00                	push   $0x0
  jmp __alltraps
c0102950:	6a 72                	push   $0x72
.globl vector115
c0102952:	e9 75 06 00 00       	jmp    c0102fcc <__alltraps>

c0102957 <vector115>:
vector115:
  pushl $0
  pushl $115
c0102957:	6a 00                	push   $0x0
  jmp __alltraps
c0102959:	6a 73                	push   $0x73
.globl vector116
c010295b:	e9 6c 06 00 00       	jmp    c0102fcc <__alltraps>

c0102960 <vector116>:
vector116:
  pushl $0
  pushl $116
c0102960:	6a 00                	push   $0x0
  jmp __alltraps
c0102962:	6a 74                	push   $0x74
.globl vector117
c0102964:	e9 63 06 00 00       	jmp    c0102fcc <__alltraps>

c0102969 <vector117>:
vector117:
  pushl $0
  pushl $117
c0102969:	6a 00                	push   $0x0
  jmp __alltraps
c010296b:	6a 75                	push   $0x75
.globl vector118
c010296d:	e9 5a 06 00 00       	jmp    c0102fcc <__alltraps>

c0102972 <vector118>:
vector118:
  pushl $0
  pushl $118
c0102972:	6a 00                	push   $0x0
  jmp __alltraps
c0102974:	6a 76                	push   $0x76
.globl vector119
c0102976:	e9 51 06 00 00       	jmp    c0102fcc <__alltraps>

c010297b <vector119>:
vector119:
  pushl $0
  pushl $119
c010297b:	6a 00                	push   $0x0
  jmp __alltraps
c010297d:	6a 77                	push   $0x77
.globl vector120
c010297f:	e9 48 06 00 00       	jmp    c0102fcc <__alltraps>

c0102984 <vector120>:
vector120:
  pushl $0
  pushl $120
c0102984:	6a 00                	push   $0x0
  jmp __alltraps
c0102986:	6a 78                	push   $0x78
.globl vector121
c0102988:	e9 3f 06 00 00       	jmp    c0102fcc <__alltraps>

c010298d <vector121>:
vector121:
  pushl $0
  pushl $121
c010298d:	6a 00                	push   $0x0
  jmp __alltraps
c010298f:	6a 79                	push   $0x79
.globl vector122
c0102991:	e9 36 06 00 00       	jmp    c0102fcc <__alltraps>

c0102996 <vector122>:
vector122:
  pushl $0
  pushl $122
c0102996:	6a 00                	push   $0x0
  jmp __alltraps
c0102998:	6a 7a                	push   $0x7a
.globl vector123
c010299a:	e9 2d 06 00 00       	jmp    c0102fcc <__alltraps>

c010299f <vector123>:
vector123:
  pushl $0
  pushl $123
c010299f:	6a 00                	push   $0x0
  jmp __alltraps
c01029a1:	6a 7b                	push   $0x7b
.globl vector124
c01029a3:	e9 24 06 00 00       	jmp    c0102fcc <__alltraps>

c01029a8 <vector124>:
vector124:
  pushl $0
  pushl $124
c01029a8:	6a 00                	push   $0x0
  jmp __alltraps
c01029aa:	6a 7c                	push   $0x7c
.globl vector125
c01029ac:	e9 1b 06 00 00       	jmp    c0102fcc <__alltraps>

c01029b1 <vector125>:
vector125:
  pushl $0
  pushl $125
c01029b1:	6a 00                	push   $0x0
  jmp __alltraps
c01029b3:	6a 7d                	push   $0x7d
.globl vector126
c01029b5:	e9 12 06 00 00       	jmp    c0102fcc <__alltraps>

c01029ba <vector126>:
vector126:
  pushl $0
  pushl $126
c01029ba:	6a 00                	push   $0x0
  jmp __alltraps
c01029bc:	6a 7e                	push   $0x7e
.globl vector127
c01029be:	e9 09 06 00 00       	jmp    c0102fcc <__alltraps>

c01029c3 <vector127>:
vector127:
  pushl $0
  pushl $127
c01029c3:	6a 00                	push   $0x0
  jmp __alltraps
c01029c5:	6a 7f                	push   $0x7f
.globl vector128
c01029c7:	e9 00 06 00 00       	jmp    c0102fcc <__alltraps>

c01029cc <vector128>:
vector128:
  pushl $0
  pushl $128
c01029cc:	6a 00                	push   $0x0
  jmp __alltraps
c01029ce:	68 80 00 00 00       	push   $0x80
.globl vector129
c01029d3:	e9 f4 05 00 00       	jmp    c0102fcc <__alltraps>

c01029d8 <vector129>:
vector129:
  pushl $0
  pushl $129
c01029d8:	6a 00                	push   $0x0
  jmp __alltraps
c01029da:	68 81 00 00 00       	push   $0x81
.globl vector130
c01029df:	e9 e8 05 00 00       	jmp    c0102fcc <__alltraps>

c01029e4 <vector130>:
vector130:
  pushl $0
  pushl $130
c01029e4:	6a 00                	push   $0x0
  jmp __alltraps
c01029e6:	68 82 00 00 00       	push   $0x82
.globl vector131
c01029eb:	e9 dc 05 00 00       	jmp    c0102fcc <__alltraps>

c01029f0 <vector131>:
vector131:
  pushl $0
  pushl $131
c01029f0:	6a 00                	push   $0x0
  jmp __alltraps
c01029f2:	68 83 00 00 00       	push   $0x83
.globl vector132
c01029f7:	e9 d0 05 00 00       	jmp    c0102fcc <__alltraps>

c01029fc <vector132>:
vector132:
  pushl $0
  pushl $132
c01029fc:	6a 00                	push   $0x0
  jmp __alltraps
c01029fe:	68 84 00 00 00       	push   $0x84
.globl vector133
c0102a03:	e9 c4 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a08 <vector133>:
vector133:
  pushl $0
  pushl $133
c0102a08:	6a 00                	push   $0x0
  jmp __alltraps
c0102a0a:	68 85 00 00 00       	push   $0x85
.globl vector134
c0102a0f:	e9 b8 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a14 <vector134>:
vector134:
  pushl $0
  pushl $134
c0102a14:	6a 00                	push   $0x0
  jmp __alltraps
c0102a16:	68 86 00 00 00       	push   $0x86
.globl vector135
c0102a1b:	e9 ac 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a20 <vector135>:
vector135:
  pushl $0
  pushl $135
c0102a20:	6a 00                	push   $0x0
  jmp __alltraps
c0102a22:	68 87 00 00 00       	push   $0x87
.globl vector136
c0102a27:	e9 a0 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a2c <vector136>:
vector136:
  pushl $0
  pushl $136
c0102a2c:	6a 00                	push   $0x0
  jmp __alltraps
c0102a2e:	68 88 00 00 00       	push   $0x88
.globl vector137
c0102a33:	e9 94 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a38 <vector137>:
vector137:
  pushl $0
  pushl $137
c0102a38:	6a 00                	push   $0x0
  jmp __alltraps
c0102a3a:	68 89 00 00 00       	push   $0x89
.globl vector138
c0102a3f:	e9 88 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a44 <vector138>:
vector138:
  pushl $0
  pushl $138
c0102a44:	6a 00                	push   $0x0
  jmp __alltraps
c0102a46:	68 8a 00 00 00       	push   $0x8a
.globl vector139
c0102a4b:	e9 7c 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a50 <vector139>:
vector139:
  pushl $0
  pushl $139
c0102a50:	6a 00                	push   $0x0
  jmp __alltraps
c0102a52:	68 8b 00 00 00       	push   $0x8b
.globl vector140
c0102a57:	e9 70 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a5c <vector140>:
vector140:
  pushl $0
  pushl $140
c0102a5c:	6a 00                	push   $0x0
  jmp __alltraps
c0102a5e:	68 8c 00 00 00       	push   $0x8c
.globl vector141
c0102a63:	e9 64 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a68 <vector141>:
vector141:
  pushl $0
  pushl $141
c0102a68:	6a 00                	push   $0x0
  jmp __alltraps
c0102a6a:	68 8d 00 00 00       	push   $0x8d
.globl vector142
c0102a6f:	e9 58 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a74 <vector142>:
vector142:
  pushl $0
  pushl $142
c0102a74:	6a 00                	push   $0x0
  jmp __alltraps
c0102a76:	68 8e 00 00 00       	push   $0x8e
.globl vector143
c0102a7b:	e9 4c 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a80 <vector143>:
vector143:
  pushl $0
  pushl $143
c0102a80:	6a 00                	push   $0x0
  jmp __alltraps
c0102a82:	68 8f 00 00 00       	push   $0x8f
.globl vector144
c0102a87:	e9 40 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a8c <vector144>:
vector144:
  pushl $0
  pushl $144
c0102a8c:	6a 00                	push   $0x0
  jmp __alltraps
c0102a8e:	68 90 00 00 00       	push   $0x90
.globl vector145
c0102a93:	e9 34 05 00 00       	jmp    c0102fcc <__alltraps>

c0102a98 <vector145>:
vector145:
  pushl $0
  pushl $145
c0102a98:	6a 00                	push   $0x0
  jmp __alltraps
c0102a9a:	68 91 00 00 00       	push   $0x91
.globl vector146
c0102a9f:	e9 28 05 00 00       	jmp    c0102fcc <__alltraps>

c0102aa4 <vector146>:
vector146:
  pushl $0
  pushl $146
c0102aa4:	6a 00                	push   $0x0
  jmp __alltraps
c0102aa6:	68 92 00 00 00       	push   $0x92
.globl vector147
c0102aab:	e9 1c 05 00 00       	jmp    c0102fcc <__alltraps>

c0102ab0 <vector147>:
vector147:
  pushl $0
  pushl $147
c0102ab0:	6a 00                	push   $0x0
  jmp __alltraps
c0102ab2:	68 93 00 00 00       	push   $0x93
.globl vector148
c0102ab7:	e9 10 05 00 00       	jmp    c0102fcc <__alltraps>

c0102abc <vector148>:
vector148:
  pushl $0
  pushl $148
c0102abc:	6a 00                	push   $0x0
  jmp __alltraps
c0102abe:	68 94 00 00 00       	push   $0x94
.globl vector149
c0102ac3:	e9 04 05 00 00       	jmp    c0102fcc <__alltraps>

c0102ac8 <vector149>:
vector149:
  pushl $0
  pushl $149
c0102ac8:	6a 00                	push   $0x0
  jmp __alltraps
c0102aca:	68 95 00 00 00       	push   $0x95
.globl vector150
c0102acf:	e9 f8 04 00 00       	jmp    c0102fcc <__alltraps>

c0102ad4 <vector150>:
vector150:
  pushl $0
  pushl $150
c0102ad4:	6a 00                	push   $0x0
  jmp __alltraps
c0102ad6:	68 96 00 00 00       	push   $0x96
.globl vector151
c0102adb:	e9 ec 04 00 00       	jmp    c0102fcc <__alltraps>

c0102ae0 <vector151>:
vector151:
  pushl $0
  pushl $151
c0102ae0:	6a 00                	push   $0x0
  jmp __alltraps
c0102ae2:	68 97 00 00 00       	push   $0x97
.globl vector152
c0102ae7:	e9 e0 04 00 00       	jmp    c0102fcc <__alltraps>

c0102aec <vector152>:
vector152:
  pushl $0
  pushl $152
c0102aec:	6a 00                	push   $0x0
  jmp __alltraps
c0102aee:	68 98 00 00 00       	push   $0x98
.globl vector153
c0102af3:	e9 d4 04 00 00       	jmp    c0102fcc <__alltraps>

c0102af8 <vector153>:
vector153:
  pushl $0
  pushl $153
c0102af8:	6a 00                	push   $0x0
  jmp __alltraps
c0102afa:	68 99 00 00 00       	push   $0x99
.globl vector154
c0102aff:	e9 c8 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b04 <vector154>:
vector154:
  pushl $0
  pushl $154
c0102b04:	6a 00                	push   $0x0
  jmp __alltraps
c0102b06:	68 9a 00 00 00       	push   $0x9a
.globl vector155
c0102b0b:	e9 bc 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b10 <vector155>:
vector155:
  pushl $0
  pushl $155
c0102b10:	6a 00                	push   $0x0
  jmp __alltraps
c0102b12:	68 9b 00 00 00       	push   $0x9b
.globl vector156
c0102b17:	e9 b0 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b1c <vector156>:
vector156:
  pushl $0
  pushl $156
c0102b1c:	6a 00                	push   $0x0
  jmp __alltraps
c0102b1e:	68 9c 00 00 00       	push   $0x9c
.globl vector157
c0102b23:	e9 a4 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b28 <vector157>:
vector157:
  pushl $0
  pushl $157
c0102b28:	6a 00                	push   $0x0
  jmp __alltraps
c0102b2a:	68 9d 00 00 00       	push   $0x9d
.globl vector158
c0102b2f:	e9 98 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b34 <vector158>:
vector158:
  pushl $0
  pushl $158
c0102b34:	6a 00                	push   $0x0
  jmp __alltraps
c0102b36:	68 9e 00 00 00       	push   $0x9e
.globl vector159
c0102b3b:	e9 8c 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b40 <vector159>:
vector159:
  pushl $0
  pushl $159
c0102b40:	6a 00                	push   $0x0
  jmp __alltraps
c0102b42:	68 9f 00 00 00       	push   $0x9f
.globl vector160
c0102b47:	e9 80 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b4c <vector160>:
vector160:
  pushl $0
  pushl $160
c0102b4c:	6a 00                	push   $0x0
  jmp __alltraps
c0102b4e:	68 a0 00 00 00       	push   $0xa0
.globl vector161
c0102b53:	e9 74 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b58 <vector161>:
vector161:
  pushl $0
  pushl $161
c0102b58:	6a 00                	push   $0x0
  jmp __alltraps
c0102b5a:	68 a1 00 00 00       	push   $0xa1
.globl vector162
c0102b5f:	e9 68 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b64 <vector162>:
vector162:
  pushl $0
  pushl $162
c0102b64:	6a 00                	push   $0x0
  jmp __alltraps
c0102b66:	68 a2 00 00 00       	push   $0xa2
.globl vector163
c0102b6b:	e9 5c 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b70 <vector163>:
vector163:
  pushl $0
  pushl $163
c0102b70:	6a 00                	push   $0x0
  jmp __alltraps
c0102b72:	68 a3 00 00 00       	push   $0xa3
.globl vector164
c0102b77:	e9 50 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b7c <vector164>:
vector164:
  pushl $0
  pushl $164
c0102b7c:	6a 00                	push   $0x0
  jmp __alltraps
c0102b7e:	68 a4 00 00 00       	push   $0xa4
.globl vector165
c0102b83:	e9 44 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b88 <vector165>:
vector165:
  pushl $0
  pushl $165
c0102b88:	6a 00                	push   $0x0
  jmp __alltraps
c0102b8a:	68 a5 00 00 00       	push   $0xa5
.globl vector166
c0102b8f:	e9 38 04 00 00       	jmp    c0102fcc <__alltraps>

c0102b94 <vector166>:
vector166:
  pushl $0
  pushl $166
c0102b94:	6a 00                	push   $0x0
  jmp __alltraps
c0102b96:	68 a6 00 00 00       	push   $0xa6
.globl vector167
c0102b9b:	e9 2c 04 00 00       	jmp    c0102fcc <__alltraps>

c0102ba0 <vector167>:
vector167:
  pushl $0
  pushl $167
c0102ba0:	6a 00                	push   $0x0
  jmp __alltraps
c0102ba2:	68 a7 00 00 00       	push   $0xa7
.globl vector168
c0102ba7:	e9 20 04 00 00       	jmp    c0102fcc <__alltraps>

c0102bac <vector168>:
vector168:
  pushl $0
  pushl $168
c0102bac:	6a 00                	push   $0x0
  jmp __alltraps
c0102bae:	68 a8 00 00 00       	push   $0xa8
.globl vector169
c0102bb3:	e9 14 04 00 00       	jmp    c0102fcc <__alltraps>

c0102bb8 <vector169>:
vector169:
  pushl $0
  pushl $169
c0102bb8:	6a 00                	push   $0x0
  jmp __alltraps
c0102bba:	68 a9 00 00 00       	push   $0xa9
.globl vector170
c0102bbf:	e9 08 04 00 00       	jmp    c0102fcc <__alltraps>

c0102bc4 <vector170>:
vector170:
  pushl $0
  pushl $170
c0102bc4:	6a 00                	push   $0x0
  jmp __alltraps
c0102bc6:	68 aa 00 00 00       	push   $0xaa
.globl vector171
c0102bcb:	e9 fc 03 00 00       	jmp    c0102fcc <__alltraps>

c0102bd0 <vector171>:
vector171:
  pushl $0
  pushl $171
c0102bd0:	6a 00                	push   $0x0
  jmp __alltraps
c0102bd2:	68 ab 00 00 00       	push   $0xab
.globl vector172
c0102bd7:	e9 f0 03 00 00       	jmp    c0102fcc <__alltraps>

c0102bdc <vector172>:
vector172:
  pushl $0
  pushl $172
c0102bdc:	6a 00                	push   $0x0
  jmp __alltraps
c0102bde:	68 ac 00 00 00       	push   $0xac
.globl vector173
c0102be3:	e9 e4 03 00 00       	jmp    c0102fcc <__alltraps>

c0102be8 <vector173>:
vector173:
  pushl $0
  pushl $173
c0102be8:	6a 00                	push   $0x0
  jmp __alltraps
c0102bea:	68 ad 00 00 00       	push   $0xad
.globl vector174
c0102bef:	e9 d8 03 00 00       	jmp    c0102fcc <__alltraps>

c0102bf4 <vector174>:
vector174:
  pushl $0
  pushl $174
c0102bf4:	6a 00                	push   $0x0
  jmp __alltraps
c0102bf6:	68 ae 00 00 00       	push   $0xae
.globl vector175
c0102bfb:	e9 cc 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c00 <vector175>:
vector175:
  pushl $0
  pushl $175
c0102c00:	6a 00                	push   $0x0
  jmp __alltraps
c0102c02:	68 af 00 00 00       	push   $0xaf
.globl vector176
c0102c07:	e9 c0 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c0c <vector176>:
vector176:
  pushl $0
  pushl $176
c0102c0c:	6a 00                	push   $0x0
  jmp __alltraps
c0102c0e:	68 b0 00 00 00       	push   $0xb0
.globl vector177
c0102c13:	e9 b4 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c18 <vector177>:
vector177:
  pushl $0
  pushl $177
c0102c18:	6a 00                	push   $0x0
  jmp __alltraps
c0102c1a:	68 b1 00 00 00       	push   $0xb1
.globl vector178
c0102c1f:	e9 a8 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c24 <vector178>:
vector178:
  pushl $0
  pushl $178
c0102c24:	6a 00                	push   $0x0
  jmp __alltraps
c0102c26:	68 b2 00 00 00       	push   $0xb2
.globl vector179
c0102c2b:	e9 9c 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c30 <vector179>:
vector179:
  pushl $0
  pushl $179
c0102c30:	6a 00                	push   $0x0
  jmp __alltraps
c0102c32:	68 b3 00 00 00       	push   $0xb3
.globl vector180
c0102c37:	e9 90 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c3c <vector180>:
vector180:
  pushl $0
  pushl $180
c0102c3c:	6a 00                	push   $0x0
  jmp __alltraps
c0102c3e:	68 b4 00 00 00       	push   $0xb4
.globl vector181
c0102c43:	e9 84 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c48 <vector181>:
vector181:
  pushl $0
  pushl $181
c0102c48:	6a 00                	push   $0x0
  jmp __alltraps
c0102c4a:	68 b5 00 00 00       	push   $0xb5
.globl vector182
c0102c4f:	e9 78 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c54 <vector182>:
vector182:
  pushl $0
  pushl $182
c0102c54:	6a 00                	push   $0x0
  jmp __alltraps
c0102c56:	68 b6 00 00 00       	push   $0xb6
.globl vector183
c0102c5b:	e9 6c 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c60 <vector183>:
vector183:
  pushl $0
  pushl $183
c0102c60:	6a 00                	push   $0x0
  jmp __alltraps
c0102c62:	68 b7 00 00 00       	push   $0xb7
.globl vector184
c0102c67:	e9 60 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c6c <vector184>:
vector184:
  pushl $0
  pushl $184
c0102c6c:	6a 00                	push   $0x0
  jmp __alltraps
c0102c6e:	68 b8 00 00 00       	push   $0xb8
.globl vector185
c0102c73:	e9 54 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c78 <vector185>:
vector185:
  pushl $0
  pushl $185
c0102c78:	6a 00                	push   $0x0
  jmp __alltraps
c0102c7a:	68 b9 00 00 00       	push   $0xb9
.globl vector186
c0102c7f:	e9 48 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c84 <vector186>:
vector186:
  pushl $0
  pushl $186
c0102c84:	6a 00                	push   $0x0
  jmp __alltraps
c0102c86:	68 ba 00 00 00       	push   $0xba
.globl vector187
c0102c8b:	e9 3c 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c90 <vector187>:
vector187:
  pushl $0
  pushl $187
c0102c90:	6a 00                	push   $0x0
  jmp __alltraps
c0102c92:	68 bb 00 00 00       	push   $0xbb
.globl vector188
c0102c97:	e9 30 03 00 00       	jmp    c0102fcc <__alltraps>

c0102c9c <vector188>:
vector188:
  pushl $0
  pushl $188
c0102c9c:	6a 00                	push   $0x0
  jmp __alltraps
c0102c9e:	68 bc 00 00 00       	push   $0xbc
.globl vector189
c0102ca3:	e9 24 03 00 00       	jmp    c0102fcc <__alltraps>

c0102ca8 <vector189>:
vector189:
  pushl $0
  pushl $189
c0102ca8:	6a 00                	push   $0x0
  jmp __alltraps
c0102caa:	68 bd 00 00 00       	push   $0xbd
.globl vector190
c0102caf:	e9 18 03 00 00       	jmp    c0102fcc <__alltraps>

c0102cb4 <vector190>:
vector190:
  pushl $0
  pushl $190
c0102cb4:	6a 00                	push   $0x0
  jmp __alltraps
c0102cb6:	68 be 00 00 00       	push   $0xbe
.globl vector191
c0102cbb:	e9 0c 03 00 00       	jmp    c0102fcc <__alltraps>

c0102cc0 <vector191>:
vector191:
  pushl $0
  pushl $191
c0102cc0:	6a 00                	push   $0x0
  jmp __alltraps
c0102cc2:	68 bf 00 00 00       	push   $0xbf
.globl vector192
c0102cc7:	e9 00 03 00 00       	jmp    c0102fcc <__alltraps>

c0102ccc <vector192>:
vector192:
  pushl $0
  pushl $192
c0102ccc:	6a 00                	push   $0x0
  jmp __alltraps
c0102cce:	68 c0 00 00 00       	push   $0xc0
.globl vector193
c0102cd3:	e9 f4 02 00 00       	jmp    c0102fcc <__alltraps>

c0102cd8 <vector193>:
vector193:
  pushl $0
  pushl $193
c0102cd8:	6a 00                	push   $0x0
  jmp __alltraps
c0102cda:	68 c1 00 00 00       	push   $0xc1
.globl vector194
c0102cdf:	e9 e8 02 00 00       	jmp    c0102fcc <__alltraps>

c0102ce4 <vector194>:
vector194:
  pushl $0
  pushl $194
c0102ce4:	6a 00                	push   $0x0
  jmp __alltraps
c0102ce6:	68 c2 00 00 00       	push   $0xc2
.globl vector195
c0102ceb:	e9 dc 02 00 00       	jmp    c0102fcc <__alltraps>

c0102cf0 <vector195>:
vector195:
  pushl $0
  pushl $195
c0102cf0:	6a 00                	push   $0x0
  jmp __alltraps
c0102cf2:	68 c3 00 00 00       	push   $0xc3
.globl vector196
c0102cf7:	e9 d0 02 00 00       	jmp    c0102fcc <__alltraps>

c0102cfc <vector196>:
vector196:
  pushl $0
  pushl $196
c0102cfc:	6a 00                	push   $0x0
  jmp __alltraps
c0102cfe:	68 c4 00 00 00       	push   $0xc4
.globl vector197
c0102d03:	e9 c4 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d08 <vector197>:
vector197:
  pushl $0
  pushl $197
c0102d08:	6a 00                	push   $0x0
  jmp __alltraps
c0102d0a:	68 c5 00 00 00       	push   $0xc5
.globl vector198
c0102d0f:	e9 b8 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d14 <vector198>:
vector198:
  pushl $0
  pushl $198
c0102d14:	6a 00                	push   $0x0
  jmp __alltraps
c0102d16:	68 c6 00 00 00       	push   $0xc6
.globl vector199
c0102d1b:	e9 ac 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d20 <vector199>:
vector199:
  pushl $0
  pushl $199
c0102d20:	6a 00                	push   $0x0
  jmp __alltraps
c0102d22:	68 c7 00 00 00       	push   $0xc7
.globl vector200
c0102d27:	e9 a0 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d2c <vector200>:
vector200:
  pushl $0
  pushl $200
c0102d2c:	6a 00                	push   $0x0
  jmp __alltraps
c0102d2e:	68 c8 00 00 00       	push   $0xc8
.globl vector201
c0102d33:	e9 94 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d38 <vector201>:
vector201:
  pushl $0
  pushl $201
c0102d38:	6a 00                	push   $0x0
  jmp __alltraps
c0102d3a:	68 c9 00 00 00       	push   $0xc9
.globl vector202
c0102d3f:	e9 88 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d44 <vector202>:
vector202:
  pushl $0
  pushl $202
c0102d44:	6a 00                	push   $0x0
  jmp __alltraps
c0102d46:	68 ca 00 00 00       	push   $0xca
.globl vector203
c0102d4b:	e9 7c 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d50 <vector203>:
vector203:
  pushl $0
  pushl $203
c0102d50:	6a 00                	push   $0x0
  jmp __alltraps
c0102d52:	68 cb 00 00 00       	push   $0xcb
.globl vector204
c0102d57:	e9 70 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d5c <vector204>:
vector204:
  pushl $0
  pushl $204
c0102d5c:	6a 00                	push   $0x0
  jmp __alltraps
c0102d5e:	68 cc 00 00 00       	push   $0xcc
.globl vector205
c0102d63:	e9 64 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d68 <vector205>:
vector205:
  pushl $0
  pushl $205
c0102d68:	6a 00                	push   $0x0
  jmp __alltraps
c0102d6a:	68 cd 00 00 00       	push   $0xcd
.globl vector206
c0102d6f:	e9 58 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d74 <vector206>:
vector206:
  pushl $0
  pushl $206
c0102d74:	6a 00                	push   $0x0
  jmp __alltraps
c0102d76:	68 ce 00 00 00       	push   $0xce
.globl vector207
c0102d7b:	e9 4c 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d80 <vector207>:
vector207:
  pushl $0
  pushl $207
c0102d80:	6a 00                	push   $0x0
  jmp __alltraps
c0102d82:	68 cf 00 00 00       	push   $0xcf
.globl vector208
c0102d87:	e9 40 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d8c <vector208>:
vector208:
  pushl $0
  pushl $208
c0102d8c:	6a 00                	push   $0x0
  jmp __alltraps
c0102d8e:	68 d0 00 00 00       	push   $0xd0
.globl vector209
c0102d93:	e9 34 02 00 00       	jmp    c0102fcc <__alltraps>

c0102d98 <vector209>:
vector209:
  pushl $0
  pushl $209
c0102d98:	6a 00                	push   $0x0
  jmp __alltraps
c0102d9a:	68 d1 00 00 00       	push   $0xd1
.globl vector210
c0102d9f:	e9 28 02 00 00       	jmp    c0102fcc <__alltraps>

c0102da4 <vector210>:
vector210:
  pushl $0
  pushl $210
c0102da4:	6a 00                	push   $0x0
  jmp __alltraps
c0102da6:	68 d2 00 00 00       	push   $0xd2
.globl vector211
c0102dab:	e9 1c 02 00 00       	jmp    c0102fcc <__alltraps>

c0102db0 <vector211>:
vector211:
  pushl $0
  pushl $211
c0102db0:	6a 00                	push   $0x0
  jmp __alltraps
c0102db2:	68 d3 00 00 00       	push   $0xd3
.globl vector212
c0102db7:	e9 10 02 00 00       	jmp    c0102fcc <__alltraps>

c0102dbc <vector212>:
vector212:
  pushl $0
  pushl $212
c0102dbc:	6a 00                	push   $0x0
  jmp __alltraps
c0102dbe:	68 d4 00 00 00       	push   $0xd4
.globl vector213
c0102dc3:	e9 04 02 00 00       	jmp    c0102fcc <__alltraps>

c0102dc8 <vector213>:
vector213:
  pushl $0
  pushl $213
c0102dc8:	6a 00                	push   $0x0
  jmp __alltraps
c0102dca:	68 d5 00 00 00       	push   $0xd5
.globl vector214
c0102dcf:	e9 f8 01 00 00       	jmp    c0102fcc <__alltraps>

c0102dd4 <vector214>:
vector214:
  pushl $0
  pushl $214
c0102dd4:	6a 00                	push   $0x0
  jmp __alltraps
c0102dd6:	68 d6 00 00 00       	push   $0xd6
.globl vector215
c0102ddb:	e9 ec 01 00 00       	jmp    c0102fcc <__alltraps>

c0102de0 <vector215>:
vector215:
  pushl $0
  pushl $215
c0102de0:	6a 00                	push   $0x0
  jmp __alltraps
c0102de2:	68 d7 00 00 00       	push   $0xd7
.globl vector216
c0102de7:	e9 e0 01 00 00       	jmp    c0102fcc <__alltraps>

c0102dec <vector216>:
vector216:
  pushl $0
  pushl $216
c0102dec:	6a 00                	push   $0x0
  jmp __alltraps
c0102dee:	68 d8 00 00 00       	push   $0xd8
.globl vector217
c0102df3:	e9 d4 01 00 00       	jmp    c0102fcc <__alltraps>

c0102df8 <vector217>:
vector217:
  pushl $0
  pushl $217
c0102df8:	6a 00                	push   $0x0
  jmp __alltraps
c0102dfa:	68 d9 00 00 00       	push   $0xd9
.globl vector218
c0102dff:	e9 c8 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e04 <vector218>:
vector218:
  pushl $0
  pushl $218
c0102e04:	6a 00                	push   $0x0
  jmp __alltraps
c0102e06:	68 da 00 00 00       	push   $0xda
.globl vector219
c0102e0b:	e9 bc 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e10 <vector219>:
vector219:
  pushl $0
  pushl $219
c0102e10:	6a 00                	push   $0x0
  jmp __alltraps
c0102e12:	68 db 00 00 00       	push   $0xdb
.globl vector220
c0102e17:	e9 b0 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e1c <vector220>:
vector220:
  pushl $0
  pushl $220
c0102e1c:	6a 00                	push   $0x0
  jmp __alltraps
c0102e1e:	68 dc 00 00 00       	push   $0xdc
.globl vector221
c0102e23:	e9 a4 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e28 <vector221>:
vector221:
  pushl $0
  pushl $221
c0102e28:	6a 00                	push   $0x0
  jmp __alltraps
c0102e2a:	68 dd 00 00 00       	push   $0xdd
.globl vector222
c0102e2f:	e9 98 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e34 <vector222>:
vector222:
  pushl $0
  pushl $222
c0102e34:	6a 00                	push   $0x0
  jmp __alltraps
c0102e36:	68 de 00 00 00       	push   $0xde
.globl vector223
c0102e3b:	e9 8c 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e40 <vector223>:
vector223:
  pushl $0
  pushl $223
c0102e40:	6a 00                	push   $0x0
  jmp __alltraps
c0102e42:	68 df 00 00 00       	push   $0xdf
.globl vector224
c0102e47:	e9 80 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e4c <vector224>:
vector224:
  pushl $0
  pushl $224
c0102e4c:	6a 00                	push   $0x0
  jmp __alltraps
c0102e4e:	68 e0 00 00 00       	push   $0xe0
.globl vector225
c0102e53:	e9 74 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e58 <vector225>:
vector225:
  pushl $0
  pushl $225
c0102e58:	6a 00                	push   $0x0
  jmp __alltraps
c0102e5a:	68 e1 00 00 00       	push   $0xe1
.globl vector226
c0102e5f:	e9 68 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e64 <vector226>:
vector226:
  pushl $0
  pushl $226
c0102e64:	6a 00                	push   $0x0
  jmp __alltraps
c0102e66:	68 e2 00 00 00       	push   $0xe2
.globl vector227
c0102e6b:	e9 5c 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e70 <vector227>:
vector227:
  pushl $0
  pushl $227
c0102e70:	6a 00                	push   $0x0
  jmp __alltraps
c0102e72:	68 e3 00 00 00       	push   $0xe3
.globl vector228
c0102e77:	e9 50 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e7c <vector228>:
vector228:
  pushl $0
  pushl $228
c0102e7c:	6a 00                	push   $0x0
  jmp __alltraps
c0102e7e:	68 e4 00 00 00       	push   $0xe4
.globl vector229
c0102e83:	e9 44 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e88 <vector229>:
vector229:
  pushl $0
  pushl $229
c0102e88:	6a 00                	push   $0x0
  jmp __alltraps
c0102e8a:	68 e5 00 00 00       	push   $0xe5
.globl vector230
c0102e8f:	e9 38 01 00 00       	jmp    c0102fcc <__alltraps>

c0102e94 <vector230>:
vector230:
  pushl $0
  pushl $230
c0102e94:	6a 00                	push   $0x0
  jmp __alltraps
c0102e96:	68 e6 00 00 00       	push   $0xe6
.globl vector231
c0102e9b:	e9 2c 01 00 00       	jmp    c0102fcc <__alltraps>

c0102ea0 <vector231>:
vector231:
  pushl $0
  pushl $231
c0102ea0:	6a 00                	push   $0x0
  jmp __alltraps
c0102ea2:	68 e7 00 00 00       	push   $0xe7
.globl vector232
c0102ea7:	e9 20 01 00 00       	jmp    c0102fcc <__alltraps>

c0102eac <vector232>:
vector232:
  pushl $0
  pushl $232
c0102eac:	6a 00                	push   $0x0
  jmp __alltraps
c0102eae:	68 e8 00 00 00       	push   $0xe8
.globl vector233
c0102eb3:	e9 14 01 00 00       	jmp    c0102fcc <__alltraps>

c0102eb8 <vector233>:
vector233:
  pushl $0
  pushl $233
c0102eb8:	6a 00                	push   $0x0
  jmp __alltraps
c0102eba:	68 e9 00 00 00       	push   $0xe9
.globl vector234
c0102ebf:	e9 08 01 00 00       	jmp    c0102fcc <__alltraps>

c0102ec4 <vector234>:
vector234:
  pushl $0
  pushl $234
c0102ec4:	6a 00                	push   $0x0
  jmp __alltraps
c0102ec6:	68 ea 00 00 00       	push   $0xea
.globl vector235
c0102ecb:	e9 fc 00 00 00       	jmp    c0102fcc <__alltraps>

c0102ed0 <vector235>:
vector235:
  pushl $0
  pushl $235
c0102ed0:	6a 00                	push   $0x0
  jmp __alltraps
c0102ed2:	68 eb 00 00 00       	push   $0xeb
.globl vector236
c0102ed7:	e9 f0 00 00 00       	jmp    c0102fcc <__alltraps>

c0102edc <vector236>:
vector236:
  pushl $0
  pushl $236
c0102edc:	6a 00                	push   $0x0
  jmp __alltraps
c0102ede:	68 ec 00 00 00       	push   $0xec
.globl vector237
c0102ee3:	e9 e4 00 00 00       	jmp    c0102fcc <__alltraps>

c0102ee8 <vector237>:
vector237:
  pushl $0
  pushl $237
c0102ee8:	6a 00                	push   $0x0
  jmp __alltraps
c0102eea:	68 ed 00 00 00       	push   $0xed
.globl vector238
c0102eef:	e9 d8 00 00 00       	jmp    c0102fcc <__alltraps>

c0102ef4 <vector238>:
vector238:
  pushl $0
  pushl $238
c0102ef4:	6a 00                	push   $0x0
  jmp __alltraps
c0102ef6:	68 ee 00 00 00       	push   $0xee
.globl vector239
c0102efb:	e9 cc 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f00 <vector239>:
vector239:
  pushl $0
  pushl $239
c0102f00:	6a 00                	push   $0x0
  jmp __alltraps
c0102f02:	68 ef 00 00 00       	push   $0xef
.globl vector240
c0102f07:	e9 c0 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f0c <vector240>:
vector240:
  pushl $0
  pushl $240
c0102f0c:	6a 00                	push   $0x0
  jmp __alltraps
c0102f0e:	68 f0 00 00 00       	push   $0xf0
.globl vector241
c0102f13:	e9 b4 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f18 <vector241>:
vector241:
  pushl $0
  pushl $241
c0102f18:	6a 00                	push   $0x0
  jmp __alltraps
c0102f1a:	68 f1 00 00 00       	push   $0xf1
.globl vector242
c0102f1f:	e9 a8 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f24 <vector242>:
vector242:
  pushl $0
  pushl $242
c0102f24:	6a 00                	push   $0x0
  jmp __alltraps
c0102f26:	68 f2 00 00 00       	push   $0xf2
.globl vector243
c0102f2b:	e9 9c 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f30 <vector243>:
vector243:
  pushl $0
  pushl $243
c0102f30:	6a 00                	push   $0x0
  jmp __alltraps
c0102f32:	68 f3 00 00 00       	push   $0xf3
.globl vector244
c0102f37:	e9 90 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f3c <vector244>:
vector244:
  pushl $0
  pushl $244
c0102f3c:	6a 00                	push   $0x0
  jmp __alltraps
c0102f3e:	68 f4 00 00 00       	push   $0xf4
.globl vector245
c0102f43:	e9 84 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f48 <vector245>:
vector245:
  pushl $0
  pushl $245
c0102f48:	6a 00                	push   $0x0
  jmp __alltraps
c0102f4a:	68 f5 00 00 00       	push   $0xf5
.globl vector246
c0102f4f:	e9 78 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f54 <vector246>:
vector246:
  pushl $0
  pushl $246
c0102f54:	6a 00                	push   $0x0
  jmp __alltraps
c0102f56:	68 f6 00 00 00       	push   $0xf6
.globl vector247
c0102f5b:	e9 6c 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f60 <vector247>:
vector247:
  pushl $0
  pushl $247
c0102f60:	6a 00                	push   $0x0
  jmp __alltraps
c0102f62:	68 f7 00 00 00       	push   $0xf7
.globl vector248
c0102f67:	e9 60 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f6c <vector248>:
vector248:
  pushl $0
  pushl $248
c0102f6c:	6a 00                	push   $0x0
  jmp __alltraps
c0102f6e:	68 f8 00 00 00       	push   $0xf8
.globl vector249
c0102f73:	e9 54 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f78 <vector249>:
vector249:
  pushl $0
  pushl $249
c0102f78:	6a 00                	push   $0x0
  jmp __alltraps
c0102f7a:	68 f9 00 00 00       	push   $0xf9
.globl vector250
c0102f7f:	e9 48 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f84 <vector250>:
vector250:
  pushl $0
  pushl $250
c0102f84:	6a 00                	push   $0x0
  jmp __alltraps
c0102f86:	68 fa 00 00 00       	push   $0xfa
.globl vector251
c0102f8b:	e9 3c 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f90 <vector251>:
vector251:
  pushl $0
  pushl $251
c0102f90:	6a 00                	push   $0x0
  jmp __alltraps
c0102f92:	68 fb 00 00 00       	push   $0xfb
.globl vector252
c0102f97:	e9 30 00 00 00       	jmp    c0102fcc <__alltraps>

c0102f9c <vector252>:
vector252:
  pushl $0
  pushl $252
c0102f9c:	6a 00                	push   $0x0
  jmp __alltraps
c0102f9e:	68 fc 00 00 00       	push   $0xfc
.globl vector253
c0102fa3:	e9 24 00 00 00       	jmp    c0102fcc <__alltraps>

c0102fa8 <vector253>:
vector253:
  pushl $0
  pushl $253
c0102fa8:	6a 00                	push   $0x0
  jmp __alltraps
c0102faa:	68 fd 00 00 00       	push   $0xfd
.globl vector254
c0102faf:	e9 18 00 00 00       	jmp    c0102fcc <__alltraps>

c0102fb4 <vector254>:
vector254:
  pushl $0
  pushl $254
c0102fb4:	6a 00                	push   $0x0
  jmp __alltraps
c0102fb6:	68 fe 00 00 00       	push   $0xfe
.globl vector255
c0102fbb:	e9 0c 00 00 00       	jmp    c0102fcc <__alltraps>

c0102fc0 <vector255>:
vector255:
  pushl $0
  pushl $255
c0102fc0:	6a 00                	push   $0x0
  jmp __alltraps
c0102fc2:	68 ff 00 00 00       	push   $0xff

c0102fc7:	e9 00 00 00 00       	jmp    c0102fcc <__alltraps>

c0102fcc <__alltraps>:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
    pushl %es
    pushl %fs
    pushl %gs
c0102fcc:	1e                   	push   %ds
    pushal
c0102fcd:	06                   	push   %es

c0102fce:	0f a0                	push   %fs
    # load GD_KDATA into %ds and %es to set up data segments for kernel
c0102fd0:	0f a8                	push   %gs
    movl $GD_KDATA, %eax
c0102fd2:	60                   	pusha  
    movw %ax, %ds
    movw %ax, %es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
c0102fd3:	b8 10 00 00 00       	mov    $0x10,%eax
    pushl %esp
c0102fd8:	66 8e d8             	mov    %ax,%ds

c0102fdb:	66 8e c0             	mov    %ax,%es
    # call trap(tf), where tf=%esp
    call trap

    # pop the pushed stack pointer
c0102fde:	54                   	push   %esp
    popl %esp

    # return falls through to trapret...
.globl __trapret
c0102fdf:	e8 bc f3 ff ff       	call   c01023a0 <trap>
__trapret:
    # restore registers from stack
    popal

c0102fe4:	5c                   	pop    %esp

c0102fe5 <__trapret>:
    popl %fs
    popl %es
    popl %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102fe5:	61                   	popa   
    iret

c0102fe6:	0f a9                	pop    %gs
c0102fe8:	0f a1                	pop    %fs
c0102fea:	07                   	pop    %es
c0102feb:	1f                   	pop    %ds
c0102fec:	83 c4 08             	add    $0x8,%esp
c0102fef:	cf                   	iret   

c0102ff0 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0102ff0:	55                   	push   %ebp
c0102ff1:	89 e5                	mov    %esp,%ebp
c0102ff3:	50                   	push   %eax
c0102ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    ts.ts_esp0 = esp0;
c0102ffa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102ffd:	a3 38 48 11 c0       	mov    %eax,0xc0114838
}
c0103002:	83 c4 04             	add    $0x4,%esp
c0103005:	5d                   	pop    %ebp
c0103006:	c3                   	ret    
c0103007:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c010300e:	00 00 

c0103010 <alloc_pages>:
    pmm_manager->init_memmap(base, n);
}

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0103010:	55                   	push   %ebp
c0103011:	89 e5                	mov    %esp,%ebp
c0103013:	83 ec 18             	sub    $0x18,%esp
c0103016:	8b 45 08             	mov    0x8(%ebp),%eax
c0103019:	89 45 fc             	mov    %eax,-0x4(%ebp)
    struct Page *page=NULL;
c010301c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0103023:	e8 38 00 00 00       	call   c0103060 <__intr_save>
c0103028:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        page = pmm_manager->alloc_pages(n);
c010302b:	a1 24 49 11 c0       	mov    0xc0114924,%eax
c0103030:	8b 40 0c             	mov    0xc(%eax),%eax
c0103033:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0103036:	89 0c 24             	mov    %ecx,(%esp)
c0103039:	ff d0                	call   *%eax
c010303b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    }
    local_intr_restore(intr_flag);
c010303e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103041:	89 04 24             	mov    %eax,(%esp)
c0103044:	e8 57 00 00 00       	call   c01030a0 <__intr_restore>
    return page;
c0103049:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010304c:	83 c4 18             	add    $0x18,%esp
c010304f:	5d                   	pop    %ebp
c0103050:	c3                   	ret    
c0103051:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0103058:	0f 1f 84 00 00 00 00 
c010305f:	00 

c0103060 <__intr_save>:
__intr_save(void) {
c0103060:	55                   	push   %ebp
c0103061:	89 e5                	mov    %esp,%ebp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0103063:	83 ec 08             	sub    $0x8,%esp
c0103066:	9c                   	pushf  
c0103067:	58                   	pop    %eax
c0103068:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
c010306b:	8b 45 fc             	mov    -0x4(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010306e:	25 00 02 00 00       	and    $0x200,%eax
c0103073:	83 f8 00             	cmp    $0x0,%eax
c0103076:	0f 84 11 00 00 00    	je     c010308d <__intr_save+0x2d>
        intr_disable();
c010307c:	e8 9f ed ff ff       	call   c0101e20 <intr_disable>
        return 1;
c0103081:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
c0103088:	e9 07 00 00 00       	jmp    c0103094 <__intr_save+0x34>
    return 0;
c010308d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
c0103094:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103097:	83 c4 08             	add    $0x8,%esp
c010309a:	5d                   	pop    %ebp
c010309b:	c3                   	ret    
c010309c:	0f 1f 40 00          	nopl   0x0(%eax)

c01030a0 <__intr_restore>:
__intr_restore(bool flag) {
c01030a0:	55                   	push   %ebp
c01030a1:	89 e5                	mov    %esp,%ebp
c01030a3:	83 ec 08             	sub    $0x8,%esp
c01030a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01030a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (flag) {
c01030ac:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01030b0:	0f 84 05 00 00 00    	je     c01030bb <__intr_restore+0x1b>
        intr_enable();
c01030b6:	e8 55 ed ff ff       	call   c0101e10 <intr_enable>
}
c01030bb:	83 c4 08             	add    $0x8,%esp
c01030be:	5d                   	pop    %ebp
c01030bf:	c3                   	ret    

c01030c0 <free_pages>:
}

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01030c0:	55                   	push   %ebp
c01030c1:	89 e5                	mov    %esp,%ebp
c01030c3:	83 ec 18             	sub    $0x18,%esp
c01030c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01030c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01030cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c01030cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01030d2:	e8 89 ff ff ff       	call   c0103060 <__intr_save>
c01030d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01030da:	a1 24 49 11 c0       	mov    0xc0114924,%eax
c01030df:	8b 40 10             	mov    0x10(%eax),%eax
c01030e2:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01030e5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01030e8:	89 0c 24             	mov    %ecx,(%esp)
c01030eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01030ef:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01030f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01030f4:	89 04 24             	mov    %eax,(%esp)
c01030f7:	e8 a4 ff ff ff       	call   c01030a0 <__intr_restore>
}
c01030fc:	83 c4 18             	add    $0x18,%esp
c01030ff:	5d                   	pop    %ebp
c0103100:	c3                   	ret    
c0103101:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0103108:	0f 1f 84 00 00 00 00 
c010310f:	00 

c0103110 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0103110:	55                   	push   %ebp
c0103111:	89 e5                	mov    %esp,%ebp
c0103113:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0103116:	e8 45 ff ff ff       	call   c0103060 <__intr_save>
c010311b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010311e:	a1 24 49 11 c0       	mov    0xc0114924,%eax
c0103123:	ff 50 14             	call   *0x14(%eax)
c0103126:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
    local_intr_restore(intr_flag);
c0103129:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010312c:	89 04 24             	mov    %eax,(%esp)
c010312f:	e8 6c ff ff ff       	call   c01030a0 <__intr_restore>
    return ret;
c0103134:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103137:	83 c4 18             	add    $0x18,%esp
c010313a:	5d                   	pop    %ebp
c010313b:	c3                   	ret    
c010313c:	0f 1f 40 00          	nopl   0x0(%eax)

c0103140 <pmm_init>:
}

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0103140:	55                   	push   %ebp
c0103141:	89 e5                	mov    %esp,%ebp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0103143:	53                   	push   %ebx
c0103144:	57                   	push   %edi
c0103145:	56                   	push   %esi
c0103146:	83 ec 4c             	sub    $0x4c,%esp
c0103149:	e8 92 01 00 00       	call   c01032e0 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010314e:	e8 cd 01 00 00       	call   c0103320 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0103153:	e8 88 06 00 00       	call   c01037e0 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0103158:	e8 b3 06 00 00       	call   c0103810 <boot_alloc_page>
c010315d:	31 c9                	xor    %ecx,%ecx
c010315f:	ba 00 10 00 00       	mov    $0x1000,%edx
c0103164:	a3 30 48 11 c0       	mov    %eax,0xc0114830
    memset(boot_pgdir, 0, PGSIZE);
c0103169:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c010316e:	89 04 24             	mov    %eax,(%esp)
c0103171:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103178:	00 
c0103179:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0103180:	00 
c0103181:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0103184:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0103187:	e8 54 b2 00 00       	call   c010e3e0 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010318c:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c0103192:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0103195:	81 7d f0 00 00 00 c0 	cmpl   $0xc0000000,-0x10(%ebp)
c010319c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010319f:	0f 83 2f 00 00 00    	jae    c01031d4 <pmm_init+0x94>
c01031a5:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01031ab:	b9 31 01 00 00       	mov    $0x131,%ecx
c01031b0:	8d 15 0e f7 10 c0    	lea    0xc010f70e,%edx
c01031b6:	8b 75 f0             	mov    -0x10(%ebp),%esi
c01031b9:	89 04 24             	mov    %eax,(%esp)
c01031bc:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
c01031c3:	00 
c01031c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01031c8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01031cc:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c01031cf:	e8 7c d2 ff ff       	call   c0100450 <__panic>
c01031d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01031d7:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
c01031dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01031df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01031e2:	a3 28 49 11 c0       	mov    %eax,0xc0114928

    check_pgdir();
c01031e7:	e8 84 06 00 00       	call   c0103870 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01031ec:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01031f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01031f4:	81 7d e8 00 00 00 c0 	cmpl   $0xc0000000,-0x18(%ebp)
c01031fb:	0f 83 2f 00 00 00    	jae    c0103230 <pmm_init+0xf0>
c0103201:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103207:	b9 39 01 00 00       	mov    $0x139,%ecx
c010320c:	8d 15 0e f7 10 c0    	lea    0xc010f70e,%edx
c0103212:	8b 75 e8             	mov    -0x18(%ebp),%esi
c0103215:	89 04 24             	mov    %eax,(%esp)
c0103218:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010321f:	00 
c0103220:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103224:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103228:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010322b:	e8 20 d2 ff ff       	call   c0100450 <__panic>
c0103230:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
c0103235:	b9 00 00 00 38       	mov    $0x38000000,%ecx
c010323a:	31 d2                	xor    %edx,%edx
c010323c:	be 02 00 00 00       	mov    $0x2,%esi
c0103241:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0103244:	81 ef 00 00 00 c0    	sub    $0xc0000000,%edi
c010324a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010324d:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c0103250:	83 cf 01             	or     $0x1,%edi
c0103253:	83 cf 02             	or     $0x2,%edi
c0103256:	8b 1d 30 48 11 c0    	mov    0xc0114830,%ebx
c010325c:	89 bb ac 0f 00 00    	mov    %edi,0xfac(%ebx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0103262:	8b 3d 30 48 11 c0    	mov    0xc0114830,%edi
c0103268:	89 3c 24             	mov    %edi,(%esp)
c010326b:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0103272:	c0 
c0103273:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010327a:	38 
c010327b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103282:	00 
c0103283:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010328a:	00 
c010328b:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010328e:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c0103291:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0103294:	89 75 c0             	mov    %esi,-0x40(%ebp)
c0103297:	e8 04 10 00 00       	call   c01042a0 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010329c:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01032a1:	8b 80 00 0c 00 00    	mov    0xc00(%eax),%eax
c01032a7:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c01032ad:	89 01                	mov    %eax,(%ecx)

    enable_paging();
c01032af:	e8 8c 11 00 00       	call   c0104440 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01032b4:	e8 d7 11 00 00       	call   c0104490 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01032b9:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01032be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01032c4:	e8 b7 12 00 00       	call   c0104580 <check_boot_pgdir>

    print_pgdir();
c01032c9:	e8 e2 17 00 00       	call   c0104ab0 <print_pgdir>

}
c01032ce:	83 c4 4c             	add    $0x4c,%esp
c01032d1:	5e                   	pop    %esi
c01032d2:	5f                   	pop    %edi
c01032d3:	5b                   	pop    %ebx
c01032d4:	5d                   	pop    %ebp
c01032d5:	c3                   	ret    
c01032d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c01032dd:	00 00 00 

c01032e0 <init_pmm_manager>:
init_pmm_manager(void) {
c01032e0:	55                   	push   %ebp
c01032e1:	89 e5                	mov    %esp,%ebp
c01032e3:	83 ec 18             	sub    $0x18,%esp
c01032e6:	8d 05 f7 f7 10 c0    	lea    0xc010f7f7,%eax
c01032ec:	8d 0d 20 04 11 c0    	lea    0xc0110420,%ecx
    pmm_manager = &buddy_pmm_manager;
c01032f2:	89 0d 24 49 11 c0    	mov    %ecx,0xc0114924
    cprintf("memory management: %s\n", pmm_manager->name);
c01032f8:	8b 0d 24 49 11 c0    	mov    0xc0114924,%ecx
c01032fe:	8b 09                	mov    (%ecx),%ecx
c0103300:	89 04 24             	mov    %eax,(%esp)
c0103303:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0103307:	e8 34 cf ff ff       	call   c0100240 <cprintf>
    pmm_manager->init();
c010330c:	8b 0d 24 49 11 c0    	mov    0xc0114924,%ecx
c0103312:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0103315:	ff 51 04             	call   *0x4(%ecx)
}
c0103318:	83 c4 18             	add    $0x18,%esp
c010331b:	5d                   	pop    %ebp
c010331c:	c3                   	ret    
c010331d:	0f 1f 00             	nopl   (%eax)

c0103320 <page_init>:
page_init(void) {
c0103320:	55                   	push   %ebp
c0103321:	89 e5                	mov    %esp,%ebp
c0103323:	53                   	push   %ebx
c0103324:	57                   	push   %edi
c0103325:	56                   	push   %esi
c0103326:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
c010332c:	8d 05 0e f8 10 c0    	lea    0xc010f80e,%eax
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0103332:	c7 45 e8 00 80 00 c0 	movl   $0xc0008000,-0x18(%ebp)
    uint64_t maxpa = 0;
c0103339:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0103340:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    cprintf("e820map:\n");
c0103347:	89 04 24             	mov    %eax,(%esp)
c010334a:	e8 f1 ce ff ff       	call   c0100240 <cprintf>
    for (i = 0; i < memmap->nr_map; i ++) {
c010334f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103356:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
c010335c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010335f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0103362:	3b 01                	cmp    (%ecx),%eax
c0103364:	0f 8d 5b 01 00 00    	jge    c01034c5 <page_init+0x1a5>
c010336a:	8d 05 18 f8 10 c0    	lea    0xc010f818,%eax
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0103370:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0103373:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103376:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
c0103379:	8b 74 8a 04          	mov    0x4(%edx,%ecx,4),%esi
c010337d:	8b 4c 8a 08          	mov    0x8(%edx,%ecx,4),%ecx
c0103381:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c0103384:	89 75 d0             	mov    %esi,-0x30(%ebp)
c0103387:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010338a:	8b 7d e8             	mov    -0x18(%ebp),%edi
c010338d:	8d 14 92             	lea    (%edx,%edx,4),%edx
c0103390:	8b 5c 97 10          	mov    0x10(%edi,%edx,4),%ebx
c0103394:	8b 54 97 0c          	mov    0xc(%edi,%edx,4),%edx
c0103398:	01 d6                	add    %edx,%esi
c010339a:	11 d9                	adc    %ebx,%ecx
c010339c:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010339f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c01033a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01033a5:	8b 7d e8             	mov    -0x18(%ebp),%edi
c01033a8:	8d 14 92             	lea    (%edx,%edx,4),%edx
c01033ab:	8b 5c 97 10          	mov    0x10(%edi,%edx,4),%ebx
c01033af:	8b 54 97 0c          	mov    0xc(%edi,%edx,4),%edx
c01033b3:	8b 7d d0             	mov    -0x30(%ebp),%edi
c01033b6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c01033bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01033bf:	83 c6 ff             	add    $0xffffffff,%esi
c01033c2:	83 d1 ff             	adc    $0xffffffff,%ecx
c01033c5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c01033cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01033ce:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c01033d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01033d7:	83 c0 04             	add    $0x4,%eax
c01033da:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c01033e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
c01033e6:	6b c0 14             	imul   $0x14,%eax,%eax
c01033e9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c01033ef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
c01033f5:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
c01033fb:	8b 8d 58 ff ff ff    	mov    -0xa8(%ebp),%ecx
c0103401:	01 c8                	add    %ecx,%eax
c0103403:	8b 40 10             	mov    0x10(%eax),%eax
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0103406:	89 e1                	mov    %esp,%ecx
c0103408:	89 41 1c             	mov    %eax,0x1c(%ecx)
c010340b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
c0103411:	89 41 18             	mov    %eax,0x18(%ecx)
c0103414:	89 71 14             	mov    %esi,0x14(%ecx)
c0103417:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
c010341d:	89 71 10             	mov    %esi,0x10(%ecx)
c0103420:	89 79 0c             	mov    %edi,0xc(%ecx)
c0103423:	89 59 08             	mov    %ebx,0x8(%ecx)
c0103426:	89 51 04             	mov    %edx,0x4(%ecx)
c0103429:	c7 01 18 f8 10 c0    	movl   $0xc010f818,(%ecx)
c010342f:	e8 0c ce ff ff       	call   c0100240 <cprintf>
        if (memmap->map[i].type == E820_ARM) {
c0103434:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0103437:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010343a:	83 c2 04             	add    $0x4,%edx
c010343d:	6b c9 14             	imul   $0x14,%ecx,%ecx
c0103440:	01 ca                	add    %ecx,%edx
c0103442:	83 7a 10 01          	cmpl   $0x1,0x10(%edx)
c0103446:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
c010344c:	0f 85 60 00 00 00    	jne    c01034b2 <page_init+0x192>
            if (maxpa < end && begin < KMEMSIZE) {
c0103452:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103455:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0103458:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010345b:	8b 75 cc             	mov    -0x34(%ebp),%esi
c010345e:	29 d0                	sub    %edx,%eax
c0103460:	19 f1                	sbb    %esi,%ecx
c0103462:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c0103468:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c010346e:	0f 83 39 00 00 00    	jae    c01034ad <page_init+0x18d>
c0103474:	e9 00 00 00 00       	jmp    c0103479 <page_init+0x159>
c0103479:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010347c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010347f:	31 d2                	xor    %edx,%edx
c0103481:	be ff ff ff 37       	mov    $0x37ffffff,%esi
c0103486:	29 c6                	sub    %eax,%esi
c0103488:	19 ca                	sbb    %ecx,%edx
c010348a:	89 b5 44 ff ff ff    	mov    %esi,-0xbc(%ebp)
c0103490:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%ebp)
c0103496:	0f 82 11 00 00 00    	jb     c01034ad <page_init+0x18d>
c010349c:	e9 00 00 00 00       	jmp    c01034a1 <page_init+0x181>
                maxpa = end;
c01034a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01034a4:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01034a7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c01034aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
c01034ad:	e9 00 00 00 00       	jmp    c01034b2 <page_init+0x192>
    }
c01034b2:	e9 00 00 00 00       	jmp    c01034b7 <page_init+0x197>
    for (i = 0; i < memmap->nr_map; i ++) {
c01034b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01034ba:	83 c0 01             	add    $0x1,%eax
c01034bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01034c0:	e9 97 fe ff ff       	jmp    c010335c <page_init+0x3c>
    if (maxpa > KMEMSIZE) {
c01034c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01034c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01034cb:	2d 01 00 00 38       	sub    $0x38000001,%eax
c01034d0:	83 d9 00             	sbb    $0x0,%ecx
c01034d3:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
c01034d9:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
c01034df:	0f 82 13 00 00 00    	jb     c01034f8 <page_init+0x1d8>
c01034e5:	e9 00 00 00 00       	jmp    c01034ea <page_init+0x1ca>
        maxpa = KMEMSIZE;
c01034ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c01034f1:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01034f8:	8d 05 3c 49 11 c0    	lea    0xc011493c,%eax
    npage = maxpa / PGSIZE;
c01034fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0103501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103504:	0f a4 ca 14          	shld   $0x14,%ecx,%edx
c0103508:	89 15 2c 48 11 c0    	mov    %edx,0xc011482c
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010350e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
c0103515:	03 45 c4             	add    -0x3c(%ebp),%eax
c0103518:	83 e8 01             	sub    $0x1,%eax
c010351b:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010351e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103521:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0103524:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c010352a:	89 c8                	mov    %ecx,%eax
c010352c:	31 d2                	xor    %edx,%edx
c010352e:	f7 75 c4             	divl   -0x3c(%ebp)
c0103531:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
c0103537:	29 d1                	sub    %edx,%ecx
c0103539:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c010353c:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c010353f:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c0103542:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0103545:	89 0d 2c 49 11 c0    	mov    %ecx,0xc011492c
    for (i = 0; i < npage; i ++) {
c010354b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103552:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103555:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c010355b:	0f 83 2f 00 00 00    	jae    c0103590 <page_init+0x270>
        SetPageReserved(pages + i);
c0103561:	a1 2c 49 11 c0       	mov    0xc011492c,%eax
c0103566:	6b 4d dc 14          	imul   $0x14,-0x24(%ebp),%ecx
c010356a:	01 c8                	add    %ecx,%eax
c010356c:	83 c0 04             	add    $0x4,%eax
c010356f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103576:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103579:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010357c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010357f:	0f ab 08             	bts    %ecx,(%eax)
    for (i = 0; i < npage; i ++) {
c0103582:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103585:	83 c0 01             	add    $0x1,%eax
c0103588:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010358b:	e9 c2 ff ff ff       	jmp    c0103552 <page_init+0x232>
    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0103590:	a1 2c 49 11 c0       	mov    0xc011492c,%eax
c0103595:	6b 0d 2c 48 11 c0 14 	imul   $0x14,0xc011482c,%ecx
c010359c:	01 c8                	add    %ecx,%eax
c010359e:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01035a1:	81 7d b0 00 00 00 c0 	cmpl   $0xc0000000,-0x50(%ebp)
c01035a8:	0f 83 32 00 00 00    	jae    c01035e0 <page_init+0x2c0>
c01035ae:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01035b4:	b9 dc 00 00 00       	mov    $0xdc,%ecx
c01035b9:	8d 15 0e f7 10 c0    	lea    0xc010f70e,%edx
c01035bf:	8b 75 b0             	mov    -0x50(%ebp),%esi
c01035c2:	89 04 24             	mov    %eax,(%esp)
c01035c5:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01035cc:	00 
c01035cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01035d1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01035d5:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%ebp)
c01035db:	e8 70 ce ff ff       	call   c0100450 <__panic>
c01035e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01035e3:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
c01035e8:	89 45 ac             	mov    %eax,-0x54(%ebp)
c01035eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01035ee:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
c01035f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01035f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01035fb:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01035fe:	3b 01                	cmp    (%ecx),%eax
c0103600:	0f 8d c6 01 00 00    	jge    c01037cc <page_init+0x4ac>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0103606:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103609:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010360c:	8d 04 80             	lea    (%eax,%eax,4),%eax
c010360f:	8b 54 81 04          	mov    0x4(%ecx,%eax,4),%edx
c0103613:	8b 44 81 08          	mov    0x8(%ecx,%eax,4),%eax
c0103617:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010361a:	89 55 a0             	mov    %edx,-0x60(%ebp)
c010361d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0103620:	8b 75 e8             	mov    -0x18(%ebp),%esi
c0103623:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
c0103626:	8b 7c 8e 10          	mov    0x10(%esi,%ecx,4),%edi
c010362a:	8b 4c 8e 0c          	mov    0xc(%esi,%ecx,4),%ecx
c010362e:	01 ca                	add    %ecx,%edx
c0103630:	11 f8                	adc    %edi,%eax
c0103632:	89 55 98             	mov    %edx,-0x68(%ebp)
c0103635:	89 45 9c             	mov    %eax,-0x64(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0103638:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010363b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010363e:	83 c1 04             	add    $0x4,%ecx
c0103641:	6b c0 14             	imul   $0x14,%eax,%eax
c0103644:	01 c1                	add    %eax,%ecx
c0103646:	83 79 10 01          	cmpl   $0x1,0x10(%ecx)
c010364a:	0f 85 69 01 00 00    	jne    c01037b9 <page_init+0x499>
            if (begin < freemem) {
c0103650:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103653:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c0103656:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103659:	29 d0                	sub    %edx,%eax
c010365b:	83 d9 00             	sbb    $0x0,%ecx
c010365e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
c0103664:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
c010366a:	0f 83 12 00 00 00    	jae    c0103682 <page_init+0x362>
c0103670:	e9 00 00 00 00       	jmp    c0103675 <page_init+0x355>
                begin = freemem;
c0103675:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103678:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010367b:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
            if (end > KMEMSIZE) {
c0103682:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103685:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0103688:	2d 01 00 00 38       	sub    $0x38000001,%eax
c010368d:	83 d9 00             	sbb    $0x0,%ecx
c0103690:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
c0103696:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%ebp)
c010369c:	0f 82 13 00 00 00    	jb     c01036b5 <page_init+0x395>
c01036a2:	e9 00 00 00 00       	jmp    c01036a7 <page_init+0x387>
                end = KMEMSIZE;
c01036a7:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
c01036ae:	c7 45 98 00 00 00 38 	movl   $0x38000000,-0x68(%ebp)
            if (begin < end) {
c01036b5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01036b8:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c01036bb:	8b 55 98             	mov    -0x68(%ebp),%edx
c01036be:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01036c1:	29 d0                	sub    %edx,%eax
c01036c3:	19 f1                	sbb    %esi,%ecx
c01036c5:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%ebp)
c01036cb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
c01036d1:	0f 83 dd 00 00 00    	jae    c01037b4 <page_init+0x494>
c01036d7:	e9 00 00 00 00       	jmp    c01036dc <page_init+0x3bc>
                begin = ROUNDUP(begin, PGSIZE);
c01036dc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
c01036e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01036e6:	89 c1                	mov    %eax,%ecx
c01036e8:	81 c1 ff 0f 00 00    	add    $0xfff,%ecx
c01036ee:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c01036f1:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01036f4:	31 f6                	xor    %esi,%esi
c01036f6:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
c01036fc:	89 c8                	mov    %ecx,%eax
c01036fe:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%ebp)
c0103704:	89 f2                	mov    %esi,%edx
c0103706:	8b 8d 10 ff ff ff    	mov    -0xf0(%ebp),%ecx
c010370c:	f7 f1                	div    %ecx
c010370e:	f7 da                	neg    %edx
c0103710:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
c0103716:	8d 8c 10 ff 0f 00 00 	lea    0xfff(%eax,%edx,1),%ecx
c010371d:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0103720:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c0103723:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%ebp)
c010372a:	89 4d a0             	mov    %ecx,-0x60(%ebp)
c010372d:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0103734:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c0103737:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c010373d:	89 ca                	mov    %ecx,%edx
c010373f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0103745:	29 d1                	sub    %edx,%ecx
c0103747:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
c010374d:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%ebp)
c0103754:	00 00 00 
c0103757:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c010375a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
                if (begin < end) {
c0103761:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103764:	8b 75 a4             	mov    -0x5c(%ebp),%esi
c0103767:	29 ca                	sub    %ecx,%edx
c0103769:	83 de 00             	sbb    $0x0,%esi
c010376c:	89 95 0c ff ff ff    	mov    %edx,-0xf4(%ebp)
c0103772:	89 b5 08 ff ff ff    	mov    %esi,-0xf8(%ebp)
c0103778:	0f 83 31 00 00 00    	jae    c01037af <page_init+0x48f>
c010377e:	e9 00 00 00 00       	jmp    c0103783 <page_init+0x463>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0103783:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103786:	89 e1                	mov    %esp,%ecx
c0103788:	89 01                	mov    %eax,(%ecx)
c010378a:	e8 71 1c 00 00       	call   c0105400 <pa2page>
c010378f:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c0103792:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0103795:	8b 75 a0             	mov    -0x60(%ebp),%esi
c0103798:	8b 7d a4             	mov    -0x5c(%ebp),%edi
c010379b:	29 f1                	sub    %esi,%ecx
c010379d:	19 fa                	sbb    %edi,%edx
c010379f:	0f a4 ca 14          	shld   $0x14,%ecx,%edx
c01037a3:	89 04 24             	mov    %eax,(%esp)
c01037a6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01037aa:	e8 21 1c 00 00       	call   c01053d0 <init_memmap>
            }
c01037af:	e9 00 00 00 00       	jmp    c01037b4 <page_init+0x494>
        }
c01037b4:	e9 00 00 00 00       	jmp    c01037b9 <page_init+0x499>
    }
c01037b9:	e9 00 00 00 00       	jmp    c01037be <page_init+0x49e>
    for (i = 0; i < memmap->nr_map; i ++) {
c01037be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037c1:	83 c0 01             	add    $0x1,%eax
c01037c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01037c7:	e9 2c fe ff ff       	jmp    c01035f8 <page_init+0x2d8>
}
c01037cc:	81 c4 0c 01 00 00    	add    $0x10c,%esp
c01037d2:	5e                   	pop    %esi
c01037d3:	5f                   	pop    %edi
c01037d4:	5b                   	pop    %ebx
c01037d5:	5d                   	pop    %ebp
c01037d6:	c3                   	ret    
c01037d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c01037de:	00 00 

c01037e0 <check_alloc_page>:
        invlpg((void *)la);
    }
}

static void
check_alloc_page(void) {
c01037e0:	55                   	push   %ebp
c01037e1:	89 e5                	mov    %esp,%ebp
    pmm_manager->check();
c01037e3:	83 ec 08             	sub    $0x8,%esp
c01037e6:	a1 24 49 11 c0       	mov    0xc0114924,%eax
c01037eb:	ff 50 18             	call   *0x18(%eax)
c01037ee:	8d 05 e8 f8 10 c0    	lea    0xc010f8e8,%eax
    cprintf("check_alloc_page() succeeded!\n");
c01037f4:	89 04 24             	mov    %eax,(%esp)
c01037f7:	e8 44 ca ff ff       	call   c0100240 <cprintf>
}
c01037fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01037ff:	83 c4 08             	add    $0x8,%esp
c0103802:	5d                   	pop    %ebp
c0103803:	c3                   	ret    
c0103804:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010380b:	00 00 00 00 00 

c0103810 <boot_alloc_page>:
boot_alloc_page(void) {
c0103810:	55                   	push   %ebp
c0103811:	89 e5                	mov    %esp,%ebp
c0103813:	83 ec 18             	sub    $0x18,%esp
c0103816:	b8 01 00 00 00       	mov    $0x1,%eax
    struct Page *p = alloc_page();
c010381b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103822:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0103825:	e8 e6 f7 ff ff       	call   c0103010 <alloc_pages>
c010382a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (p == NULL) {
c010382d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103831:	0f 85 28 00 00 00    	jne    c010385f <boot_alloc_page+0x4f>
c0103837:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c010383d:	b9 17 01 00 00       	mov    $0x117,%ecx
c0103842:	8d 15 75 f8 10 c0    	lea    0xc010f875,%edx
        panic("boot_alloc_page failed.\n");
c0103848:	89 04 24             	mov    %eax,(%esp)
c010384b:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c0103852:	00 
c0103853:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103857:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010385a:	e8 f1 cb ff ff       	call   c0100450 <__panic>
    return page2kva(p);
c010385f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103862:	89 04 24             	mov    %eax,(%esp)
c0103865:	e8 f6 1b 00 00       	call   c0105460 <page2kva>
c010386a:	83 c4 18             	add    $0x18,%esp
c010386d:	5d                   	pop    %ebp
c010386e:	c3                   	ret    
c010386f:	90                   	nop

c0103870 <check_pgdir>:

static void
check_pgdir(void) {
c0103870:	55                   	push   %ebp
c0103871:	89 e5                	mov    %esp,%ebp
c0103873:	56                   	push   %esi
c0103874:	81 ec e4 00 00 00    	sub    $0xe4,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010387a:	81 3d 2c 48 11 c0 00 	cmpl   $0x38000,0xc011482c
c0103881:	80 03 00 
c0103884:	0f 86 32 00 00 00    	jbe    c01038bc <check_pgdir+0x4c>
c010388a:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103890:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
c0103895:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010389b:	8d 35 07 f9 10 c0    	lea    0xc010f907,%esi
c01038a1:	89 04 24             	mov    %eax,(%esp)
c01038a4:	c7 44 24 04 f7 01 00 	movl   $0x1f7,0x4(%esp)
c01038ab:	00 
c01038ac:	89 54 24 08          	mov    %edx,0x8(%esp)
c01038b0:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01038b4:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c01038b7:	e8 94 cb ff ff       	call   c0100450 <__panic>
c01038bc:	e9 00 00 00 00       	jmp    c01038c1 <check_pgdir+0x51>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01038c1:	e9 00 00 00 00       	jmp    c01038c6 <check_pgdir+0x56>
c01038c6:	83 3d 30 48 11 c0 00 	cmpl   $0x0,0xc0114830
c01038cd:	0f 84 13 00 00 00    	je     c01038e6 <check_pgdir+0x76>
c01038d3:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01038d8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01038dd:	83 f8 00             	cmp    $0x0,%eax
c01038e0:	0f 84 32 00 00 00    	je     c0103918 <check_pgdir+0xa8>
c01038e6:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01038ec:	b9 f8 01 00 00       	mov    $0x1f8,%ecx
c01038f1:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01038f7:	8d 35 22 f9 10 c0    	lea    0xc010f922,%esi
c01038fd:	89 04 24             	mov    %eax,(%esp)
c0103900:	c7 44 24 04 f8 01 00 	movl   $0x1f8,0x4(%esp)
c0103907:	00 
c0103908:	89 54 24 08          	mov    %edx,0x8(%esp)
c010390c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103910:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0103913:	e8 38 cb ff ff       	call   c0100450 <__panic>
c0103918:	e9 00 00 00 00       	jmp    c010391d <check_pgdir+0xad>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010391d:	e9 00 00 00 00       	jmp    c0103922 <check_pgdir+0xb2>
c0103922:	31 c0                	xor    %eax,%eax
c0103924:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c010392a:	89 0c 24             	mov    %ecx,(%esp)
c010392d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103934:	00 
c0103935:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010393c:	00 
c010393d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103940:	e8 2b 15 00 00       	call   c0104e70 <get_page>
c0103945:	83 f8 00             	cmp    $0x0,%eax
c0103948:	0f 84 32 00 00 00    	je     c0103980 <check_pgdir+0x110>
c010394e:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103954:	b9 f9 01 00 00       	mov    $0x1f9,%ecx
c0103959:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010395f:	8d 35 59 f9 10 c0    	lea    0xc010f959,%esi
c0103965:	89 04 24             	mov    %eax,(%esp)
c0103968:	c7 44 24 04 f9 01 00 	movl   $0x1f9,0x4(%esp)
c010396f:	00 
c0103970:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103974:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103978:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c010397b:	e8 d0 ca ff ff       	call   c0100450 <__panic>
c0103980:	e9 00 00 00 00       	jmp    c0103985 <check_pgdir+0x115>
c0103985:	b8 01 00 00 00       	mov    $0x1,%eax

    struct Page *p1, *p2;
    p1 = alloc_page();
c010398a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103991:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103994:	e8 77 f6 ff ff       	call   c0103010 <alloc_pages>
c0103999:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010399c:	31 c0                	xor    %eax,%eax
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010399e:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c01039a4:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01039a7:	89 0c 24             	mov    %ecx,(%esp)
c01039aa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01039ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01039b5:	00 
c01039b6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01039bd:	00 
c01039be:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01039c1:	e8 8a 16 00 00       	call   c0105050 <page_insert>
c01039c6:	83 f8 00             	cmp    $0x0,%eax
c01039c9:	0f 84 32 00 00 00    	je     c0103a01 <check_pgdir+0x191>
c01039cf:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01039d5:	b9 fd 01 00 00       	mov    $0x1fd,%ecx
c01039da:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01039e0:	8d 35 81 f9 10 c0    	lea    0xc010f981,%esi
c01039e6:	89 04 24             	mov    %eax,(%esp)
c01039e9:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c01039f0:	00 
c01039f1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01039f5:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01039f9:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c01039fc:	e8 4f ca ff ff       	call   c0100450 <__panic>
c0103a01:	e9 00 00 00 00       	jmp    c0103a06 <check_pgdir+0x196>
c0103a06:	31 c0                	xor    %eax,%eax

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0103a08:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c0103a0e:	89 0c 24             	mov    %ecx,(%esp)
c0103a11:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a18:	00 
c0103a19:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103a20:	00 
c0103a21:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0103a24:	e8 37 12 00 00       	call   c0104c60 <get_pte>
c0103a29:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a2c:	83 f8 00             	cmp    $0x0,%eax
c0103a2f:	0f 85 32 00 00 00    	jne    c0103a67 <check_pgdir+0x1f7>
c0103a35:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103a3b:	b9 00 02 00 00       	mov    $0x200,%ecx
c0103a40:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103a46:	8d 35 aa f9 10 c0    	lea    0xc010f9aa,%esi
c0103a4c:	89 04 24             	mov    %eax,(%esp)
c0103a4f:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c0103a56:	00 
c0103a57:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103a5b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103a5f:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c0103a62:	e8 e9 c9 ff ff       	call   c0100450 <__panic>
c0103a67:	e9 00 00 00 00       	jmp    c0103a6c <check_pgdir+0x1fc>
    assert(pte2page(*ptep) == p1);
c0103a6c:	e9 00 00 00 00       	jmp    c0103a71 <check_pgdir+0x201>
c0103a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a74:	8b 00                	mov    (%eax),%eax
c0103a76:	89 04 24             	mov    %eax,(%esp)
c0103a79:	e8 82 14 00 00       	call   c0104f00 <pte2page>
c0103a7e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0103a81:	0f 84 32 00 00 00    	je     c0103ab9 <check_pgdir+0x249>
c0103a87:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103a8d:	b9 01 02 00 00       	mov    $0x201,%ecx
c0103a92:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103a98:	8d 35 d7 f9 10 c0    	lea    0xc010f9d7,%esi
c0103a9e:	89 04 24             	mov    %eax,(%esp)
c0103aa1:	c7 44 24 04 01 02 00 	movl   $0x201,0x4(%esp)
c0103aa8:	00 
c0103aa9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103aad:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103ab1:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c0103ab4:	e8 97 c9 ff ff       	call   c0100450 <__panic>
c0103ab9:	e9 00 00 00 00       	jmp    c0103abe <check_pgdir+0x24e>
    assert(page_ref(p1) == 1);
c0103abe:	e9 00 00 00 00       	jmp    c0103ac3 <check_pgdir+0x253>
c0103ac3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103ac6:	89 04 24             	mov    %eax,(%esp)
c0103ac9:	e8 92 1a 00 00       	call   c0105560 <page_ref>
c0103ace:	83 f8 01             	cmp    $0x1,%eax
c0103ad1:	0f 84 32 00 00 00    	je     c0103b09 <check_pgdir+0x299>
c0103ad7:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103add:	b9 02 02 00 00       	mov    $0x202,%ecx
c0103ae2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103ae8:	8d 35 ed f9 10 c0    	lea    0xc010f9ed,%esi
c0103aee:	89 04 24             	mov    %eax,(%esp)
c0103af1:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
c0103af8:	00 
c0103af9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103afd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103b01:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c0103b04:	e8 47 c9 ff ff       	call   c0100450 <__panic>
c0103b09:	e9 00 00 00 00       	jmp    c0103b0e <check_pgdir+0x29e>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0103b0e:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c0103b13:	8b 00                	mov    (%eax),%eax
c0103b15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103b1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b20:	c1 e8 0c             	shr    $0xc,%eax
c0103b23:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103b26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b29:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c0103b2f:	0f 82 2f 00 00 00    	jb     c0103b64 <check_pgdir+0x2f4>
c0103b35:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103b3b:	b9 04 02 00 00       	mov    $0x204,%ecx
c0103b40:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c0103b46:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0103b49:	89 04 24             	mov    %eax,(%esp)
c0103b4c:	c7 44 24 04 04 02 00 	movl   $0x204,0x4(%esp)
c0103b53:	00 
c0103b54:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103b58:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103b5c:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c0103b5f:	e8 ec c8 ff ff       	call   c0100450 <__panic>
c0103b64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b67:	05 00 00 00 c0       	add    $0xc0000000,%eax
c0103b6c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103b6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b72:	83 c0 04             	add    $0x4,%eax
c0103b75:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b78:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103b7d:	31 c9                	xor    %ecx,%ecx
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0103b7f:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c0103b85:	89 14 24             	mov    %edx,(%esp)
c0103b88:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0103b8f:	00 
c0103b90:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103b97:	00 
c0103b98:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0103b9b:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c0103b9e:	e8 bd 10 00 00       	call   c0104c60 <get_pte>
c0103ba3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ba6:	0f 84 32 00 00 00    	je     c0103bde <check_pgdir+0x36e>
c0103bac:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103bb2:	b9 05 02 00 00       	mov    $0x205,%ecx
c0103bb7:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103bbd:	8d 35 ff f9 10 c0    	lea    0xc010f9ff,%esi
c0103bc3:	89 04 24             	mov    %eax,(%esp)
c0103bc6:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
c0103bcd:	00 
c0103bce:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103bd2:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103bd6:	89 4d a8             	mov    %ecx,-0x58(%ebp)
c0103bd9:	e8 72 c8 ff ff       	call   c0100450 <__panic>
c0103bde:	e9 00 00 00 00       	jmp    c0103be3 <check_pgdir+0x373>
c0103be3:	b8 01 00 00 00       	mov    $0x1,%eax

    p2 = alloc_page();
c0103be8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0103bf2:	e8 19 f4 ff ff       	call   c0103010 <alloc_pages>
c0103bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bfa:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103bff:	b9 06 00 00 00       	mov    $0x6,%ecx
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0103c04:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c0103c0a:	8b 75 f4             	mov    -0xc(%ebp),%esi
c0103c0d:	89 14 24             	mov    %edx,(%esp)
c0103c10:	89 74 24 04          	mov    %esi,0x4(%esp)
c0103c14:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0103c1b:	00 
c0103c1c:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0103c23:	00 
c0103c24:	89 45 a0             	mov    %eax,-0x60(%ebp)
c0103c27:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
c0103c2a:	e8 21 14 00 00       	call   c0105050 <page_insert>
c0103c2f:	83 f8 00             	cmp    $0x0,%eax
c0103c32:	0f 84 32 00 00 00    	je     c0103c6a <check_pgdir+0x3fa>
c0103c38:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103c3e:	b9 08 02 00 00       	mov    $0x208,%ecx
c0103c43:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103c49:	8d 35 26 fa 10 c0    	lea    0xc010fa26,%esi
c0103c4f:	89 04 24             	mov    %eax,(%esp)
c0103c52:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c0103c59:	00 
c0103c5a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103c5e:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103c62:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c0103c65:	e8 e6 c7 ff ff       	call   c0100450 <__panic>
c0103c6a:	e9 00 00 00 00       	jmp    c0103c6f <check_pgdir+0x3ff>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0103c6f:	e9 00 00 00 00       	jmp    c0103c74 <check_pgdir+0x404>
c0103c74:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103c79:	31 c9                	xor    %ecx,%ecx
c0103c7b:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c0103c81:	89 14 24             	mov    %edx,(%esp)
c0103c84:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0103c8b:	00 
c0103c8c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103c93:	00 
c0103c94:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0103c97:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c0103c9a:	e8 c1 0f 00 00       	call   c0104c60 <get_pte>
c0103c9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ca2:	83 f8 00             	cmp    $0x0,%eax
c0103ca5:	0f 85 32 00 00 00    	jne    c0103cdd <check_pgdir+0x46d>
c0103cab:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103cb1:	b9 09 02 00 00       	mov    $0x209,%ecx
c0103cb6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103cbc:	8d 35 5e fa 10 c0    	lea    0xc010fa5e,%esi
c0103cc2:	89 04 24             	mov    %eax,(%esp)
c0103cc5:	c7 44 24 04 09 02 00 	movl   $0x209,0x4(%esp)
c0103ccc:	00 
c0103ccd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103cd1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103cd5:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
c0103cd8:	e8 73 c7 ff ff       	call   c0100450 <__panic>
c0103cdd:	e9 00 00 00 00       	jmp    c0103ce2 <check_pgdir+0x472>
    assert(*ptep & PTE_U);
c0103ce2:	e9 00 00 00 00       	jmp    c0103ce7 <check_pgdir+0x477>
c0103ce7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cea:	8b 00                	mov    (%eax),%eax
c0103cec:	83 e0 04             	and    $0x4,%eax
c0103cef:	83 f8 00             	cmp    $0x0,%eax
c0103cf2:	0f 85 32 00 00 00    	jne    c0103d2a <check_pgdir+0x4ba>
c0103cf8:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103cfe:	b9 0a 02 00 00       	mov    $0x20a,%ecx
c0103d03:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103d09:	8d 35 8e fa 10 c0    	lea    0xc010fa8e,%esi
c0103d0f:	89 04 24             	mov    %eax,(%esp)
c0103d12:	c7 44 24 04 0a 02 00 	movl   $0x20a,0x4(%esp)
c0103d19:	00 
c0103d1a:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d1e:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103d22:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c0103d25:	e8 26 c7 ff ff       	call   c0100450 <__panic>
c0103d2a:	e9 00 00 00 00       	jmp    c0103d2f <check_pgdir+0x4bf>
    assert(*ptep & PTE_W);
c0103d2f:	e9 00 00 00 00       	jmp    c0103d34 <check_pgdir+0x4c4>
c0103d34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d37:	8b 00                	mov    (%eax),%eax
c0103d39:	83 e0 02             	and    $0x2,%eax
c0103d3c:	83 f8 00             	cmp    $0x0,%eax
c0103d3f:	0f 85 32 00 00 00    	jne    c0103d77 <check_pgdir+0x507>
c0103d45:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103d4b:	b9 0b 02 00 00       	mov    $0x20b,%ecx
c0103d50:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103d56:	8d 35 9c fa 10 c0    	lea    0xc010fa9c,%esi
c0103d5c:	89 04 24             	mov    %eax,(%esp)
c0103d5f:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c0103d66:	00 
c0103d67:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103d6b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103d6f:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c0103d72:	e8 d9 c6 ff ff       	call   c0100450 <__panic>
c0103d77:	e9 00 00 00 00       	jmp    c0103d7c <check_pgdir+0x50c>
    assert(boot_pgdir[0] & PTE_U);
c0103d7c:	e9 00 00 00 00       	jmp    c0103d81 <check_pgdir+0x511>
c0103d81:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c0103d86:	8b 00                	mov    (%eax),%eax
c0103d88:	83 e0 04             	and    $0x4,%eax
c0103d8b:	83 f8 00             	cmp    $0x0,%eax
c0103d8e:	0f 85 32 00 00 00    	jne    c0103dc6 <check_pgdir+0x556>
c0103d94:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103d9a:	b9 0c 02 00 00       	mov    $0x20c,%ecx
c0103d9f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103da5:	8d 35 aa fa 10 c0    	lea    0xc010faaa,%esi
c0103dab:	89 04 24             	mov    %eax,(%esp)
c0103dae:	c7 44 24 04 0c 02 00 	movl   $0x20c,0x4(%esp)
c0103db5:	00 
c0103db6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103dba:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103dbe:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0103dc1:	e8 8a c6 ff ff       	call   c0100450 <__panic>
c0103dc6:	e9 00 00 00 00       	jmp    c0103dcb <check_pgdir+0x55b>
    assert(page_ref(p2) == 1);
c0103dcb:	e9 00 00 00 00       	jmp    c0103dd0 <check_pgdir+0x560>
c0103dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dd3:	89 04 24             	mov    %eax,(%esp)
c0103dd6:	e8 85 17 00 00       	call   c0105560 <page_ref>
c0103ddb:	83 f8 01             	cmp    $0x1,%eax
c0103dde:	0f 84 35 00 00 00    	je     c0103e19 <check_pgdir+0x5a9>
c0103de4:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103dea:	b9 0d 02 00 00       	mov    $0x20d,%ecx
c0103def:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103df5:	8d 35 c0 fa 10 c0    	lea    0xc010fac0,%esi
c0103dfb:	89 04 24             	mov    %eax,(%esp)
c0103dfe:	c7 44 24 04 0d 02 00 	movl   $0x20d,0x4(%esp)
c0103e05:	00 
c0103e06:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103e0a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103e0e:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0103e14:	e8 37 c6 ff ff       	call   c0100450 <__panic>
c0103e19:	e9 00 00 00 00       	jmp    c0103e1e <check_pgdir+0x5ae>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0103e1e:	e9 00 00 00 00       	jmp    c0103e23 <check_pgdir+0x5b3>
c0103e23:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103e28:	31 c9                	xor    %ecx,%ecx
c0103e2a:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c0103e30:	8b 75 f8             	mov    -0x8(%ebp),%esi
c0103e33:	89 14 24             	mov    %edx,(%esp)
c0103e36:	89 74 24 04          	mov    %esi,0x4(%esp)
c0103e3a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0103e41:	00 
c0103e42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0103e49:	00 
c0103e4a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c0103e50:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
c0103e56:	e8 f5 11 00 00       	call   c0105050 <page_insert>
c0103e5b:	83 f8 00             	cmp    $0x0,%eax
c0103e5e:	0f 84 35 00 00 00    	je     c0103e99 <check_pgdir+0x629>
c0103e64:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103e6a:	b9 0f 02 00 00       	mov    $0x20f,%ecx
c0103e6f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103e75:	8d 35 d2 fa 10 c0    	lea    0xc010fad2,%esi
c0103e7b:	89 04 24             	mov    %eax,(%esp)
c0103e7e:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c0103e85:	00 
c0103e86:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103e8a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103e8e:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
c0103e94:	e8 b7 c5 ff ff       	call   c0100450 <__panic>
c0103e99:	e9 00 00 00 00       	jmp    c0103e9e <check_pgdir+0x62e>
    assert(page_ref(p1) == 2);
c0103e9e:	e9 00 00 00 00       	jmp    c0103ea3 <check_pgdir+0x633>
c0103ea3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0103ea6:	89 04 24             	mov    %eax,(%esp)
c0103ea9:	e8 b2 16 00 00       	call   c0105560 <page_ref>
c0103eae:	83 f8 02             	cmp    $0x2,%eax
c0103eb1:	0f 84 35 00 00 00    	je     c0103eec <check_pgdir+0x67c>
c0103eb7:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103ebd:	b9 10 02 00 00       	mov    $0x210,%ecx
c0103ec2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103ec8:	8d 35 fe fa 10 c0    	lea    0xc010fafe,%esi
c0103ece:	89 04 24             	mov    %eax,(%esp)
c0103ed1:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0103ed8:	00 
c0103ed9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103edd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103ee1:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
c0103ee7:	e8 64 c5 ff ff       	call   c0100450 <__panic>
c0103eec:	e9 00 00 00 00       	jmp    c0103ef1 <check_pgdir+0x681>
    assert(page_ref(p2) == 0);
c0103ef1:	e9 00 00 00 00       	jmp    c0103ef6 <check_pgdir+0x686>
c0103ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ef9:	89 04 24             	mov    %eax,(%esp)
c0103efc:	e8 5f 16 00 00       	call   c0105560 <page_ref>
c0103f01:	83 f8 00             	cmp    $0x0,%eax
c0103f04:	0f 84 35 00 00 00    	je     c0103f3f <check_pgdir+0x6cf>
c0103f0a:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103f10:	b9 11 02 00 00       	mov    $0x211,%ecx
c0103f15:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103f1b:	8d 35 07 06 11 c0    	lea    0xc0110607,%esi
c0103f21:	89 04 24             	mov    %eax,(%esp)
c0103f24:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0103f2b:	00 
c0103f2c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103f30:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103f34:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c0103f3a:	e8 11 c5 ff ff       	call   c0100450 <__panic>
c0103f3f:	e9 00 00 00 00       	jmp    c0103f44 <check_pgdir+0x6d4>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0103f44:	e9 00 00 00 00       	jmp    c0103f49 <check_pgdir+0x6d9>
c0103f49:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103f4e:	31 c9                	xor    %ecx,%ecx
c0103f50:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c0103f56:	89 14 24             	mov    %edx,(%esp)
c0103f59:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0103f60:	00 
c0103f61:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0103f68:	00 
c0103f69:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c0103f6f:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
c0103f75:	e8 e6 0c 00 00       	call   c0104c60 <get_pte>
c0103f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f7d:	83 f8 00             	cmp    $0x0,%eax
c0103f80:	0f 85 35 00 00 00    	jne    c0103fbb <check_pgdir+0x74b>
c0103f86:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103f8c:	b9 12 02 00 00       	mov    $0x212,%ecx
c0103f91:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103f97:	8d 35 5e fa 10 c0    	lea    0xc010fa5e,%esi
c0103f9d:	89 04 24             	mov    %eax,(%esp)
c0103fa0:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0103fa7:	00 
c0103fa8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0103fac:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0103fb0:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
c0103fb6:	e8 95 c4 ff ff       	call   c0100450 <__panic>
c0103fbb:	e9 00 00 00 00       	jmp    c0103fc0 <check_pgdir+0x750>
    assert(pte2page(*ptep) == p1);
c0103fc0:	e9 00 00 00 00       	jmp    c0103fc5 <check_pgdir+0x755>
c0103fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fc8:	8b 00                	mov    (%eax),%eax
c0103fca:	89 04 24             	mov    %eax,(%esp)
c0103fcd:	e8 2e 0f 00 00       	call   c0104f00 <pte2page>
c0103fd2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0103fd5:	0f 84 35 00 00 00    	je     c0104010 <check_pgdir+0x7a0>
c0103fdb:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0103fe1:	b9 13 02 00 00       	mov    $0x213,%ecx
c0103fe6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0103fec:	8d 35 d7 f9 10 c0    	lea    0xc010f9d7,%esi
c0103ff2:	89 04 24             	mov    %eax,(%esp)
c0103ff5:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c0103ffc:	00 
c0103ffd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104001:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104005:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
c010400b:	e8 40 c4 ff ff       	call   c0100450 <__panic>
c0104010:	e9 00 00 00 00       	jmp    c0104015 <check_pgdir+0x7a5>
    assert((*ptep & PTE_U) == 0);
c0104015:	e9 00 00 00 00       	jmp    c010401a <check_pgdir+0x7aa>
c010401a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010401d:	8b 00                	mov    (%eax),%eax
c010401f:	83 e0 04             	and    $0x4,%eax
c0104022:	83 f8 00             	cmp    $0x0,%eax
c0104025:	0f 84 35 00 00 00    	je     c0104060 <check_pgdir+0x7f0>
c010402b:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104031:	b9 14 02 00 00       	mov    $0x214,%ecx
c0104036:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010403c:	8d 35 10 fb 10 c0    	lea    0xc010fb10,%esi
c0104042:	89 04 24             	mov    %eax,(%esp)
c0104045:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c010404c:	00 
c010404d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104051:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104055:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
c010405b:	e8 f0 c3 ff ff       	call   c0100450 <__panic>
c0104060:	e9 00 00 00 00       	jmp    c0104065 <check_pgdir+0x7f5>
c0104065:	31 c0                	xor    %eax,%eax

    page_remove(boot_pgdir, 0x0);
c0104067:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c010406d:	89 0c 24             	mov    %ecx,(%esp)
c0104070:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104077:	00 
c0104078:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
c010407e:	e8 dd 0e 00 00       	call   c0104f60 <page_remove>
    assert(page_ref(p1) == 1);
c0104083:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104086:	89 04 24             	mov    %eax,(%esp)
c0104089:	e8 d2 14 00 00       	call   c0105560 <page_ref>
c010408e:	83 f8 01             	cmp    $0x1,%eax
c0104091:	0f 84 35 00 00 00    	je     c01040cc <check_pgdir+0x85c>
c0104097:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c010409d:	b9 17 02 00 00       	mov    $0x217,%ecx
c01040a2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01040a8:	8d 35 ed f9 10 c0    	lea    0xc010f9ed,%esi
c01040ae:	89 04 24             	mov    %eax,(%esp)
c01040b1:	c7 44 24 04 17 02 00 	movl   $0x217,0x4(%esp)
c01040b8:	00 
c01040b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01040bd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01040c1:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c01040c7:	e8 84 c3 ff ff       	call   c0100450 <__panic>
c01040cc:	e9 00 00 00 00       	jmp    c01040d1 <check_pgdir+0x861>
    assert(page_ref(p2) == 0);
c01040d1:	e9 00 00 00 00       	jmp    c01040d6 <check_pgdir+0x866>
c01040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040d9:	89 04 24             	mov    %eax,(%esp)
c01040dc:	e8 7f 14 00 00       	call   c0105560 <page_ref>
c01040e1:	83 f8 00             	cmp    $0x0,%eax
c01040e4:	0f 84 35 00 00 00    	je     c010411f <check_pgdir+0x8af>
c01040ea:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01040f0:	b9 18 02 00 00       	mov    $0x218,%ecx
c01040f5:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01040fb:	8d 35 07 06 11 c0    	lea    0xc0110607,%esi
c0104101:	89 04 24             	mov    %eax,(%esp)
c0104104:	c7 44 24 04 18 02 00 	movl   $0x218,0x4(%esp)
c010410b:	00 
c010410c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104110:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104114:	89 8d 48 ff ff ff    	mov    %ecx,-0xb8(%ebp)
c010411a:	e8 31 c3 ff ff       	call   c0100450 <__panic>
c010411f:	e9 00 00 00 00       	jmp    c0104124 <check_pgdir+0x8b4>
c0104124:	b8 00 10 00 00       	mov    $0x1000,%eax

    page_remove(boot_pgdir, PGSIZE);
c0104129:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c010412f:	89 0c 24             	mov    %ecx,(%esp)
c0104132:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104139:	00 
c010413a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c0104140:	e8 1b 0e 00 00       	call   c0104f60 <page_remove>
    assert(page_ref(p1) == 0);
c0104145:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104148:	89 04 24             	mov    %eax,(%esp)
c010414b:	e8 10 14 00 00       	call   c0105560 <page_ref>
c0104150:	83 f8 00             	cmp    $0x0,%eax
c0104153:	0f 84 35 00 00 00    	je     c010418e <check_pgdir+0x91e>
c0104159:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c010415f:	b9 1b 02 00 00       	mov    $0x21b,%ecx
c0104164:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010416a:	8d 35 25 fb 10 c0    	lea    0xc010fb25,%esi
c0104170:	89 04 24             	mov    %eax,(%esp)
c0104173:	c7 44 24 04 1b 02 00 	movl   $0x21b,0x4(%esp)
c010417a:	00 
c010417b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010417f:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104183:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
c0104189:	e8 c2 c2 ff ff       	call   c0100450 <__panic>
c010418e:	e9 00 00 00 00       	jmp    c0104193 <check_pgdir+0x923>
    assert(page_ref(p2) == 0);
c0104193:	e9 00 00 00 00       	jmp    c0104198 <check_pgdir+0x928>
c0104198:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010419b:	89 04 24             	mov    %eax,(%esp)
c010419e:	e8 bd 13 00 00       	call   c0105560 <page_ref>
c01041a3:	83 f8 00             	cmp    $0x0,%eax
c01041a6:	0f 84 35 00 00 00    	je     c01041e1 <check_pgdir+0x971>
c01041ac:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01041b2:	b9 1c 02 00 00       	mov    $0x21c,%ecx
c01041b7:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01041bd:	8d 35 07 06 11 c0    	lea    0xc0110607,%esi
c01041c3:	89 04 24             	mov    %eax,(%esp)
c01041c6:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c01041cd:	00 
c01041ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01041d2:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01041d6:	89 8d 3c ff ff ff    	mov    %ecx,-0xc4(%ebp)
c01041dc:	e8 6f c2 ff ff       	call   c0100450 <__panic>
c01041e1:	e9 00 00 00 00       	jmp    c01041e6 <check_pgdir+0x976>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01041e6:	e9 00 00 00 00       	jmp    c01041eb <check_pgdir+0x97b>
c01041eb:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01041f0:	8b 00                	mov    (%eax),%eax
c01041f2:	89 04 24             	mov    %eax,(%esp)
c01041f5:	e8 86 13 00 00       	call   c0105580 <pde2page>
c01041fa:	89 04 24             	mov    %eax,(%esp)
c01041fd:	e8 5e 13 00 00       	call   c0105560 <page_ref>
c0104202:	83 f8 01             	cmp    $0x1,%eax
c0104205:	0f 84 35 00 00 00    	je     c0104240 <check_pgdir+0x9d0>
c010420b:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104211:	b9 1e 02 00 00       	mov    $0x21e,%ecx
c0104216:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010421c:	8d 35 37 fb 10 c0    	lea    0xc010fb37,%esi
c0104222:	89 04 24             	mov    %eax,(%esp)
c0104225:	c7 44 24 04 1e 02 00 	movl   $0x21e,0x4(%esp)
c010422c:	00 
c010422d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104231:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104235:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
c010423b:	e8 10 c2 ff ff       	call   c0100450 <__panic>
c0104240:	e9 00 00 00 00       	jmp    c0104245 <check_pgdir+0x9d5>
    free_page(pde2page(boot_pgdir[0]));
c0104245:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c010424a:	8b 00                	mov    (%eax),%eax
c010424c:	89 04 24             	mov    %eax,(%esp)
c010424f:	e8 2c 13 00 00       	call   c0105580 <pde2page>
c0104254:	b9 01 00 00 00       	mov    $0x1,%ecx
c0104259:	89 04 24             	mov    %eax,(%esp)
c010425c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104263:	00 
c0104264:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
c010426a:	e8 51 ee ff ff       	call   c01030c0 <free_pages>
c010426f:	8d 05 5e fb 10 c0    	lea    0xc010fb5e,%eax
    boot_pgdir[0] = 0;
c0104275:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c010427b:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)

    cprintf("check_pgdir() succeeded!\n");
c0104281:	89 04 24             	mov    %eax,(%esp)
c0104284:	e8 b7 bf ff ff       	call   c0100240 <cprintf>
}
c0104289:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
c010428f:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c0104295:	5e                   	pop    %esi
c0104296:	5d                   	pop    %ebp
c0104297:	c3                   	ret    
c0104298:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010429f:	00 

c01042a0 <boot_map_segment>:
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01042a0:	55                   	push   %ebp
c01042a1:	89 e5                	mov    %esp,%ebp
c01042a3:	57                   	push   %edi
c01042a4:	56                   	push   %esi
c01042a5:	83 ec 60             	sub    $0x60,%esp
c01042a8:	8b 45 18             	mov    0x18(%ebp),%eax
c01042ab:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01042ae:	8b 55 10             	mov    0x10(%ebp),%edx
c01042b1:	8b 75 0c             	mov    0xc(%ebp),%esi
c01042b4:	8b 7d 08             	mov    0x8(%ebp),%edi
c01042b7:	89 7d f4             	mov    %edi,-0xc(%ebp)
c01042ba:	89 75 f0             	mov    %esi,-0x10(%ebp)
c01042bd:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01042c0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01042c3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(PGOFF(la) == PGOFF(pa));
c01042c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01042c9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01042ce:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01042d1:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
c01042d7:	39 c8                	cmp    %ecx,%eax
c01042d9:	0f 84 32 00 00 00    	je     c0104311 <boot_map_segment+0x71>
c01042df:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01042e5:	b9 05 01 00 00       	mov    $0x105,%ecx
c01042ea:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01042f0:	8d 35 a3 f8 10 c0    	lea    0xc010f8a3,%esi
c01042f6:	89 04 24             	mov    %eax,(%esp)
c01042f9:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0104300:	00 
c0104301:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104305:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104309:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c010430c:	e8 3f c1 ff ff       	call   c0100450 <__panic>
c0104311:	e9 00 00 00 00       	jmp    c0104316 <boot_map_segment+0x76>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0104316:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
c010431d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104320:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104323:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
c0104329:	01 c8                	add    %ecx,%eax
c010432b:	03 45 dc             	add    -0x24(%ebp),%eax
c010432e:	83 e8 01             	sub    $0x1,%eax
c0104331:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0104334:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104337:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010433a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010433d:	89 c8                	mov    %ecx,%eax
c010433f:	31 d2                	xor    %edx,%edx
c0104341:	f7 75 dc             	divl   -0x24(%ebp)
c0104344:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0104347:	29 d1                	sub    %edx,%ecx
c0104349:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010434c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010434f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0104352:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0104355:	c1 e9 0c             	shr    $0xc,%ecx
c0104358:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010435b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010435e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0104361:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0104364:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104367:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010436d:	29 d1                	sub    %edx,%ecx
c010436f:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c0104372:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0104375:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0104378:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010437b:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
c010437e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104381:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104384:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010438a:	29 d1                	sub    %edx,%ecx
c010438c:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010438f:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0104392:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0104395:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104399:	0f 86 98 00 00 00    	jbe    c0104437 <boot_map_segment+0x197>
c010439f:	b8 01 00 00 00       	mov    $0x1,%eax
        pte_t *ptep = get_pte(pgdir, la, 1);
c01043a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01043a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01043aa:	89 0c 24             	mov    %ecx,(%esp)
c01043ad:	89 54 24 04          	mov    %edx,0x4(%esp)
c01043b1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01043b8:	00 
c01043b9:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01043bc:	e8 9f 08 00 00       	call   c0104c60 <get_pte>
c01043c1:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(ptep != NULL);
c01043c4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01043c8:	0f 85 32 00 00 00    	jne    c0104400 <boot_map_segment+0x160>
c01043ce:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01043d4:	b9 0b 01 00 00       	mov    $0x10b,%ecx
c01043d9:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01043df:	8d 35 ba f8 10 c0    	lea    0xc010f8ba,%esi
c01043e5:	89 04 24             	mov    %eax,(%esp)
c01043e8:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01043ef:	00 
c01043f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01043f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01043f8:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c01043fb:	e8 50 c0 ff ff       	call   c0100450 <__panic>
c0104400:	e9 00 00 00 00       	jmp    c0104405 <boot_map_segment+0x165>
        *ptep = pa | PTE_P | perm;
c0104405:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104408:	83 c8 01             	or     $0x1,%eax
c010440b:	0b 45 e4             	or     -0x1c(%ebp),%eax
c010440e:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0104411:	89 01                	mov    %eax,(%ecx)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0104413:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104416:	83 c0 ff             	add    $0xffffffff,%eax
c0104419:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010441c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010441f:	05 00 10 00 00       	add    $0x1000,%eax
c0104424:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104427:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010442a:	05 00 10 00 00       	add    $0x1000,%eax
c010442f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104432:	e9 5e ff ff ff       	jmp    c0104395 <boot_map_segment+0xf5>
}
c0104437:	83 c4 60             	add    $0x60,%esp
c010443a:	5e                   	pop    %esi
c010443b:	5f                   	pop    %edi
c010443c:	5d                   	pop    %ebp
c010443d:	c3                   	ret    
c010443e:	66 90                	xchg   %ax,%ax

c0104440 <enable_paging>:
enable_paging(void) {
c0104440:	55                   	push   %ebp
c0104441:	89 e5                	mov    %esp,%ebp
    lcr3(boot_cr3);
c0104443:	83 ec 10             	sub    $0x10,%esp
c0104446:	a1 28 49 11 c0       	mov    0xc0114928,%eax
c010444b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010444e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104451:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0104454:	0f 20 c0             	mov    %cr0,%eax
c0104457:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return cr0;
c010445a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    uint32_t cr0 = rcr0();
c010445d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0104460:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104463:	0d 2f 00 05 80       	or     $0x8005002f,%eax
c0104468:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c010446b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010446e:	83 e0 f3             	and    $0xfffffff3,%eax
c0104471:	89 45 f0             	mov    %eax,-0x10(%ebp)
    lcr0(cr0);
c0104474:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104477:	89 45 fc             	mov    %eax,-0x4(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c010447a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010447d:	0f 22 c0             	mov    %eax,%cr0
}
c0104480:	83 c4 10             	add    $0x10,%esp
c0104483:	5d                   	pop    %ebp
c0104484:	c3                   	ret    
c0104485:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010448c:	00 00 00 00 

c0104490 <gdt_init>:
gdt_init(void) {
c0104490:	55                   	push   %ebp
c0104491:	89 e5                	mov    %esp,%ebp
c0104493:	53                   	push   %ebx
c0104494:	57                   	push   %edi
c0104495:	56                   	push   %esi
c0104496:	83 ec 1c             	sub    $0x1c,%esp
c0104499:	8d 05 c0 39 11 c0    	lea    0xc01139c0,%eax
    load_esp0((uintptr_t)bootstacktop);
c010449f:	89 e1                	mov    %esp,%ecx
c01044a1:	c7 01 00 30 11 c0    	movl   $0xc0113000,(%ecx)
c01044a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044aa:	e8 41 eb ff ff       	call   c0102ff0 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01044af:	66 c7 05 3c 48 11 c0 	movw   $0x10,0xc011483c
c01044b6:	10 00 
c01044b8:	b8 34 48 11 c0       	mov    $0xc0114834,%eax
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01044bd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01044c0:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01044c3:	66 c7 45 e8 68 00    	movw   $0x68,-0x18(%ebp)
c01044c9:	89 c2                	mov    %eax,%edx
c01044cb:	c1 e2 10             	shl    $0x10,%edx
c01044ce:	83 ca 68             	or     $0x68,%edx
c01044d1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01044d4:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01044d7:	81 e1 00 ff ff ff    	and    $0xffffff00,%ecx
c01044dd:	89 c6                	mov    %eax,%esi
c01044df:	c1 ee 10             	shr    $0x10,%esi
c01044e2:	89 f3                	mov    %esi,%ebx
c01044e4:	0f b6 f3             	movzbl %bl,%esi
c01044e7:	09 f1                	or     %esi,%ecx
c01044e9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01044ec:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01044ef:	81 e1 ff f0 ff ff    	and    $0xfffff0ff,%ecx
c01044f5:	81 c9 00 09 00 00    	or     $0x900,%ecx
c01044fb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01044fe:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0104501:	8a 5d ed             	mov    -0x13(%ebp),%bl
c0104504:	88 df                	mov    %bl,%bh
c0104506:	80 e7 ef             	and    $0xef,%bh
c0104509:	88 7d ed             	mov    %bh,-0x13(%ebp)
c010450c:	80 e3 8f             	and    $0x8f,%bl
c010450f:	88 5d ed             	mov    %bl,-0x13(%ebp)
c0104512:	80 cb 80             	or     $0x80,%bl
c0104515:	88 5d ed             	mov    %bl,-0x13(%ebp)
c0104518:	8a 5d ee             	mov    -0x12(%ebp),%bl
c010451b:	88 df                	mov    %bl,%bh
c010451d:	80 e7 f0             	and    $0xf0,%bh
c0104520:	88 7d ee             	mov    %bh,-0x12(%ebp)
c0104523:	88 df                	mov    %bl,%bh
c0104525:	80 e7 e0             	and    $0xe0,%bh
c0104528:	88 7d ee             	mov    %bh,-0x12(%ebp)
c010452b:	80 e3 c0             	and    $0xc0,%bl
c010452e:	88 5d ee             	mov    %bl,-0x12(%ebp)
c0104531:	80 cb 40             	or     $0x40,%bl
c0104534:	88 5d ee             	mov    %bl,-0x12(%ebp)
c0104537:	c6 45 ee 40          	movb   $0x40,-0x12(%ebp)
c010453b:	c1 e8 18             	shr    $0x18,%eax
c010453e:	88 c3                	mov    %al,%bl
c0104540:	88 5d ef             	mov    %bl,-0x11(%ebp)
c0104543:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104546:	a3 f0 39 11 c0       	mov    %eax,0xc01139f0
c010454b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010454e:	a3 f4 39 11 c0       	mov    %eax,0xc01139f4
    lgdt(&gdt_pd);
c0104553:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104556:	89 04 24             	mov    %eax,(%esp)
c0104559:	e8 82 0f 00 00       	call   c01054e0 <lgdt>
    ltr(GD_TSS);
c010455e:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104564:	66 8b 7d f2          	mov    -0xe(%ebp),%di
c0104568:	0f 00 df             	ltr    %di
}
c010456b:	83 c4 1c             	add    $0x1c,%esp
c010456e:	5e                   	pop    %esi
c010456f:	5f                   	pop    %edi
c0104570:	5b                   	pop    %ebx
c0104571:	5d                   	pop    %ebp
c0104572:	c3                   	ret    
c0104573:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010457a:	84 00 00 00 00 00 

c0104580 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0104580:	55                   	push   %ebp
c0104581:	89 e5                	mov    %esp,%ebp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0104583:	56                   	push   %esi
c0104584:	81 ec 94 00 00 00    	sub    $0x94,%esp
c010458a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104591:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104594:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c010459a:	0f 83 2c 01 00 00    	jae    c01046cc <check_boot_pgdir+0x14c>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01045a0:	e9 00 00 00 00       	jmp    c01045a5 <check_boot_pgdir+0x25>
c01045a5:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01045aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01045ad:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c01045b0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01045b3:	c1 e9 0c             	shr    $0xc,%ecx
c01045b6:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01045b9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01045bc:	3b 0d 2c 48 11 c0    	cmp    0xc011482c,%ecx
c01045c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01045c5:	0f 82 2f 00 00 00    	jb     c01045fa <check_boot_pgdir+0x7a>
c01045cb:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01045d1:	b9 2a 02 00 00       	mov    $0x22a,%ecx
c01045d6:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c01045dc:	8b 75 f0             	mov    -0x10(%ebp),%esi
c01045df:	89 04 24             	mov    %eax,(%esp)
c01045e2:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c01045e9:	00 
c01045ea:	89 54 24 08          	mov    %edx,0x8(%esp)
c01045ee:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01045f2:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c01045f5:	e8 56 be ff ff       	call   c0100450 <__panic>
c01045fa:	31 c0                	xor    %eax,%eax
c01045fc:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01045ff:	81 c1 00 00 00 c0    	add    $0xc0000000,%ecx
c0104605:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0104608:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010460b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010460e:	89 14 24             	mov    %edx,(%esp)
c0104611:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104615:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010461c:	00 
c010461d:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0104620:	e8 3b 06 00 00       	call   c0104c60 <get_pte>
c0104625:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0104628:	83 f8 00             	cmp    $0x0,%eax
c010462b:	0f 85 32 00 00 00    	jne    c0104663 <check_boot_pgdir+0xe3>
c0104631:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104637:	b9 2a 02 00 00       	mov    $0x22a,%ecx
c010463c:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104642:	8d 35 78 fb 10 c0    	lea    0xc010fb78,%esi
c0104648:	89 04 24             	mov    %eax,(%esp)
c010464b:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c0104652:	00 
c0104653:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104657:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010465b:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c010465e:	e8 ed bd ff ff       	call   c0100450 <__panic>
c0104663:	e9 00 00 00 00       	jmp    c0104668 <check_boot_pgdir+0xe8>
        assert(PTE_ADDR(*ptep) == i);
c0104668:	e9 00 00 00 00       	jmp    c010466d <check_boot_pgdir+0xed>
c010466d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104670:	8b 00                	mov    (%eax),%eax
c0104672:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104677:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010467a:	0f 84 32 00 00 00    	je     c01046b2 <check_boot_pgdir+0x132>
c0104680:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104686:	b9 2b 02 00 00       	mov    $0x22b,%ecx
c010468b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104691:	8d 35 b5 fb 10 c0    	lea    0xc010fbb5,%esi
c0104697:	89 04 24             	mov    %eax,(%esp)
c010469a:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c01046a1:	00 
c01046a2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01046a6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01046aa:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
c01046ad:	e8 9e bd ff ff       	call   c0100450 <__panic>
c01046b2:	e9 00 00 00 00       	jmp    c01046b7 <check_boot_pgdir+0x137>
    }
c01046b7:	e9 00 00 00 00       	jmp    c01046bc <check_boot_pgdir+0x13c>
    for (i = 0; i < npage; i += PGSIZE) {
c01046bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046bf:	05 00 10 00 00       	add    $0x1000,%eax
c01046c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046c7:	e9 c5 fe ff ff       	jmp    c0104591 <check_boot_pgdir+0x11>

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01046cc:	e9 00 00 00 00       	jmp    c01046d1 <check_boot_pgdir+0x151>
c01046d1:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c01046d6:	8b 80 ac 0f 00 00    	mov    0xfac(%eax),%eax
c01046dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01046e1:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c01046e7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c01046ea:	81 7d e4 00 00 00 c0 	cmpl   $0xc0000000,-0x1c(%ebp)
c01046f1:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01046f4:	0f 83 2f 00 00 00    	jae    c0104729 <check_boot_pgdir+0x1a9>
c01046fa:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104700:	b9 2e 02 00 00       	mov    $0x22e,%ecx
c0104705:	8d 15 0e f7 10 c0    	lea    0xc010f70e,%edx
c010470b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010470e:	89 04 24             	mov    %eax,(%esp)
c0104711:	c7 44 24 04 2e 02 00 	movl   $0x22e,0x4(%esp)
c0104718:	00 
c0104719:	89 54 24 08          	mov    %edx,0x8(%esp)
c010471d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104721:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c0104724:	e8 27 bd ff ff       	call   c0100450 <__panic>
c0104729:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010472c:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
c0104731:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104734:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0104737:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010473a:	0f 84 32 00 00 00    	je     c0104772 <check_boot_pgdir+0x1f2>
c0104740:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104746:	b9 2e 02 00 00       	mov    $0x22e,%ecx
c010474b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104751:	8d 35 ca fb 10 c0    	lea    0xc010fbca,%esi
c0104757:	89 04 24             	mov    %eax,(%esp)
c010475a:	c7 44 24 04 2e 02 00 	movl   $0x22e,0x4(%esp)
c0104761:	00 
c0104762:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104766:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010476a:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c010476d:	e8 de bc ff ff       	call   c0100450 <__panic>
c0104772:	e9 00 00 00 00       	jmp    c0104777 <check_boot_pgdir+0x1f7>

    assert(boot_pgdir[0] == 0);
c0104777:	e9 00 00 00 00       	jmp    c010477c <check_boot_pgdir+0x1fc>
c010477c:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c0104781:	83 38 00             	cmpl   $0x0,(%eax)
c0104784:	0f 84 32 00 00 00    	je     c01047bc <check_boot_pgdir+0x23c>
c010478a:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104790:	b9 30 02 00 00       	mov    $0x230,%ecx
c0104795:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010479b:	8d 35 fe fb 10 c0    	lea    0xc010fbfe,%esi
c01047a1:	89 04 24             	mov    %eax,(%esp)
c01047a4:	c7 44 24 04 30 02 00 	movl   $0x230,0x4(%esp)
c01047ab:	00 
c01047ac:	89 54 24 08          	mov    %edx,0x8(%esp)
c01047b0:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01047b4:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c01047b7:	e8 94 bc ff ff       	call   c0100450 <__panic>
c01047bc:	e9 00 00 00 00       	jmp    c01047c1 <check_boot_pgdir+0x241>
c01047c1:	b8 01 00 00 00       	mov    $0x1,%eax

    struct Page *p;
    p = alloc_page();
c01047c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01047cd:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01047d0:	e8 3b e8 ff ff       	call   c0103010 <alloc_pages>
c01047d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01047d8:	b8 00 01 00 00       	mov    $0x100,%eax
c01047dd:	b9 02 00 00 00       	mov    $0x2,%ecx
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01047e2:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c01047e8:	8b 75 dc             	mov    -0x24(%ebp),%esi
c01047eb:	89 14 24             	mov    %edx,(%esp)
c01047ee:	89 74 24 04          	mov    %esi,0x4(%esp)
c01047f2:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c01047f9:	00 
c01047fa:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0104801:	00 
c0104802:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0104805:	89 4d a8             	mov    %ecx,-0x58(%ebp)
c0104808:	e8 43 08 00 00       	call   c0105050 <page_insert>
c010480d:	83 f8 00             	cmp    $0x0,%eax
c0104810:	0f 84 32 00 00 00    	je     c0104848 <check_boot_pgdir+0x2c8>
c0104816:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c010481c:	b9 34 02 00 00       	mov    $0x234,%ecx
c0104821:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104827:	8d 35 11 fc 10 c0    	lea    0xc010fc11,%esi
c010482d:	89 04 24             	mov    %eax,(%esp)
c0104830:	c7 44 24 04 34 02 00 	movl   $0x234,0x4(%esp)
c0104837:	00 
c0104838:	89 54 24 08          	mov    %edx,0x8(%esp)
c010483c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104840:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c0104843:	e8 08 bc ff ff       	call   c0100450 <__panic>
c0104848:	e9 00 00 00 00       	jmp    c010484d <check_boot_pgdir+0x2cd>
    assert(page_ref(p) == 1);
c010484d:	e9 00 00 00 00       	jmp    c0104852 <check_boot_pgdir+0x2d2>
c0104852:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104855:	89 04 24             	mov    %eax,(%esp)
c0104858:	e8 03 0d 00 00       	call   c0105560 <page_ref>
c010485d:	83 f8 01             	cmp    $0x1,%eax
c0104860:	0f 84 32 00 00 00    	je     c0104898 <check_boot_pgdir+0x318>
c0104866:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c010486c:	b9 35 02 00 00       	mov    $0x235,%ecx
c0104871:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104877:	8d 35 3f fc 10 c0    	lea    0xc010fc3f,%esi
c010487d:	89 04 24             	mov    %eax,(%esp)
c0104880:	c7 44 24 04 35 02 00 	movl   $0x235,0x4(%esp)
c0104887:	00 
c0104888:	89 54 24 08          	mov    %edx,0x8(%esp)
c010488c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104890:	89 4d a0             	mov    %ecx,-0x60(%ebp)
c0104893:	e8 b8 bb ff ff       	call   c0100450 <__panic>
c0104898:	e9 00 00 00 00       	jmp    c010489d <check_boot_pgdir+0x31d>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c010489d:	e9 00 00 00 00       	jmp    c01048a2 <check_boot_pgdir+0x322>
c01048a2:	b8 00 11 00 00       	mov    $0x1100,%eax
c01048a7:	b9 02 00 00 00       	mov    $0x2,%ecx
c01048ac:	8b 15 30 48 11 c0    	mov    0xc0114830,%edx
c01048b2:	8b 75 dc             	mov    -0x24(%ebp),%esi
c01048b5:	89 14 24             	mov    %edx,(%esp)
c01048b8:	89 74 24 04          	mov    %esi,0x4(%esp)
c01048bc:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01048c3:	00 
c01048c4:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01048cb:	00 
c01048cc:	89 45 9c             	mov    %eax,-0x64(%ebp)
c01048cf:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c01048d2:	e8 79 07 00 00       	call   c0105050 <page_insert>
c01048d7:	83 f8 00             	cmp    $0x0,%eax
c01048da:	0f 84 32 00 00 00    	je     c0104912 <check_boot_pgdir+0x392>
c01048e0:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01048e6:	b9 36 02 00 00       	mov    $0x236,%ecx
c01048eb:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01048f1:	8d 35 50 fc 10 c0    	lea    0xc010fc50,%esi
c01048f7:	89 04 24             	mov    %eax,(%esp)
c01048fa:	c7 44 24 04 36 02 00 	movl   $0x236,0x4(%esp)
c0104901:	00 
c0104902:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104906:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010490a:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c010490d:	e8 3e bb ff ff       	call   c0100450 <__panic>
c0104912:	e9 00 00 00 00       	jmp    c0104917 <check_boot_pgdir+0x397>
    assert(page_ref(p) == 2);
c0104917:	e9 00 00 00 00       	jmp    c010491c <check_boot_pgdir+0x39c>
c010491c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010491f:	89 04 24             	mov    %eax,(%esp)
c0104922:	e8 39 0c 00 00       	call   c0105560 <page_ref>
c0104927:	83 f8 02             	cmp    $0x2,%eax
c010492a:	0f 84 32 00 00 00    	je     c0104962 <check_boot_pgdir+0x3e2>
c0104930:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104936:	b9 37 02 00 00       	mov    $0x237,%ecx
c010493b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104941:	8d 35 87 fc 10 c0    	lea    0xc010fc87,%esi
c0104947:	89 04 24             	mov    %eax,(%esp)
c010494a:	c7 44 24 04 37 02 00 	movl   $0x237,0x4(%esp)
c0104951:	00 
c0104952:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104956:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010495a:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c010495d:	e8 ee ba ff ff       	call   c0100450 <__panic>
c0104962:	e9 00 00 00 00       	jmp    c0104967 <check_boot_pgdir+0x3e7>
c0104967:	b8 00 01 00 00       	mov    $0x100,%eax
c010496c:	8d 0d 98 fc 10 c0    	lea    0xc010fc98,%ecx

    const char *str = "ucore: Hello world!!";
c0104972:	89 4d d8             	mov    %ecx,-0x28(%ebp)
    strcpy((void *)0x100, str);
c0104975:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0104978:	89 04 24             	mov    %eax,(%esp)
c010497b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010497f:	e8 8c 95 00 00       	call   c010df10 <strcpy>
c0104984:	89 45 8c             	mov    %eax,-0x74(%ebp)
c0104987:	b8 00 01 00 00       	mov    $0x100,%eax
c010498c:	b9 00 11 00 00       	mov    $0x1100,%ecx
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0104991:	89 04 24             	mov    %eax,(%esp)
c0104994:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104998:	e8 33 96 00 00       	call   c010dfd0 <strcmp>
c010499d:	83 f8 00             	cmp    $0x0,%eax
c01049a0:	0f 84 32 00 00 00    	je     c01049d8 <check_boot_pgdir+0x458>
c01049a6:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01049ac:	b9 3b 02 00 00       	mov    $0x23b,%ecx
c01049b1:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01049b7:	8d 35 ad fc 10 c0    	lea    0xc010fcad,%esi
c01049bd:	89 04 24             	mov    %eax,(%esp)
c01049c0:	c7 44 24 04 3b 02 00 	movl   $0x23b,0x4(%esp)
c01049c7:	00 
c01049c8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01049cc:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01049d0:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c01049d3:	e8 78 ba ff ff       	call   c0100450 <__panic>
c01049d8:	e9 00 00 00 00       	jmp    c01049dd <check_boot_pgdir+0x45d>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01049dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01049e0:	89 04 24             	mov    %eax,(%esp)
c01049e3:	e8 78 0a 00 00       	call   c0105460 <page2kva>
c01049e8:	c6 80 00 01 00 00 00 	movb   $0x0,0x100(%eax)
c01049ef:	b8 00 01 00 00       	mov    $0x100,%eax
    assert(strlen((const char *)0x100) == 0);
c01049f4:	89 04 24             	mov    %eax,(%esp)
c01049f7:	e8 64 94 00 00       	call   c010de60 <strlen>
c01049fc:	83 f8 00             	cmp    $0x0,%eax
c01049ff:	0f 84 32 00 00 00    	je     c0104a37 <check_boot_pgdir+0x4b7>
c0104a05:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104a0b:	b9 3e 02 00 00       	mov    $0x23e,%ecx
c0104a10:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0104a16:	8d 35 e2 fc 10 c0    	lea    0xc010fce2,%esi
c0104a1c:	89 04 24             	mov    %eax,(%esp)
c0104a1f:	c7 44 24 04 3e 02 00 	movl   $0x23e,0x4(%esp)
c0104a26:	00 
c0104a27:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104a2b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104a2f:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c0104a32:	e8 19 ba ff ff       	call   c0100450 <__panic>
c0104a37:	e9 00 00 00 00       	jmp    c0104a3c <check_boot_pgdir+0x4bc>
c0104a3c:	b8 01 00 00 00       	mov    $0x1,%eax

    free_page(p);
c0104a41:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0104a44:	89 0c 24             	mov    %ecx,(%esp)
c0104a47:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104a4e:	00 
c0104a4f:	89 45 80             	mov    %eax,-0x80(%ebp)
c0104a52:	e8 69 e6 ff ff       	call   c01030c0 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0104a57:	a1 30 48 11 c0       	mov    0xc0114830,%eax
c0104a5c:	8b 00                	mov    (%eax),%eax
c0104a5e:	89 04 24             	mov    %eax,(%esp)
c0104a61:	e8 1a 0b 00 00       	call   c0105580 <pde2page>
c0104a66:	b9 01 00 00 00       	mov    $0x1,%ecx
c0104a6b:	89 04 24             	mov    %eax,(%esp)
c0104a6e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104a75:	00 
c0104a76:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0104a7c:	e8 3f e6 ff ff       	call   c01030c0 <free_pages>
c0104a81:	8d 05 03 fd 10 c0    	lea    0xc010fd03,%eax
    boot_pgdir[0] = 0;
c0104a87:	8b 0d 30 48 11 c0    	mov    0xc0114830,%ecx
c0104a8d:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)

    cprintf("check_boot_pgdir() succeeded!\n");
c0104a93:	89 04 24             	mov    %eax,(%esp)
c0104a96:	e8 a5 b7 ff ff       	call   c0100240 <cprintf>
}
c0104a9b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c0104aa1:	81 c4 94 00 00 00    	add    $0x94,%esp
c0104aa7:	5e                   	pop    %esi
c0104aa8:	5d                   	pop    %ebp
c0104aa9:	c3                   	ret    
c0104aaa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0104ab0 <print_pgdir>:
    return 0;
}

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0104ab0:	55                   	push   %ebp
c0104ab1:	89 e5                	mov    %esp,%ebp
c0104ab3:	53                   	push   %ebx
c0104ab4:	57                   	push   %edi
c0104ab5:	56                   	push   %esi
c0104ab6:	83 ec 6c             	sub    $0x6c,%esp
c0104ab9:	8d 05 55 f7 10 c0    	lea    0xc010f755,%eax
    cprintf("-------------------- BEGIN --------------------\n");
c0104abf:	89 04 24             	mov    %eax,(%esp)
c0104ac2:	e8 79 b7 ff ff       	call   c0100240 <cprintf>
    size_t left, right = 0, perm;
c0104ac7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0104ace:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104ad1:	31 c0                	xor    %eax,%eax
c0104ad3:	b9 00 04 00 00       	mov    $0x400,%ecx
c0104ad8:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0104adb:	8d 75 ec             	lea    -0x14(%ebp),%esi
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0104ade:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0104ae1:	8b 1d fc f6 10 c0    	mov    0xc010f6fc,%ebx
c0104ae7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0104aee:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0104af5:	00 
c0104af6:	89 7c 24 08          	mov    %edi,0x8(%esp)
c0104afa:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0104afe:	89 54 24 10          	mov    %edx,0x10(%esp)
c0104b02:	89 74 24 14          	mov    %esi,0x14(%esp)
c0104b06:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104b09:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c0104b0c:	e8 0f 07 00 00       	call   c0105220 <get_pgtable_items>
c0104b11:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104b14:	83 f8 00             	cmp    $0x0,%eax
c0104b17:	0f 84 1c 01 00 00    	je     c0104c39 <print_pgdir+0x189>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0104b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b20:	2b 45 f0             	sub    -0x10(%ebp),%eax
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0104b23:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104b26:	c1 e1 16             	shl    $0x16,%ecx
c0104b29:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104b2c:	c1 e2 16             	shl    $0x16,%edx
c0104b2f:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0104b32:	2b 75 f0             	sub    -0x10(%ebp),%esi
c0104b35:	c1 e6 16             	shl    $0x16,%esi
c0104b38:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0104b3b:	89 3c 24             	mov    %edi,(%esp)
c0104b3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104b41:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0104b44:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0104b47:	89 75 c4             	mov    %esi,-0x3c(%ebp)
c0104b4a:	e8 11 08 00 00       	call   c0105360 <perm2str>
c0104b4f:	8d 0d 86 f7 10 c0    	lea    0xc010f786,%ecx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0104b55:	89 0c 24             	mov    %ecx,(%esp)
c0104b58:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0104b5b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104b5f:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0104b62:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104b66:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0104b69:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0104b6d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104b70:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0104b74:	89 44 24 14          	mov    %eax,0x14(%esp)
c0104b78:	e8 c3 b6 ff ff       	call   c0100240 <cprintf>
        size_t l, r = left * NPTEENTRY;
c0104b7d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104b80:	c1 e1 0a             	shl    $0xa,%ecx
c0104b83:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0104b86:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0104b89:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0104b8c:	8d 4d e0             	lea    -0x20(%ebp),%ecx
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0104b8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b92:	c1 e2 0a             	shl    $0xa,%edx
c0104b95:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0104b98:	c1 e6 0a             	shl    $0xa,%esi
c0104b9b:	8b 7d e0             	mov    -0x20(%ebp),%edi
c0104b9e:	8b 1d f8 f6 10 c0    	mov    0xc010f6f8,%ebx
c0104ba4:	89 14 24             	mov    %edx,(%esp)
c0104ba7:	89 74 24 04          	mov    %esi,0x4(%esp)
c0104bab:	89 7c 24 08          	mov    %edi,0x8(%esp)
c0104baf:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0104bb3:	89 44 24 10          	mov    %eax,0x10(%esp)
c0104bb7:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0104bbb:	e8 60 06 00 00       	call   c0105220 <get_pgtable_items>
c0104bc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104bc3:	83 f8 00             	cmp    $0x0,%eax
c0104bc6:	0f 84 68 00 00 00    	je     c0104c34 <print_pgdir+0x184>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0104bcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bcf:	2b 45 e4             	sub    -0x1c(%ebp),%eax
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0104bd2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0104bd5:	c1 e1 0c             	shl    $0xc,%ecx
c0104bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104bdb:	c1 e2 0c             	shl    $0xc,%edx
c0104bde:	8b 75 e0             	mov    -0x20(%ebp),%esi
c0104be1:	2b 75 e4             	sub    -0x1c(%ebp),%esi
c0104be4:	c1 e6 0c             	shl    $0xc,%esi
c0104be7:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0104bea:	89 3c 24             	mov    %edi,(%esp)
c0104bed:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104bf0:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c0104bf3:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0104bf6:	89 75 b0             	mov    %esi,-0x50(%ebp)
c0104bf9:	e8 62 07 00 00       	call   c0105360 <perm2str>
c0104bfe:	8d 0d a3 f7 10 c0    	lea    0xc010f7a3,%ecx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0104c04:	89 0c 24             	mov    %ecx,(%esp)
c0104c07:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0104c0a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104c0e:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0104c11:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0104c15:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0104c18:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0104c1c:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0104c1f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0104c23:	89 44 24 14          	mov    %eax,0x14(%esp)
c0104c27:	e8 14 b6 ff ff       	call   c0100240 <cprintf>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0104c2c:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0104c2f:	e9 55 ff ff ff       	jmp    c0104b89 <print_pgdir+0xd9>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0104c34:	e9 98 fe ff ff       	jmp    c0104ad1 <print_pgdir+0x21>
c0104c39:	8d 05 c6 f7 10 c0    	lea    0xc010f7c6,%eax
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0104c3f:	89 04 24             	mov    %eax,(%esp)
c0104c42:	e8 f9 b5 ff ff       	call   c0100240 <cprintf>
}
c0104c47:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0104c4a:	83 c4 6c             	add    $0x6c,%esp
c0104c4d:	5e                   	pop    %esi
c0104c4e:	5f                   	pop    %edi
c0104c4f:	5b                   	pop    %ebx
c0104c50:	5d                   	pop    %ebp
c0104c51:	c3                   	ret    
c0104c52:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0104c59:	1f 84 00 00 00 00 00 

c0104c60 <get_pte>:
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0104c60:	55                   	push   %ebp
c0104c61:	89 e5                	mov    %esp,%ebp
c0104c63:	56                   	push   %esi
c0104c64:	83 ec 64             	sub    $0x64,%esp
c0104c67:	8b 45 10             	mov    0x10(%ebp),%eax
c0104c6a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0104c6d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c70:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0104c73:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0104c76:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!(pgdir[PDX(la)] & PTE_P)) {
c0104c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c7c:	c1 e8 16             	shr    $0x16,%eax
c0104c7f:	25 ff 03 00 00       	and    $0x3ff,%eax
c0104c84:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0104c87:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0104c8a:	83 e0 01             	and    $0x1,%eax
c0104c8d:	83 f8 00             	cmp    $0x0,%eax
c0104c90:	0f 85 07 01 00 00    	jne    c0104d9d <get_pte+0x13d>
        if (!create || (page = alloc_page()) == NULL)
c0104c96:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104c9a:	0f 84 20 00 00 00    	je     c0104cc0 <get_pte+0x60>
c0104ca0:	b8 01 00 00 00       	mov    $0x1,%eax
c0104ca5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104cac:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104caf:	e8 5c e3 ff ff       	call   c0103010 <alloc_pages>
c0104cb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104cb7:	83 f8 00             	cmp    $0x0,%eax
c0104cba:	0f 85 0c 00 00 00    	jne    c0104ccc <get_pte+0x6c>
            return NULL;
c0104cc0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0104cc7:	e9 53 01 00 00       	jmp    c0104e1f <get_pte+0x1bf>
c0104ccc:	b8 01 00 00 00       	mov    $0x1,%eax
        set_page_ref(page, 1);
c0104cd1:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0104cd4:	89 0c 24             	mov    %ecx,(%esp)
c0104cd7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104cde:	00 
c0104cdf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0104ce2:	e8 49 01 00 00       	call   c0104e30 <set_page_ref>
        uintptr_t pa = page2pa(page);
c0104ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104cea:	89 04 24             	mov    %eax,(%esp)
c0104ced:	e8 5e 01 00 00       	call   c0104e50 <page2pa>
c0104cf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0104cf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104cf8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104cfb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104cfe:	c1 e8 0c             	shr    $0xc,%eax
c0104d01:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104d04:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104d07:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c0104d0d:	0f 82 2f 00 00 00    	jb     c0104d42 <get_pte+0xe2>
c0104d13:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104d19:	b9 86 01 00 00       	mov    $0x186,%ecx
c0104d1e:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c0104d24:	8b 75 e0             	mov    -0x20(%ebp),%esi
c0104d27:	89 04 24             	mov    %eax,(%esp)
c0104d2a:	c7 44 24 04 86 01 00 	movl   $0x186,0x4(%esp)
c0104d31:	00 
c0104d32:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104d36:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104d3a:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c0104d3d:	e8 0e b7 ff ff       	call   c0100450 <__panic>
c0104d42:	31 c0                	xor    %eax,%eax
c0104d44:	b9 00 10 00 00       	mov    $0x1000,%ecx
c0104d49:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104d4c:	81 c2 00 00 00 c0    	add    $0xc0000000,%edx
c0104d52:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104d55:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104d58:	89 14 24             	mov    %edx,(%esp)
c0104d5b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d62:	00 
c0104d63:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0104d6a:	00 
c0104d6b:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0104d6e:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c0104d71:	e8 6a 96 00 00       	call   c010e3e0 <memset>
        pgdir[PDX(la)] = (pa & ~0xFFF) | PTE_P | PTE_W | PTE_U;
c0104d76:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0104d79:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c0104d7f:	83 c9 01             	or     $0x1,%ecx
c0104d82:	83 c9 02             	or     $0x2,%ecx
c0104d85:	83 c9 04             	or     $0x4,%ecx
c0104d88:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d8b:	c1 ea 16             	shr    $0x16,%edx
c0104d8e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0104d94:	8b 75 f4             	mov    -0xc(%ebp),%esi
c0104d97:	89 0c 96             	mov    %ecx,(%esi,%edx,4)
c0104d9a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    return (pte_t *)KADDR(PDE_ADDR(pgdir[PDX(la)])) + PTX(la);
c0104d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da0:	c1 e8 16             	shr    $0x16,%eax
c0104da3:	25 ff 03 00 00       	and    $0x3ff,%eax
c0104da8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0104dab:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0104dae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104db3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0104db6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104db9:	c1 e8 0c             	shr    $0xc,%eax
c0104dbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104dbf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104dc2:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c0104dc8:	0f 82 2f 00 00 00    	jb     c0104dfd <get_pte+0x19d>
c0104dce:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c0104dd4:	b9 89 01 00 00       	mov    $0x189,%ecx
c0104dd9:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c0104ddf:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0104de2:	89 04 24             	mov    %eax,(%esp)
c0104de5:	c7 44 24 04 89 01 00 	movl   $0x189,0x4(%esp)
c0104dec:	00 
c0104ded:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104df1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0104df5:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c0104df8:	e8 53 b6 ff ff       	call   c0100450 <__panic>
c0104dfd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104e00:	05 00 00 00 c0       	add    $0xc0000000,%eax
c0104e05:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0104e08:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104e0b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104e0e:	c1 e9 0c             	shr    $0xc,%ecx
c0104e11:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
c0104e17:	c1 e1 02             	shl    $0x2,%ecx
c0104e1a:	01 c8                	add    %ecx,%eax
c0104e1c:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
c0104e1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104e22:	83 c4 64             	add    $0x64,%esp
c0104e25:	5e                   	pop    %esi
c0104e26:	5d                   	pop    %ebp
c0104e27:	c3                   	ret    
c0104e28:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c0104e2f:	00 

c0104e30 <set_page_ref>:
page_ref(struct Page *page) {
    return page->ref;
}

static inline void
set_page_ref(struct Page *page, int val) {
c0104e30:	55                   	push   %ebp
c0104e31:	89 e5                	mov    %esp,%ebp
c0104e33:	83 ec 08             	sub    $0x8,%esp
c0104e36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e39:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0104e3c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0104e3f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
c0104e42:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104e45:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0104e48:	89 01                	mov    %eax,(%ecx)
}
c0104e4a:	83 c4 08             	add    $0x8,%esp
c0104e4d:	5d                   	pop    %ebp
c0104e4e:	c3                   	ret    
c0104e4f:	90                   	nop

c0104e50 <page2pa>:
page2pa(struct Page *page) {
c0104e50:	55                   	push   %ebp
c0104e51:	89 e5                	mov    %esp,%ebp
c0104e53:	83 ec 08             	sub    $0x8,%esp
c0104e56:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e59:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
c0104e5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e5f:	89 04 24             	mov    %eax,(%esp)
c0104e62:	e8 c9 06 00 00       	call   c0105530 <page2ppn>
c0104e67:	c1 e0 0c             	shl    $0xc,%eax
c0104e6a:	83 c4 08             	add    $0x8,%esp
c0104e6d:	5d                   	pop    %ebp
c0104e6e:	c3                   	ret    
c0104e6f:	90                   	nop

c0104e70 <get_page>:
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0104e70:	55                   	push   %ebp
c0104e71:	89 e5                	mov    %esp,%ebp
c0104e73:	56                   	push   %esi
c0104e74:	83 ec 24             	sub    $0x24,%esp
c0104e77:	8b 45 10             	mov    0x10(%ebp),%eax
c0104e7a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0104e7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e80:	31 f6                	xor    %esi,%esi
c0104e82:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0104e85:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c0104e88:	89 45 ec             	mov    %eax,-0x14(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 0);
c0104e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e8e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0104e91:	89 04 24             	mov    %eax,(%esp)
c0104e94:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104e98:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104e9f:	00 
c0104ea0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c0104ea3:	e8 b8 fd ff ff       	call   c0104c60 <get_pte>
c0104ea8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (ptep_store != NULL) {
c0104eab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104eaf:	0f 84 08 00 00 00    	je     c0104ebd <get_page+0x4d>
        *ptep_store = ptep;
c0104eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104eb8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0104ebb:	89 01                	mov    %eax,(%ecx)
    if (ptep != NULL && *ptep & PTE_P) {
c0104ebd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104ec1:	0f 84 26 00 00 00    	je     c0104eed <get_page+0x7d>
c0104ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104eca:	8b 00                	mov    (%eax),%eax
c0104ecc:	83 e0 01             	and    $0x1,%eax
c0104ecf:	83 f8 00             	cmp    $0x0,%eax
c0104ed2:	0f 84 15 00 00 00    	je     c0104eed <get_page+0x7d>
        return pte2page(*ptep);
c0104ed8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104edb:	8b 00                	mov    (%eax),%eax
c0104edd:	89 04 24             	mov    %eax,(%esp)
c0104ee0:	e8 1b 00 00 00       	call   c0104f00 <pte2page>
c0104ee5:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0104ee8:	e9 07 00 00 00       	jmp    c0104ef4 <get_page+0x84>
    return NULL;
c0104eed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
}
c0104ef4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104ef7:	83 c4 24             	add    $0x24,%esp
c0104efa:	5e                   	pop    %esi
c0104efb:	5d                   	pop    %ebp
c0104efc:	c3                   	ret    
c0104efd:	0f 1f 00             	nopl   (%eax)

c0104f00 <pte2page>:
pte2page(pte_t pte) {
c0104f00:	55                   	push   %ebp
c0104f01:	89 e5                	mov    %esp,%ebp
c0104f03:	83 ec 18             	sub    $0x18,%esp
c0104f06:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (!(pte & PTE_P)) {
c0104f0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104f0f:	83 e0 01             	and    $0x1,%eax
c0104f12:	83 f8 00             	cmp    $0x0,%eax
c0104f15:	0f 85 28 00 00 00    	jne    c0104f43 <pte2page+0x43>
c0104f1b:	8d 05 48 f8 10 c0    	lea    0xc010f848,%eax
c0104f21:	b9 6c 00 00 00       	mov    $0x6c,%ecx
c0104f26:	8d 15 c7 f8 10 c0    	lea    0xc010f8c7,%edx
        panic("pte2page called with invalid pte");
c0104f2c:	89 04 24             	mov    %eax,(%esp)
c0104f2f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0104f36:	00 
c0104f37:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104f3b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0104f3e:	e8 0d b5 ff ff       	call   c0100450 <__panic>
    return pa2page(PTE_ADDR(pte));
c0104f43:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104f46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f4b:	89 04 24             	mov    %eax,(%esp)
c0104f4e:	e8 ad 04 00 00       	call   c0105400 <pa2page>
c0104f53:	83 c4 18             	add    $0x18,%esp
c0104f56:	5d                   	pop    %ebp
c0104f57:	c3                   	ret    
c0104f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c0104f5f:	00 

c0104f60 <page_remove>:
page_remove(pde_t *pgdir, uintptr_t la) {
c0104f60:	55                   	push   %ebp
c0104f61:	89 e5                	mov    %esp,%ebp
c0104f63:	83 ec 28             	sub    $0x28,%esp
c0104f66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f69:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0104f6c:	31 d2                	xor    %edx,%edx
c0104f6e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0104f71:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 0);
c0104f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104f77:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0104f7a:	89 04 24             	mov    %eax,(%esp)
c0104f7d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104f81:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104f88:	00 
c0104f89:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0104f8c:	e8 cf fc ff ff       	call   c0104c60 <get_pte>
c0104f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0104f94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f98:	0f 84 19 00 00 00    	je     c0104fb7 <page_remove+0x57>
        page_remove_pte(pgdir, la, ptep);
c0104f9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104fa1:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0104fa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104fa7:	89 04 24             	mov    %eax,(%esp)
c0104faa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0104fae:	89 54 24 08          	mov    %edx,0x8(%esp)
c0104fb2:	e8 09 00 00 00       	call   c0104fc0 <page_remove_pte>
}
c0104fb7:	83 c4 28             	add    $0x28,%esp
c0104fba:	5d                   	pop    %ebp
c0104fbb:	c3                   	ret    
c0104fbc:	0f 1f 40 00          	nopl   0x0(%eax)

c0104fc0 <page_remove_pte>:
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0104fc0:	55                   	push   %ebp
c0104fc1:	89 e5                	mov    %esp,%ebp
c0104fc3:	83 ec 28             	sub    $0x28,%esp
c0104fc6:	8b 45 10             	mov    0x10(%ebp),%eax
c0104fc9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0104fcc:	8b 55 08             	mov    0x8(%ebp),%edx
c0104fcf:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0104fd2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0104fd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (*ptep & PTE_P) {
c0104fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fdb:	8b 00                	mov    (%eax),%eax
c0104fdd:	83 e0 01             	and    $0x1,%eax
c0104fe0:	83 f8 00             	cmp    $0x0,%eax
c0104fe3:	0f 84 5a 00 00 00    	je     c0105043 <page_remove_pte+0x83>
        struct Page *page = pte2page(*ptep);
c0104fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fec:	8b 00                	mov    (%eax),%eax
c0104fee:	89 04 24             	mov    %eax,(%esp)
c0104ff1:	e8 0a ff ff ff       	call   c0104f00 <pte2page>
c0104ff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (page_ref_dec(page) == 0)
c0104ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ffc:	89 04 24             	mov    %eax,(%esp)
c0104fff:	e8 6c 01 00 00       	call   c0105170 <page_ref_dec>
c0105004:	83 f8 00             	cmp    $0x0,%eax
c0105007:	0f 85 1b 00 00 00    	jne    c0105028 <page_remove_pte+0x68>
c010500d:	b8 01 00 00 00       	mov    $0x1,%eax
            free_page(page);
c0105012:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0105015:	89 0c 24             	mov    %ecx,(%esp)
c0105018:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010501f:	00 
c0105020:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105023:	e8 98 e0 ff ff       	call   c01030c0 <free_pages>
        *ptep = 0;
c0105028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010502b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105031:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105034:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105037:	89 04 24             	mov    %eax,(%esp)
c010503a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010503e:	e8 4d 01 00 00       	call   c0105190 <tlb_invalidate>
}
c0105043:	83 c4 28             	add    $0x28,%esp
c0105046:	5d                   	pop    %ebp
c0105047:	c3                   	ret    
c0105048:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010504f:	00 

c0105050 <page_insert>:
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105050:	55                   	push   %ebp
c0105051:	89 e5                	mov    %esp,%ebp
c0105053:	57                   	push   %edi
c0105054:	56                   	push   %esi
c0105055:	83 ec 40             	sub    $0x40,%esp
c0105058:	8b 45 14             	mov    0x14(%ebp),%eax
c010505b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010505e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105061:	8b 75 08             	mov    0x8(%ebp),%esi
c0105064:	bf 01 00 00 00       	mov    $0x1,%edi
c0105069:	89 75 f0             	mov    %esi,-0x10(%ebp)
c010506c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010506f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0105072:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105075:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105078:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010507b:	89 04 24             	mov    %eax,(%esp)
c010507e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105082:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105089:	00 
c010508a:	89 7d d8             	mov    %edi,-0x28(%ebp)
c010508d:	e8 ce fb ff ff       	call   c0104c60 <get_pte>
c0105092:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (ptep == NULL) {
c0105095:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105099:	0f 85 0c 00 00 00    	jne    c01050ab <page_insert+0x5b>
        return -E_NO_MEM;
c010509f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
c01050a6:	e9 9b 00 00 00       	jmp    c0105146 <page_insert+0xf6>
    page_ref_inc(page);
c01050ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01050ae:	89 04 24             	mov    %eax,(%esp)
c01050b1:	e8 9a 00 00 00       	call   c0105150 <page_ref_inc>
    if (*ptep & PTE_P) {
c01050b6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01050b9:	8b 09                	mov    (%ecx),%ecx
c01050bb:	83 e1 01             	and    $0x1,%ecx
c01050be:	83 f9 00             	cmp    $0x0,%ecx
c01050c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01050c4:	0f 84 4d 00 00 00    	je     c0105117 <page_insert+0xc7>
        struct Page *p = pte2page(*ptep);
c01050ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01050cd:	8b 00                	mov    (%eax),%eax
c01050cf:	89 04 24             	mov    %eax,(%esp)
c01050d2:	e8 29 fe ff ff       	call   c0104f00 <pte2page>
c01050d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (p == page) {
c01050da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01050dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01050e0:	0f 85 13 00 00 00    	jne    c01050f9 <page_insert+0xa9>
            page_ref_dec(page);
c01050e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01050e9:	89 04 24             	mov    %eax,(%esp)
c01050ec:	e8 7f 00 00 00       	call   c0105170 <page_ref_dec>
        }
c01050f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01050f4:	e9 19 00 00 00       	jmp    c0105112 <page_insert+0xc2>
            page_remove_pte(pgdir, la, ptep);
c01050f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050fc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01050ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105102:	89 04 24             	mov    %eax,(%esp)
c0105105:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105109:	89 54 24 08          	mov    %edx,0x8(%esp)
c010510d:	e8 ae fe ff ff       	call   c0104fc0 <page_remove_pte>
    }
c0105112:	e9 00 00 00 00       	jmp    c0105117 <page_insert+0xc7>
    *ptep = page2pa(page) | PTE_P | perm;
c0105117:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010511a:	89 04 24             	mov    %eax,(%esp)
c010511d:	e8 2e fd ff ff       	call   c0104e50 <page2pa>
c0105122:	83 c8 01             	or     $0x1,%eax
c0105125:	0b 45 e4             	or     -0x1c(%ebp),%eax
c0105128:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010512b:	89 01                	mov    %eax,(%ecx)
    tlb_invalidate(pgdir, la);
c010512d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105130:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0105133:	89 04 24             	mov    %eax,(%esp)
c0105136:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010513a:	e8 51 00 00 00       	call   c0105190 <tlb_invalidate>
    return 0;
c010513f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
}
c0105146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105149:	83 c4 40             	add    $0x40,%esp
c010514c:	5e                   	pop    %esi
c010514d:	5f                   	pop    %edi
c010514e:	5d                   	pop    %ebp
c010514f:	c3                   	ret    

c0105150 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0105150:	55                   	push   %ebp
c0105151:	89 e5                	mov    %esp,%ebp
c0105153:	50                   	push   %eax
c0105154:	8b 45 08             	mov    0x8(%ebp),%eax
c0105157:	89 45 fc             	mov    %eax,-0x4(%ebp)
    page->ref += 1;
c010515a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010515d:	8b 08                	mov    (%eax),%ecx
c010515f:	83 c1 01             	add    $0x1,%ecx
c0105162:	89 08                	mov    %ecx,(%eax)
    return page->ref;
c0105164:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105167:	8b 00                	mov    (%eax),%eax
c0105169:	83 c4 04             	add    $0x4,%esp
c010516c:	5d                   	pop    %ebp
c010516d:	c3                   	ret    
c010516e:	66 90                	xchg   %ax,%ax

c0105170 <page_ref_dec>:
}

static inline int
page_ref_dec(struct Page *page) {
c0105170:	55                   	push   %ebp
c0105171:	89 e5                	mov    %esp,%ebp
c0105173:	50                   	push   %eax
c0105174:	8b 45 08             	mov    0x8(%ebp),%eax
c0105177:	89 45 fc             	mov    %eax,-0x4(%ebp)
    page->ref -= 1;
c010517a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010517d:	8b 08                	mov    (%eax),%ecx
c010517f:	83 e9 01             	sub    $0x1,%ecx
c0105182:	89 08                	mov    %ecx,(%eax)
    return page->ref;
c0105184:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105187:	8b 00                	mov    (%eax),%eax
c0105189:	83 c4 04             	add    $0x4,%esp
c010518c:	5d                   	pop    %ebp
c010518d:	c3                   	ret    
c010518e:	66 90                	xchg   %ax,%ax

c0105190 <tlb_invalidate>:
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105190:	55                   	push   %ebp
c0105191:	89 e5                	mov    %esp,%ebp
c0105193:	56                   	push   %esi
c0105194:	83 ec 34             	sub    $0x34,%esp
c0105197:	8b 45 0c             	mov    0xc(%ebp),%eax
c010519a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010519d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c01051a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01051a3:	0f 20 d8             	mov    %cr3,%eax
c01051a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr3;
c01051a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01051ac:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01051af:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01051b2:	81 7d e8 00 00 00 c0 	cmpl   $0xc0000000,-0x18(%ebp)
c01051b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01051bc:	0f 83 2f 00 00 00    	jae    c01051f1 <tlb_invalidate+0x61>
c01051c2:	8d 05 00 f7 10 c0    	lea    0xc010f700,%eax
c01051c8:	b9 ea 01 00 00       	mov    $0x1ea,%ecx
c01051cd:	8d 15 0e f7 10 c0    	lea    0xc010f70e,%edx
c01051d3:	8b 75 e8             	mov    -0x18(%ebp),%esi
c01051d6:	89 04 24             	mov    %eax,(%esp)
c01051d9:	c7 44 24 04 ea 01 00 	movl   $0x1ea,0x4(%esp)
c01051e0:	00 
c01051e1:	89 54 24 08          	mov    %edx,0x8(%esp)
c01051e5:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01051e9:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c01051ec:	e8 5f b2 ff ff       	call   c0100450 <__panic>
c01051f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01051f4:	2d 00 00 00 c0       	sub    $0xc0000000,%eax
c01051f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01051fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01051ff:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c0105202:	0f 85 0c 00 00 00    	jne    c0105214 <tlb_invalidate+0x84>
        invlpg((void *)la);
c0105208:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010520b:	89 45 f8             	mov    %eax,-0x8(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010520e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105211:	0f 01 38             	invlpg (%eax)
}
c0105214:	83 c4 34             	add    $0x34,%esp
c0105217:	5e                   	pop    %esi
c0105218:	5d                   	pop    %ebp
c0105219:	c3                   	ret    
c010521a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0105220 <get_pgtable_items>:
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0105220:	55                   	push   %ebp
c0105221:	89 e5                	mov    %esp,%ebp
c0105223:	53                   	push   %ebx
c0105224:	57                   	push   %edi
c0105225:	56                   	push   %esi
c0105226:	83 ec 24             	sub    $0x24,%esp
c0105229:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010522c:	8b 4d 18             	mov    0x18(%ebp),%ecx
c010522f:	8b 55 14             	mov    0x14(%ebp),%edx
c0105232:	8b 75 10             	mov    0x10(%ebp),%esi
c0105235:	8b 7d 0c             	mov    0xc(%ebp),%edi
c0105238:	8b 5d 08             	mov    0x8(%ebp),%ebx
c010523b:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c010523e:	89 7d e8             	mov    %edi,-0x18(%ebp)
c0105241:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c0105244:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0105247:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c010524a:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (start >= right) {
c010524d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105250:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0105253:	0f 82 0c 00 00 00    	jb     c0105265 <get_pgtable_items+0x45>
        return 0;
c0105259:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0105260:	e9 ed 00 00 00       	jmp    c0105352 <get_pgtable_items+0x132>
    while (start < right && !(table[start] & PTE_P)) {
c0105265:	e9 00 00 00 00       	jmp    c010526a <get_pgtable_items+0x4a>
c010526a:	31 c0                	xor    %eax,%eax
c010526c:	88 c1                	mov    %al,%cl
c010526e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105271:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0105274:	88 4d d3             	mov    %cl,-0x2d(%ebp)
c0105277:	0f 83 18 00 00 00    	jae    c0105295 <get_pgtable_items+0x75>
c010527d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105280:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105283:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0105286:	83 e0 01             	and    $0x1,%eax
c0105289:	83 f8 00             	cmp    $0x0,%eax
c010528c:	0f 95 c2             	setne  %dl
c010528f:	80 f2 ff             	xor    $0xff,%dl
c0105292:	88 55 d3             	mov    %dl,-0x2d(%ebp)
c0105295:	8a 45 d3             	mov    -0x2d(%ebp),%al
c0105298:	a8 01                	test   $0x1,%al
c010529a:	0f 85 05 00 00 00    	jne    c01052a5 <get_pgtable_items+0x85>
c01052a0:	e9 0e 00 00 00       	jmp    c01052b3 <get_pgtable_items+0x93>
        start ++;
c01052a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052a8:	83 c0 01             	add    $0x1,%eax
c01052ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
c01052ae:	e9 b7 ff ff ff       	jmp    c010526a <get_pgtable_items+0x4a>
    if (start < right) {
c01052b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052b6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01052b9:	0f 83 8c 00 00 00    	jae    c010534b <get_pgtable_items+0x12b>
        if (left_store != NULL) {
c01052bf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01052c3:	0f 84 08 00 00 00    	je     c01052d1 <get_pgtable_items+0xb1>
            *left_store = start;
c01052c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052cc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01052cf:	89 01                	mov    %eax,(%ecx)
        int perm = (table[start ++] & PTE_USER);
c01052d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052d4:	89 c1                	mov    %eax,%ecx
c01052d6:	83 c1 01             	add    $0x1,%ecx
c01052d9:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c01052dc:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01052df:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c01052e2:	83 e0 07             	and    $0x7,%eax
c01052e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01052e8:	31 c0                	xor    %eax,%eax
c01052ea:	88 c1                	mov    %al,%cl
        while (start < right && (table[start] & PTE_USER) == perm) {
c01052ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052ef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01052f2:	88 4d d2             	mov    %cl,-0x2e(%ebp)
c01052f5:	0f 83 15 00 00 00    	jae    c0105310 <get_pgtable_items+0xf0>
c01052fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01052fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105301:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0105304:	83 e0 07             	and    $0x7,%eax
c0105307:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010530a:	0f 94 c2             	sete   %dl
c010530d:	88 55 d2             	mov    %dl,-0x2e(%ebp)
c0105310:	8a 45 d2             	mov    -0x2e(%ebp),%al
c0105313:	a8 01                	test   $0x1,%al
c0105315:	0f 85 05 00 00 00    	jne    c0105320 <get_pgtable_items+0x100>
c010531b:	e9 0e 00 00 00       	jmp    c010532e <get_pgtable_items+0x10e>
            start ++;
c0105320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105323:	83 c0 01             	add    $0x1,%eax
c0105326:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0105329:	e9 ba ff ff ff       	jmp    c01052e8 <get_pgtable_items+0xc8>
        if (right_store != NULL) {
c010532e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105332:	0f 84 08 00 00 00    	je     c0105340 <get_pgtable_items+0x120>
            *right_store = start;
c0105338:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010533b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010533e:	89 01                	mov    %eax,(%ecx)
        return perm;
c0105340:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105343:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105346:	e9 07 00 00 00       	jmp    c0105352 <get_pgtable_items+0x132>
    return 0;
c010534b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
}
c0105352:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105355:	83 c4 24             	add    $0x24,%esp
c0105358:	5e                   	pop    %esi
c0105359:	5f                   	pop    %edi
c010535a:	5b                   	pop    %ebx
c010535b:	5d                   	pop    %ebp
c010535c:	c3                   	ret    
c010535d:	0f 1f 00             	nopl   (%eax)

c0105360 <perm2str>:
perm2str(int perm) {
c0105360:	55                   	push   %ebp
c0105361:	89 e5                	mov    %esp,%ebp
c0105363:	53                   	push   %ebx
c0105364:	57                   	push   %edi
c0105365:	56                   	push   %esi
c0105366:	50                   	push   %eax
c0105367:	8b 45 08             	mov    0x8(%ebp),%eax
c010536a:	8d 0d 9c 48 11 c0    	lea    0xc011489c,%ecx
c0105370:	ba 2d 00 00 00       	mov    $0x2d,%edx
c0105375:	be 77 00 00 00       	mov    $0x77,%esi
c010537a:	bf 75 00 00 00       	mov    $0x75,%edi
c010537f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0105382:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105385:	83 e0 04             	and    $0x4,%eax
c0105388:	83 f8 00             	cmp    $0x0,%eax
c010538b:	89 d0                	mov    %edx,%eax
c010538d:	0f 45 c7             	cmovne %edi,%eax
c0105390:	88 c3                	mov    %al,%bl
c0105392:	88 1d 9c 48 11 c0    	mov    %bl,0xc011489c
    str[1] = 'r';
c0105398:	c6 05 9d 48 11 c0 72 	movb   $0x72,0xc011489d
    str[2] = (perm & PTE_W) ? 'w' : '-';
c010539f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01053a2:	83 e0 02             	and    $0x2,%eax
c01053a5:	83 f8 00             	cmp    $0x0,%eax
c01053a8:	0f 45 d6             	cmovne %esi,%edx
c01053ab:	88 d3                	mov    %dl,%bl
c01053ad:	88 1d 9e 48 11 c0    	mov    %bl,0xc011489e
    str[3] = '\0';
c01053b3:	c6 05 9f 48 11 c0 00 	movb   $0x0,0xc011489f
    return str;
c01053ba:	89 c8                	mov    %ecx,%eax
c01053bc:	83 c4 04             	add    $0x4,%esp
c01053bf:	5e                   	pop    %esi
c01053c0:	5f                   	pop    %edi
c01053c1:	5b                   	pop    %ebx
c01053c2:	5d                   	pop    %ebp
c01053c3:	c3                   	ret    
c01053c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c01053cb:	00 00 00 00 00 

c01053d0 <init_memmap>:
init_memmap(struct Page *base, size_t n) {
c01053d0:	55                   	push   %ebp
c01053d1:	89 e5                	mov    %esp,%ebp
c01053d3:	83 ec 18             	sub    $0x18,%esp
c01053d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01053dc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c01053df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    pmm_manager->init_memmap(base, n);
c01053e2:	a1 24 49 11 c0       	mov    0xc0114924,%eax
c01053e7:	8b 40 08             	mov    0x8(%eax),%eax
c01053ea:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01053ed:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01053f0:	89 0c 24             	mov    %ecx,(%esp)
c01053f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01053f7:	ff d0                	call   *%eax
}
c01053f9:	83 c4 18             	add    $0x18,%esp
c01053fc:	5d                   	pop    %ebp
c01053fd:	c3                   	ret    
c01053fe:	66 90                	xchg   %ax,%ax

c0105400 <pa2page>:
pa2page(uintptr_t pa) {
c0105400:	55                   	push   %ebp
c0105401:	89 e5                	mov    %esp,%ebp
c0105403:	83 ec 18             	sub    $0x18,%esp
c0105406:	8b 45 08             	mov    0x8(%ebp),%eax
c0105409:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (PPN(pa) >= npage) {
c010540c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010540f:	c1 e8 0c             	shr    $0xc,%eax
c0105412:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c0105418:	0f 82 28 00 00 00    	jb     c0105446 <pa2page+0x46>
c010541e:	8d 05 48 f8 10 c0    	lea    0xc010f848,%eax
c0105424:	b9 5a 00 00 00       	mov    $0x5a,%ecx
c0105429:	8d 15 56 f8 10 c0    	lea    0xc010f856,%edx
        panic("pa2page called with invalid pa");
c010542f:	89 04 24             	mov    %eax,(%esp)
c0105432:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0105439:	00 
c010543a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010543e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0105441:	e8 0a b0 ff ff       	call   c0100450 <__panic>
    return &pages[PPN(pa)];
c0105446:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105449:	c1 e8 0c             	shr    $0xc,%eax
c010544c:	6b c0 14             	imul   $0x14,%eax,%eax
c010544f:	03 05 2c 49 11 c0    	add    0xc011492c,%eax
c0105455:	83 c4 18             	add    $0x18,%esp
c0105458:	5d                   	pop    %ebp
c0105459:	c3                   	ret    
c010545a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0105460 <page2kva>:
page2kva(struct Page *page) {
c0105460:	55                   	push   %ebp
c0105461:	89 e5                	mov    %esp,%ebp
c0105463:	56                   	push   %esi
c0105464:	83 ec 24             	sub    $0x24,%esp
c0105467:	8b 45 08             	mov    0x8(%ebp),%eax
c010546a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return KADDR(page2pa(page));
c010546d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105470:	89 04 24             	mov    %eax,(%esp)
c0105473:	e8 d8 f9 ff ff       	call   c0104e50 <page2pa>
c0105478:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010547b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010547e:	c1 e8 0c             	shr    $0xc,%eax
c0105481:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105484:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105487:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c010548d:	0f 82 2f 00 00 00    	jb     c01054c2 <page2kva+0x62>
c0105493:	8d 05 48 f8 10 c0    	lea    0xc010f848,%eax
c0105499:	b9 61 00 00 00       	mov    $0x61,%ecx
c010549e:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c01054a4:	8b 75 f4             	mov    -0xc(%ebp),%esi
c01054a7:	89 04 24             	mov    %eax,(%esp)
c01054aa:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c01054b1:	00 
c01054b2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01054b6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01054ba:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01054bd:	e8 8e af ff ff       	call   c0100450 <__panic>
c01054c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054c5:	05 00 00 00 c0       	add    $0xc0000000,%eax
c01054ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01054cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054d0:	83 c4 24             	add    $0x24,%esp
c01054d3:	5e                   	pop    %esi
c01054d4:	5d                   	pop    %ebp
c01054d5:	c3                   	ret    
c01054d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c01054dd:	00 00 00 

c01054e0 <lgdt>:
lgdt(struct pseudodesc *pd) {
c01054e0:	55                   	push   %ebp
c01054e1:	89 e5                	mov    %esp,%ebp
c01054e3:	50                   	push   %eax
c01054e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01054e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01054ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01054ed:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01054f0:	b8 23 00 00 00       	mov    $0x23,%eax
c01054f5:	66 8e e8             	mov    %ax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01054f8:	b8 23 00 00 00       	mov    $0x23,%eax
c01054fd:	66 8e e0             	mov    %ax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0105500:	b8 10 00 00 00       	mov    $0x10,%eax
c0105505:	66 8e c0             	mov    %ax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0105508:	b8 10 00 00 00       	mov    $0x10,%eax
c010550d:	66 8e d8             	mov    %ax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0105510:	b8 10 00 00 00       	mov    $0x10,%eax
c0105515:	66 8e d0             	mov    %ax,%ss
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0105518:	ea 1f 55 10 c0 08 00 	ljmp   $0x8,$0xc010551f
}
c010551f:	83 c4 04             	add    $0x4,%esp
c0105522:	5d                   	pop    %ebp
c0105523:	c3                   	ret    
c0105524:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010552b:	00 00 00 00 00 

c0105530 <page2ppn>:
page2ppn(struct Page *page) {
c0105530:	55                   	push   %ebp
c0105531:	89 e5                	mov    %esp,%ebp
c0105533:	50                   	push   %eax
c0105534:	8b 45 08             	mov    0x8(%ebp),%eax
c0105537:	b9 14 00 00 00       	mov    $0x14,%ecx
c010553c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
c010553f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105542:	8b 15 2c 49 11 c0    	mov    0xc011492c,%edx
c0105548:	29 d0                	sub    %edx,%eax
c010554a:	99                   	cltd   
c010554b:	f7 f9                	idiv   %ecx
c010554d:	83 c4 04             	add    $0x4,%esp
c0105550:	5d                   	pop    %ebp
c0105551:	c3                   	ret    
c0105552:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0105559:	1f 84 00 00 00 00 00 

c0105560 <page_ref>:
page_ref(struct Page *page) {
c0105560:	55                   	push   %ebp
c0105561:	89 e5                	mov    %esp,%ebp
c0105563:	50                   	push   %eax
c0105564:	8b 45 08             	mov    0x8(%ebp),%eax
c0105567:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
c010556a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010556d:	8b 00                	mov    (%eax),%eax
c010556f:	83 c4 04             	add    $0x4,%esp
c0105572:	5d                   	pop    %ebp
c0105573:	c3                   	ret    
c0105574:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010557b:	00 00 00 00 00 

c0105580 <pde2page>:
pde2page(pde_t pde) {
c0105580:	55                   	push   %ebp
c0105581:	89 e5                	mov    %esp,%ebp
c0105583:	83 ec 08             	sub    $0x8,%esp
c0105586:	8b 45 08             	mov    0x8(%ebp),%eax
c0105589:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return pa2page(PDE_ADDR(pde));
c010558c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010558f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105594:	89 04 24             	mov    %eax,(%esp)
c0105597:	e8 64 fe ff ff       	call   c0105400 <pa2page>
c010559c:	83 c4 08             	add    $0x8,%esp
c010559f:	5d                   	pop    %ebp
c01055a0:	c3                   	ret    
c01055a1:	66 90                	xchg   %ax,%ax
c01055a3:	66 90                	xchg   %ax,%ax
c01055a5:	66 90                	xchg   %ax,%ax
c01055a7:	66 90                	xchg   %ax,%ax
c01055a9:	66 90                	xchg   %ax,%ax
c01055ab:	66 90                	xchg   %ax,%ax
c01055ad:	66 90                	xchg   %ax,%ax
c01055af:	90                   	nop

c01055b0 <kmem_sized_index>:
    list_del(&(page->page_link));
    free_page(page);
}

int 
kmem_sized_index(size_t size) {
c01055b0:	55                   	push   %ebp
c01055b1:	89 e5                	mov    %esp,%ebp
c01055b3:	83 ec 28             	sub    $0x28,%esp
c01055b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01055b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // Round up 
    size_t rsize = ROUNDUP(size, 2);
c01055bc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c01055c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01055c6:	03 45 f4             	add    -0xc(%ebp),%eax
c01055c9:	83 e8 01             	sub    $0x1,%eax
c01055cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01055cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01055d2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01055d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01055d8:	89 c8                	mov    %ecx,%eax
c01055da:	31 d2                	xor    %edx,%edx
c01055dc:	f7 75 f4             	divl   -0xc(%ebp)
c01055df:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c01055e2:	29 d1                	sub    %edx,%ecx
c01055e4:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01055e7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01055ea:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c01055ed:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01055f0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    if (rsize < SIZED_CACHE_MIN)
c01055f3:	83 7d f8 10          	cmpl   $0x10,-0x8(%ebp)
c01055f7:	0f 83 07 00 00 00    	jae    c0105604 <kmem_sized_index+0x54>
        rsize = SIZED_CACHE_MIN;
c01055fd:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%ebp)
    // Find index
    int index = 0;
c0105604:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (int t = rsize / 32; t; t /= 2)
c010560b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010560e:	c1 e8 05             	shr    $0x5,%eax
c0105611:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105614:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105618:	0f 84 24 00 00 00    	je     c0105642 <kmem_sized_index+0x92>
        index ++;
c010561e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105621:	83 c0 01             	add    $0x1,%eax
c0105624:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105627:	b8 02 00 00 00       	mov    $0x2,%eax
    for (int t = rsize / 32; t; t /= 2)
c010562c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010562f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105632:	89 c8                	mov    %ecx,%eax
c0105634:	99                   	cltd   
c0105635:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0105638:	f7 f9                	idiv   %ecx
c010563a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010563d:	e9 d2 ff ff ff       	jmp    c0105614 <kmem_sized_index+0x64>
    return index;
c0105642:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105645:	83 c4 28             	add    $0x28,%esp
c0105648:	5d                   	pop    %ebp
c0105649:	c3                   	ret    
c010564a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0105650 <kmem_cache_create>:

// kmem_cache_create - create a kmem_cache
struct kmem_cache_t *
kmem_cache_create(const char *name, size_t size,
                       void (*ctor)(void*, struct kmem_cache_t *, size_t),
                       void (*dtor)(void*, struct kmem_cache_t *, size_t)) {
c0105650:	55                   	push   %ebp
c0105651:	89 e5                	mov    %esp,%ebp
c0105653:	53                   	push   %ebx
c0105654:	57                   	push   %edi
c0105655:	56                   	push   %esi
c0105656:	83 ec 5c             	sub    $0x5c,%esp
c0105659:	8b 45 14             	mov    0x14(%ebp),%eax
c010565c:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010565f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105662:	8b 75 08             	mov    0x8(%ebp),%esi
c0105665:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0105668:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010566b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010566e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    assert(size <= (PGSIZE - 2));
c0105671:	81 7d c4 fe 0f 00 00 	cmpl   $0xffe,-0x3c(%ebp)
c0105678:	0f 86 32 00 00 00    	jbe    c01056b0 <kmem_cache_create+0x60>
c010567e:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0105684:	b9 ba 00 00 00       	mov    $0xba,%ecx
c0105689:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010568f:	8d 35 31 fd 10 c0    	lea    0xc010fd31,%esi
c0105695:	89 04 24             	mov    %eax,(%esp)
c0105698:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c010569f:	00 
c01056a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01056a4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01056a8:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c01056ab:	e8 a0 ad ff ff       	call   c0100450 <__panic>
c01056b0:	e9 00 00 00 00       	jmp    c01056b5 <kmem_cache_create+0x65>
c01056b5:	8d 05 a0 48 11 c0    	lea    0xc01148a0,%eax
    struct kmem_cache_t *cachep = kmem_cache_alloc(&(cache_cache));
c01056bb:	89 04 24             	mov    %eax,(%esp)
c01056be:	e8 1d 01 00 00       	call   c01057e0 <kmem_cache_alloc>
c01056c3:	89 45 b8             	mov    %eax,-0x48(%ebp)
    if (cachep != NULL) {
c01056c6:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01056ca:	0f 84 fe 00 00 00    	je     c01057ce <kmem_cache_create+0x17e>
c01056d0:	b8 10 00 00 00       	mov    $0x10,%eax
c01056d5:	b9 00 10 00 00       	mov    $0x1000,%ecx
        cachep->objsize = size;
c01056da:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01056dd:	66 89 d6             	mov    %dx,%si
c01056e0:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01056e3:	66 89 72 18          	mov    %si,0x18(%edx)
        cachep->num = PGSIZE / (sizeof(int16_t) + size);
c01056e7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01056ea:	83 c2 02             	add    $0x2,%edx
c01056ed:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01056f0:	89 c8                	mov    %ecx,%eax
c01056f2:	31 c9                	xor    %ecx,%ecx
c01056f4:	89 55 ac             	mov    %edx,-0x54(%ebp)
c01056f7:	89 ca                	mov    %ecx,%edx
c01056f9:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c01056fc:	f7 f1                	div    %ecx
c01056fe:	66 89 c6             	mov    %ax,%si
c0105701:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105704:	66 89 70 1a          	mov    %si,0x1a(%eax)
        cachep->ctor = ctor;
c0105708:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010570b:	8b 7d b8             	mov    -0x48(%ebp),%edi
c010570e:	89 47 1c             	mov    %eax,0x1c(%edi)
        cachep->dtor = dtor;
c0105711:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105714:	8b 7d b8             	mov    -0x48(%ebp),%edi
c0105717:	89 47 20             	mov    %eax,0x20(%edi)
        memcpy(cachep->name, name, CACHE_NAMELEN);
c010571a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010571d:	83 c0 24             	add    $0x24,%eax
c0105720:	8b 7d c8             	mov    -0x38(%ebp),%edi
c0105723:	89 04 24             	mov    %eax,(%esp)
c0105726:	89 7c 24 04          	mov    %edi,0x4(%esp)
c010572a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0105731:	00 
c0105732:	e8 b9 8d 00 00       	call   c010e4f0 <memcpy>
c0105737:	8d 0d dc 48 11 c0    	lea    0xc01148dc,%ecx
        list_init(&(cachep->slabs_full));
c010573d:	8b 7d b8             	mov    -0x48(%ebp),%edi
c0105740:	89 7d cc             	mov    %edi,-0x34(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105743:	8b 7d cc             	mov    -0x34(%ebp),%edi
c0105746:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c0105749:	89 7b 04             	mov    %edi,0x4(%ebx)
c010574c:	8b 5d cc             	mov    -0x34(%ebp),%ebx
c010574f:	89 3b                	mov    %edi,(%ebx)
        list_init(&(cachep->slabs_partial));
c0105751:	8b 7d b8             	mov    -0x48(%ebp),%edi
c0105754:	83 c7 08             	add    $0x8,%edi
c0105757:	89 7d f0             	mov    %edi,-0x10(%ebp)
c010575a:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010575d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0105760:	89 7b 04             	mov    %edi,0x4(%ebx)
c0105763:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0105766:	89 3b                	mov    %edi,(%ebx)
        list_init(&(cachep->slabs_free));
c0105768:	8b 7d b8             	mov    -0x48(%ebp),%edi
c010576b:	83 c7 10             	add    $0x10,%edi
c010576e:	89 7d ec             	mov    %edi,-0x14(%ebp)
c0105771:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0105774:	8b 5d ec             	mov    -0x14(%ebp),%ebx
c0105777:	89 7b 04             	mov    %edi,0x4(%ebx)
c010577a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
c010577d:	89 3b                	mov    %edi,(%ebx)
        list_add(&(cache_chain), &(cachep->cache_link));
c010577f:	8b 7d b8             	mov    -0x48(%ebp),%edi
c0105782:	83 c7 34             	add    $0x34,%edi
c0105785:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c0105788:	89 7d d0             	mov    %edi,-0x30(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add(list_entry_t *listelm, list_entry_t *elm) {
    list_add_after(listelm, elm);
c010578b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010578e:	8b 7d d0             	mov    -0x30(%ebp),%edi
c0105791:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0105794:	89 7d d8             	mov    %edi,-0x28(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105797:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010579a:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010579d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
c01057a0:	8b 5b 04             	mov    0x4(%ebx),%ebx
c01057a3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01057a6:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c01057a9:	89 5d e0             	mov    %ebx,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01057ac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01057af:	8b 7d e0             	mov    -0x20(%ebp),%edi
c01057b2:	89 0f                	mov    %ecx,(%edi)
c01057b4:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c01057b7:	89 4f 04             	mov    %ecx,0x4(%edi)
    elm->next = next;
c01057ba:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01057bd:	8b 7d e8             	mov    -0x18(%ebp),%edi
c01057c0:	89 4f 04             	mov    %ecx,0x4(%edi)
    elm->prev = prev;
c01057c3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c01057c6:	8b 7d e8             	mov    -0x18(%ebp),%edi
c01057c9:	89 0f                	mov    %ecx,(%edi)
c01057cb:	89 45 a8             	mov    %eax,-0x58(%ebp)
    }
    return cachep;
c01057ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01057d1:	83 c4 5c             	add    $0x5c,%esp
c01057d4:	5e                   	pop    %esi
c01057d5:	5f                   	pop    %edi
c01057d6:	5b                   	pop    %ebx
c01057d7:	5d                   	pop    %ebp
c01057d8:	c3                   	ret    
c01057d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c01057e0 <kmem_cache_alloc>:
    kmem_cache_free(&(cache_cache), cachep);
}   

// kmem_cache_alloc - allocate an object
void *
kmem_cache_alloc(struct kmem_cache_t *cachep) {
c01057e0:	55                   	push   %ebp
c01057e1:	89 e5                	mov    %esp,%ebp
c01057e3:	56                   	push   %esi
c01057e4:	81 ec 84 00 00 00    	sub    $0x84,%esp
c01057ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01057ed:	89 45 a0             	mov    %eax,-0x60(%ebp)
    list_entry_t *le = NULL;
c01057f0:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
    // Find in partial list 
    if (!list_empty(&(cachep->slabs_partial)))
c01057f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01057fa:	83 c0 08             	add    $0x8,%eax
c01057fd:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return list->next == list;
c0105800:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105803:	8b 40 04             	mov    0x4(%eax),%eax
c0105806:	3b 45 a8             	cmp    -0x58(%ebp),%eax
c0105809:	0f 94 c1             	sete   %cl
c010580c:	80 e1 01             	and    $0x1,%cl
c010580f:	0f b6 c1             	movzbl %cl,%eax
c0105812:	83 f8 00             	cmp    $0x0,%eax
c0105815:	0f 85 17 00 00 00    	jne    c0105832 <kmem_cache_alloc+0x52>
        le = list_next(&(cachep->slabs_partial));
c010581b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010581e:	83 c0 08             	add    $0x8,%eax
c0105821:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c0105824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105827:	8b 40 04             	mov    0x4(%eax),%eax
c010582a:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010582d:	e9 56 00 00 00       	jmp    c0105888 <kmem_cache_alloc+0xa8>
    // Find in empty list 
    else {
        if (list_empty(&(cachep->slabs_free)) && kmem_cache_grow(cachep) == NULL)
c0105832:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105835:	83 c0 10             	add    $0x10,%eax
c0105838:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return list->next == list;
c010583b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010583e:	8b 40 04             	mov    0x4(%eax),%eax
c0105841:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0105844:	0f 94 c1             	sete   %cl
c0105847:	80 e1 01             	and    $0x1,%cl
c010584a:	0f b6 c1             	movzbl %cl,%eax
c010584d:	83 f8 00             	cmp    $0x0,%eax
c0105850:	0f 84 20 00 00 00    	je     c0105876 <kmem_cache_alloc+0x96>
c0105856:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105859:	89 04 24             	mov    %eax,(%esp)
c010585c:	e8 7f 05 00 00       	call   c0105de0 <kmem_cache_grow>
c0105861:	83 f8 00             	cmp    $0x0,%eax
c0105864:	0f 85 0c 00 00 00    	jne    c0105876 <kmem_cache_alloc+0x96>
            return NULL;
c010586a:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
c0105871:	e9 6a 01 00 00       	jmp    c01059e0 <kmem_cache_alloc+0x200>
        le = list_next(&(cachep->slabs_free));
c0105876:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105879:	83 c0 10             	add    $0x10,%eax
c010587c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return listelm->next;
c010587f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105882:	8b 40 04             	mov    0x4(%eax),%eax
c0105885:	89 45 9c             	mov    %eax,-0x64(%ebp)
c0105888:	31 c0                	xor    %eax,%eax
c010588a:	89 c1                	mov    %eax,%ecx
c010588c:	83 c1 0c             	add    $0xc,%ecx
c010588f:	29 c8                	sub    %ecx,%eax
    }
    // Alloc 
    list_del(le);
c0105891:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0105894:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0105897:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010589a:	8b 09                	mov    (%ecx),%ecx
c010589c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010589f:	8b 52 04             	mov    0x4(%edx),%edx
c01058a2:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c01058a5:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01058a8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01058ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01058ae:	89 4a 04             	mov    %ecx,0x4(%edx)
    next->prev = prev;
c01058b1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01058b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01058b7:	89 0a                	mov    %ecx,(%edx)
    struct slab_t *slab = le2slab(le, page_link);
c01058b9:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c01058bc:	01 c1                	add    %eax,%ecx
c01058be:	89 4d 98             	mov    %ecx,-0x68(%ebp)
    void *kva = slab2kva(slab);
c01058c1:	8b 45 98             	mov    -0x68(%ebp),%eax
c01058c4:	89 04 24             	mov    %eax,(%esp)
c01058c7:	e8 94 06 00 00       	call   c0105f60 <page2kva>
c01058cc:	89 45 94             	mov    %eax,-0x6c(%ebp)
    int16_t *bufctl = kva;
c01058cf:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01058d2:	89 45 90             	mov    %eax,-0x70(%ebp)
    void *buf = bufctl + cachep->num;
c01058d5:	8b 45 90             	mov    -0x70(%ebp),%eax
c01058d8:	8b 4d a0             	mov    -0x60(%ebp),%ecx
c01058db:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c01058df:	c1 e1 01             	shl    $0x1,%ecx
c01058e2:	01 c8                	add    %ecx,%eax
c01058e4:	89 45 8c             	mov    %eax,-0x74(%ebp)
    void *objp = buf + slab->free * cachep->objsize;
c01058e7:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01058ea:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c01058ed:	0f b7 49 0a          	movzwl 0xa(%ecx),%ecx
c01058f1:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01058f4:	0f b7 52 18          	movzwl 0x18(%edx),%edx
c01058f8:	0f af ca             	imul   %edx,%ecx
c01058fb:	01 c8                	add    %ecx,%eax
c01058fd:	89 45 88             	mov    %eax,-0x78(%ebp)
    // Update slab
    slab->inuse ++;
c0105900:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105903:	66 8b 70 08          	mov    0x8(%eax),%si
c0105907:	66 83 c6 01          	add    $0x1,%si
c010590b:	66 89 70 08          	mov    %si,0x8(%eax)
    slab->free = bufctl[slab->free];
c010590f:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105912:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
c0105916:	8b 4d 90             	mov    -0x70(%ebp),%ecx
c0105919:	66 8b 34 41          	mov    (%ecx,%eax,2),%si
c010591d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105920:	66 89 70 0a          	mov    %si,0xa(%eax)
    if (slab->inuse == cachep->num)
c0105924:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105927:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c010592b:	8b 4d a0             	mov    -0x60(%ebp),%ecx
c010592e:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c0105932:	39 c8                	cmp    %ecx,%eax
c0105934:	0f 85 51 00 00 00    	jne    c010598b <kmem_cache_alloc+0x1ab>
        list_add(&(cachep->slabs_full), le);
c010593a:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010593d:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0105940:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0105943:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    list_add_after(listelm, elm);
c0105946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105949:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010594c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010594f:	89 4d d0             	mov    %ecx,-0x30(%ebp)
    __list_add(elm, listelm, listelm->next);
c0105952:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105955:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0105958:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010595b:	8b 52 04             	mov    0x4(%edx),%edx
c010595e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105961:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0105964:	89 55 d8             	mov    %edx,-0x28(%ebp)
    prev->next = next->prev = elm;
c0105967:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010596a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010596d:	89 01                	mov    %eax,(%ecx)
c010596f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105972:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0105975:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105978:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010597b:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010597e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105981:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105984:	89 01                	mov    %eax,(%ecx)
c0105986:	e9 4f 00 00 00       	jmp    c01059da <kmem_cache_alloc+0x1fa>
    else 
        list_add(&(cachep->slabs_partial), le);
c010598b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010598e:	83 c0 08             	add    $0x8,%eax
c0105991:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0105994:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105997:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    list_add_after(listelm, elm);
c010599a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010599d:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c01059a0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01059a3:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    __list_add(elm, listelm, listelm->next);
c01059a6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01059a9:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c01059ac:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01059af:	8b 52 04             	mov    0x4(%edx),%edx
c01059b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01059b5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c01059b8:	89 55 bc             	mov    %edx,-0x44(%ebp)
    prev->next = next->prev = elm;
c01059bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01059be:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c01059c1:	89 01                	mov    %eax,(%ecx)
c01059c3:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c01059c6:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c01059c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01059cc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01059cf:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c01059d2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01059d5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01059d8:	89 01                	mov    %eax,(%ecx)
    return objp;
c01059da:	8b 45 88             	mov    -0x78(%ebp),%eax
c01059dd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
}
c01059e0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01059e3:	81 c4 84 00 00 00    	add    $0x84,%esp
c01059e9:	5e                   	pop    %esi
c01059ea:	5d                   	pop    %ebp
c01059eb:	c3                   	ret    
c01059ec:	0f 1f 40 00          	nopl   0x0(%eax)

c01059f0 <kmem_cache_destroy>:
kmem_cache_destroy(struct kmem_cache_t *cachep) {
c01059f0:	55                   	push   %ebp
c01059f1:	89 e5                	mov    %esp,%ebp
c01059f3:	83 ec 38             	sub    $0x38,%esp
c01059f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01059f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    head = &(cachep->slabs_full);
c01059fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01059ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
c0105a02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a05:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c0105a08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a0b:	8b 40 04             	mov    0x4(%eax),%eax
c0105a0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
c0105a11:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105a14:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105a17:	0f 84 37 00 00 00    	je     c0105a54 <kmem_cache_destroy+0x64>
c0105a1d:	31 c0                	xor    %eax,%eax
c0105a1f:	89 c1                	mov    %eax,%ecx
c0105a21:	83 c1 0c             	add    $0xc,%ecx
c0105a24:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
c0105a26:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105a29:	89 4d d8             	mov    %ecx,-0x28(%ebp)
        le = list_next(le);
c0105a2c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105a2f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0105a32:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105a35:	8b 49 04             	mov    0x4(%ecx),%ecx
c0105a38:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
c0105a3b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105a3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105a41:	01 c2                	add    %eax,%edx
c0105a43:	89 0c 24             	mov    %ecx,(%esp)
c0105a46:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105a4a:	e8 e1 00 00 00       	call   c0105b30 <kmem_slab_destroy>
    while (le != head) {
c0105a4f:	e9 bd ff ff ff       	jmp    c0105a11 <kmem_cache_destroy+0x21>
    head = &(cachep->slabs_partial);
c0105a54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a57:	83 c0 08             	add    $0x8,%eax
c0105a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
c0105a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a60:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a66:	8b 40 04             	mov    0x4(%eax),%eax
c0105a69:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
c0105a6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105a6f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105a72:	0f 84 37 00 00 00    	je     c0105aaf <kmem_cache_destroy+0xbf>
c0105a78:	31 c0                	xor    %eax,%eax
c0105a7a:	89 c1                	mov    %eax,%ecx
c0105a7c:	83 c1 0c             	add    $0xc,%ecx
c0105a7f:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
c0105a81:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105a84:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
        le = list_next(le);
c0105a87:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105a8a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0105a8d:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0105a90:	8b 49 04             	mov    0x4(%ecx),%ecx
c0105a93:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
c0105a96:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105a99:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105a9c:	01 c2                	add    %eax,%edx
c0105a9e:	89 0c 24             	mov    %ecx,(%esp)
c0105aa1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105aa5:	e8 86 00 00 00       	call   c0105b30 <kmem_slab_destroy>
    while (le != head) {
c0105aaa:	e9 bd ff ff ff       	jmp    c0105a6c <kmem_cache_destroy+0x7c>
    head = &(cachep->slabs_free);
c0105aaf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ab2:	83 c0 10             	add    $0x10,%eax
c0105ab5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    le = list_next(head);
c0105ab8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105abb:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0105abe:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105ac1:	8b 40 04             	mov    0x4(%eax),%eax
c0105ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
    while (le != head) {
c0105ac7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105aca:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105acd:	0f 84 37 00 00 00    	je     c0105b0a <kmem_cache_destroy+0x11a>
c0105ad3:	31 c0                	xor    %eax,%eax
c0105ad5:	89 c1                	mov    %eax,%ecx
c0105ad7:	83 c1 0c             	add    $0xc,%ecx
c0105ada:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
c0105adc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105adf:	89 4d d0             	mov    %ecx,-0x30(%ebp)
        le = list_next(le);
c0105ae2:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105ae5:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0105ae8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0105aeb:	8b 49 04             	mov    0x4(%ecx),%ecx
c0105aee:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
c0105af1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105af4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105af7:	01 c2                	add    %eax,%edx
c0105af9:	89 0c 24             	mov    %ecx,(%esp)
c0105afc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105b00:	e8 2b 00 00 00       	call   c0105b30 <kmem_slab_destroy>
    while (le != head) {
c0105b05:	e9 bd ff ff ff       	jmp    c0105ac7 <kmem_cache_destroy+0xd7>
c0105b0a:	8d 05 a0 48 11 c0    	lea    0xc01148a0,%eax
    kmem_cache_free(&(cache_cache), cachep);
c0105b10:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105b13:	89 04 24             	mov    %eax,(%esp)
c0105b16:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105b1a:	e8 21 01 00 00       	call   c0105c40 <kmem_cache_free>
}   
c0105b1f:	83 c4 38             	add    $0x38,%esp
c0105b22:	5d                   	pop    %ebp
c0105b23:	c3                   	ret    
c0105b24:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0105b2b:	00 00 00 00 00 

c0105b30 <kmem_slab_destroy>:
kmem_slab_destroy(struct kmem_cache_t *cachep, struct slab_t *slab) {
c0105b30:	55                   	push   %ebp
c0105b31:	89 e5                	mov    %esp,%ebp
c0105b33:	56                   	push   %esi
c0105b34:	83 ec 34             	sub    $0x34,%esp
c0105b37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0105b3d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0105b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct Page *page = (struct Page *) slab;
c0105b43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105b46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int16_t *bufctl = page2kva(page);
c0105b49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b4c:	89 04 24             	mov    %eax,(%esp)
c0105b4f:	e8 0c 04 00 00       	call   c0105f60 <page2kva>
c0105b54:	89 45 e0             	mov    %eax,-0x20(%ebp)
    void *buf = bufctl + cachep->num;
c0105b57:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105b5a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105b5d:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c0105b61:	c1 e1 01             	shl    $0x1,%ecx
c0105b64:	01 c8                	add    %ecx,%eax
c0105b66:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (cachep->dtor)
c0105b69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b6c:	83 78 20 00          	cmpl   $0x0,0x20(%eax)
c0105b70:	0f 84 5e 00 00 00    	je     c0105bd4 <kmem_slab_destroy+0xa4>
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
c0105b76:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105b79:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105b7c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105b7f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105b82:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105b85:	0f b7 52 18          	movzwl 0x18(%edx),%edx
c0105b89:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0105b8c:	0f b7 76 1a          	movzwl 0x1a(%esi),%esi
c0105b90:	0f af d6             	imul   %esi,%edx
c0105b93:	01 d1                	add    %edx,%ecx
c0105b95:	39 c8                	cmp    %ecx,%eax
c0105b97:	0f 83 32 00 00 00    	jae    c0105bcf <kmem_slab_destroy+0x9f>
            cachep->dtor(p, cachep, cachep->objsize);
c0105b9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ba0:	8b 40 20             	mov    0x20(%eax),%eax
c0105ba3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0105ba6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105ba9:	8b 75 ec             	mov    -0x14(%ebp),%esi
c0105bac:	0f b7 76 18          	movzwl 0x18(%esi),%esi
c0105bb0:	89 0c 24             	mov    %ecx,(%esp)
c0105bb3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105bb7:	89 74 24 08          	mov    %esi,0x8(%esp)
c0105bbb:	ff d0                	call   *%eax
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
c0105bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bc0:	0f b7 40 18          	movzwl 0x18(%eax),%eax
c0105bc4:	03 45 d8             	add    -0x28(%ebp),%eax
c0105bc7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105bca:	e9 ad ff ff ff       	jmp    c0105b7c <kmem_slab_destroy+0x4c>
            cachep->dtor(p, cachep, cachep->objsize);
c0105bcf:	e9 00 00 00 00       	jmp    c0105bd4 <kmem_slab_destroy+0xa4>
c0105bd4:	b8 01 00 00 00       	mov    $0x1,%eax
    page->property = page->flags = 0;
c0105bd9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105bdc:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
c0105be3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105be6:	c7 41 08 00 00 00 00 	movl   $0x0,0x8(%ecx)
    list_del(&(page->page_link));
c0105bed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105bf0:	83 c1 0c             	add    $0xc,%ecx
c0105bf3:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    __list_del(listelm->prev, listelm->next);
c0105bf6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0105bf9:	8b 09                	mov    (%ecx),%ecx
c0105bfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105bfe:	8b 52 04             	mov    0x4(%edx),%edx
c0105c01:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0105c04:	89 55 f4             	mov    %edx,-0xc(%ebp)
    prev->next = next;
c0105c07:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0105c0a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0105c0d:	89 4a 04             	mov    %ecx,0x4(%edx)
    next->prev = prev;
c0105c10:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105c13:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105c16:	89 0a                	mov    %ecx,(%edx)
    free_page(page);
c0105c18:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0105c1b:	89 0c 24             	mov    %ecx,(%esp)
c0105c1e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c25:	00 
c0105c26:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0105c29:	e8 92 d4 ff ff       	call   c01030c0 <free_pages>
}
c0105c2e:	83 c4 34             	add    $0x34,%esp
c0105c31:	5e                   	pop    %esi
c0105c32:	5d                   	pop    %ebp
c0105c33:	c3                   	ret    
c0105c34:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0105c3b:	00 00 00 00 00 

c0105c40 <kmem_cache_free>:
    return objp;
}

// kmem_cache_free - free an object
void 
kmem_cache_free(struct kmem_cache_t *cachep, void *objp) {
c0105c40:	55                   	push   %ebp
c0105c41:	89 e5                	mov    %esp,%ebp
c0105c43:	56                   	push   %esi
c0105c44:	83 ec 74             	sub    $0x74,%esp
c0105c47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c4a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0105c4d:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c0105c50:	89 45 b0             	mov    %eax,-0x50(%ebp)
    // Get slab of object 
    void *base = page2kva(pages);
c0105c53:	a1 2c 49 11 c0       	mov    0xc011492c,%eax
c0105c58:	89 04 24             	mov    %eax,(%esp)
c0105c5b:	e8 00 03 00 00       	call   c0105f60 <page2kva>
c0105c60:	b9 00 10 00 00       	mov    $0x1000,%ecx
c0105c65:	89 45 ac             	mov    %eax,-0x54(%ebp)
    void *kva = ROUNDDOWN(objp, PGSIZE);
c0105c68:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105c6b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105c6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105c71:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0105c74:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0105c7a:	29 d0                	sub    %edx,%eax
c0105c7c:	89 45 a0             	mov    %eax,-0x60(%ebp)
c0105c7f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105c82:	89 45 a8             	mov    %eax,-0x58(%ebp)
    struct slab_t *slab = (struct slab_t *) &pages[(kva-base)/PGSIZE];
c0105c85:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105c88:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0105c8b:	29 d0                	sub    %edx,%eax
c0105c8d:	99                   	cltd   
c0105c8e:	f7 f9                	idiv   %ecx
c0105c90:	6b c0 14             	imul   $0x14,%eax,%eax
c0105c93:	03 05 2c 49 11 c0    	add    0xc011492c,%eax
c0105c99:	89 45 9c             	mov    %eax,-0x64(%ebp)
    // Get offset in slab
    int16_t *bufctl = kva;
c0105c9c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105c9f:	89 45 98             	mov    %eax,-0x68(%ebp)
    void *buf = bufctl + cachep->num;
c0105ca2:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105ca5:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0105ca8:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c0105cac:	c1 e1 01             	shl    $0x1,%ecx
c0105caf:	01 c8                	add    %ecx,%eax
c0105cb1:	89 45 94             	mov    %eax,-0x6c(%ebp)
    int offset = (objp - buf) / cachep->objsize;
c0105cb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105cb7:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0105cba:	29 c8                	sub    %ecx,%eax
c0105cbc:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0105cbf:	0f b7 49 18          	movzwl 0x18(%ecx),%ecx
c0105cc3:	99                   	cltd   
c0105cc4:	f7 f9                	idiv   %ecx
c0105cc6:	89 45 90             	mov    %eax,-0x70(%ebp)
    // Update slab 
    list_del(&(slab->slab_link));
c0105cc9:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105ccc:	83 c0 0c             	add    $0xc,%eax
c0105ccf:	89 45 b8             	mov    %eax,-0x48(%ebp)
    __list_del(listelm->prev, listelm->next);
c0105cd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105cd5:	8b 00                	mov    (%eax),%eax
c0105cd7:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0105cda:	8b 49 04             	mov    0x4(%ecx),%ecx
c0105cdd:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0105ce0:	89 4d bc             	mov    %ecx,-0x44(%ebp)
    prev->next = next;
c0105ce3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105ce6:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0105ce9:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
c0105cec:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105cef:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0105cf2:	89 01                	mov    %eax,(%ecx)
    bufctl[offset] = slab->free;
c0105cf4:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105cf7:	66 8b 70 0a          	mov    0xa(%eax),%si
c0105cfb:	8b 45 90             	mov    -0x70(%ebp),%eax
c0105cfe:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c0105d01:	66 89 34 41          	mov    %si,(%ecx,%eax,2)
    slab->inuse --;
c0105d05:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105d08:	66 8b 70 08          	mov    0x8(%eax),%si
c0105d0c:	66 83 c6 ff          	add    $0xffff,%si
c0105d10:	66 89 70 08          	mov    %si,0x8(%eax)
    slab->free = offset;
c0105d14:	8b 45 90             	mov    -0x70(%ebp),%eax
c0105d17:	66 89 c6             	mov    %ax,%si
c0105d1a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105d1d:	66 89 70 0a          	mov    %si,0xa(%eax)
    if (slab->inuse == 0)
c0105d21:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105d24:	0f b7 40 08          	movzwl 0x8(%eax),%eax
c0105d28:	83 f8 00             	cmp    $0x0,%eax
c0105d2b:	0f 85 57 00 00 00    	jne    c0105d88 <kmem_cache_free+0x148>
        list_add(&(cachep->slabs_free), &(slab->slab_link));
c0105d31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d34:	83 c0 10             	add    $0x10,%eax
c0105d37:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0105d3a:	83 c1 0c             	add    $0xc,%ecx
c0105d3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105d40:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
c0105d43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d46:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105d49:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d4c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c0105d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d52:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105d55:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105d58:	8b 52 04             	mov    0x4(%edx),%edx
c0105d5b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0105d5e:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0105d61:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
c0105d64:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105d67:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0105d6a:	89 01                	mov    %eax,(%ecx)
c0105d6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0105d6f:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0105d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d75:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105d78:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0105d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d7e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105d81:	89 01                	mov    %eax,(%ecx)
c0105d83:	e9 52 00 00 00       	jmp    c0105dda <kmem_cache_free+0x19a>
    else 
        list_add(&(cachep->slabs_partial), &(slab->slab_link));
c0105d88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d8b:	83 c0 08             	add    $0x8,%eax
c0105d8e:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0105d91:	83 c1 0c             	add    $0xc,%ecx
c0105d94:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105d97:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    list_add_after(listelm, elm);
c0105d9a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105d9d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105da0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105da3:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    __list_add(elm, listelm, listelm->next);
c0105da6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105da9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105dac:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105daf:	8b 52 04             	mov    0x4(%edx),%edx
c0105db2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105db5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0105db8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0105dbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105dbe:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0105dc1:	89 01                	mov    %eax,(%ecx)
c0105dc3:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0105dc6:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0105dc9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105dcc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105dcf:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0105dd2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105dd5:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105dd8:	89 01                	mov    %eax,(%ecx)
}
c0105dda:	83 c4 74             	add    $0x74,%esp
c0105ddd:	5e                   	pop    %esi
c0105dde:	5d                   	pop    %ebp
c0105ddf:	c3                   	ret    

c0105de0 <kmem_cache_grow>:
kmem_cache_grow(struct kmem_cache_t *cachep) {
c0105de0:	55                   	push   %ebp
c0105de1:	89 e5                	mov    %esp,%ebp
c0105de3:	56                   	push   %esi
c0105de4:	83 ec 54             	sub    $0x54,%esp
c0105de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dea:	b9 01 00 00 00       	mov    $0x1,%ecx
c0105def:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct Page *page = alloc_page();
c0105df2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105df9:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c0105dfc:	e8 0f d2 ff ff       	call   c0103010 <alloc_pages>
c0105e01:	89 45 d8             	mov    %eax,-0x28(%ebp)
    void *kva = page2kva(page);
c0105e04:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e07:	89 04 24             	mov    %eax,(%esp)
c0105e0a:	e8 51 01 00 00       	call   c0105f60 <page2kva>
c0105e0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    struct slab_t *slab = (struct slab_t *) page;
c0105e12:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e15:	89 45 d0             	mov    %eax,-0x30(%ebp)
    slab->cachep = cachep;
c0105e18:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105e1b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105e1e:	89 41 04             	mov    %eax,0x4(%ecx)
    slab->inuse = slab->free = 0;
c0105e21:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105e24:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%eax)
c0105e2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105e2d:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
    list_add(&(cachep->slabs_free), &(slab->slab_link));
c0105e33:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105e36:	83 c0 10             	add    $0x10,%eax
c0105e39:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105e3c:	83 c1 0c             	add    $0xc,%ecx
c0105e3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105e42:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
c0105e45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e48:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0105e4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105e4e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c0105e51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e54:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0105e57:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105e5a:	8b 52 04             	mov    0x4(%edx),%edx
c0105e5d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0105e60:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0105e63:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
c0105e66:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105e69:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0105e6c:	89 01                	mov    %eax,(%ecx)
c0105e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0105e71:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0105e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e77:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105e7a:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0105e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e80:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0105e83:	89 01                	mov    %eax,(%ecx)
    int16_t *bufctl = kva;
c0105e85:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e88:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 1; i < cachep->num; i++)
c0105e8b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0105e92:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105e95:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105e98:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c0105e9c:	39 c8                	cmp    %ecx,%eax
c0105e9e:	0f 8d 21 00 00 00    	jge    c0105ec5 <kmem_cache_grow+0xe5>
        bufctl[i-1] = i;
c0105ea4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ea7:	66 89 c1             	mov    %ax,%cx
c0105eaa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ead:	83 e8 01             	sub    $0x1,%eax
c0105eb0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105eb3:	66 89 0c 42          	mov    %cx,(%edx,%eax,2)
    for (int i = 1; i < cachep->num; i++)
c0105eb7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105eba:	83 c0 01             	add    $0x1,%eax
c0105ebd:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105ec0:	e9 cd ff ff ff       	jmp    c0105e92 <kmem_cache_grow+0xb2>
    bufctl[cachep->num-1] = -1;
c0105ec5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105ec8:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
c0105ecc:	83 e8 01             	sub    $0x1,%eax
c0105ecf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0105ed2:	66 c7 04 41 ff ff    	movw   $0xffff,(%ecx,%eax,2)
    void *buf = bufctl + cachep->num;
c0105ed8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105edb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0105ede:	0f b7 49 1a          	movzwl 0x1a(%ecx),%ecx
c0105ee2:	c1 e1 01             	shl    $0x1,%ecx
c0105ee5:	01 c8                	add    %ecx,%eax
c0105ee7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if (cachep->ctor) 
c0105eea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105eed:	83 78 1c 00          	cmpl   $0x0,0x1c(%eax)
c0105ef1:	0f 84 5e 00 00 00    	je     c0105f55 <kmem_cache_grow+0x175>
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
c0105ef7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105efa:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0105efd:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105f00:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105f03:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105f06:	0f b7 52 18          	movzwl 0x18(%edx),%edx
c0105f0a:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0105f0d:	0f b7 76 1a          	movzwl 0x1a(%esi),%esi
c0105f11:	0f af d6             	imul   %esi,%edx
c0105f14:	01 d1                	add    %edx,%ecx
c0105f16:	39 c8                	cmp    %ecx,%eax
c0105f18:	0f 83 32 00 00 00    	jae    c0105f50 <kmem_cache_grow+0x170>
            cachep->ctor(p, cachep, cachep->objsize);
c0105f1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f21:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f24:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0105f27:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105f2a:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0105f2d:	0f b7 76 18          	movzwl 0x18(%esi),%esi
c0105f31:	89 0c 24             	mov    %ecx,(%esp)
c0105f34:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f38:	89 74 24 08          	mov    %esi,0x8(%esp)
c0105f3c:	ff d0                	call   *%eax
        for (void *p = buf; p < buf + cachep->objsize * cachep->num; p += cachep->objsize)
c0105f3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f41:	0f b7 40 18          	movzwl 0x18(%eax),%eax
c0105f45:	03 45 c0             	add    -0x40(%ebp),%eax
c0105f48:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0105f4b:	e9 ad ff ff ff       	jmp    c0105efd <kmem_cache_grow+0x11d>
            cachep->ctor(p, cachep, cachep->objsize);
c0105f50:	e9 00 00 00 00       	jmp    c0105f55 <kmem_cache_grow+0x175>
    return slab;
c0105f55:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f58:	83 c4 54             	add    $0x54,%esp
c0105f5b:	5e                   	pop    %esi
c0105f5c:	5d                   	pop    %ebp
c0105f5d:	c3                   	ret    
c0105f5e:	66 90                	xchg   %ax,%ax

c0105f60 <page2kva>:
page2kva(struct Page *page) {
c0105f60:	55                   	push   %ebp
c0105f61:	89 e5                	mov    %esp,%ebp
c0105f63:	56                   	push   %esi
c0105f64:	83 ec 24             	sub    $0x24,%esp
c0105f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f6a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return KADDR(page2pa(page));
c0105f6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105f70:	89 04 24             	mov    %eax,(%esp)
c0105f73:	e8 48 04 00 00       	call   c01063c0 <page2pa>
c0105f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7e:	c1 e8 0c             	shr    $0xc,%eax
c0105f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f87:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c0105f8d:	0f 82 2f 00 00 00    	jb     c0105fc2 <page2kva+0x62>
c0105f93:	8d 05 48 f8 10 c0    	lea    0xc010f848,%eax
c0105f99:	b9 61 00 00 00       	mov    $0x61,%ecx
c0105f9e:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c0105fa4:	8b 75 f4             	mov    -0xc(%ebp),%esi
c0105fa7:	89 04 24             	mov    %eax,(%esp)
c0105faa:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0105fb1:	00 
c0105fb2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105fb6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0105fba:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0105fbd:	e8 8e a4 ff ff       	call   c0100450 <__panic>
c0105fc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fc5:	05 00 00 00 c0       	add    $0xc0000000,%eax
c0105fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105fcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fd0:	83 c4 24             	add    $0x24,%esp
c0105fd3:	5e                   	pop    %esi
c0105fd4:	5d                   	pop    %ebp
c0105fd5:	c3                   	ret    
c0105fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c0105fdd:	00 00 00 

c0105fe0 <kmem_cache_zalloc>:
kmem_cache_zalloc(struct kmem_cache_t *cachep) {
c0105fe0:	55                   	push   %ebp
c0105fe1:	89 e5                	mov    %esp,%ebp
c0105fe3:	83 ec 28             	sub    $0x28,%esp
c0105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fe9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    void *objp = kmem_cache_alloc(cachep);
c0105fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105fef:	89 04 24             	mov    %eax,(%esp)
c0105ff2:	e8 e9 f7 ff ff       	call   c01057e0 <kmem_cache_alloc>
c0105ff7:	31 c9                	xor    %ecx,%ecx
c0105ff9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    memset(objp, 0, cachep->objsize);
c0105ffc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105fff:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106002:	0f b7 52 18          	movzwl 0x18(%edx),%edx
c0106006:	89 04 24             	mov    %eax,(%esp)
c0106009:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106010:	00 
c0106011:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106015:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0106018:	e8 c3 83 00 00       	call   c010e3e0 <memset>
    return objp;
c010601d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0106020:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106023:	89 c8                	mov    %ecx,%eax
c0106025:	83 c4 28             	add    $0x28,%esp
c0106028:	5d                   	pop    %ebp
c0106029:	c3                   	ret    
c010602a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0106030 <kmem_cache_size>:

// kmem_cache_size - get object size
size_t 
kmem_cache_size(struct kmem_cache_t *cachep) {
c0106030:	55                   	push   %ebp
c0106031:	89 e5                	mov    %esp,%ebp
c0106033:	50                   	push   %eax
c0106034:	8b 45 08             	mov    0x8(%ebp),%eax
c0106037:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cachep->objsize;
c010603a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010603d:	0f b7 40 18          	movzwl 0x18(%eax),%eax
c0106041:	83 c4 04             	add    $0x4,%esp
c0106044:	5d                   	pop    %ebp
c0106045:	c3                   	ret    
c0106046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c010604d:	00 00 00 

c0106050 <kmem_cache_name>:
}

// kmem_cache_name - get cache name
const char *
kmem_cache_name(struct kmem_cache_t *cachep) {
c0106050:	55                   	push   %ebp
c0106051:	89 e5                	mov    %esp,%ebp
c0106053:	50                   	push   %eax
c0106054:	8b 45 08             	mov    0x8(%ebp),%eax
c0106057:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cachep->name;
c010605a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010605d:	83 c0 24             	add    $0x24,%eax
c0106060:	83 c4 04             	add    $0x4,%esp
c0106063:	5d                   	pop    %ebp
c0106064:	c3                   	ret    
c0106065:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010606c:	00 00 00 00 

c0106070 <kmem_cache_shrink>:
}

// kmem_cache_shrink - destroy all slabs in free list 
int 
kmem_cache_shrink(struct kmem_cache_t *cachep) {
c0106070:	55                   	push   %ebp
c0106071:	89 e5                	mov    %esp,%ebp
c0106073:	83 ec 28             	sub    $0x28,%esp
c0106076:	8b 45 08             	mov    0x8(%ebp),%eax
c0106079:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = 0;
c010607c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = list_next(&(cachep->slabs_free));
c0106083:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106086:	83 c0 10             	add    $0x10,%eax
c0106089:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
c010608c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010608f:	8b 40 04             	mov    0x4(%eax),%eax
c0106092:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (le != &(cachep->slabs_free)) {
c0106095:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106098:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010609b:	83 c1 10             	add    $0x10,%ecx
c010609e:	39 c8                	cmp    %ecx,%eax
c01060a0:	0f 84 40 00 00 00    	je     c01060e6 <kmem_cache_shrink+0x76>
c01060a6:	31 c0                	xor    %eax,%eax
c01060a8:	89 c1                	mov    %eax,%ecx
c01060aa:	83 c1 0c             	add    $0xc,%ecx
c01060ad:	29 c8                	sub    %ecx,%eax
        list_entry_t *temp = le;
c01060af:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01060b2:	89 4d e8             	mov    %ecx,-0x18(%ebp)
        le = list_next(le);
c01060b5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c01060b8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c01060bb:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c01060be:	8b 49 04             	mov    0x4(%ecx),%ecx
c01060c1:	89 4d ec             	mov    %ecx,-0x14(%ebp)
        kmem_slab_destroy(cachep, le2slab(temp, page_link));
c01060c4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01060c7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01060ca:	01 c2                	add    %eax,%edx
c01060cc:	89 0c 24             	mov    %ecx,(%esp)
c01060cf:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060d3:	e8 58 fa ff ff       	call   c0105b30 <kmem_slab_destroy>
        count ++;
c01060d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060db:	83 c0 01             	add    $0x1,%eax
c01060de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &(cachep->slabs_free)) {
c01060e1:	e9 af ff ff ff       	jmp    c0106095 <kmem_cache_shrink+0x25>
    }
    return count;
c01060e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060e9:	83 c4 28             	add    $0x28,%esp
c01060ec:	5d                   	pop    %ebp
c01060ed:	c3                   	ret    
c01060ee:	66 90                	xchg   %ax,%ax

c01060f0 <kmem_cache_reap>:
}

// kmem_cache_reap - reap all free slabs 
int 
kmem_cache_reap() {
c01060f0:	55                   	push   %ebp
c01060f1:	89 e5                	mov    %esp,%ebp
c01060f3:	83 ec 18             	sub    $0x18,%esp
c01060f6:	8d 05 dc 48 11 c0    	lea    0xc01148dc,%eax
    int count = 0;
c01060fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    list_entry_t *le = &(cache_chain);
c0106103:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106106:	8d 05 dc 48 11 c0    	lea    0xc01148dc,%eax
    while ((le = list_next(le)) != &(cache_chain))
c010610c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010610f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c0106112:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0106115:	8b 49 04             	mov    0x4(%ecx),%ecx
c0106118:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010611b:	39 c1                	cmp    %eax,%ecx
c010611d:	0f 84 21 00 00 00    	je     c0106144 <kmem_cache_reap+0x54>
c0106123:	31 c0                	xor    %eax,%eax
c0106125:	89 c1                	mov    %eax,%ecx
c0106127:	83 c1 34             	add    $0x34,%ecx
c010612a:	29 c8                	sub    %ecx,%eax
        count += kmem_cache_shrink(to_struct(le, struct kmem_cache_t, cache_link));
c010612c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010612f:	01 c1                	add    %eax,%ecx
c0106131:	89 0c 24             	mov    %ecx,(%esp)
c0106134:	e8 37 ff ff ff       	call   c0106070 <kmem_cache_shrink>
c0106139:	03 45 f8             	add    -0x8(%ebp),%eax
c010613c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((le = list_next(le)) != &(cache_chain))
c010613f:	e9 c2 ff ff ff       	jmp    c0106106 <kmem_cache_reap+0x16>
    return count;
c0106144:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106147:	83 c4 18             	add    $0x18,%esp
c010614a:	5d                   	pop    %ebp
c010614b:	c3                   	ret    
c010614c:	0f 1f 40 00          	nopl   0x0(%eax)

c0106150 <kmalloc>:
}

void *
kmalloc(size_t size) {
c0106150:	55                   	push   %ebp
c0106151:	89 e5                	mov    %esp,%ebp
c0106153:	56                   	push   %esi
c0106154:	83 ec 24             	sub    $0x24,%esp
c0106157:	8b 45 08             	mov    0x8(%ebp),%eax
c010615a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    assert(size <= SIZED_CACHE_MAX);
c010615d:	81 7d f8 00 08 00 00 	cmpl   $0x800,-0x8(%ebp)
c0106164:	0f 86 32 00 00 00    	jbe    c010619c <kmalloc+0x4c>
c010616a:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106170:	b9 4c 01 00 00       	mov    $0x14c,%ecx
c0106175:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010617b:	8d 35 46 fd 10 c0    	lea    0xc010fd46,%esi
c0106181:	89 04 24             	mov    %eax,(%esp)
c0106184:	c7 44 24 04 4c 01 00 	movl   $0x14c,0x4(%esp)
c010618b:	00 
c010618c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106190:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106194:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c0106197:	e8 b4 a2 ff ff       	call   c0100450 <__panic>
c010619c:	e9 00 00 00 00       	jmp    c01061a1 <kmalloc+0x51>
    return kmem_cache_alloc(sized_caches[kmem_sized_index(size)]);
c01061a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01061a4:	89 04 24             	mov    %eax,(%esp)
c01061a7:	e8 04 f4 ff ff       	call   c01055b0 <kmem_sized_index>
c01061ac:	8b 04 85 e4 48 11 c0 	mov    -0x3feeb71c(,%eax,4),%eax
c01061b3:	89 04 24             	mov    %eax,(%esp)
c01061b6:	e8 25 f6 ff ff       	call   c01057e0 <kmem_cache_alloc>
c01061bb:	83 c4 24             	add    $0x24,%esp
c01061be:	5e                   	pop    %esi
c01061bf:	5d                   	pop    %ebp
c01061c0:	c3                   	ret    
c01061c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c01061c8:	0f 1f 84 00 00 00 00 
c01061cf:	00 

c01061d0 <kfree>:
}

void 
kfree(void *objp) {
c01061d0:	55                   	push   %ebp
c01061d1:	89 e5                	mov    %esp,%ebp
c01061d3:	83 ec 28             	sub    $0x28,%esp
c01061d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01061d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    void *base = slab2kva(pages);
c01061dc:	a1 2c 49 11 c0       	mov    0xc011492c,%eax
c01061e1:	89 04 24             	mov    %eax,(%esp)
c01061e4:	e8 77 fd ff ff       	call   c0105f60 <page2kva>
c01061e9:	b9 00 10 00 00       	mov    $0x1000,%ecx
c01061ee:	89 45 f8             	mov    %eax,-0x8(%ebp)
    void *kva = ROUNDDOWN(objp, PGSIZE);
c01061f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01061f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01061f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01061fd:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0106203:	29 d0                	sub    %edx,%eax
c0106205:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106208:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010620b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct slab_t *slab = (struct slab_t *) &pages[(kva-base)/PGSIZE];
c010620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106211:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0106214:	29 d0                	sub    %edx,%eax
c0106216:	99                   	cltd   
c0106217:	f7 f9                	idiv   %ecx
c0106219:	6b c0 14             	imul   $0x14,%eax,%eax
c010621c:	03 05 2c 49 11 c0    	add    0xc011492c,%eax
c0106222:	89 45 e8             	mov    %eax,-0x18(%ebp)
    kmem_cache_free(slab->cachep, objp);
c0106225:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106228:	8b 40 04             	mov    0x4(%eax),%eax
c010622b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010622e:	89 04 24             	mov    %eax,(%esp)
c0106231:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106235:	e8 06 fa ff ff       	call   c0105c40 <kmem_cache_free>
}
c010623a:	83 c4 28             	add    $0x28,%esp
c010623d:	5d                   	pop    %ebp
c010623e:	c3                   	ret    
c010623f:	90                   	nop

c0106240 <kmem_int>:

void
kmem_int() {
c0106240:	55                   	push   %ebp
c0106241:	89 e5                	mov    %esp,%ebp
c0106243:	53                   	push   %ebx
c0106244:	57                   	push   %edi
c0106245:	56                   	push   %esi
c0106246:	83 ec 5c             	sub    $0x5c,%esp
c0106249:	8d 05 a0 48 11 c0    	lea    0xc01148a0,%eax
c010624f:	83 c0 24             	add    $0x24,%eax
c0106252:	b9 10 00 00 00       	mov    $0x10,%ecx

    // Init cache for kmem_cache
    cache_cache.objsize = sizeof(struct kmem_cache_t);
c0106257:	66 c7 05 b8 48 11 c0 	movw   $0x3c,0xc01148b8
c010625e:	3c 00 
    cache_cache.num = PGSIZE / (sizeof(int16_t) + sizeof(struct kmem_cache_t));
c0106260:	66 c7 05 ba 48 11 c0 	movw   $0x42,0xc01148ba
c0106267:	42 00 
    cache_cache.ctor = NULL;
c0106269:	c7 05 bc 48 11 c0 00 	movl   $0x0,0xc01148bc
c0106270:	00 00 00 
    cache_cache.dtor = NULL;
c0106273:	c7 05 c0 48 11 c0 00 	movl   $0x0,0xc01148c0
c010627a:	00 00 00 
    memcpy(cache_cache.name, cache_cache_name, CACHE_NAMELEN);
c010627d:	8b 15 f8 39 11 c0    	mov    0xc01139f8,%edx
c0106283:	89 04 24             	mov    %eax,(%esp)
c0106286:	89 54 24 04          	mov    %edx,0x4(%esp)
c010628a:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0106291:	00 
c0106292:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c0106295:	e8 56 82 00 00       	call   c010e4f0 <memcpy>
c010629a:	8d 0d a0 48 11 c0    	lea    0xc01148a0,%ecx
c01062a0:	89 ca                	mov    %ecx,%edx
c01062a2:	83 c2 34             	add    $0x34,%edx
c01062a5:	8d 35 dc 48 11 c0    	lea    0xc01148dc,%esi
c01062ab:	89 cf                	mov    %ecx,%edi
c01062ad:	83 c7 10             	add    $0x10,%edi
c01062b0:	89 cb                	mov    %ecx,%ebx
c01062b2:	83 c3 08             	add    $0x8,%ebx
    list_init(&(cache_cache.slabs_full));
c01062b5:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    elm->prev = elm->next = elm;
c01062b8:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c01062bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01062be:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01062c1:	89 48 04             	mov    %ecx,0x4(%eax)
c01062c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01062c7:	89 08                	mov    %ecx,(%eax)
    list_init(&(cache_cache.slabs_partial));
c01062c9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c01062cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01062cf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01062d2:	89 41 04             	mov    %eax,0x4(%ecx)
c01062d5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01062d8:	89 01                	mov    %eax,(%ecx)
    list_init(&(cache_cache.slabs_free));
c01062da:	89 7d d0             	mov    %edi,-0x30(%ebp)
c01062dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01062e0:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01062e3:	89 41 04             	mov    %eax,0x4(%ecx)
c01062e6:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01062e9:	89 01                	mov    %eax,(%ecx)
    list_init(&(cache_chain));
c01062eb:	89 75 f0             	mov    %esi,-0x10(%ebp)
c01062ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062f1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01062f4:	89 41 04             	mov    %eax,0x4(%ecx)
c01062f7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01062fa:	89 01                	mov    %eax,(%ecx)
    list_add(&(cache_chain), &(cache_cache.cache_link));
c01062fc:	89 75 d8             	mov    %esi,-0x28(%ebp)
c01062ff:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    list_add_after(listelm, elm);
c0106302:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106305:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106308:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010630b:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
c010630e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106311:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106314:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106317:	8b 52 04             	mov    0x4(%edx),%edx
c010631a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010631d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0106320:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    prev->next = next->prev = elm;
c0106323:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106326:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106329:	89 01                	mov    %eax,(%ecx)
c010632b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010632e:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0106331:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106334:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0106337:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010633a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010633d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0106340:	89 01                	mov    %eax,(%ecx)

    // Init sized cache 
    for (int i = 0, size = 16; i < SIZED_CACHE_NUM; i++, size *= 2)
c0106342:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c0106349:	c7 45 c0 10 00 00 00 	movl   $0x10,-0x40(%ebp)
c0106350:	83 7d c4 08          	cmpl   $0x8,-0x3c(%ebp)
c0106354:	0f 8d 4b 00 00 00    	jge    c01063a5 <kmem_int+0x165>
c010635a:	31 c0                	xor    %eax,%eax
        sized_caches[i] = kmem_cache_create(sized_cache_name, size, NULL, NULL); 
c010635c:	8b 0d fc 39 11 c0    	mov    0xc01139fc,%ecx
c0106362:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106365:	89 0c 24             	mov    %ecx,(%esp)
c0106368:	89 54 24 04          	mov    %edx,0x4(%esp)
c010636c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106373:	00 
c0106374:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010637b:	00 
c010637c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010637f:	e8 cc f2 ff ff       	call   c0105650 <kmem_cache_create>
c0106384:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0106387:	89 04 8d e4 48 11 c0 	mov    %eax,-0x3feeb71c(,%ecx,4)
    for (int i = 0, size = 16; i < SIZED_CACHE_NUM; i++, size *= 2)
c010638e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106391:	83 c0 01             	add    $0x1,%eax
c0106394:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106397:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010639a:	c1 e0 01             	shl    $0x1,%eax
c010639d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01063a0:	e9 ab ff ff ff       	jmp    c0106350 <kmem_int+0x110>

    check_kmem();
c01063a5:	e8 66 00 00 00       	call   c0106410 <check_kmem>
c01063aa:	83 c4 5c             	add    $0x5c,%esp
c01063ad:	5e                   	pop    %esi
c01063ae:	5f                   	pop    %edi
c01063af:	5b                   	pop    %ebx
c01063b0:	5d                   	pop    %ebp
c01063b1:	c3                   	ret    
c01063b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c01063b9:	1f 84 00 00 00 00 00 

c01063c0 <page2pa>:
page2pa(struct Page *page) {
c01063c0:	55                   	push   %ebp
c01063c1:	89 e5                	mov    %esp,%ebp
c01063c3:	83 ec 08             	sub    $0x8,%esp
c01063c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01063c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
c01063cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01063cf:	89 04 24             	mov    %eax,(%esp)
c01063d2:	e8 09 00 00 00       	call   c01063e0 <page2ppn>
c01063d7:	c1 e0 0c             	shl    $0xc,%eax
c01063da:	83 c4 08             	add    $0x8,%esp
c01063dd:	5d                   	pop    %ebp
c01063de:	c3                   	ret    
c01063df:	90                   	nop

c01063e0 <page2ppn>:
page2ppn(struct Page *page) {
c01063e0:	55                   	push   %ebp
c01063e1:	89 e5                	mov    %esp,%ebp
c01063e3:	50                   	push   %eax
c01063e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01063e7:	b9 14 00 00 00       	mov    $0x14,%ecx
c01063ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
c01063ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01063f2:	8b 15 2c 49 11 c0    	mov    0xc011492c,%edx
c01063f8:	29 d0                	sub    %edx,%eax
c01063fa:	99                   	cltd   
c01063fb:	f7 f9                	idiv   %ecx
c01063fd:	83 c4 04             	add    $0x4,%esp
c0106400:	5d                   	pop    %ebp
c0106401:	c3                   	ret    
c0106402:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0106409:	1f 84 00 00 00 00 00 

c0106410 <check_kmem>:
check_kmem() {
c0106410:	55                   	push   %ebp
c0106411:	89 e5                	mov    %esp,%ebp
c0106413:	56                   	push   %esi
c0106414:	81 ec d4 00 00 00    	sub    $0xd4,%esp
    assert(sizeof(struct Page) == sizeof(struct slab_t));
c010641a:	e9 00 00 00 00       	jmp    c010641f <check_kmem+0xf>
    size_t fp = nr_free_pages();
c010641f:	e8 ec cc ff ff       	call   c0103110 <nr_free_pages>
c0106424:	b9 fe 07 00 00       	mov    $0x7fe,%ecx
c0106429:	8d 15 90 6e 10 c0    	lea    0xc0106e90,%edx
c010642f:	8d 35 e0 6e 10 c0    	lea    0xc0106ee0,%esi
c0106435:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct kmem_cache_t *cp0 = kmem_cache_create(test_object_name, sizeof(struct test_object), test_ctor, test_dtor);
c0106438:	a1 00 3a 11 c0       	mov    0xc0113a00,%eax
c010643d:	89 04 24             	mov    %eax,(%esp)
c0106440:	c7 44 24 04 fe 07 00 	movl   $0x7fe,0x4(%esp)
c0106447:	00 
c0106448:	89 54 24 08          	mov    %edx,0x8(%esp)
c010644c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106450:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c0106453:	e8 f8 f1 ff ff       	call   c0105650 <kmem_cache_create>
c0106458:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(cp0 != NULL);
c010645b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010645f:	0f 85 32 00 00 00    	jne    c0106497 <check_kmem+0x87>
c0106465:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c010646b:	b9 7c 00 00 00       	mov    $0x7c,%ecx
c0106470:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106476:	8d 35 6a fd 10 c0    	lea    0xc010fd6a,%esi
c010647c:	89 04 24             	mov    %eax,(%esp)
c010647f:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
c0106486:	00 
c0106487:	89 54 24 08          	mov    %edx,0x8(%esp)
c010648b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010648f:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c0106492:	e8 b9 9f ff ff       	call   c0100450 <__panic>
c0106497:	e9 00 00 00 00       	jmp    c010649c <check_kmem+0x8c>
    assert(kmem_cache_size(cp0) == sizeof(struct test_object));
c010649c:	e9 00 00 00 00       	jmp    c01064a1 <check_kmem+0x91>
c01064a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01064a4:	89 04 24             	mov    %eax,(%esp)
c01064a7:	e8 84 fb ff ff       	call   c0106030 <kmem_cache_size>
c01064ac:	3d fe 07 00 00       	cmp    $0x7fe,%eax
c01064b1:	0f 84 32 00 00 00    	je     c01064e9 <check_kmem+0xd9>
c01064b7:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01064bd:	b9 7d 00 00 00       	mov    $0x7d,%ecx
c01064c2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01064c8:	8d 35 76 fd 10 c0    	lea    0xc010fd76,%esi
c01064ce:	89 04 24             	mov    %eax,(%esp)
c01064d1:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01064d8:	00 
c01064d9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01064dd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01064e1:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c01064e4:	e8 67 9f ff ff       	call   c0100450 <__panic>
c01064e9:	e9 00 00 00 00       	jmp    c01064ee <check_kmem+0xde>
    assert(strcmp(kmem_cache_name(cp0), test_object_name) == 0);
c01064ee:	e9 00 00 00 00       	jmp    c01064f3 <check_kmem+0xe3>
c01064f3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01064f6:	89 04 24             	mov    %eax,(%esp)
c01064f9:	e8 52 fb ff ff       	call   c0106050 <kmem_cache_name>
c01064fe:	8b 0d 00 3a 11 c0    	mov    0xc0113a00,%ecx
c0106504:	89 04 24             	mov    %eax,(%esp)
c0106507:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010650b:	e8 c0 7a 00 00       	call   c010dfd0 <strcmp>
c0106510:	83 f8 00             	cmp    $0x0,%eax
c0106513:	0f 84 32 00 00 00    	je     c010654b <check_kmem+0x13b>
c0106519:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c010651f:	b9 7e 00 00 00       	mov    $0x7e,%ecx
c0106524:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010652a:	8d 35 a9 fd 10 c0    	lea    0xc010fda9,%esi
c0106530:	89 04 24             	mov    %eax,(%esp)
c0106533:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
c010653a:	00 
c010653b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010653f:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106543:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c0106546:	e8 05 9f ff ff       	call   c0100450 <__panic>
c010654b:	e9 00 00 00 00       	jmp    c0106550 <check_kmem+0x140>
    assert((p0 = kmem_cache_alloc(cp0)) != NULL);
c0106550:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106553:	89 04 24             	mov    %eax,(%esp)
c0106556:	e8 85 f2 ff ff       	call   c01057e0 <kmem_cache_alloc>
c010655b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010655e:	83 f8 00             	cmp    $0x0,%eax
c0106561:	0f 85 32 00 00 00    	jne    c0106599 <check_kmem+0x189>
c0106567:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c010656d:	b9 82 00 00 00       	mov    $0x82,%ecx
c0106572:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106578:	8d 35 dd fd 10 c0    	lea    0xc010fddd,%esi
c010657e:	89 04 24             	mov    %eax,(%esp)
c0106581:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
c0106588:	00 
c0106589:	89 54 24 08          	mov    %edx,0x8(%esp)
c010658d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106591:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c0106594:	e8 b7 9e ff ff       	call   c0100450 <__panic>
c0106599:	e9 00 00 00 00       	jmp    c010659e <check_kmem+0x18e>
    assert((p1 = kmem_cache_alloc(cp0)) != NULL);
c010659e:	e9 00 00 00 00       	jmp    c01065a3 <check_kmem+0x193>
c01065a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01065a6:	89 04 24             	mov    %eax,(%esp)
c01065a9:	e8 32 f2 ff ff       	call   c01057e0 <kmem_cache_alloc>
c01065ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01065b1:	83 f8 00             	cmp    $0x0,%eax
c01065b4:	0f 85 32 00 00 00    	jne    c01065ec <check_kmem+0x1dc>
c01065ba:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01065c0:	b9 83 00 00 00       	mov    $0x83,%ecx
c01065c5:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01065cb:	8d 35 02 fe 10 c0    	lea    0xc010fe02,%esi
c01065d1:	89 04 24             	mov    %eax,(%esp)
c01065d4:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c01065db:	00 
c01065dc:	89 54 24 08          	mov    %edx,0x8(%esp)
c01065e0:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01065e4:	89 4d a8             	mov    %ecx,-0x58(%ebp)
c01065e7:	e8 64 9e ff ff       	call   c0100450 <__panic>
c01065ec:	e9 00 00 00 00       	jmp    c01065f1 <check_kmem+0x1e1>
    assert((p2 = kmem_cache_alloc(cp0)) != NULL);
c01065f1:	e9 00 00 00 00       	jmp    c01065f6 <check_kmem+0x1e6>
c01065f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01065f9:	89 04 24             	mov    %eax,(%esp)
c01065fc:	e8 df f1 ff ff       	call   c01057e0 <kmem_cache_alloc>
c0106601:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106604:	83 f8 00             	cmp    $0x0,%eax
c0106607:	0f 85 32 00 00 00    	jne    c010663f <check_kmem+0x22f>
c010660d:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106613:	b9 84 00 00 00       	mov    $0x84,%ecx
c0106618:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010661e:	8d 35 27 fe 10 c0    	lea    0xc010fe27,%esi
c0106624:	89 04 24             	mov    %eax,(%esp)
c0106627:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
c010662e:	00 
c010662f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106633:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106637:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c010663a:	e8 11 9e ff ff       	call   c0100450 <__panic>
c010663f:	e9 00 00 00 00       	jmp    c0106644 <check_kmem+0x234>
    assert((p3 = kmem_cache_alloc(cp0)) != NULL);
c0106644:	e9 00 00 00 00       	jmp    c0106649 <check_kmem+0x239>
c0106649:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010664c:	89 04 24             	mov    %eax,(%esp)
c010664f:	e8 8c f1 ff ff       	call   c01057e0 <kmem_cache_alloc>
c0106654:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0106657:	83 f8 00             	cmp    $0x0,%eax
c010665a:	0f 85 32 00 00 00    	jne    c0106692 <check_kmem+0x282>
c0106660:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106666:	b9 85 00 00 00       	mov    $0x85,%ecx
c010666b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106671:	8d 35 4c fe 10 c0    	lea    0xc010fe4c,%esi
c0106677:	89 04 24             	mov    %eax,(%esp)
c010667a:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0106681:	00 
c0106682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106686:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010668a:	89 4d a0             	mov    %ecx,-0x60(%ebp)
c010668d:	e8 be 9d ff ff       	call   c0100450 <__panic>
c0106692:	e9 00 00 00 00       	jmp    c0106697 <check_kmem+0x287>
    assert((p4 = kmem_cache_alloc(cp0)) != NULL);
c0106697:	e9 00 00 00 00       	jmp    c010669c <check_kmem+0x28c>
c010669c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010669f:	89 04 24             	mov    %eax,(%esp)
c01066a2:	e8 39 f1 ff ff       	call   c01057e0 <kmem_cache_alloc>
c01066a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01066aa:	83 f8 00             	cmp    $0x0,%eax
c01066ad:	0f 85 32 00 00 00    	jne    c01066e5 <check_kmem+0x2d5>
c01066b3:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01066b9:	b9 86 00 00 00       	mov    $0x86,%ecx
c01066be:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01066c4:	8d 35 71 fe 10 c0    	lea    0xc010fe71,%esi
c01066ca:	89 04 24             	mov    %eax,(%esp)
c01066cd:	c7 44 24 04 86 00 00 	movl   $0x86,0x4(%esp)
c01066d4:	00 
c01066d5:	89 54 24 08          	mov    %edx,0x8(%esp)
c01066d9:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01066dd:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
c01066e0:	e8 6b 9d ff ff       	call   c0100450 <__panic>
c01066e5:	e9 00 00 00 00       	jmp    c01066ea <check_kmem+0x2da>
    p = (char *) p4;
c01066ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01066ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
c01066f0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c01066f7:	81 7d c8 fe 07 00 00 	cmpl   $0x7fe,-0x38(%ebp)
c01066fe:	0f 83 62 00 00 00    	jae    c0106766 <check_kmem+0x356>
        assert(p[i] == TEST_OBJECT_CTVAL);
c0106704:	e9 00 00 00 00       	jmp    c0106709 <check_kmem+0x2f9>
c0106709:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010670c:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010670f:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
c0106713:	83 f8 22             	cmp    $0x22,%eax
c0106716:	0f 84 32 00 00 00    	je     c010674e <check_kmem+0x33e>
c010671c:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106722:	b9 89 00 00 00       	mov    $0x89,%ecx
c0106727:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010672d:	8d 35 96 fe 10 c0    	lea    0xc010fe96,%esi
c0106733:	89 04 24             	mov    %eax,(%esp)
c0106736:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c010673d:	00 
c010673e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106742:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106746:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c0106749:	e8 02 9d ff ff       	call   c0100450 <__panic>
c010674e:	e9 00 00 00 00       	jmp    c0106753 <check_kmem+0x343>
c0106753:	e9 00 00 00 00       	jmp    c0106758 <check_kmem+0x348>
    for (int i = 0; i < sizeof(struct test_object); i++)
c0106758:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010675b:	83 c0 01             	add    $0x1,%eax
c010675e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106761:	e9 91 ff ff ff       	jmp    c01066f7 <check_kmem+0x2e7>
    assert((p5 = kmem_cache_zalloc(cp0)) != NULL);
c0106766:	e9 00 00 00 00       	jmp    c010676b <check_kmem+0x35b>
c010676b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010676e:	89 04 24             	mov    %eax,(%esp)
c0106771:	e8 6a f8 ff ff       	call   c0105fe0 <kmem_cache_zalloc>
c0106776:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106779:	83 f8 00             	cmp    $0x0,%eax
c010677c:	0f 85 32 00 00 00    	jne    c01067b4 <check_kmem+0x3a4>
c0106782:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106788:	b9 8a 00 00 00       	mov    $0x8a,%ecx
c010678d:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106793:	8d 35 b0 fe 10 c0    	lea    0xc010feb0,%esi
c0106799:	89 04 24             	mov    %eax,(%esp)
c010679c:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c01067a3:	00 
c01067a4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01067a8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01067ac:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c01067af:	e8 9c 9c ff ff       	call   c0100450 <__panic>
c01067b4:	e9 00 00 00 00       	jmp    c01067b9 <check_kmem+0x3a9>
    p = (char *) p5;
c01067b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
c01067bf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
c01067c6:	81 7d c4 fe 07 00 00 	cmpl   $0x7fe,-0x3c(%ebp)
c01067cd:	0f 83 62 00 00 00    	jae    c0106835 <check_kmem+0x425>
        assert(p[i] == 0);
c01067d3:	e9 00 00 00 00       	jmp    c01067d8 <check_kmem+0x3c8>
c01067d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01067db:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01067de:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
c01067e2:	83 f8 00             	cmp    $0x0,%eax
c01067e5:	0f 84 32 00 00 00    	je     c010681d <check_kmem+0x40d>
c01067eb:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01067f1:	b9 8d 00 00 00       	mov    $0x8d,%ecx
c01067f6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01067fc:	8d 35 d6 fe 10 c0    	lea    0xc010fed6,%esi
c0106802:	89 04 24             	mov    %eax,(%esp)
c0106805:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c010680c:	00 
c010680d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106811:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106815:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c0106818:	e8 33 9c ff ff       	call   c0100450 <__panic>
c010681d:	e9 00 00 00 00       	jmp    c0106822 <check_kmem+0x412>
c0106822:	e9 00 00 00 00       	jmp    c0106827 <check_kmem+0x417>
    for (int i = 0; i < sizeof(struct test_object); i++)
c0106827:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010682a:	83 c0 01             	add    $0x1,%eax
c010682d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106830:	e9 91 ff ff ff       	jmp    c01067c6 <check_kmem+0x3b6>
    assert(nr_free_pages()+3 == fp);
c0106835:	e9 00 00 00 00       	jmp    c010683a <check_kmem+0x42a>
c010683a:	e8 d1 c8 ff ff       	call   c0103110 <nr_free_pages>
c010683f:	83 c0 03             	add    $0x3,%eax
c0106842:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106845:	0f 84 32 00 00 00    	je     c010687d <check_kmem+0x46d>
c010684b:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106851:	b9 8e 00 00 00       	mov    $0x8e,%ecx
c0106856:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010685c:	8d 35 e0 fe 10 c0    	lea    0xc010fee0,%esi
c0106862:	89 04 24             	mov    %eax,(%esp)
c0106865:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010686c:	00 
c010686d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106871:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106875:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
c0106878:	e8 d3 9b ff ff       	call   c0100450 <__panic>
c010687d:	e9 00 00 00 00       	jmp    c0106882 <check_kmem+0x472>
    assert(list_empty(&(cp0->slabs_free)));
c0106882:	e9 00 00 00 00       	jmp    c0106887 <check_kmem+0x477>
c0106887:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010688a:	83 c0 10             	add    $0x10,%eax
c010688d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c0106890:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106893:	8b 40 04             	mov    0x4(%eax),%eax
c0106896:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106899:	0f 94 c1             	sete   %cl
c010689c:	80 e1 01             	and    $0x1,%cl
c010689f:	0f b6 c1             	movzbl %cl,%eax
c01068a2:	83 f8 00             	cmp    $0x0,%eax
c01068a5:	0f 85 32 00 00 00    	jne    c01068dd <check_kmem+0x4cd>
c01068ab:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01068b1:	b9 8f 00 00 00       	mov    $0x8f,%ecx
c01068b6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01068bc:	8d 35 f8 fe 10 c0    	lea    0xc010fef8,%esi
c01068c2:	89 04 24             	mov    %eax,(%esp)
c01068c5:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c01068cc:	00 
c01068cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01068d1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c01068d5:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c01068d8:	e8 73 9b ff ff       	call   c0100450 <__panic>
c01068dd:	e9 00 00 00 00       	jmp    c01068e2 <check_kmem+0x4d2>
    assert(list_empty(&(cp0->slabs_partial)));
c01068e2:	e9 00 00 00 00       	jmp    c01068e7 <check_kmem+0x4d7>
c01068e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01068ea:	83 c0 08             	add    $0x8,%eax
c01068ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01068f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068f3:	8b 40 04             	mov    0x4(%eax),%eax
c01068f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01068f9:	0f 94 c1             	sete   %cl
c01068fc:	80 e1 01             	and    $0x1,%cl
c01068ff:	0f b6 c1             	movzbl %cl,%eax
c0106902:	83 f8 00             	cmp    $0x0,%eax
c0106905:	0f 85 32 00 00 00    	jne    c010693d <check_kmem+0x52d>
c010690b:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106911:	b9 90 00 00 00       	mov    $0x90,%ecx
c0106916:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010691c:	8d 35 17 ff 10 c0    	lea    0xc010ff17,%esi
c0106922:	89 04 24             	mov    %eax,(%esp)
c0106925:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
c010692c:	00 
c010692d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106931:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106935:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c0106938:	e8 13 9b ff ff       	call   c0100450 <__panic>
c010693d:	e9 00 00 00 00       	jmp    c0106942 <check_kmem+0x532>
    assert(list_length(&(cp0->slabs_full)) == 3);
c0106942:	e9 00 00 00 00       	jmp    c0106947 <check_kmem+0x537>
c0106947:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010694a:	89 04 24             	mov    %eax,(%esp)
c010694d:	e8 de 05 00 00       	call   c0106f30 <list_length>
c0106952:	83 f8 03             	cmp    $0x3,%eax
c0106955:	0f 84 32 00 00 00    	je     c010698d <check_kmem+0x57d>
c010695b:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106961:	b9 91 00 00 00       	mov    $0x91,%ecx
c0106966:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010696c:	8d 35 39 ff 10 c0    	lea    0xc010ff39,%esi
c0106972:	89 04 24             	mov    %eax,(%esp)
c0106975:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
c010697c:	00 
c010697d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106981:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106985:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c0106988:	e8 c3 9a ff ff       	call   c0100450 <__panic>
c010698d:	e9 00 00 00 00       	jmp    c0106992 <check_kmem+0x582>
    kmem_cache_free(cp0, p3);
c0106992:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106995:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0106998:	89 04 24             	mov    %eax,(%esp)
c010699b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010699f:	e8 9c f2 ff ff       	call   c0105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p4);
c01069a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01069a7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01069aa:	89 04 24             	mov    %eax,(%esp)
c01069ad:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01069b1:	e8 8a f2 ff ff       	call   c0105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p5);
c01069b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01069b9:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01069bc:	89 04 24             	mov    %eax,(%esp)
c01069bf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01069c3:	e8 78 f2 ff ff       	call   c0105c40 <kmem_cache_free>
    assert(list_length(&(cp0->slabs_free)) == 1);
c01069c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01069cb:	83 c0 10             	add    $0x10,%eax
c01069ce:	89 04 24             	mov    %eax,(%esp)
c01069d1:	e8 5a 05 00 00       	call   c0106f30 <list_length>
c01069d6:	83 f8 01             	cmp    $0x1,%eax
c01069d9:	0f 84 35 00 00 00    	je     c0106a14 <check_kmem+0x604>
c01069df:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c01069e5:	b9 96 00 00 00       	mov    $0x96,%ecx
c01069ea:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01069f0:	8d 35 5e ff 10 c0    	lea    0xc010ff5e,%esi
c01069f6:	89 04 24             	mov    %eax,(%esp)
c01069f9:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0106a00:	00 
c0106a01:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106a05:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106a09:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0106a0f:	e8 3c 9a ff ff       	call   c0100450 <__panic>
c0106a14:	e9 00 00 00 00       	jmp    c0106a19 <check_kmem+0x609>
    assert(list_length(&(cp0->slabs_partial)) == 1);
c0106a19:	e9 00 00 00 00       	jmp    c0106a1e <check_kmem+0x60e>
c0106a1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106a21:	83 c0 08             	add    $0x8,%eax
c0106a24:	89 04 24             	mov    %eax,(%esp)
c0106a27:	e8 04 05 00 00       	call   c0106f30 <list_length>
c0106a2c:	83 f8 01             	cmp    $0x1,%eax
c0106a2f:	0f 84 35 00 00 00    	je     c0106a6a <check_kmem+0x65a>
c0106a35:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106a3b:	b9 97 00 00 00       	mov    $0x97,%ecx
c0106a40:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106a46:	8d 35 83 ff 10 c0    	lea    0xc010ff83,%esi
c0106a4c:	89 04 24             	mov    %eax,(%esp)
c0106a4f:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
c0106a56:	00 
c0106a57:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106a5b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106a5f:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c0106a65:	e8 e6 99 ff ff       	call   c0100450 <__panic>
c0106a6a:	e9 00 00 00 00       	jmp    c0106a6f <check_kmem+0x65f>
    assert(list_length(&(cp0->slabs_full)) == 1);
c0106a6f:	e9 00 00 00 00       	jmp    c0106a74 <check_kmem+0x664>
c0106a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106a77:	89 04 24             	mov    %eax,(%esp)
c0106a7a:	e8 b1 04 00 00       	call   c0106f30 <list_length>
c0106a7f:	83 f8 01             	cmp    $0x1,%eax
c0106a82:	0f 84 35 00 00 00    	je     c0106abd <check_kmem+0x6ad>
c0106a88:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106a8e:	b9 98 00 00 00       	mov    $0x98,%ecx
c0106a93:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106a99:	8d 35 ab ff 10 c0    	lea    0xc010ffab,%esi
c0106a9f:	89 04 24             	mov    %eax,(%esp)
c0106aa2:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0106aa9:	00 
c0106aaa:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106aae:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106ab2:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
c0106ab8:	e8 93 99 ff ff       	call   c0100450 <__panic>
c0106abd:	e9 00 00 00 00       	jmp    c0106ac2 <check_kmem+0x6b2>
    assert(kmem_cache_shrink(cp0) == 1);
c0106ac2:	e9 00 00 00 00       	jmp    c0106ac7 <check_kmem+0x6b7>
c0106ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106aca:	89 04 24             	mov    %eax,(%esp)
c0106acd:	e8 9e f5 ff ff       	call   c0106070 <kmem_cache_shrink>
c0106ad2:	83 f8 01             	cmp    $0x1,%eax
c0106ad5:	0f 84 35 00 00 00    	je     c0106b10 <check_kmem+0x700>
c0106adb:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106ae1:	b9 9a 00 00 00       	mov    $0x9a,%ecx
c0106ae6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106aec:	8d 35 d0 ff 10 c0    	lea    0xc010ffd0,%esi
c0106af2:	89 04 24             	mov    %eax,(%esp)
c0106af5:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0106afc:	00 
c0106afd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106b01:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106b05:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
c0106b0b:	e8 40 99 ff ff       	call   c0100450 <__panic>
c0106b10:	e9 00 00 00 00       	jmp    c0106b15 <check_kmem+0x705>
    assert(nr_free_pages()+2 == fp);
c0106b15:	e9 00 00 00 00       	jmp    c0106b1a <check_kmem+0x70a>
c0106b1a:	e8 f1 c5 ff ff       	call   c0103110 <nr_free_pages>
c0106b1f:	83 c0 02             	add    $0x2,%eax
c0106b22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106b25:	0f 84 35 00 00 00    	je     c0106b60 <check_kmem+0x750>
c0106b2b:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106b31:	b9 9b 00 00 00       	mov    $0x9b,%ecx
c0106b36:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106b3c:	8d 35 ec ff 10 c0    	lea    0xc010ffec,%esi
c0106b42:	89 04 24             	mov    %eax,(%esp)
c0106b45:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
c0106b4c:	00 
c0106b4d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106b51:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106b55:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
c0106b5b:	e8 f0 98 ff ff       	call   c0100450 <__panic>
c0106b60:	e9 00 00 00 00       	jmp    c0106b65 <check_kmem+0x755>
    assert(list_empty(&(cp0->slabs_free)));
c0106b65:	e9 00 00 00 00       	jmp    c0106b6a <check_kmem+0x75a>
c0106b6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106b6d:	83 c0 10             	add    $0x10,%eax
c0106b70:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0106b73:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106b76:	8b 40 04             	mov    0x4(%eax),%eax
c0106b79:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0106b7c:	0f 94 c1             	sete   %cl
c0106b7f:	80 e1 01             	and    $0x1,%cl
c0106b82:	0f b6 c1             	movzbl %cl,%eax
c0106b85:	83 f8 00             	cmp    $0x0,%eax
c0106b88:	0f 85 35 00 00 00    	jne    c0106bc3 <check_kmem+0x7b3>
c0106b8e:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106b94:	b9 9c 00 00 00       	mov    $0x9c,%ecx
c0106b99:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106b9f:	8d 35 f8 fe 10 c0    	lea    0xc010fef8,%esi
c0106ba5:	89 04 24             	mov    %eax,(%esp)
c0106ba8:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0106baf:	00 
c0106bb0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106bb4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106bb8:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c0106bbe:	e8 8d 98 ff ff       	call   c0100450 <__panic>
c0106bc3:	e9 00 00 00 00       	jmp    c0106bc8 <check_kmem+0x7b8>
    p = (char *) p4;
c0106bc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106bcb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    for (int i = 0; i < sizeof(struct test_object); i++)
c0106bce:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106bd5:	81 7d c0 fe 07 00 00 	cmpl   $0x7fe,-0x40(%ebp)
c0106bdc:	0f 83 65 00 00 00    	jae    c0106c47 <check_kmem+0x837>
        assert(p[i] == TEST_OBJECT_DTVAL);
c0106be2:	e9 00 00 00 00       	jmp    c0106be7 <check_kmem+0x7d7>
c0106be7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106bea:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0106bed:	0f be 04 01          	movsbl (%ecx,%eax,1),%eax
c0106bf1:	83 f8 11             	cmp    $0x11,%eax
c0106bf4:	0f 84 35 00 00 00    	je     c0106c2f <check_kmem+0x81f>
c0106bfa:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106c00:	b9 9f 00 00 00       	mov    $0x9f,%ecx
c0106c05:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106c0b:	8d 35 04 00 11 c0    	lea    0xc0110004,%esi
c0106c11:	89 04 24             	mov    %eax,(%esp)
c0106c14:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0106c1b:	00 
c0106c1c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106c20:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106c24:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%ebp)
c0106c2a:	e8 21 98 ff ff       	call   c0100450 <__panic>
c0106c2f:	e9 00 00 00 00       	jmp    c0106c34 <check_kmem+0x824>
c0106c34:	e9 00 00 00 00       	jmp    c0106c39 <check_kmem+0x829>
    for (int i = 0; i < sizeof(struct test_object); i++)
c0106c39:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c3c:	83 c0 01             	add    $0x1,%eax
c0106c3f:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0106c42:	e9 8e ff ff ff       	jmp    c0106bd5 <check_kmem+0x7c5>
    kmem_cache_free(cp0, p0);
c0106c47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c4a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c0106c4d:	89 04 24             	mov    %eax,(%esp)
c0106c50:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106c54:	e8 e7 ef ff ff       	call   c0105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p1);
c0106c59:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c5c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106c5f:	89 04 24             	mov    %eax,(%esp)
c0106c62:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106c66:	e8 d5 ef ff ff       	call   c0105c40 <kmem_cache_free>
    kmem_cache_free(cp0, p2);
c0106c6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106c6e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c71:	89 04 24             	mov    %eax,(%esp)
c0106c74:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0106c78:	e8 c3 ef ff ff       	call   c0105c40 <kmem_cache_free>
    assert(kmem_cache_reap() == 2);
c0106c7d:	e8 6e f4 ff ff       	call   c01060f0 <kmem_cache_reap>
c0106c82:	83 f8 02             	cmp    $0x2,%eax
c0106c85:	0f 84 35 00 00 00    	je     c0106cc0 <check_kmem+0x8b0>
c0106c8b:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106c91:	b9 a4 00 00 00       	mov    $0xa4,%ecx
c0106c96:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106c9c:	8d 35 1e 00 11 c0    	lea    0xc011001e,%esi
c0106ca2:	89 04 24             	mov    %eax,(%esp)
c0106ca5:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
c0106cac:	00 
c0106cad:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106cb1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106cb5:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
c0106cbb:	e8 90 97 ff ff       	call   c0100450 <__panic>
c0106cc0:	e9 00 00 00 00       	jmp    c0106cc5 <check_kmem+0x8b5>
    assert(nr_free_pages() == fp);
c0106cc5:	e9 00 00 00 00       	jmp    c0106cca <check_kmem+0x8ba>
c0106cca:	e8 41 c4 ff ff       	call   c0103110 <nr_free_pages>
c0106ccf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106cd2:	0f 84 35 00 00 00    	je     c0106d0d <check_kmem+0x8fd>
c0106cd8:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106cde:	b9 a5 00 00 00       	mov    $0xa5,%ecx
c0106ce3:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106ce9:	8d 35 35 00 11 c0    	lea    0xc0110035,%esi
c0106cef:	89 04 24             	mov    %eax,(%esp)
c0106cf2:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c0106cf9:	00 
c0106cfa:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106cfe:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106d02:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
c0106d08:	e8 43 97 ff ff       	call   c0100450 <__panic>
c0106d0d:	e9 00 00 00 00       	jmp    c0106d12 <check_kmem+0x902>
    kmem_cache_destroy(cp0);
c0106d12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d15:	89 04 24             	mov    %eax,(%esp)
c0106d18:	e8 d3 ec ff ff       	call   c01059f0 <kmem_cache_destroy>
c0106d1d:	b8 00 08 00 00       	mov    $0x800,%eax
    assert((p0 = kmalloc(2048)) != NULL);
c0106d22:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
c0106d29:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c0106d2f:	e8 1c f4 ff ff       	call   c0106150 <kmalloc>
c0106d34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d37:	83 f8 00             	cmp    $0x0,%eax
c0106d3a:	0f 85 35 00 00 00    	jne    c0106d75 <check_kmem+0x965>
c0106d40:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106d46:	b9 aa 00 00 00       	mov    $0xaa,%ecx
c0106d4b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106d51:	8d 35 4b 00 11 c0    	lea    0xc011004b,%esi
c0106d57:	89 04 24             	mov    %eax,(%esp)
c0106d5a:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c0106d61:	00 
c0106d62:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106d66:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106d6a:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%ebp)
c0106d70:	e8 db 96 ff ff       	call   c0100450 <__panic>
c0106d75:	e9 00 00 00 00       	jmp    c0106d7a <check_kmem+0x96a>
    assert(nr_free_pages()+1 == fp);
c0106d7a:	e9 00 00 00 00       	jmp    c0106d7f <check_kmem+0x96f>
c0106d7f:	e8 8c c3 ff ff       	call   c0103110 <nr_free_pages>
c0106d84:	83 c0 01             	add    $0x1,%eax
c0106d87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106d8a:	0f 84 35 00 00 00    	je     c0106dc5 <check_kmem+0x9b5>
c0106d90:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106d96:	b9 ab 00 00 00       	mov    $0xab,%ecx
c0106d9b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106da1:	8d 35 68 00 11 c0    	lea    0xc0110068,%esi
c0106da7:	89 04 24             	mov    %eax,(%esp)
c0106daa:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c0106db1:	00 
c0106db2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106db6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106dba:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
c0106dc0:	e8 8b 96 ff ff       	call   c0100450 <__panic>
c0106dc5:	e9 00 00 00 00       	jmp    c0106dca <check_kmem+0x9ba>
    kfree(p0);
c0106dca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dcd:	89 04 24             	mov    %eax,(%esp)
c0106dd0:	e8 fb f3 ff ff       	call   c01061d0 <kfree>
    assert(kmem_cache_reap() == 1);
c0106dd5:	e8 16 f3 ff ff       	call   c01060f0 <kmem_cache_reap>
c0106dda:	83 f8 01             	cmp    $0x1,%eax
c0106ddd:	0f 84 35 00 00 00    	je     c0106e18 <check_kmem+0xa08>
c0106de3:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106de9:	b9 ad 00 00 00       	mov    $0xad,%ecx
c0106dee:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106df4:	8d 35 80 00 11 c0    	lea    0xc0110080,%esi
c0106dfa:	89 04 24             	mov    %eax,(%esp)
c0106dfd:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0106e04:	00 
c0106e05:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e09:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106e0d:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c0106e13:	e8 38 96 ff ff       	call   c0100450 <__panic>
c0106e18:	e9 00 00 00 00       	jmp    c0106e1d <check_kmem+0xa0d>
    assert(nr_free_pages() == fp);
c0106e1d:	e9 00 00 00 00       	jmp    c0106e22 <check_kmem+0xa12>
c0106e22:	e8 e9 c2 ff ff       	call   c0103110 <nr_free_pages>
c0106e27:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106e2a:	0f 84 35 00 00 00    	je     c0106e65 <check_kmem+0xa55>
c0106e30:	8d 05 22 fd 10 c0    	lea    0xc010fd22,%eax
c0106e36:	b9 ae 00 00 00       	mov    $0xae,%ecx
c0106e3b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106e41:	8d 35 35 00 11 c0    	lea    0xc0110035,%esi
c0106e47:	89 04 24             	mov    %eax,(%esp)
c0106e4a:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0106e51:	00 
c0106e52:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e56:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106e5a:	89 8d 48 ff ff ff    	mov    %ecx,-0xb8(%ebp)
c0106e60:	e8 eb 95 ff ff       	call   c0100450 <__panic>
c0106e65:	e9 00 00 00 00       	jmp    c0106e6a <check_kmem+0xa5a>
c0106e6a:	8d 05 97 00 11 c0    	lea    0xc0110097,%eax
    cprintf("check_kmem() succeeded!\n");
c0106e70:	89 04 24             	mov    %eax,(%esp)
c0106e73:	e8 c8 93 ff ff       	call   c0100240 <cprintf>
}
c0106e78:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c0106e7e:	81 c4 d4 00 00 00    	add    $0xd4,%esp
c0106e84:	5e                   	pop    %esi
c0106e85:	5d                   	pop    %ebp
c0106e86:	c3                   	ret    
c0106e87:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c0106e8e:	00 00 

c0106e90 <test_ctor>:
test_ctor(void* objp, struct kmem_cache_t * cachep, size_t size) {
c0106e90:	55                   	push   %ebp
c0106e91:	89 e5                	mov    %esp,%ebp
c0106e93:	83 ec 14             	sub    $0x14,%esp
c0106e96:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e99:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106e9c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e9f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0106ea2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0106ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = objp;
c0106ea8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106eab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < size; i++)
c0106eae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106eb5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106eb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106ebb:	0f 83 18 00 00 00    	jae    c0106ed9 <test_ctor+0x49>
        p[i] = TEST_OBJECT_CTVAL;
c0106ec1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ec4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0106ec7:	c6 04 01 22          	movb   $0x22,(%ecx,%eax,1)
    for (int i = 0; i < size; i++)
c0106ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ece:	83 c0 01             	add    $0x1,%eax
c0106ed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ed4:	e9 dc ff ff ff       	jmp    c0106eb5 <test_ctor+0x25>
}
c0106ed9:	83 c4 14             	add    $0x14,%esp
c0106edc:	5d                   	pop    %ebp
c0106edd:	c3                   	ret    
c0106ede:	66 90                	xchg   %ax,%ax

c0106ee0 <test_dtor>:
test_dtor(void* objp, struct kmem_cache_t * cachep, size_t size) {
c0106ee0:	55                   	push   %ebp
c0106ee1:	89 e5                	mov    %esp,%ebp
c0106ee3:	83 ec 14             	sub    $0x14,%esp
c0106ee6:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ee9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0106eec:	8b 55 08             	mov    0x8(%ebp),%edx
c0106eef:	89 55 fc             	mov    %edx,-0x4(%ebp)
c0106ef2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c0106ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = objp;
c0106ef8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106efb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < size; i++)
c0106efe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106f05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106f0b:	0f 83 18 00 00 00    	jae    c0106f29 <test_dtor+0x49>
        p[i] = TEST_OBJECT_DTVAL;
c0106f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f14:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0106f17:	c6 04 01 11          	movb   $0x11,(%ecx,%eax,1)
    for (int i = 0; i < size; i++)
c0106f1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f1e:	83 c0 01             	add    $0x1,%eax
c0106f21:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106f24:	e9 dc ff ff ff       	jmp    c0106f05 <test_dtor+0x25>
}
c0106f29:	83 c4 14             	add    $0x14,%esp
c0106f2c:	5d                   	pop    %ebp
c0106f2d:	c3                   	ret    
c0106f2e:	66 90                	xchg   %ax,%ax

c0106f30 <list_length>:
list_length(list_entry_t *listelm) {
c0106f30:	55                   	push   %ebp
c0106f31:	89 e5                	mov    %esp,%ebp
c0106f33:	83 ec 10             	sub    $0x10,%esp
c0106f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f39:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t len = 0;
c0106f3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = listelm;
c0106f43:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0106f46:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while ((le = list_next(le)) != listelm)
c0106f49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return listelm->next;
c0106f4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f52:	8b 40 04             	mov    0x4(%eax),%eax
c0106f55:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106f58:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0106f5b:	0f 84 0e 00 00 00    	je     c0106f6f <list_length+0x3f>
        len ++;
c0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f64:	83 c0 01             	add    $0x1,%eax
c0106f67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != listelm)
c0106f6a:	e9 da ff ff ff       	jmp    c0106f49 <list_length+0x19>
    return len;
c0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f72:	83 c4 10             	add    $0x10,%esp
c0106f75:	5d                   	pop    %ebp
c0106f76:	c3                   	ret    
c0106f77:	66 90                	xchg   %ax,%ax
c0106f79:	66 90                	xchg   %ax,%ax
c0106f7b:	66 90                	xchg   %ax,%ax
c0106f7d:	66 90                	xchg   %ax,%ax
c0106f7f:	90                   	nop

c0106f80 <buddy_init>:
        list_add(&(free_list), &(page->page_link));
    }
}

static void
buddy_init(void) {
c0106f80:	55                   	push   %ebp
c0106f81:	89 e5                	mov    %esp,%ebp
c0106f83:	50                   	push   %eax
c0106f84:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    list_init(&free_list);
c0106f8a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0106f8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f90:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0106f93:	89 41 04             	mov    %eax,0x4(%ecx)
c0106f96:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c0106f99:	89 01                	mov    %eax,(%ecx)
    nr_free = 0;
c0106f9b:	c7 05 38 49 11 c0 00 	movl   $0x0,0xc0114938
c0106fa2:	00 00 00 
}
c0106fa5:	83 c4 04             	add    $0x4,%esp
c0106fa8:	5d                   	pop    %ebp
c0106fa9:	c3                   	ret    
c0106faa:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0106fb0 <buddy_init_memmap>:

static void
buddy_init_memmap(struct Page *base, size_t n) {
c0106fb0:	55                   	push   %ebp
c0106fb1:	89 e5                	mov    %esp,%ebp
c0106fb3:	56                   	push   %esi
c0106fb4:	83 ec 34             	sub    $0x34,%esp
c0106fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106fba:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0106fbd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0106fc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(n > 0);
c0106fc3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106fc7:	0f 87 32 00 00 00    	ja     c0106fff <buddy_init_memmap+0x4f>
c0106fcd:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c0106fd3:	b9 69 00 00 00       	mov    $0x69,%ecx
c0106fd8:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0106fde:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c0106fe4:	89 04 24             	mov    %eax,(%esp)
c0106fe7:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0106fee:	00 
c0106fef:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106ff3:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106ff7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c0106ffa:	e8 51 94 ff ff       	call   c0100450 <__panic>
c0106fff:	e9 00 00 00 00       	jmp    c0107004 <buddy_init_memmap+0x54>
    // Init pages
    for (struct Page *p = base; p < base + n; p++) {
c0107004:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107007:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010700a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010700d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0107010:	6b 55 e8 14          	imul   $0x14,-0x18(%ebp),%edx
c0107014:	01 d1                	add    %edx,%ecx
c0107016:	39 c8                	cmp    %ecx,%eax
c0107018:	0f 83 92 00 00 00    	jae    c01070b0 <buddy_init_memmap+0x100>
        assert(PageReserved(p));
c010701e:	e9 00 00 00 00       	jmp    c0107023 <buddy_init_memmap+0x73>
c0107023:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107026:	83 c0 04             	add    $0x4,%eax
c0107029:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c0107030:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107033:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107036:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0107039:	0f a3 08             	bt     %ecx,(%eax)
c010703c:	19 c0                	sbb    %eax,%eax
c010703e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return oldbit != 0;
c0107041:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107045:	0f 95 c2             	setne  %dl
c0107048:	80 e2 01             	and    $0x1,%dl
c010704b:	0f b6 c2             	movzbl %dl,%eax
c010704e:	83 f8 00             	cmp    $0x0,%eax
c0107051:	0f 85 32 00 00 00    	jne    c0107089 <buddy_init_memmap+0xd9>
c0107057:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010705d:	b9 6c 00 00 00       	mov    $0x6c,%ecx
c0107062:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0107068:	8d 35 e4 00 11 c0    	lea    0xc01100e4,%esi
c010706e:	89 04 24             	mov    %eax,(%esp)
c0107071:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107078:	00 
c0107079:	89 54 24 08          	mov    %edx,0x8(%esp)
c010707d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0107081:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c0107084:	e8 c7 93 ff ff       	call   c0100450 <__panic>
c0107089:	e9 00 00 00 00       	jmp    c010708e <buddy_init_memmap+0xde>
        p->flags = p->property = 0;
c010708e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107091:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0107098:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010709b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    for (struct Page *p = base; p < base + n; p++) {
c01070a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070a5:	83 c0 14             	add    $0x14,%eax
c01070a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01070ab:	e9 5a ff ff ff       	jmp    c010700a <buddy_init_memmap+0x5a>
    }
    // Init size
    buddy_init_size(n);
c01070b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01070b3:	89 04 24             	mov    %eax,(%esp)
c01070b6:	e8 45 2e 00 00       	call   c0109f00 <buddy_init_size>
    // Init segment
    buddy_init_segment(base);
c01070bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01070be:	89 04 24             	mov    %eax,(%esp)
c01070c1:	e8 8a 34 00 00       	call   c010a550 <buddy_init_segment>
}
c01070c6:	83 c4 34             	add    $0x34,%esp
c01070c9:	5e                   	pop    %esi
c01070ca:	5d                   	pop    %ebp
c01070cb:	c3                   	ret    
c01070cc:	0f 1f 40 00          	nopl   0x0(%eax)

c01070d0 <buddy_alloc_pages>:

static struct Page *
buddy_alloc_pages(size_t n) {
c01070d0:	55                   	push   %ebp
c01070d1:	89 e5                	mov    %esp,%ebp
c01070d3:	53                   	push   %ebx
c01070d4:	57                   	push   %edi
c01070d5:	56                   	push   %esi
c01070d6:	81 ec 8c 01 00 00    	sub    $0x18c,%esp
c01070dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01070df:	89 45 9c             	mov    %eax,-0x64(%ebp)
    assert(n > 0);
c01070e2:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
c01070e6:	0f 87 35 00 00 00    	ja     c0107121 <buddy_alloc_pages+0x51>
c01070ec:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c01070f2:	b9 77 00 00 00       	mov    $0x77,%ecx
c01070f7:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01070fd:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c0107103:	89 04 24             	mov    %eax,(%esp)
c0107106:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c010710d:	00 
c010710e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107112:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0107116:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c010711c:	e8 2f 93 ff ff       	call   c0100450 <__panic>
c0107121:	e9 00 00 00 00       	jmp    c0107126 <buddy_alloc_pages+0x56>
    struct Page *page;
    size_t block = BUDDY_ROOT;
c0107126:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
    size_t length = UINT32_ROUND_UP(n);
c010712d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107130:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c0107133:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107136:	c1 ea 01             	shr    $0x1,%edx
c0107139:	09 d1                	or     %edx,%ecx
c010713b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010713e:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107141:	c1 ee 01             	shr    $0x1,%esi
c0107144:	09 f2                	or     %esi,%edx
c0107146:	c1 ea 02             	shr    $0x2,%edx
c0107149:	09 d1                	or     %edx,%ecx
c010714b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010714e:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107151:	c1 ee 01             	shr    $0x1,%esi
c0107154:	09 f2                	or     %esi,%edx
c0107156:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107159:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010715c:	c1 ef 01             	shr    $0x1,%edi
c010715f:	09 fe                	or     %edi,%esi
c0107161:	c1 ee 02             	shr    $0x2,%esi
c0107164:	09 f2                	or     %esi,%edx
c0107166:	c1 ea 04             	shr    $0x4,%edx
c0107169:	09 d1                	or     %edx,%ecx
c010716b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010716e:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107171:	c1 ee 01             	shr    $0x1,%esi
c0107174:	09 f2                	or     %esi,%edx
c0107176:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107179:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010717c:	c1 ef 01             	shr    $0x1,%edi
c010717f:	09 fe                	or     %edi,%esi
c0107181:	c1 ee 02             	shr    $0x2,%esi
c0107184:	09 f2                	or     %esi,%edx
c0107186:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107189:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010718c:	c1 ef 01             	shr    $0x1,%edi
c010718f:	09 fe                	or     %edi,%esi
c0107191:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107194:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107197:	c1 eb 01             	shr    $0x1,%ebx
c010719a:	09 df                	or     %ebx,%edi
c010719c:	c1 ef 02             	shr    $0x2,%edi
c010719f:	09 fe                	or     %edi,%esi
c01071a1:	c1 ee 04             	shr    $0x4,%esi
c01071a4:	09 f2                	or     %esi,%edx
c01071a6:	c1 ea 08             	shr    $0x8,%edx
c01071a9:	09 d1                	or     %edx,%ecx
c01071ab:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01071ae:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01071b1:	c1 ee 01             	shr    $0x1,%esi
c01071b4:	09 f2                	or     %esi,%edx
c01071b6:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01071b9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01071bc:	c1 ef 01             	shr    $0x1,%edi
c01071bf:	09 fe                	or     %edi,%esi
c01071c1:	c1 ee 02             	shr    $0x2,%esi
c01071c4:	09 f2                	or     %esi,%edx
c01071c6:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01071c9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01071cc:	c1 ef 01             	shr    $0x1,%edi
c01071cf:	09 fe                	or     %edi,%esi
c01071d1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01071d4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c01071d7:	c1 eb 01             	shr    $0x1,%ebx
c01071da:	09 df                	or     %ebx,%edi
c01071dc:	c1 ef 02             	shr    $0x2,%edi
c01071df:	09 fe                	or     %edi,%esi
c01071e1:	c1 ee 04             	shr    $0x4,%esi
c01071e4:	09 f2                	or     %esi,%edx
c01071e6:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01071e9:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01071ec:	c1 ef 01             	shr    $0x1,%edi
c01071ef:	09 fe                	or     %edi,%esi
c01071f1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01071f4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c01071f7:	c1 eb 01             	shr    $0x1,%ebx
c01071fa:	09 df                	or     %ebx,%edi
c01071fc:	c1 ef 02             	shr    $0x2,%edi
c01071ff:	09 fe                	or     %edi,%esi
c0107201:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107204:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107207:	c1 eb 01             	shr    $0x1,%ebx
c010720a:	09 df                	or     %ebx,%edi
c010720c:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c010720f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c0107215:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107218:	c1 e8 01             	shr    $0x1,%eax
c010721b:	09 c3                	or     %eax,%ebx
c010721d:	c1 eb 02             	shr    $0x2,%ebx
c0107220:	09 df                	or     %ebx,%edi
c0107222:	c1 ef 04             	shr    $0x4,%edi
c0107225:	09 fe                	or     %edi,%esi
c0107227:	c1 ee 08             	shr    $0x8,%esi
c010722a:	09 f2                	or     %esi,%edx
c010722c:	c1 ea 10             	shr    $0x10,%edx
c010722f:	09 d1                	or     %edx,%ecx
c0107231:	c1 e9 01             	shr    $0x1,%ecx
c0107234:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010723a:	21 c8                	and    %ecx,%eax
c010723c:	83 f8 00             	cmp    $0x0,%eax
c010723f:	0f 84 2e 01 00 00    	je     c0107373 <buddy_alloc_pages+0x2a3>
c0107245:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107248:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010724b:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010724e:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107251:	c1 ee 01             	shr    $0x1,%esi
c0107254:	09 f2                	or     %esi,%edx
c0107256:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107259:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010725c:	c1 ef 01             	shr    $0x1,%edi
c010725f:	09 fe                	or     %edi,%esi
c0107261:	c1 ee 02             	shr    $0x2,%esi
c0107264:	09 f2                	or     %esi,%edx
c0107266:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107269:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010726c:	c1 ef 01             	shr    $0x1,%edi
c010726f:	09 fe                	or     %edi,%esi
c0107271:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107274:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107277:	c1 eb 01             	shr    $0x1,%ebx
c010727a:	09 df                	or     %ebx,%edi
c010727c:	c1 ef 02             	shr    $0x2,%edi
c010727f:	09 fe                	or     %edi,%esi
c0107281:	c1 ee 04             	shr    $0x4,%esi
c0107284:	09 f2                	or     %esi,%edx
c0107286:	8b 75 9c             	mov    -0x64(%ebp),%esi
c0107289:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010728c:	c1 ef 01             	shr    $0x1,%edi
c010728f:	09 fe                	or     %edi,%esi
c0107291:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107294:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107297:	c1 eb 01             	shr    $0x1,%ebx
c010729a:	09 df                	or     %ebx,%edi
c010729c:	c1 ef 02             	shr    $0x2,%edi
c010729f:	09 fe                	or     %edi,%esi
c01072a1:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01072a4:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c01072a7:	c1 eb 01             	shr    $0x1,%ebx
c01072aa:	09 df                	or     %ebx,%edi
c01072ac:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c01072af:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c01072b5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01072b8:	c1 e8 01             	shr    $0x1,%eax
c01072bb:	09 c3                	or     %eax,%ebx
c01072bd:	c1 eb 02             	shr    $0x2,%ebx
c01072c0:	09 df                	or     %ebx,%edi
c01072c2:	c1 ef 04             	shr    $0x4,%edi
c01072c5:	09 fe                	or     %edi,%esi
c01072c7:	c1 ee 08             	shr    $0x8,%esi
c01072ca:	09 f2                	or     %esi,%edx
c01072cc:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01072cf:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01072d2:	c1 ee 01             	shr    $0x1,%esi
c01072d5:	09 f0                	or     %esi,%eax
c01072d7:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01072da:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01072dd:	c1 ef 01             	shr    $0x1,%edi
c01072e0:	09 fe                	or     %edi,%esi
c01072e2:	c1 ee 02             	shr    $0x2,%esi
c01072e5:	09 f0                	or     %esi,%eax
c01072e7:	8b 75 9c             	mov    -0x64(%ebp),%esi
c01072ea:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01072ed:	c1 ef 01             	shr    $0x1,%edi
c01072f0:	09 fe                	or     %edi,%esi
c01072f2:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c01072f5:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c01072f8:	c1 eb 01             	shr    $0x1,%ebx
c01072fb:	09 df                	or     %ebx,%edi
c01072fd:	c1 ef 02             	shr    $0x2,%edi
c0107300:	09 fe                	or     %edi,%esi
c0107302:	c1 ee 04             	shr    $0x4,%esi
c0107305:	09 f0                	or     %esi,%eax
c0107307:	8b 75 9c             	mov    -0x64(%ebp),%esi
c010730a:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010730d:	c1 ef 01             	shr    $0x1,%edi
c0107310:	09 fe                	or     %edi,%esi
c0107312:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107315:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107318:	c1 eb 01             	shr    $0x1,%ebx
c010731b:	09 df                	or     %ebx,%edi
c010731d:	c1 ef 02             	shr    $0x2,%edi
c0107320:	09 fe                	or     %edi,%esi
c0107322:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c0107325:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107328:	c1 eb 01             	shr    $0x1,%ebx
c010732b:	09 df                	or     %ebx,%edi
c010732d:	8b 5d 9c             	mov    -0x64(%ebp),%ebx
c0107330:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
c0107336:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107339:	c1 e8 01             	shr    $0x1,%eax
c010733c:	09 c3                	or     %eax,%ebx
c010733e:	c1 eb 02             	shr    $0x2,%ebx
c0107341:	09 df                	or     %ebx,%edi
c0107343:	c1 ef 04             	shr    $0x4,%edi
c0107346:	09 fe                	or     %edi,%esi
c0107348:	c1 ee 08             	shr    $0x8,%esi
c010734b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
c0107351:	09 f0                	or     %esi,%eax
c0107353:	c1 e8 10             	shr    $0x10,%eax
c0107356:	09 c2                	or     %eax,%edx
c0107358:	c1 ea 01             	shr    $0x1,%edx
c010735b:	21 d1                	and    %edx,%ecx
c010735d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c0107363:	29 c8                	sub    %ecx,%eax
c0107365:	c1 e0 01             	shl    $0x1,%eax
c0107368:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c010736e:	e9 09 00 00 00       	jmp    c010737c <buddy_alloc_pages+0x2ac>
c0107373:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107376:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c010737c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
c0107382:	89 45 90             	mov    %eax,-0x70(%ebp)
c0107385:	31 c0                	xor    %eax,%eax
c0107387:	88 c1                	mov    %al,%cl
    // Find block
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
c0107389:	8b 45 90             	mov    -0x70(%ebp),%eax
c010738c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010738f:	8b 35 18 49 11 c0    	mov    0xc0114918,%esi
c0107395:	3b 04 96             	cmp    (%esi,%edx,4),%eax
c0107398:	88 8d 67 ff ff ff    	mov    %cl,-0x99(%ebp)
c010739e:	0f 87 b4 02 00 00    	ja     c0107658 <buddy_alloc_pages+0x588>
c01073a4:	8b 45 90             	mov    -0x70(%ebp),%eax
c01073a7:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c01073ad:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01073b0:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01073b3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01073b6:	c1 ef 01             	shr    $0x1,%edi
c01073b9:	09 fe                	or     %edi,%esi
c01073bb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01073be:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01073c1:	c1 eb 01             	shr    $0x1,%ebx
c01073c4:	09 df                	or     %ebx,%edi
c01073c6:	c1 ef 02             	shr    $0x2,%edi
c01073c9:	09 fe                	or     %edi,%esi
c01073cb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01073ce:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01073d1:	c1 eb 01             	shr    $0x1,%ebx
c01073d4:	09 df                	or     %ebx,%edi
c01073d6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01073d9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c01073df:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01073e2:	c1 e8 01             	shr    $0x1,%eax
c01073e5:	09 c3                	or     %eax,%ebx
c01073e7:	c1 eb 02             	shr    $0x2,%ebx
c01073ea:	09 df                	or     %ebx,%edi
c01073ec:	c1 ef 04             	shr    $0x4,%edi
c01073ef:	09 fe                	or     %edi,%esi
c01073f1:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01073f4:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01073f7:	c1 ef 01             	shr    $0x1,%edi
c01073fa:	09 f8                	or     %edi,%eax
c01073fc:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01073ff:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107402:	c1 eb 01             	shr    $0x1,%ebx
c0107405:	09 df                	or     %ebx,%edi
c0107407:	c1 ef 02             	shr    $0x2,%edi
c010740a:	09 f8                	or     %edi,%eax
c010740c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010740f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107412:	c1 eb 01             	shr    $0x1,%ebx
c0107415:	09 df                	or     %ebx,%edi
c0107417:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010741a:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c0107420:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107423:	c1 e8 01             	shr    $0x1,%eax
c0107426:	09 c3                	or     %eax,%ebx
c0107428:	c1 eb 02             	shr    $0x2,%ebx
c010742b:	09 df                	or     %ebx,%edi
c010742d:	c1 ef 04             	shr    $0x4,%edi
c0107430:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
c0107436:	09 f8                	or     %edi,%eax
c0107438:	c1 e8 08             	shr    $0x8,%eax
c010743b:	09 c6                	or     %eax,%esi
c010743d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107440:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107443:	c1 ef 01             	shr    $0x1,%edi
c0107446:	09 f8                	or     %edi,%eax
c0107448:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010744b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010744e:	c1 eb 01             	shr    $0x1,%ebx
c0107451:	09 df                	or     %ebx,%edi
c0107453:	c1 ef 02             	shr    $0x2,%edi
c0107456:	09 f8                	or     %edi,%eax
c0107458:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010745b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010745e:	c1 eb 01             	shr    $0x1,%ebx
c0107461:	09 df                	or     %ebx,%edi
c0107463:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107466:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c010746c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010746f:	c1 e8 01             	shr    $0x1,%eax
c0107472:	09 c3                	or     %eax,%ebx
c0107474:	c1 eb 02             	shr    $0x2,%ebx
c0107477:	09 df                	or     %ebx,%edi
c0107479:	c1 ef 04             	shr    $0x4,%edi
c010747c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
c0107482:	09 f8                	or     %edi,%eax
c0107484:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107487:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010748a:	c1 eb 01             	shr    $0x1,%ebx
c010748d:	09 df                	or     %ebx,%edi
c010748f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107492:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c0107498:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010749b:	c1 e8 01             	shr    $0x1,%eax
c010749e:	09 c3                	or     %eax,%ebx
c01074a0:	c1 eb 02             	shr    $0x2,%ebx
c01074a3:	09 df                	or     %ebx,%edi
c01074a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01074a8:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01074ab:	c1 eb 01             	shr    $0x1,%ebx
c01074ae:	09 d8                	or     %ebx,%eax
c01074b0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01074b3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
c01074b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01074bc:	c1 e8 01             	shr    $0x1,%eax
c01074bf:	09 c3                	or     %eax,%ebx
c01074c1:	c1 eb 02             	shr    $0x2,%ebx
c01074c4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
c01074ca:	09 d8                	or     %ebx,%eax
c01074cc:	c1 e8 04             	shr    $0x4,%eax
c01074cf:	09 c7                	or     %eax,%edi
c01074d1:	c1 ef 08             	shr    $0x8,%edi
c01074d4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
c01074da:	09 f8                	or     %edi,%eax
c01074dc:	c1 e8 10             	shr    $0x10,%eax
c01074df:	09 c6                	or     %eax,%esi
c01074e1:	c1 ee 01             	shr    $0x1,%esi
c01074e4:	21 f2                	and    %esi,%edx
c01074e6:	83 fa 00             	cmp    $0x0,%edx
c01074e9:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c01074ef:	0f 84 2b 01 00 00    	je     c0107620 <buddy_alloc_pages+0x550>
c01074f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01074f8:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c01074fb:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01074fe:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107501:	c1 ee 01             	shr    $0x1,%esi
c0107504:	09 f2                	or     %esi,%edx
c0107506:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107509:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010750c:	c1 ef 01             	shr    $0x1,%edi
c010750f:	09 fe                	or     %edi,%esi
c0107511:	c1 ee 02             	shr    $0x2,%esi
c0107514:	09 f2                	or     %esi,%edx
c0107516:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107519:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010751c:	c1 ef 01             	shr    $0x1,%edi
c010751f:	09 fe                	or     %edi,%esi
c0107521:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107524:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107527:	c1 eb 01             	shr    $0x1,%ebx
c010752a:	09 df                	or     %ebx,%edi
c010752c:	c1 ef 02             	shr    $0x2,%edi
c010752f:	09 fe                	or     %edi,%esi
c0107531:	c1 ee 04             	shr    $0x4,%esi
c0107534:	09 f2                	or     %esi,%edx
c0107536:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107539:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010753c:	c1 ef 01             	shr    $0x1,%edi
c010753f:	09 fe                	or     %edi,%esi
c0107541:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107544:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107547:	c1 eb 01             	shr    $0x1,%ebx
c010754a:	09 df                	or     %ebx,%edi
c010754c:	c1 ef 02             	shr    $0x2,%edi
c010754f:	09 fe                	or     %edi,%esi
c0107551:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107554:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107557:	c1 eb 01             	shr    $0x1,%ebx
c010755a:	09 df                	or     %ebx,%edi
c010755c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010755f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c0107565:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107568:	c1 e8 01             	shr    $0x1,%eax
c010756b:	09 c3                	or     %eax,%ebx
c010756d:	c1 eb 02             	shr    $0x2,%ebx
c0107570:	09 df                	or     %ebx,%edi
c0107572:	c1 ef 04             	shr    $0x4,%edi
c0107575:	09 fe                	or     %edi,%esi
c0107577:	c1 ee 08             	shr    $0x8,%esi
c010757a:	09 f2                	or     %esi,%edx
c010757c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010757f:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107582:	c1 ee 01             	shr    $0x1,%esi
c0107585:	09 f0                	or     %esi,%eax
c0107587:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010758a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010758d:	c1 ef 01             	shr    $0x1,%edi
c0107590:	09 fe                	or     %edi,%esi
c0107592:	c1 ee 02             	shr    $0x2,%esi
c0107595:	09 f0                	or     %esi,%eax
c0107597:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010759a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010759d:	c1 ef 01             	shr    $0x1,%edi
c01075a0:	09 fe                	or     %edi,%esi
c01075a2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01075a5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01075a8:	c1 eb 01             	shr    $0x1,%ebx
c01075ab:	09 df                	or     %ebx,%edi
c01075ad:	c1 ef 02             	shr    $0x2,%edi
c01075b0:	09 fe                	or     %edi,%esi
c01075b2:	c1 ee 04             	shr    $0x4,%esi
c01075b5:	09 f0                	or     %esi,%eax
c01075b7:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01075ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01075bd:	c1 ef 01             	shr    $0x1,%edi
c01075c0:	09 fe                	or     %edi,%esi
c01075c2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01075c5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01075c8:	c1 eb 01             	shr    $0x1,%ebx
c01075cb:	09 df                	or     %ebx,%edi
c01075cd:	c1 ef 02             	shr    $0x2,%edi
c01075d0:	09 fe                	or     %edi,%esi
c01075d2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01075d5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01075d8:	c1 eb 01             	shr    $0x1,%ebx
c01075db:	09 df                	or     %ebx,%edi
c01075dd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01075e0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c01075e6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01075e9:	c1 e8 01             	shr    $0x1,%eax
c01075ec:	09 c3                	or     %eax,%ebx
c01075ee:	c1 eb 02             	shr    $0x2,%ebx
c01075f1:	09 df                	or     %ebx,%edi
c01075f3:	c1 ef 04             	shr    $0x4,%edi
c01075f6:	09 fe                	or     %edi,%esi
c01075f8:	c1 ee 08             	shr    $0x8,%esi
c01075fb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
c0107601:	09 f0                	or     %esi,%eax
c0107603:	c1 e8 10             	shr    $0x10,%eax
c0107606:	09 c2                	or     %eax,%edx
c0107608:	c1 ea 01             	shr    $0x1,%edx
c010760b:	21 d1                	and    %edx,%ecx
c010760d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
c0107613:	29 c8                	sub    %ecx,%eax
c0107615:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c010761b:	e9 09 00 00 00       	jmp    c0107629 <buddy_alloc_pages+0x559>
c0107620:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107623:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c0107629:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
c010762f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
c0107635:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
c010763b:	89 c8                	mov    %ecx,%eax
c010763d:	31 d2                	xor    %edx,%edx
c010763f:	8b b5 3c ff ff ff    	mov    -0xc4(%ebp),%esi
c0107645:	f7 f6                	div    %esi
c0107647:	8b bd 60 ff ff ff    	mov    -0xa0(%ebp),%edi
c010764d:	39 c7                	cmp    %eax,%edi
c010764f:	0f 92 c3             	setb   %bl
c0107652:	88 9d 67 ff ff ff    	mov    %bl,-0x99(%ebp)
c0107658:	8a 85 67 ff ff ff    	mov    -0x99(%ebp),%al
c010765e:	a8 01                	test   $0x1,%al
c0107660:	0f 85 05 00 00 00    	jne    c010766b <buddy_alloc_pages+0x59b>
c0107666:	e9 ca 0c 00 00       	jmp    c0108335 <buddy_alloc_pages+0x1265>
        size_t left = BUDDY_LEFT(block);
c010766b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010766e:	c1 e0 01             	shl    $0x1,%eax
c0107671:	89 45 8c             	mov    %eax,-0x74(%ebp)
        size_t right = BUDDY_RIGHT(block);
c0107674:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107677:	c1 e0 01             	shl    $0x1,%eax
c010767a:	83 c0 01             	add    $0x1,%eax
c010767d:	89 45 88             	mov    %eax,-0x78(%ebp)
        if (BUDDY_EMPTY(block)) {                   // Split
c0107680:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107683:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c0107689:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c010768c:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c0107692:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107695:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107698:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010769b:	c1 ef 01             	shr    $0x1,%edi
c010769e:	09 fe                	or     %edi,%esi
c01076a0:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01076a3:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076a6:	c1 eb 01             	shr    $0x1,%ebx
c01076a9:	09 df                	or     %ebx,%edi
c01076ab:	c1 ef 02             	shr    $0x2,%edi
c01076ae:	09 fe                	or     %edi,%esi
c01076b0:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01076b3:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076b6:	c1 eb 01             	shr    $0x1,%ebx
c01076b9:	09 df                	or     %ebx,%edi
c01076bb:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076be:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
c01076c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01076c7:	c1 e8 01             	shr    $0x1,%eax
c01076ca:	09 c3                	or     %eax,%ebx
c01076cc:	c1 eb 02             	shr    $0x2,%ebx
c01076cf:	09 df                	or     %ebx,%edi
c01076d1:	c1 ef 04             	shr    $0x4,%edi
c01076d4:	09 fe                	or     %edi,%esi
c01076d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01076d9:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01076dc:	c1 ef 01             	shr    $0x1,%edi
c01076df:	09 f8                	or     %edi,%eax
c01076e1:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01076e4:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076e7:	c1 eb 01             	shr    $0x1,%ebx
c01076ea:	09 df                	or     %ebx,%edi
c01076ec:	c1 ef 02             	shr    $0x2,%edi
c01076ef:	09 f8                	or     %edi,%eax
c01076f1:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01076f4:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076f7:	c1 eb 01             	shr    $0x1,%ebx
c01076fa:	09 df                	or     %ebx,%edi
c01076fc:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01076ff:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c0107705:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107708:	c1 e8 01             	shr    $0x1,%eax
c010770b:	09 c3                	or     %eax,%ebx
c010770d:	c1 eb 02             	shr    $0x2,%ebx
c0107710:	09 df                	or     %ebx,%edi
c0107712:	c1 ef 04             	shr    $0x4,%edi
c0107715:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
c010771b:	09 f8                	or     %edi,%eax
c010771d:	c1 e8 08             	shr    $0x8,%eax
c0107720:	09 c6                	or     %eax,%esi
c0107722:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107725:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107728:	c1 ef 01             	shr    $0x1,%edi
c010772b:	09 f8                	or     %edi,%eax
c010772d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107730:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107733:	c1 eb 01             	shr    $0x1,%ebx
c0107736:	09 df                	or     %ebx,%edi
c0107738:	c1 ef 02             	shr    $0x2,%edi
c010773b:	09 f8                	or     %edi,%eax
c010773d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107740:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107743:	c1 eb 01             	shr    $0x1,%ebx
c0107746:	09 df                	or     %ebx,%edi
c0107748:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010774b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
c0107751:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107754:	c1 e8 01             	shr    $0x1,%eax
c0107757:	09 c3                	or     %eax,%ebx
c0107759:	c1 eb 02             	shr    $0x2,%ebx
c010775c:	09 df                	or     %ebx,%edi
c010775e:	c1 ef 04             	shr    $0x4,%edi
c0107761:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
c0107767:	09 f8                	or     %edi,%eax
c0107769:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010776c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010776f:	c1 eb 01             	shr    $0x1,%ebx
c0107772:	09 df                	or     %ebx,%edi
c0107774:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107777:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
c010777d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107780:	c1 e8 01             	shr    $0x1,%eax
c0107783:	09 c3                	or     %eax,%ebx
c0107785:	c1 eb 02             	shr    $0x2,%ebx
c0107788:	09 df                	or     %ebx,%edi
c010778a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010778d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107790:	c1 eb 01             	shr    $0x1,%ebx
c0107793:	09 d8                	or     %ebx,%eax
c0107795:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107798:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
c010779e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01077a1:	c1 e8 01             	shr    $0x1,%eax
c01077a4:	09 c3                	or     %eax,%ebx
c01077a6:	c1 eb 02             	shr    $0x2,%ebx
c01077a9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
c01077af:	09 d8                	or     %ebx,%eax
c01077b1:	c1 e8 04             	shr    $0x4,%eax
c01077b4:	09 c7                	or     %eax,%edi
c01077b6:	c1 ef 08             	shr    $0x8,%edi
c01077b9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
c01077bf:	09 f8                	or     %edi,%eax
c01077c1:	c1 e8 10             	shr    $0x10,%eax
c01077c4:	09 c6                	or     %eax,%esi
c01077c6:	c1 ee 01             	shr    $0x1,%esi
c01077c9:	21 f2                	and    %esi,%edx
c01077cb:	83 fa 00             	cmp    $0x0,%edx
c01077ce:	89 8d 24 ff ff ff    	mov    %ecx,-0xdc(%ebp)
c01077d4:	0f 84 2b 01 00 00    	je     c0107905 <buddy_alloc_pages+0x835>
c01077da:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01077dd:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c01077e0:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01077e3:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01077e6:	c1 ee 01             	shr    $0x1,%esi
c01077e9:	09 f2                	or     %esi,%edx
c01077eb:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01077ee:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01077f1:	c1 ef 01             	shr    $0x1,%edi
c01077f4:	09 fe                	or     %edi,%esi
c01077f6:	c1 ee 02             	shr    $0x2,%esi
c01077f9:	09 f2                	or     %esi,%edx
c01077fb:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01077fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107801:	c1 ef 01             	shr    $0x1,%edi
c0107804:	09 fe                	or     %edi,%esi
c0107806:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107809:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010780c:	c1 eb 01             	shr    $0x1,%ebx
c010780f:	09 df                	or     %ebx,%edi
c0107811:	c1 ef 02             	shr    $0x2,%edi
c0107814:	09 fe                	or     %edi,%esi
c0107816:	c1 ee 04             	shr    $0x4,%esi
c0107819:	09 f2                	or     %esi,%edx
c010781b:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010781e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107821:	c1 ef 01             	shr    $0x1,%edi
c0107824:	09 fe                	or     %edi,%esi
c0107826:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107829:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010782c:	c1 eb 01             	shr    $0x1,%ebx
c010782f:	09 df                	or     %ebx,%edi
c0107831:	c1 ef 02             	shr    $0x2,%edi
c0107834:	09 fe                	or     %edi,%esi
c0107836:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107839:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010783c:	c1 eb 01             	shr    $0x1,%ebx
c010783f:	09 df                	or     %ebx,%edi
c0107841:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107844:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
c010784a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010784d:	c1 e8 01             	shr    $0x1,%eax
c0107850:	09 c3                	or     %eax,%ebx
c0107852:	c1 eb 02             	shr    $0x2,%ebx
c0107855:	09 df                	or     %ebx,%edi
c0107857:	c1 ef 04             	shr    $0x4,%edi
c010785a:	09 fe                	or     %edi,%esi
c010785c:	c1 ee 08             	shr    $0x8,%esi
c010785f:	09 f2                	or     %esi,%edx
c0107861:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107864:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107867:	c1 ee 01             	shr    $0x1,%esi
c010786a:	09 f0                	or     %esi,%eax
c010786c:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010786f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107872:	c1 ef 01             	shr    $0x1,%edi
c0107875:	09 fe                	or     %edi,%esi
c0107877:	c1 ee 02             	shr    $0x2,%esi
c010787a:	09 f0                	or     %esi,%eax
c010787c:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010787f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107882:	c1 ef 01             	shr    $0x1,%edi
c0107885:	09 fe                	or     %edi,%esi
c0107887:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010788a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010788d:	c1 eb 01             	shr    $0x1,%ebx
c0107890:	09 df                	or     %ebx,%edi
c0107892:	c1 ef 02             	shr    $0x2,%edi
c0107895:	09 fe                	or     %edi,%esi
c0107897:	c1 ee 04             	shr    $0x4,%esi
c010789a:	09 f0                	or     %esi,%eax
c010789c:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010789f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01078a2:	c1 ef 01             	shr    $0x1,%edi
c01078a5:	09 fe                	or     %edi,%esi
c01078a7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01078aa:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01078ad:	c1 eb 01             	shr    $0x1,%ebx
c01078b0:	09 df                	or     %ebx,%edi
c01078b2:	c1 ef 02             	shr    $0x2,%edi
c01078b5:	09 fe                	or     %edi,%esi
c01078b7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01078ba:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01078bd:	c1 eb 01             	shr    $0x1,%ebx
c01078c0:	09 df                	or     %ebx,%edi
c01078c2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01078c5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
c01078cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01078ce:	c1 e8 01             	shr    $0x1,%eax
c01078d1:	09 c3                	or     %eax,%ebx
c01078d3:	c1 eb 02             	shr    $0x2,%ebx
c01078d6:	09 df                	or     %ebx,%edi
c01078d8:	c1 ef 04             	shr    $0x4,%edi
c01078db:	09 fe                	or     %edi,%esi
c01078dd:	c1 ee 08             	shr    $0x8,%esi
c01078e0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
c01078e6:	09 f0                	or     %esi,%eax
c01078e8:	c1 e8 10             	shr    $0x10,%eax
c01078eb:	09 c2                	or     %eax,%edx
c01078ed:	c1 ea 01             	shr    $0x1,%edx
c01078f0:	21 d1                	and    %edx,%ecx
c01078f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
c01078f8:	29 c8                	sub    %ecx,%eax
c01078fa:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
c0107900:	e9 09 00 00 00       	jmp    c010790e <buddy_alloc_pages+0x83e>
c0107905:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107908:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
c010790e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
c0107914:	8b 8d 24 ff ff ff    	mov    -0xdc(%ebp),%ecx
c010791a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
c0107920:	89 c8                	mov    %ecx,%eax
c0107922:	31 d2                	xor    %edx,%edx
c0107924:	8b b5 14 ff ff ff    	mov    -0xec(%ebp),%esi
c010792a:	f7 f6                	div    %esi
c010792c:	8b bd 38 ff ff ff    	mov    -0xc8(%ebp),%edi
c0107932:	39 c7                	cmp    %eax,%edi
c0107934:	0f 85 22 09 00 00    	jne    c010825c <buddy_alloc_pages+0x118c>
            size_t begin = BUDDY_BEGIN(block);
c010793a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010793d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107940:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107943:	c1 ea 01             	shr    $0x1,%edx
c0107946:	09 d1                	or     %edx,%ecx
c0107948:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010794b:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010794e:	c1 ee 01             	shr    $0x1,%esi
c0107951:	09 f2                	or     %esi,%edx
c0107953:	c1 ea 02             	shr    $0x2,%edx
c0107956:	09 d1                	or     %edx,%ecx
c0107958:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010795b:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010795e:	c1 ee 01             	shr    $0x1,%esi
c0107961:	09 f2                	or     %esi,%edx
c0107963:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107966:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107969:	c1 ef 01             	shr    $0x1,%edi
c010796c:	09 fe                	or     %edi,%esi
c010796e:	c1 ee 02             	shr    $0x2,%esi
c0107971:	09 f2                	or     %esi,%edx
c0107973:	c1 ea 04             	shr    $0x4,%edx
c0107976:	09 d1                	or     %edx,%ecx
c0107978:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010797b:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010797e:	c1 ee 01             	shr    $0x1,%esi
c0107981:	09 f2                	or     %esi,%edx
c0107983:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107986:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107989:	c1 ef 01             	shr    $0x1,%edi
c010798c:	09 fe                	or     %edi,%esi
c010798e:	c1 ee 02             	shr    $0x2,%esi
c0107991:	09 f2                	or     %esi,%edx
c0107993:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107996:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107999:	c1 ef 01             	shr    $0x1,%edi
c010799c:	09 fe                	or     %edi,%esi
c010799e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01079a1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01079a4:	c1 eb 01             	shr    $0x1,%ebx
c01079a7:	09 df                	or     %ebx,%edi
c01079a9:	c1 ef 02             	shr    $0x2,%edi
c01079ac:	09 fe                	or     %edi,%esi
c01079ae:	c1 ee 04             	shr    $0x4,%esi
c01079b1:	09 f2                	or     %esi,%edx
c01079b3:	c1 ea 08             	shr    $0x8,%edx
c01079b6:	09 d1                	or     %edx,%ecx
c01079b8:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01079bb:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01079be:	c1 ee 01             	shr    $0x1,%esi
c01079c1:	09 f2                	or     %esi,%edx
c01079c3:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01079c6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01079c9:	c1 ef 01             	shr    $0x1,%edi
c01079cc:	09 fe                	or     %edi,%esi
c01079ce:	c1 ee 02             	shr    $0x2,%esi
c01079d1:	09 f2                	or     %esi,%edx
c01079d3:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01079d6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01079d9:	c1 ef 01             	shr    $0x1,%edi
c01079dc:	09 fe                	or     %edi,%esi
c01079de:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01079e1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01079e4:	c1 eb 01             	shr    $0x1,%ebx
c01079e7:	09 df                	or     %ebx,%edi
c01079e9:	c1 ef 02             	shr    $0x2,%edi
c01079ec:	09 fe                	or     %edi,%esi
c01079ee:	c1 ee 04             	shr    $0x4,%esi
c01079f1:	09 f2                	or     %esi,%edx
c01079f3:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01079f6:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01079f9:	c1 ef 01             	shr    $0x1,%edi
c01079fc:	09 fe                	or     %edi,%esi
c01079fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a01:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a04:	c1 eb 01             	shr    $0x1,%ebx
c0107a07:	09 df                	or     %ebx,%edi
c0107a09:	c1 ef 02             	shr    $0x2,%edi
c0107a0c:	09 fe                	or     %edi,%esi
c0107a0e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a11:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a14:	c1 eb 01             	shr    $0x1,%ebx
c0107a17:	09 df                	or     %ebx,%edi
c0107a19:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a1c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
c0107a22:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107a25:	c1 e8 01             	shr    $0x1,%eax
c0107a28:	09 c3                	or     %eax,%ebx
c0107a2a:	c1 eb 02             	shr    $0x2,%ebx
c0107a2d:	09 df                	or     %ebx,%edi
c0107a2f:	c1 ef 04             	shr    $0x4,%edi
c0107a32:	09 fe                	or     %edi,%esi
c0107a34:	c1 ee 08             	shr    $0x8,%esi
c0107a37:	09 f2                	or     %esi,%edx
c0107a39:	c1 ea 10             	shr    $0x10,%edx
c0107a3c:	09 d1                	or     %edx,%ecx
c0107a3e:	c1 e9 01             	shr    $0x1,%ecx
c0107a41:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
c0107a47:	21 c8                	and    %ecx,%eax
c0107a49:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c0107a4f:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107a52:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107a55:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a58:	c1 ef 01             	shr    $0x1,%edi
c0107a5b:	09 fe                	or     %edi,%esi
c0107a5d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a60:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a63:	c1 eb 01             	shr    $0x1,%ebx
c0107a66:	09 df                	or     %ebx,%edi
c0107a68:	c1 ef 02             	shr    $0x2,%edi
c0107a6b:	09 fe                	or     %edi,%esi
c0107a6d:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a70:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a73:	c1 eb 01             	shr    $0x1,%ebx
c0107a76:	09 df                	or     %ebx,%edi
c0107a78:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107a7b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
c0107a81:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107a84:	c1 e8 01             	shr    $0x1,%eax
c0107a87:	09 c3                	or     %eax,%ebx
c0107a89:	c1 eb 02             	shr    $0x2,%ebx
c0107a8c:	09 df                	or     %ebx,%edi
c0107a8e:	c1 ef 04             	shr    $0x4,%edi
c0107a91:	09 fe                	or     %edi,%esi
c0107a93:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107a96:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107a99:	c1 ef 01             	shr    $0x1,%edi
c0107a9c:	09 f8                	or     %edi,%eax
c0107a9e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107aa1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107aa4:	c1 eb 01             	shr    $0x1,%ebx
c0107aa7:	09 df                	or     %ebx,%edi
c0107aa9:	c1 ef 02             	shr    $0x2,%edi
c0107aac:	09 f8                	or     %edi,%eax
c0107aae:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107ab1:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107ab4:	c1 eb 01             	shr    $0x1,%ebx
c0107ab7:	09 df                	or     %ebx,%edi
c0107ab9:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107abc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
c0107ac2:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107ac5:	c1 e8 01             	shr    $0x1,%eax
c0107ac8:	09 c3                	or     %eax,%ebx
c0107aca:	c1 eb 02             	shr    $0x2,%ebx
c0107acd:	09 df                	or     %ebx,%edi
c0107acf:	c1 ef 04             	shr    $0x4,%edi
c0107ad2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
c0107ad8:	09 f8                	or     %edi,%eax
c0107ada:	c1 e8 08             	shr    $0x8,%eax
c0107add:	09 c6                	or     %eax,%esi
c0107adf:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107ae2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107ae5:	c1 ef 01             	shr    $0x1,%edi
c0107ae8:	09 f8                	or     %edi,%eax
c0107aea:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107aed:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107af0:	c1 eb 01             	shr    $0x1,%ebx
c0107af3:	09 df                	or     %ebx,%edi
c0107af5:	c1 ef 02             	shr    $0x2,%edi
c0107af8:	09 f8                	or     %edi,%eax
c0107afa:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107afd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b00:	c1 eb 01             	shr    $0x1,%ebx
c0107b03:	09 df                	or     %ebx,%edi
c0107b05:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b08:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
c0107b0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b11:	c1 e8 01             	shr    $0x1,%eax
c0107b14:	09 c3                	or     %eax,%ebx
c0107b16:	c1 eb 02             	shr    $0x2,%ebx
c0107b19:	09 df                	or     %ebx,%edi
c0107b1b:	c1 ef 04             	shr    $0x4,%edi
c0107b1e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
c0107b24:	09 f8                	or     %edi,%eax
c0107b26:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107b29:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b2c:	c1 eb 01             	shr    $0x1,%ebx
c0107b2f:	09 df                	or     %ebx,%edi
c0107b31:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b34:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
c0107b3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b3d:	c1 e8 01             	shr    $0x1,%eax
c0107b40:	09 c3                	or     %eax,%ebx
c0107b42:	c1 eb 02             	shr    $0x2,%ebx
c0107b45:	09 df                	or     %ebx,%edi
c0107b47:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b4a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b4d:	c1 eb 01             	shr    $0x1,%ebx
c0107b50:	09 d8                	or     %ebx,%eax
c0107b52:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107b55:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
c0107b5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b5e:	c1 e8 01             	shr    $0x1,%eax
c0107b61:	09 c3                	or     %eax,%ebx
c0107b63:	c1 eb 02             	shr    $0x2,%ebx
c0107b66:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
c0107b6c:	09 d8                	or     %ebx,%eax
c0107b6e:	c1 e8 04             	shr    $0x4,%eax
c0107b71:	09 c7                	or     %eax,%edi
c0107b73:	c1 ef 08             	shr    $0x8,%edi
c0107b76:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
c0107b7c:	09 f8                	or     %edi,%eax
c0107b7e:	c1 e8 10             	shr    $0x10,%eax
c0107b81:	09 c6                	or     %eax,%esi
c0107b83:	c1 ee 01             	shr    $0x1,%esi
c0107b86:	21 f2                	and    %esi,%edx
c0107b88:	83 fa 00             	cmp    $0x0,%edx
c0107b8b:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
c0107b91:	0f 84 2b 01 00 00    	je     c0107cc2 <buddy_alloc_pages+0xbf2>
c0107b97:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b9a:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107b9d:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107ba0:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107ba3:	c1 ee 01             	shr    $0x1,%esi
c0107ba6:	09 f2                	or     %esi,%edx
c0107ba8:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107bab:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107bae:	c1 ef 01             	shr    $0x1,%edi
c0107bb1:	09 fe                	or     %edi,%esi
c0107bb3:	c1 ee 02             	shr    $0x2,%esi
c0107bb6:	09 f2                	or     %esi,%edx
c0107bb8:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107bbb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107bbe:	c1 ef 01             	shr    $0x1,%edi
c0107bc1:	09 fe                	or     %edi,%esi
c0107bc3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107bc6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107bc9:	c1 eb 01             	shr    $0x1,%ebx
c0107bcc:	09 df                	or     %ebx,%edi
c0107bce:	c1 ef 02             	shr    $0x2,%edi
c0107bd1:	09 fe                	or     %edi,%esi
c0107bd3:	c1 ee 04             	shr    $0x4,%esi
c0107bd6:	09 f2                	or     %esi,%edx
c0107bd8:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107bdb:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107bde:	c1 ef 01             	shr    $0x1,%edi
c0107be1:	09 fe                	or     %edi,%esi
c0107be3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107be6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107be9:	c1 eb 01             	shr    $0x1,%ebx
c0107bec:	09 df                	or     %ebx,%edi
c0107bee:	c1 ef 02             	shr    $0x2,%edi
c0107bf1:	09 fe                	or     %edi,%esi
c0107bf3:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107bf6:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107bf9:	c1 eb 01             	shr    $0x1,%ebx
c0107bfc:	09 df                	or     %ebx,%edi
c0107bfe:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107c01:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
c0107c07:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107c0a:	c1 e8 01             	shr    $0x1,%eax
c0107c0d:	09 c3                	or     %eax,%ebx
c0107c0f:	c1 eb 02             	shr    $0x2,%ebx
c0107c12:	09 df                	or     %ebx,%edi
c0107c14:	c1 ef 04             	shr    $0x4,%edi
c0107c17:	09 fe                	or     %edi,%esi
c0107c19:	c1 ee 08             	shr    $0x8,%esi
c0107c1c:	09 f2                	or     %esi,%edx
c0107c1e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107c21:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107c24:	c1 ee 01             	shr    $0x1,%esi
c0107c27:	09 f0                	or     %esi,%eax
c0107c29:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107c2c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c2f:	c1 ef 01             	shr    $0x1,%edi
c0107c32:	09 fe                	or     %edi,%esi
c0107c34:	c1 ee 02             	shr    $0x2,%esi
c0107c37:	09 f0                	or     %esi,%eax
c0107c39:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107c3c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c3f:	c1 ef 01             	shr    $0x1,%edi
c0107c42:	09 fe                	or     %edi,%esi
c0107c44:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c47:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107c4a:	c1 eb 01             	shr    $0x1,%ebx
c0107c4d:	09 df                	or     %ebx,%edi
c0107c4f:	c1 ef 02             	shr    $0x2,%edi
c0107c52:	09 fe                	or     %edi,%esi
c0107c54:	c1 ee 04             	shr    $0x4,%esi
c0107c57:	09 f0                	or     %esi,%eax
c0107c59:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107c5c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c5f:	c1 ef 01             	shr    $0x1,%edi
c0107c62:	09 fe                	or     %edi,%esi
c0107c64:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c67:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107c6a:	c1 eb 01             	shr    $0x1,%ebx
c0107c6d:	09 df                	or     %ebx,%edi
c0107c6f:	c1 ef 02             	shr    $0x2,%edi
c0107c72:	09 fe                	or     %edi,%esi
c0107c74:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107c77:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107c7a:	c1 eb 01             	shr    $0x1,%ebx
c0107c7d:	09 df                	or     %ebx,%edi
c0107c7f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107c82:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
c0107c88:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107c8b:	c1 e8 01             	shr    $0x1,%eax
c0107c8e:	09 c3                	or     %eax,%ebx
c0107c90:	c1 eb 02             	shr    $0x2,%ebx
c0107c93:	09 df                	or     %ebx,%edi
c0107c95:	c1 ef 04             	shr    $0x4,%edi
c0107c98:	09 fe                	or     %edi,%esi
c0107c9a:	c1 ee 08             	shr    $0x8,%esi
c0107c9d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
c0107ca3:	09 f0                	or     %esi,%eax
c0107ca5:	c1 e8 10             	shr    $0x10,%eax
c0107ca8:	09 c2                	or     %eax,%edx
c0107caa:	c1 ea 01             	shr    $0x1,%edx
c0107cad:	21 d1                	and    %edx,%ecx
c0107caf:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
c0107cb5:	29 c8                	sub    %ecx,%eax
c0107cb7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
c0107cbd:	e9 09 00 00 00       	jmp    c0107ccb <buddy_alloc_pages+0xbfb>
c0107cc2:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107cc5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
c0107ccb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
c0107cd1:	8b 8d f8 fe ff ff    	mov    -0x108(%ebp),%ecx
c0107cd7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
c0107cdd:	89 c8                	mov    %ecx,%eax
c0107cdf:	31 d2                	xor    %edx,%edx
c0107ce1:	8b b5 e8 fe ff ff    	mov    -0x118(%ebp),%esi
c0107ce7:	f7 f6                	div    %esi
c0107ce9:	8b bd 0c ff ff ff    	mov    -0xf4(%ebp),%edi
c0107cef:	0f af f8             	imul   %eax,%edi
c0107cf2:	89 7d 84             	mov    %edi,-0x7c(%ebp)
            size_t end = BUDDY_END(block);
c0107cf5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107cf8:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107cfb:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107cfe:	c1 eb 01             	shr    $0x1,%ebx
c0107d01:	09 df                	or     %ebx,%edi
c0107d03:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d06:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d09:	c1 e9 01             	shr    $0x1,%ecx
c0107d0c:	09 cb                	or     %ecx,%ebx
c0107d0e:	c1 eb 02             	shr    $0x2,%ebx
c0107d11:	09 df                	or     %ebx,%edi
c0107d13:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d16:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d19:	c1 eb 01             	shr    $0x1,%ebx
c0107d1c:	09 d9                	or     %ebx,%ecx
c0107d1e:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d21:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d24:	c1 ee 01             	shr    $0x1,%esi
c0107d27:	09 f3                	or     %esi,%ebx
c0107d29:	c1 eb 02             	shr    $0x2,%ebx
c0107d2c:	09 d9                	or     %ebx,%ecx
c0107d2e:	c1 e9 04             	shr    $0x4,%ecx
c0107d31:	09 cf                	or     %ecx,%edi
c0107d33:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d36:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d39:	c1 ee 01             	shr    $0x1,%esi
c0107d3c:	09 f1                	or     %esi,%ecx
c0107d3e:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d41:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d44:	c1 eb 01             	shr    $0x1,%ebx
c0107d47:	09 de                	or     %ebx,%esi
c0107d49:	c1 ee 02             	shr    $0x2,%esi
c0107d4c:	09 f1                	or     %esi,%ecx
c0107d4e:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d51:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d54:	c1 eb 01             	shr    $0x1,%ebx
c0107d57:	09 de                	or     %ebx,%esi
c0107d59:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107d5c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
c0107d62:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107d65:	c1 e8 01             	shr    $0x1,%eax
c0107d68:	09 c3                	or     %eax,%ebx
c0107d6a:	c1 eb 02             	shr    $0x2,%ebx
c0107d6d:	09 de                	or     %ebx,%esi
c0107d6f:	c1 ee 04             	shr    $0x4,%esi
c0107d72:	09 f1                	or     %esi,%ecx
c0107d74:	c1 e9 08             	shr    $0x8,%ecx
c0107d77:	09 cf                	or     %ecx,%edi
c0107d79:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107d7c:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d7f:	c1 e9 01             	shr    $0x1,%ecx
c0107d82:	09 c8                	or     %ecx,%eax
c0107d84:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d87:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d8a:	c1 ee 01             	shr    $0x1,%esi
c0107d8d:	09 f1                	or     %esi,%ecx
c0107d8f:	c1 e9 02             	shr    $0x2,%ecx
c0107d92:	09 c8                	or     %ecx,%eax
c0107d94:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107d97:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107d9a:	c1 ee 01             	shr    $0x1,%esi
c0107d9d:	09 f1                	or     %esi,%ecx
c0107d9f:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107da2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107da5:	c1 eb 01             	shr    $0x1,%ebx
c0107da8:	09 de                	or     %ebx,%esi
c0107daa:	c1 ee 02             	shr    $0x2,%esi
c0107dad:	09 f1                	or     %esi,%ecx
c0107daf:	c1 e9 04             	shr    $0x4,%ecx
c0107db2:	09 c8                	or     %ecx,%eax
c0107db4:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107db7:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107dba:	c1 ee 01             	shr    $0x1,%esi
c0107dbd:	09 f1                	or     %esi,%ecx
c0107dbf:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107dc2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107dc5:	c1 eb 01             	shr    $0x1,%ebx
c0107dc8:	09 de                	or     %ebx,%esi
c0107dca:	c1 ee 02             	shr    $0x2,%esi
c0107dcd:	09 f1                	or     %esi,%ecx
c0107dcf:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107dd2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107dd5:	c1 eb 01             	shr    $0x1,%ebx
c0107dd8:	09 de                	or     %ebx,%esi
c0107dda:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107ddd:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
c0107de3:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107de6:	c1 e8 01             	shr    $0x1,%eax
c0107de9:	09 c3                	or     %eax,%ebx
c0107deb:	c1 eb 02             	shr    $0x2,%ebx
c0107dee:	09 de                	or     %ebx,%esi
c0107df0:	c1 ee 04             	shr    $0x4,%esi
c0107df3:	09 f1                	or     %esi,%ecx
c0107df5:	c1 e9 08             	shr    $0x8,%ecx
c0107df8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
c0107dfe:	09 c8                	or     %ecx,%eax
c0107e00:	c1 e8 10             	shr    $0x10,%eax
c0107e03:	09 c7                	or     %eax,%edi
c0107e05:	c1 ef 01             	shr    $0x1,%edi
c0107e08:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
c0107e0e:	21 f8                	and    %edi,%eax
c0107e10:	83 c0 01             	add    $0x1,%eax
c0107e13:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c0107e19:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107e1c:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107e1f:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e22:	c1 eb 01             	shr    $0x1,%ebx
c0107e25:	09 df                	or     %ebx,%edi
c0107e27:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e2a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
c0107e30:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e33:	c1 e8 01             	shr    $0x1,%eax
c0107e36:	09 c3                	or     %eax,%ebx
c0107e38:	c1 eb 02             	shr    $0x2,%ebx
c0107e3b:	09 df                	or     %ebx,%edi
c0107e3d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e40:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e43:	c1 eb 01             	shr    $0x1,%ebx
c0107e46:	09 d8                	or     %ebx,%eax
c0107e48:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e4b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
c0107e51:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e54:	c1 e8 01             	shr    $0x1,%eax
c0107e57:	09 c3                	or     %eax,%ebx
c0107e59:	c1 eb 02             	shr    $0x2,%ebx
c0107e5c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
c0107e62:	09 d8                	or     %ebx,%eax
c0107e64:	c1 e8 04             	shr    $0x4,%eax
c0107e67:	09 c7                	or     %eax,%edi
c0107e69:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e6c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e6f:	c1 eb 01             	shr    $0x1,%ebx
c0107e72:	09 d8                	or     %ebx,%eax
c0107e74:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e77:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
c0107e7d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e80:	c1 e8 01             	shr    $0x1,%eax
c0107e83:	09 c3                	or     %eax,%ebx
c0107e85:	c1 eb 02             	shr    $0x2,%ebx
c0107e88:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0107e8e:	09 d8                	or     %ebx,%eax
c0107e90:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107e93:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
c0107e99:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107e9c:	c1 e8 01             	shr    $0x1,%eax
c0107e9f:	09 c3                	or     %eax,%ebx
c0107ea1:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107ea4:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
c0107eaa:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107ead:	c1 e8 01             	shr    $0x1,%eax
c0107eb0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
c0107eb6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
c0107ebc:	89 8d c4 fe ff ff    	mov    %ecx,-0x13c(%ebp)
c0107ec2:	8b 8d c8 fe ff ff    	mov    -0x138(%ebp),%ecx
c0107ec8:	09 c8                	or     %ecx,%eax
c0107eca:	c1 e8 02             	shr    $0x2,%eax
c0107ecd:	09 c3                	or     %eax,%ebx
c0107ecf:	c1 eb 04             	shr    $0x4,%ebx
c0107ed2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
c0107ed8:	09 d8                	or     %ebx,%eax
c0107eda:	c1 e8 08             	shr    $0x8,%eax
c0107edd:	09 c7                	or     %eax,%edi
c0107edf:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107ee2:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107ee5:	c1 e9 01             	shr    $0x1,%ecx
c0107ee8:	09 c8                	or     %ecx,%eax
c0107eea:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107eed:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107ef0:	c1 eb 01             	shr    $0x1,%ebx
c0107ef3:	09 d9                	or     %ebx,%ecx
c0107ef5:	c1 e9 02             	shr    $0x2,%ecx
c0107ef8:	09 c8                	or     %ecx,%eax
c0107efa:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107efd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f00:	c1 eb 01             	shr    $0x1,%ebx
c0107f03:	09 d9                	or     %ebx,%ecx
c0107f05:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f08:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
c0107f0e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107f11:	c1 e8 01             	shr    $0x1,%eax
c0107f14:	09 c3                	or     %eax,%ebx
c0107f16:	c1 eb 02             	shr    $0x2,%ebx
c0107f19:	09 d9                	or     %ebx,%ecx
c0107f1b:	c1 e9 04             	shr    $0x4,%ecx
c0107f1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
c0107f24:	09 c8                	or     %ecx,%eax
c0107f26:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107f29:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f2c:	c1 eb 01             	shr    $0x1,%ebx
c0107f2f:	09 d9                	or     %ebx,%ecx
c0107f31:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f34:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
c0107f3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107f3d:	c1 e8 01             	shr    $0x1,%eax
c0107f40:	09 c3                	or     %eax,%ebx
c0107f42:	c1 eb 02             	shr    $0x2,%ebx
c0107f45:	09 d9                	or     %ebx,%ecx
c0107f47:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107f4a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f4d:	c1 eb 01             	shr    $0x1,%ebx
c0107f50:	09 d8                	or     %ebx,%eax
c0107f52:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107f55:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
c0107f5b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107f5e:	c1 e8 01             	shr    $0x1,%eax
c0107f61:	09 c3                	or     %eax,%ebx
c0107f63:	c1 eb 02             	shr    $0x2,%ebx
c0107f66:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
c0107f6c:	09 d8                	or     %ebx,%eax
c0107f6e:	c1 e8 04             	shr    $0x4,%eax
c0107f71:	09 c1                	or     %eax,%ecx
c0107f73:	c1 e9 08             	shr    $0x8,%ecx
c0107f76:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
c0107f7c:	09 c8                	or     %ecx,%eax
c0107f7e:	c1 e8 10             	shr    $0x10,%eax
c0107f81:	09 c7                	or     %eax,%edi
c0107f83:	c1 ef 01             	shr    $0x1,%edi
c0107f86:	21 fe                	and    %edi,%esi
c0107f88:	83 fe 00             	cmp    $0x0,%esi
c0107f8b:	0f 84 2b 01 00 00    	je     c01080bc <buddy_alloc_pages+0xfec>
c0107f91:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107f94:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0107f97:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0107f9a:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107f9d:	c1 ee 01             	shr    $0x1,%esi
c0107fa0:	09 f2                	or     %esi,%edx
c0107fa2:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107fa5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107fa8:	c1 ef 01             	shr    $0x1,%edi
c0107fab:	09 fe                	or     %edi,%esi
c0107fad:	c1 ee 02             	shr    $0x2,%esi
c0107fb0:	09 f2                	or     %esi,%edx
c0107fb2:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107fb5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107fb8:	c1 ef 01             	shr    $0x1,%edi
c0107fbb:	09 fe                	or     %edi,%esi
c0107fbd:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107fc0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107fc3:	c1 eb 01             	shr    $0x1,%ebx
c0107fc6:	09 df                	or     %ebx,%edi
c0107fc8:	c1 ef 02             	shr    $0x2,%edi
c0107fcb:	09 fe                	or     %edi,%esi
c0107fcd:	c1 ee 04             	shr    $0x4,%esi
c0107fd0:	09 f2                	or     %esi,%edx
c0107fd2:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0107fd5:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107fd8:	c1 ef 01             	shr    $0x1,%edi
c0107fdb:	09 fe                	or     %edi,%esi
c0107fdd:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107fe0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107fe3:	c1 eb 01             	shr    $0x1,%ebx
c0107fe6:	09 df                	or     %ebx,%edi
c0107fe8:	c1 ef 02             	shr    $0x2,%edi
c0107feb:	09 fe                	or     %edi,%esi
c0107fed:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0107ff0:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107ff3:	c1 eb 01             	shr    $0x1,%ebx
c0107ff6:	09 df                	or     %ebx,%edi
c0107ff8:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0107ffb:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
c0108001:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108004:	c1 e8 01             	shr    $0x1,%eax
c0108007:	09 c3                	or     %eax,%ebx
c0108009:	c1 eb 02             	shr    $0x2,%ebx
c010800c:	09 df                	or     %ebx,%edi
c010800e:	c1 ef 04             	shr    $0x4,%edi
c0108011:	09 fe                	or     %edi,%esi
c0108013:	c1 ee 08             	shr    $0x8,%esi
c0108016:	09 f2                	or     %esi,%edx
c0108018:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010801b:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010801e:	c1 ee 01             	shr    $0x1,%esi
c0108021:	09 f0                	or     %esi,%eax
c0108023:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108026:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108029:	c1 ef 01             	shr    $0x1,%edi
c010802c:	09 fe                	or     %edi,%esi
c010802e:	c1 ee 02             	shr    $0x2,%esi
c0108031:	09 f0                	or     %esi,%eax
c0108033:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108036:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108039:	c1 ef 01             	shr    $0x1,%edi
c010803c:	09 fe                	or     %edi,%esi
c010803e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108041:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108044:	c1 eb 01             	shr    $0x1,%ebx
c0108047:	09 df                	or     %ebx,%edi
c0108049:	c1 ef 02             	shr    $0x2,%edi
c010804c:	09 fe                	or     %edi,%esi
c010804e:	c1 ee 04             	shr    $0x4,%esi
c0108051:	09 f0                	or     %esi,%eax
c0108053:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108056:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108059:	c1 ef 01             	shr    $0x1,%edi
c010805c:	09 fe                	or     %edi,%esi
c010805e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108061:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108064:	c1 eb 01             	shr    $0x1,%ebx
c0108067:	09 df                	or     %ebx,%edi
c0108069:	c1 ef 02             	shr    $0x2,%edi
c010806c:	09 fe                	or     %edi,%esi
c010806e:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108071:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108074:	c1 eb 01             	shr    $0x1,%ebx
c0108077:	09 df                	or     %ebx,%edi
c0108079:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010807c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
c0108082:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108085:	c1 e8 01             	shr    $0x1,%eax
c0108088:	09 c3                	or     %eax,%ebx
c010808a:	c1 eb 02             	shr    $0x2,%ebx
c010808d:	09 df                	or     %ebx,%edi
c010808f:	c1 ef 04             	shr    $0x4,%edi
c0108092:	09 fe                	or     %edi,%esi
c0108094:	c1 ee 08             	shr    $0x8,%esi
c0108097:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
c010809d:	09 f0                	or     %esi,%eax
c010809f:	c1 e8 10             	shr    $0x10,%eax
c01080a2:	09 c2                	or     %eax,%edx
c01080a4:	c1 ea 01             	shr    $0x1,%edx
c01080a7:	21 d1                	and    %edx,%ecx
c01080a9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
c01080af:	29 c8                	sub    %ecx,%eax
c01080b1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
c01080b7:	e9 09 00 00 00       	jmp    c01080c5 <buddy_alloc_pages+0xff5>
c01080bc:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01080bf:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
c01080c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
c01080cb:	8d 0d 30 49 11 c0    	lea    0xc0114930,%ecx
c01080d1:	8b 95 c4 fe ff ff    	mov    -0x13c(%ebp),%edx
c01080d7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
c01080dd:	89 d0                	mov    %edx,%eax
c01080df:	31 d2                	xor    %edx,%edx
c01080e1:	8b b5 a8 fe ff ff    	mov    -0x158(%ebp),%esi
c01080e7:	f7 f6                	div    %esi
c01080e9:	8b bd dc fe ff ff    	mov    -0x124(%ebp),%edi
c01080ef:	0f af f8             	imul   %eax,%edi
c01080f2:	89 7d 80             	mov    %edi,-0x80(%ebp)
            size_t mid = (begin+end)>>1;
c01080f5:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01080f8:	03 45 80             	add    -0x80(%ebp),%eax
c01080fb:	c1 e8 01             	shr    $0x1,%eax
c01080fe:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
            list_del(&(buddy_alloc[begin].page_link));
c0108104:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0108107:	6b c0 14             	imul   $0x14,%eax,%eax
c010810a:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0108110:	83 c0 0c             	add    $0xc,%eax
c0108113:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    __list_del(listelm->prev, listelm->next);
c0108116:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0108119:	8b 00                	mov    (%eax),%eax
c010811b:	8b 7d a4             	mov    -0x5c(%ebp),%edi
c010811e:	8b 7f 04             	mov    0x4(%edi),%edi
c0108121:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0108124:	89 7d a8             	mov    %edi,-0x58(%ebp)
    prev->next = next;
c0108127:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010812a:	8b 7d ac             	mov    -0x54(%ebp),%edi
c010812d:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
c0108130:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0108133:	8b 7d a8             	mov    -0x58(%ebp),%edi
c0108136:	89 07                	mov    %eax,(%edi)
            buddy_alloc[begin].property >>= 1;
c0108138:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010813b:	6b c0 14             	imul   $0x14,%eax,%eax
c010813e:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0108144:	8b 78 08             	mov    0x8(%eax),%edi
c0108147:	c1 ef 01             	shr    $0x1,%edi
c010814a:	89 78 08             	mov    %edi,0x8(%eax)
            buddy_alloc[mid].property = buddy_alloc[begin].property;
c010814d:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0108150:	6b c0 14             	imul   $0x14,%eax,%eax
c0108153:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0108159:	8b 40 08             	mov    0x8(%eax),%eax
c010815c:	8b bd 7c ff ff ff    	mov    -0x84(%ebp),%edi
c0108162:	6b ff 14             	imul   $0x14,%edi,%edi
c0108165:	03 3d 1c 49 11 c0    	add    0xc011491c,%edi
c010816b:	89 47 08             	mov    %eax,0x8(%edi)
            buddy_segment[left] = buddy_segment[block]>>1;
c010816e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108171:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c0108177:	8b 04 87             	mov    (%edi,%eax,4),%eax
c010817a:	c1 e8 01             	shr    $0x1,%eax
c010817d:	8b 7d 8c             	mov    -0x74(%ebp),%edi
c0108180:	8b 1d 18 49 11 c0    	mov    0xc0114918,%ebx
c0108186:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            buddy_segment[right] = buddy_segment[block]>>1;
c0108189:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010818c:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c0108192:	8b 04 87             	mov    (%edi,%eax,4),%eax
c0108195:	c1 e8 01             	shr    $0x1,%eax
c0108198:	8b 7d 88             	mov    -0x78(%ebp),%edi
c010819b:	8b 1d 18 49 11 c0    	mov    0xc0114918,%ebx
c01081a1:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            list_add(&free_list, &(buddy_alloc[begin].page_link));
c01081a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01081a7:	6b c0 14             	imul   $0x14,%eax,%eax
c01081aa:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c01081b0:	83 c0 0c             	add    $0xc,%eax
c01081b3:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c01081b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    list_add_after(listelm, elm);
c01081b9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081bc:	8b 7d d8             	mov    -0x28(%ebp),%edi
c01081bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01081c2:	89 7d e0             	mov    %edi,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c01081c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01081c8:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c01081cb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c01081ce:	8b 5b 04             	mov    0x4(%ebx),%ebx
c01081d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081d4:	89 7d ec             	mov    %edi,-0x14(%ebp)
c01081d7:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    prev->next = next->prev = elm;
c01081da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081dd:	8b 7d e8             	mov    -0x18(%ebp),%edi
c01081e0:	89 07                	mov    %eax,(%edi)
c01081e2:	8b 7d ec             	mov    -0x14(%ebp),%edi
c01081e5:	89 47 04             	mov    %eax,0x4(%edi)
    elm->next = next;
c01081e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081eb:	8b 7d f0             	mov    -0x10(%ebp),%edi
c01081ee:	89 47 04             	mov    %eax,0x4(%edi)
    elm->prev = prev;
c01081f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081f4:	8b 7d f0             	mov    -0x10(%ebp),%edi
c01081f7:	89 07                	mov    %eax,(%edi)
            list_add(&free_list, &(buddy_alloc[mid].page_link));
c01081f9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01081ff:	6b c0 14             	imul   $0x14,%eax,%eax
c0108202:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0108208:	83 c0 0c             	add    $0xc,%eax
c010820b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010820e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    list_add_after(listelm, elm);
c0108211:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0108214:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0108217:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010821a:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    __list_add(elm, listelm, listelm->next);
c010821d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108220:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0108223:	8b 7d c8             	mov    -0x38(%ebp),%edi
c0108226:	8b 7f 04             	mov    0x4(%edi),%edi
c0108229:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010822c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010822f:	89 7d cc             	mov    %edi,-0x34(%ebp)
    prev->next = next->prev = elm;
c0108232:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108235:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0108238:	89 01                	mov    %eax,(%ecx)
c010823a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010823d:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0108240:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108243:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0108246:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0108249:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010824c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010824f:	89 01                	mov    %eax,(%ecx)
            block = left;
c0108251:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0108254:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length & buddy_segment[left]) {  // Find in left (optimize)
c0108257:	e9 d4 00 00 00       	jmp    c0108330 <buddy_alloc_pages+0x1260>
c010825c:	8b 45 90             	mov    -0x70(%ebp),%eax
c010825f:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c0108262:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0108268:	23 04 8a             	and    (%edx,%ecx,4),%eax
c010826b:	83 f8 00             	cmp    $0x0,%eax
c010826e:	0f 84 0b 00 00 00    	je     c010827f <buddy_alloc_pages+0x11af>
            block = left;
c0108274:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0108277:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length & buddy_segment[right]) { // Find in right (optimize)
c010827a:	e9 ac 00 00 00       	jmp    c010832b <buddy_alloc_pages+0x125b>
c010827f:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108282:	8b 4d 88             	mov    -0x78(%ebp),%ecx
c0108285:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c010828b:	23 04 8a             	and    (%edx,%ecx,4),%eax
c010828e:	83 f8 00             	cmp    $0x0,%eax
c0108291:	0f 84 0b 00 00 00    	je     c01082a2 <buddy_alloc_pages+0x11d2>
            block = right;
c0108297:	8b 45 88             	mov    -0x78(%ebp),%eax
c010829a:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length <= buddy_segment[left]) { // Find in left
c010829d:	e9 84 00 00 00       	jmp    c0108326 <buddy_alloc_pages+0x1256>
c01082a2:	8b 45 90             	mov    -0x70(%ebp),%eax
c01082a5:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c01082a8:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c01082ae:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
c01082b1:	0f 87 0b 00 00 00    	ja     c01082c2 <buddy_alloc_pages+0x11f2>
            block = left;
c01082b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01082ba:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else if (length <= buddy_segment[right]) {// Find in right
c01082bd:	e9 5f 00 00 00       	jmp    c0108321 <buddy_alloc_pages+0x1251>
c01082c2:	8b 45 90             	mov    -0x70(%ebp),%eax
c01082c5:	8b 4d 88             	mov    -0x78(%ebp),%ecx
c01082c8:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c01082ce:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
c01082d1:	0f 87 0b 00 00 00    	ja     c01082e2 <buddy_alloc_pages+0x1212>
            block = right;
c01082d7:	8b 45 88             	mov    -0x78(%ebp),%eax
c01082da:	89 45 94             	mov    %eax,-0x6c(%ebp)
        } else {                                    // Shouldn't be here
c01082dd:	e9 3a 00 00 00       	jmp    c010831c <buddy_alloc_pages+0x124c>
            assert(0);
c01082e2:	e9 00 00 00 00       	jmp    c01082e7 <buddy_alloc_pages+0x1217>
c01082e7:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c01082ed:	b9 94 00 00 00       	mov    $0x94,%ecx
c01082f2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01082f8:	8d 35 e0 fc 10 c0    	lea    0xc010fce0,%esi
c01082fe:	89 04 24             	mov    %eax,(%esp)
c0108301:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108308:	00 
c0108309:	89 54 24 08          	mov    %edx,0x8(%esp)
c010830d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0108311:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%ebp)
c0108317:	e8 34 81 ff ff       	call   c0100450 <__panic>
c010831c:	e9 00 00 00 00       	jmp    c0108321 <buddy_alloc_pages+0x1251>
c0108321:	e9 00 00 00 00       	jmp    c0108326 <buddy_alloc_pages+0x1256>
c0108326:	e9 00 00 00 00       	jmp    c010832b <buddy_alloc_pages+0x125b>
c010832b:	e9 00 00 00 00       	jmp    c0108330 <buddy_alloc_pages+0x1260>
    while (length <= buddy_segment[block] && length < BUDDY_LENGTH(block)) {
c0108330:	e9 50 f0 ff ff       	jmp    c0107385 <buddy_alloc_pages+0x2b5>
        }
    }
    // Allocate
    if (length > buddy_segment[block])
c0108335:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108338:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010833b:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0108341:	3b 04 8a             	cmp    (%edx,%ecx,4),%eax
c0108344:	0f 86 0c 00 00 00    	jbe    c0108356 <buddy_alloc_pages+0x1286>
        return NULL;
c010834a:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
c0108351:	e9 59 04 00 00       	jmp    c01087af <buddy_alloc_pages+0x16df>
    page = &(buddy_alloc[BUDDY_BEGIN(block)]);
c0108356:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108359:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010835c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010835f:	c1 ea 01             	shr    $0x1,%edx
c0108362:	09 d1                	or     %edx,%ecx
c0108364:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0108367:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010836a:	c1 ee 01             	shr    $0x1,%esi
c010836d:	09 f2                	or     %esi,%edx
c010836f:	c1 ea 02             	shr    $0x2,%edx
c0108372:	09 d1                	or     %edx,%ecx
c0108374:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0108377:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010837a:	c1 ee 01             	shr    $0x1,%esi
c010837d:	09 f2                	or     %esi,%edx
c010837f:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108382:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108385:	c1 ef 01             	shr    $0x1,%edi
c0108388:	09 fe                	or     %edi,%esi
c010838a:	c1 ee 02             	shr    $0x2,%esi
c010838d:	09 f2                	or     %esi,%edx
c010838f:	c1 ea 04             	shr    $0x4,%edx
c0108392:	09 d1                	or     %edx,%ecx
c0108394:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0108397:	8b 75 94             	mov    -0x6c(%ebp),%esi
c010839a:	c1 ee 01             	shr    $0x1,%esi
c010839d:	09 f2                	or     %esi,%edx
c010839f:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01083a2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083a5:	c1 ef 01             	shr    $0x1,%edi
c01083a8:	09 fe                	or     %edi,%esi
c01083aa:	c1 ee 02             	shr    $0x2,%esi
c01083ad:	09 f2                	or     %esi,%edx
c01083af:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01083b2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083b5:	c1 ef 01             	shr    $0x1,%edi
c01083b8:	09 fe                	or     %edi,%esi
c01083ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083bd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01083c0:	c1 eb 01             	shr    $0x1,%ebx
c01083c3:	09 df                	or     %ebx,%edi
c01083c5:	c1 ef 02             	shr    $0x2,%edi
c01083c8:	09 fe                	or     %edi,%esi
c01083ca:	c1 ee 04             	shr    $0x4,%esi
c01083cd:	09 f2                	or     %esi,%edx
c01083cf:	c1 ea 08             	shr    $0x8,%edx
c01083d2:	09 d1                	or     %edx,%ecx
c01083d4:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01083d7:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01083da:	c1 ee 01             	shr    $0x1,%esi
c01083dd:	09 f2                	or     %esi,%edx
c01083df:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01083e2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083e5:	c1 ef 01             	shr    $0x1,%edi
c01083e8:	09 fe                	or     %edi,%esi
c01083ea:	c1 ee 02             	shr    $0x2,%esi
c01083ed:	09 f2                	or     %esi,%edx
c01083ef:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01083f2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083f5:	c1 ef 01             	shr    $0x1,%edi
c01083f8:	09 fe                	or     %edi,%esi
c01083fa:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01083fd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108400:	c1 eb 01             	shr    $0x1,%ebx
c0108403:	09 df                	or     %ebx,%edi
c0108405:	c1 ef 02             	shr    $0x2,%edi
c0108408:	09 fe                	or     %edi,%esi
c010840a:	c1 ee 04             	shr    $0x4,%esi
c010840d:	09 f2                	or     %esi,%edx
c010840f:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108412:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108415:	c1 ef 01             	shr    $0x1,%edi
c0108418:	09 fe                	or     %edi,%esi
c010841a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010841d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108420:	c1 eb 01             	shr    $0x1,%ebx
c0108423:	09 df                	or     %ebx,%edi
c0108425:	c1 ef 02             	shr    $0x2,%edi
c0108428:	09 fe                	or     %edi,%esi
c010842a:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010842d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108430:	c1 eb 01             	shr    $0x1,%ebx
c0108433:	09 df                	or     %ebx,%edi
c0108435:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108438:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
c010843e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108441:	c1 e8 01             	shr    $0x1,%eax
c0108444:	09 c3                	or     %eax,%ebx
c0108446:	c1 eb 02             	shr    $0x2,%ebx
c0108449:	09 df                	or     %ebx,%edi
c010844b:	c1 ef 04             	shr    $0x4,%edi
c010844e:	09 fe                	or     %edi,%esi
c0108450:	c1 ee 08             	shr    $0x8,%esi
c0108453:	09 f2                	or     %esi,%edx
c0108455:	c1 ea 10             	shr    $0x10,%edx
c0108458:	09 d1                	or     %edx,%ecx
c010845a:	c1 e9 01             	shr    $0x1,%ecx
c010845d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
c0108463:	21 c8                	and    %ecx,%eax
c0108465:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010846b:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010846e:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108471:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108474:	c1 ef 01             	shr    $0x1,%edi
c0108477:	09 fe                	or     %edi,%esi
c0108479:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010847c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010847f:	c1 eb 01             	shr    $0x1,%ebx
c0108482:	09 df                	or     %ebx,%edi
c0108484:	c1 ef 02             	shr    $0x2,%edi
c0108487:	09 fe                	or     %edi,%esi
c0108489:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010848c:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010848f:	c1 eb 01             	shr    $0x1,%ebx
c0108492:	09 df                	or     %ebx,%edi
c0108494:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108497:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
c010849d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01084a0:	c1 e8 01             	shr    $0x1,%eax
c01084a3:	09 c3                	or     %eax,%ebx
c01084a5:	c1 eb 02             	shr    $0x2,%ebx
c01084a8:	09 df                	or     %ebx,%edi
c01084aa:	c1 ef 04             	shr    $0x4,%edi
c01084ad:	09 fe                	or     %edi,%esi
c01084af:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01084b2:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01084b5:	c1 ef 01             	shr    $0x1,%edi
c01084b8:	09 f8                	or     %edi,%eax
c01084ba:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01084bd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01084c0:	c1 eb 01             	shr    $0x1,%ebx
c01084c3:	09 df                	or     %ebx,%edi
c01084c5:	c1 ef 02             	shr    $0x2,%edi
c01084c8:	09 f8                	or     %edi,%eax
c01084ca:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01084cd:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01084d0:	c1 eb 01             	shr    $0x1,%ebx
c01084d3:	09 df                	or     %ebx,%edi
c01084d5:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01084d8:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
c01084de:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01084e1:	c1 e8 01             	shr    $0x1,%eax
c01084e4:	09 c3                	or     %eax,%ebx
c01084e6:	c1 eb 02             	shr    $0x2,%ebx
c01084e9:	09 df                	or     %ebx,%edi
c01084eb:	c1 ef 04             	shr    $0x4,%edi
c01084ee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
c01084f4:	09 f8                	or     %edi,%eax
c01084f6:	c1 e8 08             	shr    $0x8,%eax
c01084f9:	09 c6                	or     %eax,%esi
c01084fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01084fe:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108501:	c1 ef 01             	shr    $0x1,%edi
c0108504:	09 f8                	or     %edi,%eax
c0108506:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108509:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010850c:	c1 eb 01             	shr    $0x1,%ebx
c010850f:	09 df                	or     %ebx,%edi
c0108511:	c1 ef 02             	shr    $0x2,%edi
c0108514:	09 f8                	or     %edi,%eax
c0108516:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108519:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010851c:	c1 eb 01             	shr    $0x1,%ebx
c010851f:	09 df                	or     %ebx,%edi
c0108521:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108524:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
c010852a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010852d:	c1 e8 01             	shr    $0x1,%eax
c0108530:	09 c3                	or     %eax,%ebx
c0108532:	c1 eb 02             	shr    $0x2,%ebx
c0108535:	09 df                	or     %ebx,%edi
c0108537:	c1 ef 04             	shr    $0x4,%edi
c010853a:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
c0108540:	09 f8                	or     %edi,%eax
c0108542:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108545:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108548:	c1 eb 01             	shr    $0x1,%ebx
c010854b:	09 df                	or     %ebx,%edi
c010854d:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108550:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
c0108556:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108559:	c1 e8 01             	shr    $0x1,%eax
c010855c:	09 c3                	or     %eax,%ebx
c010855e:	c1 eb 02             	shr    $0x2,%ebx
c0108561:	09 df                	or     %ebx,%edi
c0108563:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108566:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108569:	c1 eb 01             	shr    $0x1,%ebx
c010856c:	09 d8                	or     %ebx,%eax
c010856e:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108571:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
c0108577:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010857a:	c1 e8 01             	shr    $0x1,%eax
c010857d:	09 c3                	or     %eax,%ebx
c010857f:	c1 eb 02             	shr    $0x2,%ebx
c0108582:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
c0108588:	09 d8                	or     %ebx,%eax
c010858a:	c1 e8 04             	shr    $0x4,%eax
c010858d:	09 c7                	or     %eax,%edi
c010858f:	c1 ef 08             	shr    $0x8,%edi
c0108592:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
c0108598:	09 f8                	or     %edi,%eax
c010859a:	c1 e8 10             	shr    $0x10,%eax
c010859d:	09 c6                	or     %eax,%esi
c010859f:	c1 ee 01             	shr    $0x1,%esi
c01085a2:	21 f2                	and    %esi,%edx
c01085a4:	83 fa 00             	cmp    $0x0,%edx
c01085a7:	89 8d 88 fe ff ff    	mov    %ecx,-0x178(%ebp)
c01085ad:	0f 84 2b 01 00 00    	je     c01086de <buddy_alloc_pages+0x160e>
c01085b3:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01085b6:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c01085b9:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01085bc:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01085bf:	c1 ee 01             	shr    $0x1,%esi
c01085c2:	09 f2                	or     %esi,%edx
c01085c4:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01085c7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01085ca:	c1 ef 01             	shr    $0x1,%edi
c01085cd:	09 fe                	or     %edi,%esi
c01085cf:	c1 ee 02             	shr    $0x2,%esi
c01085d2:	09 f2                	or     %esi,%edx
c01085d4:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01085d7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01085da:	c1 ef 01             	shr    $0x1,%edi
c01085dd:	09 fe                	or     %edi,%esi
c01085df:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01085e2:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c01085e5:	c1 eb 01             	shr    $0x1,%ebx
c01085e8:	09 df                	or     %ebx,%edi
c01085ea:	c1 ef 02             	shr    $0x2,%edi
c01085ed:	09 fe                	or     %edi,%esi
c01085ef:	c1 ee 04             	shr    $0x4,%esi
c01085f2:	09 f2                	or     %esi,%edx
c01085f4:	8b 75 94             	mov    -0x6c(%ebp),%esi
c01085f7:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c01085fa:	c1 ef 01             	shr    $0x1,%edi
c01085fd:	09 fe                	or     %edi,%esi
c01085ff:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108602:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108605:	c1 eb 01             	shr    $0x1,%ebx
c0108608:	09 df                	or     %ebx,%edi
c010860a:	c1 ef 02             	shr    $0x2,%edi
c010860d:	09 fe                	or     %edi,%esi
c010860f:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108612:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108615:	c1 eb 01             	shr    $0x1,%ebx
c0108618:	09 df                	or     %ebx,%edi
c010861a:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010861d:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
c0108623:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108626:	c1 e8 01             	shr    $0x1,%eax
c0108629:	09 c3                	or     %eax,%ebx
c010862b:	c1 eb 02             	shr    $0x2,%ebx
c010862e:	09 df                	or     %ebx,%edi
c0108630:	c1 ef 04             	shr    $0x4,%edi
c0108633:	09 fe                	or     %edi,%esi
c0108635:	c1 ee 08             	shr    $0x8,%esi
c0108638:	09 f2                	or     %esi,%edx
c010863a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010863d:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108640:	c1 ee 01             	shr    $0x1,%esi
c0108643:	09 f0                	or     %esi,%eax
c0108645:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108648:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010864b:	c1 ef 01             	shr    $0x1,%edi
c010864e:	09 fe                	or     %edi,%esi
c0108650:	c1 ee 02             	shr    $0x2,%esi
c0108653:	09 f0                	or     %esi,%eax
c0108655:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108658:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010865b:	c1 ef 01             	shr    $0x1,%edi
c010865e:	09 fe                	or     %edi,%esi
c0108660:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108663:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108666:	c1 eb 01             	shr    $0x1,%ebx
c0108669:	09 df                	or     %ebx,%edi
c010866b:	c1 ef 02             	shr    $0x2,%edi
c010866e:	09 fe                	or     %edi,%esi
c0108670:	c1 ee 04             	shr    $0x4,%esi
c0108673:	09 f0                	or     %esi,%eax
c0108675:	8b 75 94             	mov    -0x6c(%ebp),%esi
c0108678:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c010867b:	c1 ef 01             	shr    $0x1,%edi
c010867e:	09 fe                	or     %edi,%esi
c0108680:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108683:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108686:	c1 eb 01             	shr    $0x1,%ebx
c0108689:	09 df                	or     %ebx,%edi
c010868b:	c1 ef 02             	shr    $0x2,%edi
c010868e:	09 fe                	or     %edi,%esi
c0108690:	8b 7d 94             	mov    -0x6c(%ebp),%edi
c0108693:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c0108696:	c1 eb 01             	shr    $0x1,%ebx
c0108699:	09 df                	or     %ebx,%edi
c010869b:	8b 5d 94             	mov    -0x6c(%ebp),%ebx
c010869e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
c01086a4:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01086a7:	c1 e8 01             	shr    $0x1,%eax
c01086aa:	09 c3                	or     %eax,%ebx
c01086ac:	c1 eb 02             	shr    $0x2,%ebx
c01086af:	09 df                	or     %ebx,%edi
c01086b1:	c1 ef 04             	shr    $0x4,%edi
c01086b4:	09 fe                	or     %edi,%esi
c01086b6:	c1 ee 08             	shr    $0x8,%esi
c01086b9:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
c01086bf:	09 f0                	or     %esi,%eax
c01086c1:	c1 e8 10             	shr    $0x10,%eax
c01086c4:	09 c2                	or     %eax,%edx
c01086c6:	c1 ea 01             	shr    $0x1,%edx
c01086c9:	21 d1                	and    %edx,%ecx
c01086cb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
c01086d1:	29 c8                	sub    %ecx,%eax
c01086d3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
c01086d9:	e9 09 00 00 00       	jmp    c01086e7 <buddy_alloc_pages+0x1617>
c01086de:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01086e1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
c01086e7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
c01086ed:	8b 8d 88 fe ff ff    	mov    -0x178(%ebp),%ecx
c01086f3:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
c01086f9:	89 c8                	mov    %ecx,%eax
c01086fb:	31 d2                	xor    %edx,%edx
c01086fd:	8b b5 78 fe ff ff    	mov    -0x188(%ebp),%esi
c0108703:	f7 f6                	div    %esi
c0108705:	8b bd 9c fe ff ff    	mov    -0x164(%ebp),%edi
c010870b:	0f af f8             	imul   %eax,%edi
c010870e:	6b c7 14             	imul   $0x14,%edi,%eax
c0108711:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0108717:	89 45 98             	mov    %eax,-0x68(%ebp)
    list_del(&(page->page_link));
c010871a:	8b 45 98             	mov    -0x68(%ebp),%eax
c010871d:	83 c0 0c             	add    $0xc,%eax
c0108720:	89 45 b0             	mov    %eax,-0x50(%ebp)
    __list_del(listelm->prev, listelm->next);
c0108723:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0108726:	8b 00                	mov    (%eax),%eax
c0108728:	8b 7d b0             	mov    -0x50(%ebp),%edi
c010872b:	8b 7f 04             	mov    0x4(%edi),%edi
c010872e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108731:	89 7d b4             	mov    %edi,-0x4c(%ebp)
    prev->next = next;
c0108734:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108737:	8b 7d b8             	mov    -0x48(%ebp),%edi
c010873a:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
c010873d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108740:	8b 7d b4             	mov    -0x4c(%ebp),%edi
c0108743:	89 07                	mov    %eax,(%edi)
    buddy_segment[block] = 0;
c0108745:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108748:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c010874e:	c7 04 87 00 00 00 00 	movl   $0x0,(%edi,%eax,4)
    nr_free -= length;
c0108755:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108758:	8b 3d 38 49 11 c0    	mov    0xc0114938,%edi
c010875e:	29 c7                	sub    %eax,%edi
c0108760:	89 3d 38 49 11 c0    	mov    %edi,0xc0114938
    // Update buddy segment
    while (block != BUDDY_ROOT) {
c0108766:	83 7d 94 01          	cmpl   $0x1,-0x6c(%ebp)
c010876a:	0f 84 39 00 00 00    	je     c01087a9 <buddy_alloc_pages+0x16d9>
        block = BUDDY_PARENT(block);
c0108770:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108773:	c1 e8 01             	shr    $0x1,%eax
c0108776:	89 45 94             	mov    %eax,-0x6c(%ebp)
        buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
c0108779:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010877c:	c1 e0 01             	shl    $0x1,%eax
c010877f:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c0108785:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0108788:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010878b:	c1 e1 01             	shl    $0x1,%ecx
c010878e:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0108794:	0b 44 8a 04          	or     0x4(%edx,%ecx,4),%eax
c0108798:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010879b:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c01087a1:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    while (block != BUDDY_ROOT) {
c01087a4:	e9 bd ff ff ff       	jmp    c0108766 <buddy_alloc_pages+0x1696>
    }
    return page;
c01087a9:	8b 45 98             	mov    -0x68(%ebp),%eax
c01087ac:	89 45 a0             	mov    %eax,-0x60(%ebp)
}
c01087af:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01087b2:	81 c4 8c 01 00 00    	add    $0x18c,%esp
c01087b8:	5e                   	pop    %esi
c01087b9:	5f                   	pop    %edi
c01087ba:	5b                   	pop    %ebx
c01087bb:	5d                   	pop    %ebp
c01087bc:	c3                   	ret    
c01087bd:	0f 1f 00             	nopl   (%eax)

c01087c0 <buddy_free_pages>:

static void
buddy_free_pages(struct Page *base, size_t n) {
c01087c0:	55                   	push   %ebp
c01087c1:	89 e5                	mov    %esp,%ebp
c01087c3:	53                   	push   %ebx
c01087c4:	57                   	push   %edi
c01087c5:	56                   	push   %esi
c01087c6:	81 ec 7c 01 00 00    	sub    $0x17c,%esp
c01087cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01087cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01087d2:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c01087d5:	89 45 90             	mov    %eax,-0x70(%ebp)
    assert(n > 0);
c01087d8:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c01087dc:	0f 87 35 00 00 00    	ja     c0108817 <buddy_free_pages+0x57>
c01087e2:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c01087e8:	b9 a8 00 00 00       	mov    $0xa8,%ecx
c01087ed:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c01087f3:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c01087f9:	89 04 24             	mov    %eax,(%esp)
c01087fc:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0108803:	00 
c0108804:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108808:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010880c:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c0108812:	e8 39 7c ff ff       	call   c0100450 <__panic>
c0108817:	e9 00 00 00 00       	jmp    c010881c <buddy_free_pages+0x5c>
    struct Page *p = base;
c010881c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010881f:	89 45 8c             	mov    %eax,-0x74(%ebp)
    size_t length = UINT32_ROUND_UP(n);
c0108822:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108825:	8b 4d 90             	mov    -0x70(%ebp),%ecx
c0108828:	8b 55 90             	mov    -0x70(%ebp),%edx
c010882b:	c1 ea 01             	shr    $0x1,%edx
c010882e:	09 d1                	or     %edx,%ecx
c0108830:	8b 55 90             	mov    -0x70(%ebp),%edx
c0108833:	8b 75 90             	mov    -0x70(%ebp),%esi
c0108836:	c1 ee 01             	shr    $0x1,%esi
c0108839:	09 f2                	or     %esi,%edx
c010883b:	c1 ea 02             	shr    $0x2,%edx
c010883e:	09 d1                	or     %edx,%ecx
c0108840:	8b 55 90             	mov    -0x70(%ebp),%edx
c0108843:	8b 75 90             	mov    -0x70(%ebp),%esi
c0108846:	c1 ee 01             	shr    $0x1,%esi
c0108849:	09 f2                	or     %esi,%edx
c010884b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010884e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108851:	c1 ef 01             	shr    $0x1,%edi
c0108854:	09 fe                	or     %edi,%esi
c0108856:	c1 ee 02             	shr    $0x2,%esi
c0108859:	09 f2                	or     %esi,%edx
c010885b:	c1 ea 04             	shr    $0x4,%edx
c010885e:	09 d1                	or     %edx,%ecx
c0108860:	8b 55 90             	mov    -0x70(%ebp),%edx
c0108863:	8b 75 90             	mov    -0x70(%ebp),%esi
c0108866:	c1 ee 01             	shr    $0x1,%esi
c0108869:	09 f2                	or     %esi,%edx
c010886b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010886e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108871:	c1 ef 01             	shr    $0x1,%edi
c0108874:	09 fe                	or     %edi,%esi
c0108876:	c1 ee 02             	shr    $0x2,%esi
c0108879:	09 f2                	or     %esi,%edx
c010887b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010887e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108881:	c1 ef 01             	shr    $0x1,%edi
c0108884:	09 fe                	or     %edi,%esi
c0108886:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108889:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c010888c:	c1 eb 01             	shr    $0x1,%ebx
c010888f:	09 df                	or     %ebx,%edi
c0108891:	c1 ef 02             	shr    $0x2,%edi
c0108894:	09 fe                	or     %edi,%esi
c0108896:	c1 ee 04             	shr    $0x4,%esi
c0108899:	09 f2                	or     %esi,%edx
c010889b:	c1 ea 08             	shr    $0x8,%edx
c010889e:	09 d1                	or     %edx,%ecx
c01088a0:	8b 55 90             	mov    -0x70(%ebp),%edx
c01088a3:	8b 75 90             	mov    -0x70(%ebp),%esi
c01088a6:	c1 ee 01             	shr    $0x1,%esi
c01088a9:	09 f2                	or     %esi,%edx
c01088ab:	8b 75 90             	mov    -0x70(%ebp),%esi
c01088ae:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088b1:	c1 ef 01             	shr    $0x1,%edi
c01088b4:	09 fe                	or     %edi,%esi
c01088b6:	c1 ee 02             	shr    $0x2,%esi
c01088b9:	09 f2                	or     %esi,%edx
c01088bb:	8b 75 90             	mov    -0x70(%ebp),%esi
c01088be:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088c1:	c1 ef 01             	shr    $0x1,%edi
c01088c4:	09 fe                	or     %edi,%esi
c01088c6:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088c9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c01088cc:	c1 eb 01             	shr    $0x1,%ebx
c01088cf:	09 df                	or     %ebx,%edi
c01088d1:	c1 ef 02             	shr    $0x2,%edi
c01088d4:	09 fe                	or     %edi,%esi
c01088d6:	c1 ee 04             	shr    $0x4,%esi
c01088d9:	09 f2                	or     %esi,%edx
c01088db:	8b 75 90             	mov    -0x70(%ebp),%esi
c01088de:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088e1:	c1 ef 01             	shr    $0x1,%edi
c01088e4:	09 fe                	or     %edi,%esi
c01088e6:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088e9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c01088ec:	c1 eb 01             	shr    $0x1,%ebx
c01088ef:	09 df                	or     %ebx,%edi
c01088f1:	c1 ef 02             	shr    $0x2,%edi
c01088f4:	09 fe                	or     %edi,%esi
c01088f6:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01088f9:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c01088fc:	c1 eb 01             	shr    $0x1,%ebx
c01088ff:	09 df                	or     %ebx,%edi
c0108901:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c0108904:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010890a:	8b 45 90             	mov    -0x70(%ebp),%eax
c010890d:	c1 e8 01             	shr    $0x1,%eax
c0108910:	09 c3                	or     %eax,%ebx
c0108912:	c1 eb 02             	shr    $0x2,%ebx
c0108915:	09 df                	or     %ebx,%edi
c0108917:	c1 ef 04             	shr    $0x4,%edi
c010891a:	09 fe                	or     %edi,%esi
c010891c:	c1 ee 08             	shr    $0x8,%esi
c010891f:	09 f2                	or     %esi,%edx
c0108921:	c1 ea 10             	shr    $0x10,%edx
c0108924:	09 d1                	or     %edx,%ecx
c0108926:	c1 e9 01             	shr    $0x1,%ecx
c0108929:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
c010892f:	21 c8                	and    %ecx,%eax
c0108931:	83 f8 00             	cmp    $0x0,%eax
c0108934:	0f 84 2e 01 00 00    	je     c0108a68 <buddy_free_pages+0x2a8>
c010893a:	8b 45 90             	mov    -0x70(%ebp),%eax
c010893d:	8b 4d 90             	mov    -0x70(%ebp),%ecx
c0108940:	8b 55 90             	mov    -0x70(%ebp),%edx
c0108943:	8b 75 90             	mov    -0x70(%ebp),%esi
c0108946:	c1 ee 01             	shr    $0x1,%esi
c0108949:	09 f2                	or     %esi,%edx
c010894b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010894e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108951:	c1 ef 01             	shr    $0x1,%edi
c0108954:	09 fe                	or     %edi,%esi
c0108956:	c1 ee 02             	shr    $0x2,%esi
c0108959:	09 f2                	or     %esi,%edx
c010895b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010895e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108961:	c1 ef 01             	shr    $0x1,%edi
c0108964:	09 fe                	or     %edi,%esi
c0108966:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108969:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c010896c:	c1 eb 01             	shr    $0x1,%ebx
c010896f:	09 df                	or     %ebx,%edi
c0108971:	c1 ef 02             	shr    $0x2,%edi
c0108974:	09 fe                	or     %edi,%esi
c0108976:	c1 ee 04             	shr    $0x4,%esi
c0108979:	09 f2                	or     %esi,%edx
c010897b:	8b 75 90             	mov    -0x70(%ebp),%esi
c010897e:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108981:	c1 ef 01             	shr    $0x1,%edi
c0108984:	09 fe                	or     %edi,%esi
c0108986:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108989:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c010898c:	c1 eb 01             	shr    $0x1,%ebx
c010898f:	09 df                	or     %ebx,%edi
c0108991:	c1 ef 02             	shr    $0x2,%edi
c0108994:	09 fe                	or     %edi,%esi
c0108996:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108999:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c010899c:	c1 eb 01             	shr    $0x1,%ebx
c010899f:	09 df                	or     %ebx,%edi
c01089a1:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c01089a4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c01089aa:	8b 45 90             	mov    -0x70(%ebp),%eax
c01089ad:	c1 e8 01             	shr    $0x1,%eax
c01089b0:	09 c3                	or     %eax,%ebx
c01089b2:	c1 eb 02             	shr    $0x2,%ebx
c01089b5:	09 df                	or     %ebx,%edi
c01089b7:	c1 ef 04             	shr    $0x4,%edi
c01089ba:	09 fe                	or     %edi,%esi
c01089bc:	c1 ee 08             	shr    $0x8,%esi
c01089bf:	09 f2                	or     %esi,%edx
c01089c1:	8b 45 90             	mov    -0x70(%ebp),%eax
c01089c4:	8b 75 90             	mov    -0x70(%ebp),%esi
c01089c7:	c1 ee 01             	shr    $0x1,%esi
c01089ca:	09 f0                	or     %esi,%eax
c01089cc:	8b 75 90             	mov    -0x70(%ebp),%esi
c01089cf:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01089d2:	c1 ef 01             	shr    $0x1,%edi
c01089d5:	09 fe                	or     %edi,%esi
c01089d7:	c1 ee 02             	shr    $0x2,%esi
c01089da:	09 f0                	or     %esi,%eax
c01089dc:	8b 75 90             	mov    -0x70(%ebp),%esi
c01089df:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01089e2:	c1 ef 01             	shr    $0x1,%edi
c01089e5:	09 fe                	or     %edi,%esi
c01089e7:	8b 7d 90             	mov    -0x70(%ebp),%edi
c01089ea:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c01089ed:	c1 eb 01             	shr    $0x1,%ebx
c01089f0:	09 df                	or     %ebx,%edi
c01089f2:	c1 ef 02             	shr    $0x2,%edi
c01089f5:	09 fe                	or     %edi,%esi
c01089f7:	c1 ee 04             	shr    $0x4,%esi
c01089fa:	09 f0                	or     %esi,%eax
c01089fc:	8b 75 90             	mov    -0x70(%ebp),%esi
c01089ff:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108a02:	c1 ef 01             	shr    $0x1,%edi
c0108a05:	09 fe                	or     %edi,%esi
c0108a07:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108a0a:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c0108a0d:	c1 eb 01             	shr    $0x1,%ebx
c0108a10:	09 df                	or     %ebx,%edi
c0108a12:	c1 ef 02             	shr    $0x2,%edi
c0108a15:	09 fe                	or     %edi,%esi
c0108a17:	8b 7d 90             	mov    -0x70(%ebp),%edi
c0108a1a:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c0108a1d:	c1 eb 01             	shr    $0x1,%ebx
c0108a20:	09 df                	or     %ebx,%edi
c0108a22:	8b 5d 90             	mov    -0x70(%ebp),%ebx
c0108a25:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c0108a2b:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108a2e:	c1 e8 01             	shr    $0x1,%eax
c0108a31:	09 c3                	or     %eax,%ebx
c0108a33:	c1 eb 02             	shr    $0x2,%ebx
c0108a36:	09 df                	or     %ebx,%edi
c0108a38:	c1 ef 04             	shr    $0x4,%edi
c0108a3b:	09 fe                	or     %edi,%esi
c0108a3d:	c1 ee 08             	shr    $0x8,%esi
c0108a40:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
c0108a46:	09 f0                	or     %esi,%eax
c0108a48:	c1 e8 10             	shr    $0x10,%eax
c0108a4b:	09 c2                	or     %eax,%edx
c0108a4d:	c1 ea 01             	shr    $0x1,%edx
c0108a50:	21 d1                	and    %edx,%ecx
c0108a52:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
c0108a58:	29 c8                	sub    %ecx,%eax
c0108a5a:	c1 e0 01             	shl    $0x1,%eax
c0108a5d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c0108a63:	e9 09 00 00 00       	jmp    c0108a71 <buddy_free_pages+0x2b1>
c0108a68:	8b 45 90             	mov    -0x70(%ebp),%eax
c0108a6b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c0108a71:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
c0108a77:	b9 14 00 00 00       	mov    $0x14,%ecx
c0108a7c:	89 45 88             	mov    %eax,-0x78(%ebp)
    // Find buddy id 
    size_t begin = (base-buddy_alloc);
c0108a7f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0108a82:	8b 15 1c 49 11 c0    	mov    0xc011491c,%edx
c0108a88:	29 d0                	sub    %edx,%eax
c0108a8a:	99                   	cltd   
c0108a8b:	f7 f9                	idiv   %ecx
c0108a8d:	89 45 84             	mov    %eax,-0x7c(%ebp)
    size_t end = begin + length;
c0108a90:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0108a93:	03 45 88             	add    -0x78(%ebp),%eax
c0108a96:	89 45 80             	mov    %eax,-0x80(%ebp)
    size_t block = BUDDY_BLOCK(begin, end);
c0108a99:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c0108a9e:	8b 4d 80             	mov    -0x80(%ebp),%ecx
c0108aa1:	2b 4d 84             	sub    -0x7c(%ebp),%ecx
c0108aa4:	31 f6                	xor    %esi,%esi
c0108aa6:	89 f2                	mov    %esi,%edx
c0108aa8:	f7 f1                	div    %ecx
c0108aaa:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c0108aad:	8b 75 80             	mov    -0x80(%ebp),%esi
c0108ab0:	2b 75 84             	sub    -0x7c(%ebp),%esi
c0108ab3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c0108ab9:	89 c8                	mov    %ecx,%eax
c0108abb:	31 c9                	xor    %ecx,%ecx
c0108abd:	89 ca                	mov    %ecx,%edx
c0108abf:	f7 f6                	div    %esi
c0108ac1:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
c0108ac7:	01 c1                	add    %eax,%ecx
c0108ac9:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
    // Release block
    for (; p != base + n; p ++) {
c0108acf:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0108ad2:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0108ad5:	6b 55 90 14          	imul   $0x14,-0x70(%ebp),%edx
c0108ad9:	01 d1                	add    %edx,%ecx
c0108adb:	39 c8                	cmp    %ecx,%eax
c0108add:	0f 84 a6 00 00 00    	je     c0108b89 <buddy_free_pages+0x3c9>
        assert(!PageReserved(p));
c0108ae3:	e9 00 00 00 00       	jmp    c0108ae8 <buddy_free_pages+0x328>
c0108ae8:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0108aeb:	83 c0 04             	add    $0x4,%eax
c0108aee:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
c0108af5:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108af8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0108afb:	8b 4d a0             	mov    -0x60(%ebp),%ecx
c0108afe:	0f a3 08             	bt     %ecx,(%eax)
c0108b01:	19 c0                	sbb    %eax,%eax
c0108b03:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0108b06:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0108b0a:	0f 95 c2             	setne  %dl
c0108b0d:	80 e2 01             	and    $0x1,%dl
c0108b10:	0f b6 c2             	movzbl %dl,%eax
c0108b13:	83 f8 00             	cmp    $0x0,%eax
c0108b16:	0f 84 35 00 00 00    	je     c0108b51 <buddy_free_pages+0x391>
c0108b1c:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c0108b22:	b9 b1 00 00 00       	mov    $0xb1,%ecx
c0108b27:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0108b2d:	8d 35 e3 00 11 c0    	lea    0xc01100e3,%esi
c0108b33:	89 04 24             	mov    %eax,(%esp)
c0108b36:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0108b3d:	00 
c0108b3e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108b42:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0108b46:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
c0108b4c:	e8 ff 78 ff ff       	call   c0100450 <__panic>
c0108b51:	e9 00 00 00 00       	jmp    c0108b56 <buddy_free_pages+0x396>
c0108b56:	31 c0                	xor    %eax,%eax
        p->flags = 0;
c0108b58:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c0108b5b:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
c0108b62:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c0108b65:	89 0c 24             	mov    %ecx,(%esp)
c0108b68:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108b6f:	00 
c0108b70:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
c0108b76:	e8 25 24 00 00       	call   c010afa0 <set_page_ref>
    for (; p != base + n; p ++) {
c0108b7b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0108b7e:	83 c0 14             	add    $0x14,%eax
c0108b81:	89 45 8c             	mov    %eax,-0x74(%ebp)
c0108b84:	e9 46 ff ff ff       	jmp    c0108acf <buddy_free_pages+0x30f>
c0108b89:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    }
    base->property = length;
c0108b8f:	8b 4d 88             	mov    -0x78(%ebp),%ecx
c0108b92:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0108b95:	89 4a 08             	mov    %ecx,0x8(%edx)
    list_add(&(free_list), &(base->page_link));
c0108b98:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c0108b9b:	83 c1 0c             	add    $0xc,%ecx
c0108b9e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0108ba1:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
    list_add_after(listelm, elm);
c0108ba4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0108ba7:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c0108baa:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0108bad:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    __list_add(elm, listelm, listelm->next);
c0108bb0:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0108bb3:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0108bb6:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0108bb9:	8b 52 04             	mov    0x4(%edx),%edx
c0108bbc:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0108bbf:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c0108bc2:	89 55 b4             	mov    %edx,-0x4c(%ebp)
    prev->next = next->prev = elm;
c0108bc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bc8:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c0108bcb:	89 01                	mov    %eax,(%ecx)
c0108bcd:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c0108bd0:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0108bd3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108bd6:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0108bd9:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0108bdc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108bdf:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0108be2:	89 01                	mov    %eax,(%ecx)
    nr_free += length;
c0108be4:	8b 45 88             	mov    -0x78(%ebp),%eax
c0108be7:	03 05 38 49 11 c0    	add    0xc0114938,%eax
c0108bed:	a3 38 49 11 c0       	mov    %eax,0xc0114938
    buddy_segment[block] = length;
c0108bf2:	8b 45 88             	mov    -0x78(%ebp),%eax
c0108bf5:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c0108bfb:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0108c01:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    // Upadte & merge
    while (block != BUDDY_ROOT) {
c0108c04:	83 bd 7c ff ff ff 01 	cmpl   $0x1,-0x84(%ebp)
c0108c0b:	0f 84 a7 12 00 00    	je     c0109eb8 <buddy_free_pages+0x16f8>
        block = BUDDY_PARENT(block);
c0108c11:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0108c17:	c1 e8 01             	shr    $0x1,%eax
c0108c1a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
        size_t left = BUDDY_LEFT(block);
c0108c20:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0108c26:	c1 e0 01             	shl    $0x1,%eax
c0108c29:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
        size_t right = BUDDY_RIGHT(block);
c0108c2f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0108c35:	c1 e0 01             	shl    $0x1,%eax
c0108c38:	83 c0 01             	add    $0x1,%eax
c0108c3b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
        if (BUDDY_EMPTY(left) && BUDDY_EMPTY(right)) {  // Merge
c0108c41:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108c47:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c0108c4d:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0108c50:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c0108c56:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0108c5c:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108c62:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108c68:	c1 ef 01             	shr    $0x1,%edi
c0108c6b:	09 fe                	or     %edi,%esi
c0108c6d:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108c73:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108c79:	c1 eb 01             	shr    $0x1,%ebx
c0108c7c:	09 df                	or     %ebx,%edi
c0108c7e:	c1 ef 02             	shr    $0x2,%edi
c0108c81:	09 fe                	or     %edi,%esi
c0108c83:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108c89:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108c8f:	c1 eb 01             	shr    $0x1,%ebx
c0108c92:	09 df                	or     %ebx,%edi
c0108c94:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108c9a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c0108ca0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108ca6:	c1 e8 01             	shr    $0x1,%eax
c0108ca9:	09 c3                	or     %eax,%ebx
c0108cab:	c1 eb 02             	shr    $0x2,%ebx
c0108cae:	09 df                	or     %ebx,%edi
c0108cb0:	c1 ef 04             	shr    $0x4,%edi
c0108cb3:	09 fe                	or     %edi,%esi
c0108cb5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108cbb:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108cc1:	c1 ef 01             	shr    $0x1,%edi
c0108cc4:	09 f8                	or     %edi,%eax
c0108cc6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108ccc:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108cd2:	c1 eb 01             	shr    $0x1,%ebx
c0108cd5:	09 df                	or     %ebx,%edi
c0108cd7:	c1 ef 02             	shr    $0x2,%edi
c0108cda:	09 f8                	or     %edi,%eax
c0108cdc:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108ce2:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108ce8:	c1 eb 01             	shr    $0x1,%ebx
c0108ceb:	09 df                	or     %ebx,%edi
c0108ced:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108cf3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c0108cf9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108cff:	c1 e8 01             	shr    $0x1,%eax
c0108d02:	09 c3                	or     %eax,%ebx
c0108d04:	c1 eb 02             	shr    $0x2,%ebx
c0108d07:	09 df                	or     %ebx,%edi
c0108d09:	c1 ef 04             	shr    $0x4,%edi
c0108d0c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
c0108d12:	09 f8                	or     %edi,%eax
c0108d14:	c1 e8 08             	shr    $0x8,%eax
c0108d17:	09 c6                	or     %eax,%esi
c0108d19:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108d1f:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108d25:	c1 ef 01             	shr    $0x1,%edi
c0108d28:	09 f8                	or     %edi,%eax
c0108d2a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108d30:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108d36:	c1 eb 01             	shr    $0x1,%ebx
c0108d39:	09 df                	or     %ebx,%edi
c0108d3b:	c1 ef 02             	shr    $0x2,%edi
c0108d3e:	09 f8                	or     %edi,%eax
c0108d40:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108d46:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108d4c:	c1 eb 01             	shr    $0x1,%ebx
c0108d4f:	09 df                	or     %ebx,%edi
c0108d51:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108d57:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c0108d5d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108d63:	c1 e8 01             	shr    $0x1,%eax
c0108d66:	09 c3                	or     %eax,%ebx
c0108d68:	c1 eb 02             	shr    $0x2,%ebx
c0108d6b:	09 df                	or     %ebx,%edi
c0108d6d:	c1 ef 04             	shr    $0x4,%edi
c0108d70:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
c0108d76:	09 f8                	or     %edi,%eax
c0108d78:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108d7e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108d84:	c1 eb 01             	shr    $0x1,%ebx
c0108d87:	09 df                	or     %ebx,%edi
c0108d89:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108d8f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
c0108d95:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108d9b:	c1 e8 01             	shr    $0x1,%eax
c0108d9e:	09 c3                	or     %eax,%ebx
c0108da0:	c1 eb 02             	shr    $0x2,%ebx
c0108da3:	09 df                	or     %ebx,%edi
c0108da5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108dab:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108db1:	c1 eb 01             	shr    $0x1,%ebx
c0108db4:	09 d8                	or     %ebx,%eax
c0108db6:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108dbc:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
c0108dc2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108dc8:	c1 e8 01             	shr    $0x1,%eax
c0108dcb:	09 c3                	or     %eax,%ebx
c0108dcd:	c1 eb 02             	shr    $0x2,%ebx
c0108dd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
c0108dd6:	09 d8                	or     %ebx,%eax
c0108dd8:	c1 e8 04             	shr    $0x4,%eax
c0108ddb:	09 c7                	or     %eax,%edi
c0108ddd:	c1 ef 08             	shr    $0x8,%edi
c0108de0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
c0108de6:	09 f8                	or     %edi,%eax
c0108de8:	c1 e8 10             	shr    $0x10,%eax
c0108deb:	09 c6                	or     %eax,%esi
c0108ded:	c1 ee 01             	shr    $0x1,%esi
c0108df0:	21 f2                	and    %esi,%edx
c0108df2:	83 fa 00             	cmp    $0x0,%edx
c0108df5:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%ebp)
c0108dfb:	0f 84 91 01 00 00    	je     c0108f92 <buddy_free_pages+0x7d2>
c0108e01:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108e07:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c0108e0d:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0108e13:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108e19:	c1 ee 01             	shr    $0x1,%esi
c0108e1c:	09 f2                	or     %esi,%edx
c0108e1e:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108e24:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e2a:	c1 ef 01             	shr    $0x1,%edi
c0108e2d:	09 fe                	or     %edi,%esi
c0108e2f:	c1 ee 02             	shr    $0x2,%esi
c0108e32:	09 f2                	or     %esi,%edx
c0108e34:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108e3a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e40:	c1 ef 01             	shr    $0x1,%edi
c0108e43:	09 fe                	or     %edi,%esi
c0108e45:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e4b:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108e51:	c1 eb 01             	shr    $0x1,%ebx
c0108e54:	09 df                	or     %ebx,%edi
c0108e56:	c1 ef 02             	shr    $0x2,%edi
c0108e59:	09 fe                	or     %edi,%esi
c0108e5b:	c1 ee 04             	shr    $0x4,%esi
c0108e5e:	09 f2                	or     %esi,%edx
c0108e60:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108e66:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e6c:	c1 ef 01             	shr    $0x1,%edi
c0108e6f:	09 fe                	or     %edi,%esi
c0108e71:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e77:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108e7d:	c1 eb 01             	shr    $0x1,%ebx
c0108e80:	09 df                	or     %ebx,%edi
c0108e82:	c1 ef 02             	shr    $0x2,%edi
c0108e85:	09 fe                	or     %edi,%esi
c0108e87:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108e8d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108e93:	c1 eb 01             	shr    $0x1,%ebx
c0108e96:	09 df                	or     %ebx,%edi
c0108e98:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108e9e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
c0108ea4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108eaa:	c1 e8 01             	shr    $0x1,%eax
c0108ead:	09 c3                	or     %eax,%ebx
c0108eaf:	c1 eb 02             	shr    $0x2,%ebx
c0108eb2:	09 df                	or     %ebx,%edi
c0108eb4:	c1 ef 04             	shr    $0x4,%edi
c0108eb7:	09 fe                	or     %edi,%esi
c0108eb9:	c1 ee 08             	shr    $0x8,%esi
c0108ebc:	09 f2                	or     %esi,%edx
c0108ebe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108ec4:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108eca:	c1 ee 01             	shr    $0x1,%esi
c0108ecd:	09 f0                	or     %esi,%eax
c0108ecf:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108ed5:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108edb:	c1 ef 01             	shr    $0x1,%edi
c0108ede:	09 fe                	or     %edi,%esi
c0108ee0:	c1 ee 02             	shr    $0x2,%esi
c0108ee3:	09 f0                	or     %esi,%eax
c0108ee5:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108eeb:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108ef1:	c1 ef 01             	shr    $0x1,%edi
c0108ef4:	09 fe                	or     %edi,%esi
c0108ef6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108efc:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108f02:	c1 eb 01             	shr    $0x1,%ebx
c0108f05:	09 df                	or     %ebx,%edi
c0108f07:	c1 ef 02             	shr    $0x2,%edi
c0108f0a:	09 fe                	or     %edi,%esi
c0108f0c:	c1 ee 04             	shr    $0x4,%esi
c0108f0f:	09 f0                	or     %esi,%eax
c0108f11:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0108f17:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108f1d:	c1 ef 01             	shr    $0x1,%edi
c0108f20:	09 fe                	or     %edi,%esi
c0108f22:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108f28:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108f2e:	c1 eb 01             	shr    $0x1,%ebx
c0108f31:	09 df                	or     %ebx,%edi
c0108f33:	c1 ef 02             	shr    $0x2,%edi
c0108f36:	09 fe                	or     %edi,%esi
c0108f38:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0108f3e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108f44:	c1 eb 01             	shr    $0x1,%ebx
c0108f47:	09 df                	or     %ebx,%edi
c0108f49:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0108f4f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
c0108f55:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108f5b:	c1 e8 01             	shr    $0x1,%eax
c0108f5e:	09 c3                	or     %eax,%ebx
c0108f60:	c1 eb 02             	shr    $0x2,%ebx
c0108f63:	09 df                	or     %ebx,%edi
c0108f65:	c1 ef 04             	shr    $0x4,%edi
c0108f68:	09 fe                	or     %edi,%esi
c0108f6a:	c1 ee 08             	shr    $0x8,%esi
c0108f6d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
c0108f73:	09 f0                	or     %esi,%eax
c0108f75:	c1 e8 10             	shr    $0x10,%eax
c0108f78:	09 c2                	or     %eax,%edx
c0108f7a:	c1 ea 01             	shr    $0x1,%edx
c0108f7d:	21 d1                	and    %edx,%ecx
c0108f7f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
c0108f85:	29 c8                	sub    %ecx,%eax
c0108f87:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
c0108f8d:	e9 0c 00 00 00       	jmp    c0108f9e <buddy_free_pages+0x7de>
c0108f92:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0108f98:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
c0108f9e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
c0108fa4:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
c0108faa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
c0108fb0:	89 c8                	mov    %ecx,%eax
c0108fb2:	31 d2                	xor    %edx,%edx
c0108fb4:	8b b5 24 ff ff ff    	mov    -0xdc(%ebp),%esi
c0108fba:	f7 f6                	div    %esi
c0108fbc:	8b bd 48 ff ff ff    	mov    -0xb8(%ebp),%edi
c0108fc2:	39 c7                	cmp    %eax,%edi
c0108fc4:	0f 85 b5 0e 00 00    	jne    c0109e7f <buddy_free_pages+0x16bf>
c0108fca:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0108fd0:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c0108fd6:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0108fd9:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c0108fdf:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
c0108fe5:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0108feb:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0108ff1:	c1 ef 01             	shr    $0x1,%edi
c0108ff4:	09 fe                	or     %edi,%esi
c0108ff6:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0108ffc:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109002:	c1 eb 01             	shr    $0x1,%ebx
c0109005:	09 df                	or     %ebx,%edi
c0109007:	c1 ef 02             	shr    $0x2,%edi
c010900a:	09 fe                	or     %edi,%esi
c010900c:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109012:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109018:	c1 eb 01             	shr    $0x1,%ebx
c010901b:	09 df                	or     %ebx,%edi
c010901d:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109023:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
c0109029:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010902f:	c1 e8 01             	shr    $0x1,%eax
c0109032:	09 c3                	or     %eax,%ebx
c0109034:	c1 eb 02             	shr    $0x2,%ebx
c0109037:	09 df                	or     %ebx,%edi
c0109039:	c1 ef 04             	shr    $0x4,%edi
c010903c:	09 fe                	or     %edi,%esi
c010903e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109044:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c010904a:	c1 ef 01             	shr    $0x1,%edi
c010904d:	09 f8                	or     %edi,%eax
c010904f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109055:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010905b:	c1 eb 01             	shr    $0x1,%ebx
c010905e:	09 df                	or     %ebx,%edi
c0109060:	c1 ef 02             	shr    $0x2,%edi
c0109063:	09 f8                	or     %edi,%eax
c0109065:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c010906b:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109071:	c1 eb 01             	shr    $0x1,%ebx
c0109074:	09 df                	or     %ebx,%edi
c0109076:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010907c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
c0109082:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109088:	c1 e8 01             	shr    $0x1,%eax
c010908b:	09 c3                	or     %eax,%ebx
c010908d:	c1 eb 02             	shr    $0x2,%ebx
c0109090:	09 df                	or     %ebx,%edi
c0109092:	c1 ef 04             	shr    $0x4,%edi
c0109095:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
c010909b:	09 f8                	or     %edi,%eax
c010909d:	c1 e8 08             	shr    $0x8,%eax
c01090a0:	09 c6                	or     %eax,%esi
c01090a2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01090a8:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01090ae:	c1 ef 01             	shr    $0x1,%edi
c01090b1:	09 f8                	or     %edi,%eax
c01090b3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01090b9:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01090bf:	c1 eb 01             	shr    $0x1,%ebx
c01090c2:	09 df                	or     %ebx,%edi
c01090c4:	c1 ef 02             	shr    $0x2,%edi
c01090c7:	09 f8                	or     %edi,%eax
c01090c9:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01090cf:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01090d5:	c1 eb 01             	shr    $0x1,%ebx
c01090d8:	09 df                	or     %ebx,%edi
c01090da:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01090e0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
c01090e6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01090ec:	c1 e8 01             	shr    $0x1,%eax
c01090ef:	09 c3                	or     %eax,%ebx
c01090f1:	c1 eb 02             	shr    $0x2,%ebx
c01090f4:	09 df                	or     %ebx,%edi
c01090f6:	c1 ef 04             	shr    $0x4,%edi
c01090f9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
c01090ff:	09 f8                	or     %edi,%eax
c0109101:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109107:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010910d:	c1 eb 01             	shr    $0x1,%ebx
c0109110:	09 df                	or     %ebx,%edi
c0109112:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109118:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
c010911e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109124:	c1 e8 01             	shr    $0x1,%eax
c0109127:	09 c3                	or     %eax,%ebx
c0109129:	c1 eb 02             	shr    $0x2,%ebx
c010912c:	09 df                	or     %ebx,%edi
c010912e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109134:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010913a:	c1 eb 01             	shr    $0x1,%ebx
c010913d:	09 d8                	or     %ebx,%eax
c010913f:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109145:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
c010914b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109151:	c1 e8 01             	shr    $0x1,%eax
c0109154:	09 c3                	or     %eax,%ebx
c0109156:	c1 eb 02             	shr    $0x2,%ebx
c0109159:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
c010915f:	09 d8                	or     %ebx,%eax
c0109161:	c1 e8 04             	shr    $0x4,%eax
c0109164:	09 c7                	or     %eax,%edi
c0109166:	c1 ef 08             	shr    $0x8,%edi
c0109169:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
c010916f:	09 f8                	or     %edi,%eax
c0109171:	c1 e8 10             	shr    $0x10,%eax
c0109174:	09 c6                	or     %eax,%esi
c0109176:	c1 ee 01             	shr    $0x1,%esi
c0109179:	21 f2                	and    %esi,%edx
c010917b:	83 fa 00             	cmp    $0x0,%edx
c010917e:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%ebp)
c0109184:	0f 84 91 01 00 00    	je     c010931b <buddy_free_pages+0xb5b>
c010918a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109190:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109196:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
c010919c:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01091a2:	c1 ee 01             	shr    $0x1,%esi
c01091a5:	09 f2                	or     %esi,%edx
c01091a7:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01091ad:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01091b3:	c1 ef 01             	shr    $0x1,%edi
c01091b6:	09 fe                	or     %edi,%esi
c01091b8:	c1 ee 02             	shr    $0x2,%esi
c01091bb:	09 f2                	or     %esi,%edx
c01091bd:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01091c3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01091c9:	c1 ef 01             	shr    $0x1,%edi
c01091cc:	09 fe                	or     %edi,%esi
c01091ce:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01091d4:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01091da:	c1 eb 01             	shr    $0x1,%ebx
c01091dd:	09 df                	or     %ebx,%edi
c01091df:	c1 ef 02             	shr    $0x2,%edi
c01091e2:	09 fe                	or     %edi,%esi
c01091e4:	c1 ee 04             	shr    $0x4,%esi
c01091e7:	09 f2                	or     %esi,%edx
c01091e9:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01091ef:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01091f5:	c1 ef 01             	shr    $0x1,%edi
c01091f8:	09 fe                	or     %edi,%esi
c01091fa:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109200:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109206:	c1 eb 01             	shr    $0x1,%ebx
c0109209:	09 df                	or     %ebx,%edi
c010920b:	c1 ef 02             	shr    $0x2,%edi
c010920e:	09 fe                	or     %edi,%esi
c0109210:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109216:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010921c:	c1 eb 01             	shr    $0x1,%ebx
c010921f:	09 df                	or     %ebx,%edi
c0109221:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109227:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
c010922d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109233:	c1 e8 01             	shr    $0x1,%eax
c0109236:	09 c3                	or     %eax,%ebx
c0109238:	c1 eb 02             	shr    $0x2,%ebx
c010923b:	09 df                	or     %ebx,%edi
c010923d:	c1 ef 04             	shr    $0x4,%edi
c0109240:	09 fe                	or     %edi,%esi
c0109242:	c1 ee 08             	shr    $0x8,%esi
c0109245:	09 f2                	or     %esi,%edx
c0109247:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010924d:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109253:	c1 ee 01             	shr    $0x1,%esi
c0109256:	09 f0                	or     %esi,%eax
c0109258:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c010925e:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109264:	c1 ef 01             	shr    $0x1,%edi
c0109267:	09 fe                	or     %edi,%esi
c0109269:	c1 ee 02             	shr    $0x2,%esi
c010926c:	09 f0                	or     %esi,%eax
c010926e:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109274:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c010927a:	c1 ef 01             	shr    $0x1,%edi
c010927d:	09 fe                	or     %edi,%esi
c010927f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109285:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010928b:	c1 eb 01             	shr    $0x1,%ebx
c010928e:	09 df                	or     %ebx,%edi
c0109290:	c1 ef 02             	shr    $0x2,%edi
c0109293:	09 fe                	or     %edi,%esi
c0109295:	c1 ee 04             	shr    $0x4,%esi
c0109298:	09 f0                	or     %esi,%eax
c010929a:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01092a0:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01092a6:	c1 ef 01             	shr    $0x1,%edi
c01092a9:	09 fe                	or     %edi,%esi
c01092ab:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01092b1:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01092b7:	c1 eb 01             	shr    $0x1,%ebx
c01092ba:	09 df                	or     %ebx,%edi
c01092bc:	c1 ef 02             	shr    $0x2,%edi
c01092bf:	09 fe                	or     %edi,%esi
c01092c1:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01092c7:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01092cd:	c1 eb 01             	shr    $0x1,%ebx
c01092d0:	09 df                	or     %ebx,%edi
c01092d2:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01092d8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
c01092de:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01092e4:	c1 e8 01             	shr    $0x1,%eax
c01092e7:	09 c3                	or     %eax,%ebx
c01092e9:	c1 eb 02             	shr    $0x2,%ebx
c01092ec:	09 df                	or     %ebx,%edi
c01092ee:	c1 ef 04             	shr    $0x4,%edi
c01092f1:	09 fe                	or     %edi,%esi
c01092f3:	c1 ee 08             	shr    $0x8,%esi
c01092f6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
c01092fc:	09 f0                	or     %esi,%eax
c01092fe:	c1 e8 10             	shr    $0x10,%eax
c0109301:	09 c2                	or     %eax,%edx
c0109303:	c1 ea 01             	shr    $0x1,%edx
c0109306:	21 d1                	and    %edx,%ecx
c0109308:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
c010930e:	29 c8                	sub    %ecx,%eax
c0109310:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
c0109316:	e9 0c 00 00 00       	jmp    c0109327 <buddy_free_pages+0xb67>
c010931b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109321:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
c0109327:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
c010932d:	8b 8d 0c ff ff ff    	mov    -0xf4(%ebp),%ecx
c0109333:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
c0109339:	89 c8                	mov    %ecx,%eax
c010933b:	31 d2                	xor    %edx,%edx
c010933d:	8b b5 fc fe ff ff    	mov    -0x104(%ebp),%esi
c0109343:	f7 f6                	div    %esi
c0109345:	8b bd 20 ff ff ff    	mov    -0xe0(%ebp),%edi
c010934b:	39 c7                	cmp    %eax,%edi
c010934d:	0f 85 2c 0b 00 00    	jne    c0109e7f <buddy_free_pages+0x16bf>
            size_t lbegin = BUDDY_BEGIN(left);
c0109353:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109359:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c010935f:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0109365:	c1 ea 01             	shr    $0x1,%edx
c0109368:	09 d1                	or     %edx,%ecx
c010936a:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0109370:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109376:	c1 ee 01             	shr    $0x1,%esi
c0109379:	09 f2                	or     %esi,%edx
c010937b:	c1 ea 02             	shr    $0x2,%edx
c010937e:	09 d1                	or     %edx,%ecx
c0109380:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0109386:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010938c:	c1 ee 01             	shr    $0x1,%esi
c010938f:	09 f2                	or     %esi,%edx
c0109391:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109397:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c010939d:	c1 ef 01             	shr    $0x1,%edi
c01093a0:	09 fe                	or     %edi,%esi
c01093a2:	c1 ee 02             	shr    $0x2,%esi
c01093a5:	09 f2                	or     %esi,%edx
c01093a7:	c1 ea 04             	shr    $0x4,%edx
c01093aa:	09 d1                	or     %edx,%ecx
c01093ac:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c01093b2:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01093b8:	c1 ee 01             	shr    $0x1,%esi
c01093bb:	09 f2                	or     %esi,%edx
c01093bd:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01093c3:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01093c9:	c1 ef 01             	shr    $0x1,%edi
c01093cc:	09 fe                	or     %edi,%esi
c01093ce:	c1 ee 02             	shr    $0x2,%esi
c01093d1:	09 f2                	or     %esi,%edx
c01093d3:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01093d9:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01093df:	c1 ef 01             	shr    $0x1,%edi
c01093e2:	09 fe                	or     %edi,%esi
c01093e4:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01093ea:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01093f0:	c1 eb 01             	shr    $0x1,%ebx
c01093f3:	09 df                	or     %ebx,%edi
c01093f5:	c1 ef 02             	shr    $0x2,%edi
c01093f8:	09 fe                	or     %edi,%esi
c01093fa:	c1 ee 04             	shr    $0x4,%esi
c01093fd:	09 f2                	or     %esi,%edx
c01093ff:	c1 ea 08             	shr    $0x8,%edx
c0109402:	09 d1                	or     %edx,%ecx
c0109404:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c010940a:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109410:	c1 ee 01             	shr    $0x1,%esi
c0109413:	09 f2                	or     %esi,%edx
c0109415:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010941b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109421:	c1 ef 01             	shr    $0x1,%edi
c0109424:	09 fe                	or     %edi,%esi
c0109426:	c1 ee 02             	shr    $0x2,%esi
c0109429:	09 f2                	or     %esi,%edx
c010942b:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109431:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109437:	c1 ef 01             	shr    $0x1,%edi
c010943a:	09 fe                	or     %edi,%esi
c010943c:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109442:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109448:	c1 eb 01             	shr    $0x1,%ebx
c010944b:	09 df                	or     %ebx,%edi
c010944d:	c1 ef 02             	shr    $0x2,%edi
c0109450:	09 fe                	or     %edi,%esi
c0109452:	c1 ee 04             	shr    $0x4,%esi
c0109455:	09 f2                	or     %esi,%edx
c0109457:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010945d:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109463:	c1 ef 01             	shr    $0x1,%edi
c0109466:	09 fe                	or     %edi,%esi
c0109468:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c010946e:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109474:	c1 eb 01             	shr    $0x1,%ebx
c0109477:	09 df                	or     %ebx,%edi
c0109479:	c1 ef 02             	shr    $0x2,%edi
c010947c:	09 fe                	or     %edi,%esi
c010947e:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109484:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c010948a:	c1 eb 01             	shr    $0x1,%ebx
c010948d:	09 df                	or     %ebx,%edi
c010948f:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109495:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
c010949b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c01094a1:	c1 e8 01             	shr    $0x1,%eax
c01094a4:	09 c3                	or     %eax,%ebx
c01094a6:	c1 eb 02             	shr    $0x2,%ebx
c01094a9:	09 df                	or     %ebx,%edi
c01094ab:	c1 ef 04             	shr    $0x4,%edi
c01094ae:	09 fe                	or     %edi,%esi
c01094b0:	c1 ee 08             	shr    $0x8,%esi
c01094b3:	09 f2                	or     %esi,%edx
c01094b5:	c1 ea 10             	shr    $0x10,%edx
c01094b8:	09 d1                	or     %edx,%ecx
c01094ba:	c1 e9 01             	shr    $0x1,%ecx
c01094bd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
c01094c3:	21 c8                	and    %ecx,%eax
c01094c5:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c01094cb:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c01094d1:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01094d7:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01094dd:	c1 ef 01             	shr    $0x1,%edi
c01094e0:	09 fe                	or     %edi,%esi
c01094e2:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01094e8:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01094ee:	c1 eb 01             	shr    $0x1,%ebx
c01094f1:	09 df                	or     %ebx,%edi
c01094f3:	c1 ef 02             	shr    $0x2,%edi
c01094f6:	09 fe                	or     %edi,%esi
c01094f8:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01094fe:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109504:	c1 eb 01             	shr    $0x1,%ebx
c0109507:	09 df                	or     %ebx,%edi
c0109509:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c010950f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
c0109515:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010951b:	c1 e8 01             	shr    $0x1,%eax
c010951e:	09 c3                	or     %eax,%ebx
c0109520:	c1 eb 02             	shr    $0x2,%ebx
c0109523:	09 df                	or     %ebx,%edi
c0109525:	c1 ef 04             	shr    $0x4,%edi
c0109528:	09 fe                	or     %edi,%esi
c010952a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109530:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109536:	c1 ef 01             	shr    $0x1,%edi
c0109539:	09 f8                	or     %edi,%eax
c010953b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109541:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109547:	c1 eb 01             	shr    $0x1,%ebx
c010954a:	09 df                	or     %ebx,%edi
c010954c:	c1 ef 02             	shr    $0x2,%edi
c010954f:	09 f8                	or     %edi,%eax
c0109551:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109557:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c010955d:	c1 eb 01             	shr    $0x1,%ebx
c0109560:	09 df                	or     %ebx,%edi
c0109562:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109568:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
c010956e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109574:	c1 e8 01             	shr    $0x1,%eax
c0109577:	09 c3                	or     %eax,%ebx
c0109579:	c1 eb 02             	shr    $0x2,%ebx
c010957c:	09 df                	or     %ebx,%edi
c010957e:	c1 ef 04             	shr    $0x4,%edi
c0109581:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
c0109587:	09 f8                	or     %edi,%eax
c0109589:	c1 e8 08             	shr    $0x8,%eax
c010958c:	09 c6                	or     %eax,%esi
c010958e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109594:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c010959a:	c1 ef 01             	shr    $0x1,%edi
c010959d:	09 f8                	or     %edi,%eax
c010959f:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01095a5:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01095ab:	c1 eb 01             	shr    $0x1,%ebx
c01095ae:	09 df                	or     %ebx,%edi
c01095b0:	c1 ef 02             	shr    $0x2,%edi
c01095b3:	09 f8                	or     %edi,%eax
c01095b5:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01095bb:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01095c1:	c1 eb 01             	shr    $0x1,%ebx
c01095c4:	09 df                	or     %ebx,%edi
c01095c6:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01095cc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
c01095d2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c01095d8:	c1 e8 01             	shr    $0x1,%eax
c01095db:	09 c3                	or     %eax,%ebx
c01095dd:	c1 eb 02             	shr    $0x2,%ebx
c01095e0:	09 df                	or     %ebx,%edi
c01095e2:	c1 ef 04             	shr    $0x4,%edi
c01095e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
c01095eb:	09 f8                	or     %edi,%eax
c01095ed:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01095f3:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01095f9:	c1 eb 01             	shr    $0x1,%ebx
c01095fc:	09 df                	or     %ebx,%edi
c01095fe:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109604:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
c010960a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109610:	c1 e8 01             	shr    $0x1,%eax
c0109613:	09 c3                	or     %eax,%ebx
c0109615:	c1 eb 02             	shr    $0x2,%ebx
c0109618:	09 df                	or     %ebx,%edi
c010961a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109620:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109626:	c1 eb 01             	shr    $0x1,%ebx
c0109629:	09 d8                	or     %ebx,%eax
c010962b:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109631:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
c0109637:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010963d:	c1 e8 01             	shr    $0x1,%eax
c0109640:	09 c3                	or     %eax,%ebx
c0109642:	c1 eb 02             	shr    $0x2,%ebx
c0109645:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
c010964b:	09 d8                	or     %ebx,%eax
c010964d:	c1 e8 04             	shr    $0x4,%eax
c0109650:	09 c7                	or     %eax,%edi
c0109652:	c1 ef 08             	shr    $0x8,%edi
c0109655:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
c010965b:	09 f8                	or     %edi,%eax
c010965d:	c1 e8 10             	shr    $0x10,%eax
c0109660:	09 c6                	or     %eax,%esi
c0109662:	c1 ee 01             	shr    $0x1,%esi
c0109665:	21 f2                	and    %esi,%edx
c0109667:	83 fa 00             	cmp    $0x0,%edx
c010966a:	89 8d e0 fe ff ff    	mov    %ecx,-0x120(%ebp)
c0109670:	0f 84 91 01 00 00    	je     c0109807 <buddy_free_pages+0x1047>
c0109676:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010967c:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c0109682:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0109688:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010968e:	c1 ee 01             	shr    $0x1,%esi
c0109691:	09 f2                	or     %esi,%edx
c0109693:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109699:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c010969f:	c1 ef 01             	shr    $0x1,%edi
c01096a2:	09 fe                	or     %edi,%esi
c01096a4:	c1 ee 02             	shr    $0x2,%esi
c01096a7:	09 f2                	or     %esi,%edx
c01096a9:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01096af:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01096b5:	c1 ef 01             	shr    $0x1,%edi
c01096b8:	09 fe                	or     %edi,%esi
c01096ba:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01096c0:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01096c6:	c1 eb 01             	shr    $0x1,%ebx
c01096c9:	09 df                	or     %ebx,%edi
c01096cb:	c1 ef 02             	shr    $0x2,%edi
c01096ce:	09 fe                	or     %edi,%esi
c01096d0:	c1 ee 04             	shr    $0x4,%esi
c01096d3:	09 f2                	or     %esi,%edx
c01096d5:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c01096db:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01096e1:	c1 ef 01             	shr    $0x1,%edi
c01096e4:	09 fe                	or     %edi,%esi
c01096e6:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01096ec:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01096f2:	c1 eb 01             	shr    $0x1,%ebx
c01096f5:	09 df                	or     %ebx,%edi
c01096f7:	c1 ef 02             	shr    $0x2,%edi
c01096fa:	09 fe                	or     %edi,%esi
c01096fc:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109702:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109708:	c1 eb 01             	shr    $0x1,%ebx
c010970b:	09 df                	or     %ebx,%edi
c010970d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109713:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
c0109719:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010971f:	c1 e8 01             	shr    $0x1,%eax
c0109722:	09 c3                	or     %eax,%ebx
c0109724:	c1 eb 02             	shr    $0x2,%ebx
c0109727:	09 df                	or     %ebx,%edi
c0109729:	c1 ef 04             	shr    $0x4,%edi
c010972c:	09 fe                	or     %edi,%esi
c010972e:	c1 ee 08             	shr    $0x8,%esi
c0109731:	09 f2                	or     %esi,%edx
c0109733:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109739:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010973f:	c1 ee 01             	shr    $0x1,%esi
c0109742:	09 f0                	or     %esi,%eax
c0109744:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010974a:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109750:	c1 ef 01             	shr    $0x1,%edi
c0109753:	09 fe                	or     %edi,%esi
c0109755:	c1 ee 02             	shr    $0x2,%esi
c0109758:	09 f0                	or     %esi,%eax
c010975a:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c0109760:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109766:	c1 ef 01             	shr    $0x1,%edi
c0109769:	09 fe                	or     %edi,%esi
c010976b:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109771:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c0109777:	c1 eb 01             	shr    $0x1,%ebx
c010977a:	09 df                	or     %ebx,%edi
c010977c:	c1 ef 02             	shr    $0x2,%edi
c010977f:	09 fe                	or     %edi,%esi
c0109781:	c1 ee 04             	shr    $0x4,%esi
c0109784:	09 f0                	or     %esi,%eax
c0109786:	8b b5 78 ff ff ff    	mov    -0x88(%ebp),%esi
c010978c:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c0109792:	c1 ef 01             	shr    $0x1,%edi
c0109795:	09 fe                	or     %edi,%esi
c0109797:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c010979d:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01097a3:	c1 eb 01             	shr    $0x1,%ebx
c01097a6:	09 df                	or     %ebx,%edi
c01097a8:	c1 ef 02             	shr    $0x2,%edi
c01097ab:	09 fe                	or     %edi,%esi
c01097ad:	8b bd 78 ff ff ff    	mov    -0x88(%ebp),%edi
c01097b3:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01097b9:	c1 eb 01             	shr    $0x1,%ebx
c01097bc:	09 df                	or     %ebx,%edi
c01097be:	8b 9d 78 ff ff ff    	mov    -0x88(%ebp),%ebx
c01097c4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
c01097ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c01097d0:	c1 e8 01             	shr    $0x1,%eax
c01097d3:	09 c3                	or     %eax,%ebx
c01097d5:	c1 eb 02             	shr    $0x2,%ebx
c01097d8:	09 df                	or     %ebx,%edi
c01097da:	c1 ef 04             	shr    $0x4,%edi
c01097dd:	09 fe                	or     %edi,%esi
c01097df:	c1 ee 08             	shr    $0x8,%esi
c01097e2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
c01097e8:	09 f0                	or     %esi,%eax
c01097ea:	c1 e8 10             	shr    $0x10,%eax
c01097ed:	09 c2                	or     %eax,%edx
c01097ef:	c1 ea 01             	shr    $0x1,%edx
c01097f2:	21 d1                	and    %edx,%ecx
c01097f4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
c01097fa:	29 c8                	sub    %ecx,%eax
c01097fc:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
c0109802:	e9 0c 00 00 00       	jmp    c0109813 <buddy_free_pages+0x1053>
c0109807:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010980d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
c0109813:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
c0109819:	8b 8d e0 fe ff ff    	mov    -0x120(%ebp),%ecx
c010981f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
c0109825:	89 c8                	mov    %ecx,%eax
c0109827:	31 d2                	xor    %edx,%edx
c0109829:	8b b5 d0 fe ff ff    	mov    -0x130(%ebp),%esi
c010982f:	f7 f6                	div    %esi
c0109831:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
c0109837:	0f af f8             	imul   %eax,%edi
c010983a:	89 bd 70 ff ff ff    	mov    %edi,-0x90(%ebp)
            size_t rbegin = BUDDY_BEGIN(right);
c0109840:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109846:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c010984c:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109852:	c1 eb 01             	shr    $0x1,%ebx
c0109855:	09 df                	or     %ebx,%edi
c0109857:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010985d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109863:	c1 e9 01             	shr    $0x1,%ecx
c0109866:	09 cb                	or     %ecx,%ebx
c0109868:	c1 eb 02             	shr    $0x2,%ebx
c010986b:	09 df                	or     %ebx,%edi
c010986d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109873:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109879:	c1 eb 01             	shr    $0x1,%ebx
c010987c:	09 d9                	or     %ebx,%ecx
c010987e:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109884:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c010988a:	c1 ee 01             	shr    $0x1,%esi
c010988d:	09 f3                	or     %esi,%ebx
c010988f:	c1 eb 02             	shr    $0x2,%ebx
c0109892:	09 d9                	or     %ebx,%ecx
c0109894:	c1 e9 04             	shr    $0x4,%ecx
c0109897:	09 cf                	or     %ecx,%edi
c0109899:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c010989f:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01098a5:	c1 ee 01             	shr    $0x1,%esi
c01098a8:	09 f1                	or     %esi,%ecx
c01098aa:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01098b0:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01098b6:	c1 eb 01             	shr    $0x1,%ebx
c01098b9:	09 de                	or     %ebx,%esi
c01098bb:	c1 ee 02             	shr    $0x2,%esi
c01098be:	09 f1                	or     %esi,%ecx
c01098c0:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01098c6:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01098cc:	c1 eb 01             	shr    $0x1,%ebx
c01098cf:	09 de                	or     %ebx,%esi
c01098d1:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01098d7:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
c01098dd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01098e3:	c1 e8 01             	shr    $0x1,%eax
c01098e6:	09 c3                	or     %eax,%ebx
c01098e8:	c1 eb 02             	shr    $0x2,%ebx
c01098eb:	09 de                	or     %ebx,%esi
c01098ed:	c1 ee 04             	shr    $0x4,%esi
c01098f0:	09 f1                	or     %esi,%ecx
c01098f2:	c1 e9 08             	shr    $0x8,%ecx
c01098f5:	09 cf                	or     %ecx,%edi
c01098f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01098fd:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109903:	c1 e9 01             	shr    $0x1,%ecx
c0109906:	09 c8                	or     %ecx,%eax
c0109908:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c010990e:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109914:	c1 ee 01             	shr    $0x1,%esi
c0109917:	09 f1                	or     %esi,%ecx
c0109919:	c1 e9 02             	shr    $0x2,%ecx
c010991c:	09 c8                	or     %ecx,%eax
c010991e:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109924:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c010992a:	c1 ee 01             	shr    $0x1,%esi
c010992d:	09 f1                	or     %esi,%ecx
c010992f:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109935:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010993b:	c1 eb 01             	shr    $0x1,%ebx
c010993e:	09 de                	or     %ebx,%esi
c0109940:	c1 ee 02             	shr    $0x2,%esi
c0109943:	09 f1                	or     %esi,%ecx
c0109945:	c1 e9 04             	shr    $0x4,%ecx
c0109948:	09 c8                	or     %ecx,%eax
c010994a:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109950:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109956:	c1 ee 01             	shr    $0x1,%esi
c0109959:	09 f1                	or     %esi,%ecx
c010995b:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109961:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109967:	c1 eb 01             	shr    $0x1,%ebx
c010996a:	09 de                	or     %ebx,%esi
c010996c:	c1 ee 02             	shr    $0x2,%esi
c010996f:	09 f1                	or     %esi,%ecx
c0109971:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109977:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c010997d:	c1 eb 01             	shr    $0x1,%ebx
c0109980:	09 de                	or     %ebx,%esi
c0109982:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109988:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
c010998e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109994:	c1 e8 01             	shr    $0x1,%eax
c0109997:	09 c3                	or     %eax,%ebx
c0109999:	c1 eb 02             	shr    $0x2,%ebx
c010999c:	09 de                	or     %ebx,%esi
c010999e:	c1 ee 04             	shr    $0x4,%esi
c01099a1:	09 f1                	or     %esi,%ecx
c01099a3:	c1 e9 08             	shr    $0x8,%ecx
c01099a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
c01099ac:	09 c8                	or     %ecx,%eax
c01099ae:	c1 e8 10             	shr    $0x10,%eax
c01099b1:	09 c7                	or     %eax,%edi
c01099b3:	c1 ef 01             	shr    $0x1,%edi
c01099b6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
c01099bc:	21 f8                	and    %edi,%eax
c01099be:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c01099c4:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c01099ca:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c01099d0:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01099d6:	c1 eb 01             	shr    $0x1,%ebx
c01099d9:	09 df                	or     %ebx,%edi
c01099db:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c01099e1:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
c01099e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01099ed:	c1 e8 01             	shr    $0x1,%eax
c01099f0:	09 c3                	or     %eax,%ebx
c01099f2:	c1 eb 02             	shr    $0x2,%ebx
c01099f5:	09 df                	or     %ebx,%edi
c01099f7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c01099fd:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109a03:	c1 eb 01             	shr    $0x1,%ebx
c0109a06:	09 d8                	or     %ebx,%eax
c0109a08:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109a0e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
c0109a14:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a1a:	c1 e8 01             	shr    $0x1,%eax
c0109a1d:	09 c3                	or     %eax,%ebx
c0109a1f:	c1 eb 02             	shr    $0x2,%ebx
c0109a22:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
c0109a28:	09 d8                	or     %ebx,%eax
c0109a2a:	c1 e8 04             	shr    $0x4,%eax
c0109a2d:	09 c7                	or     %eax,%edi
c0109a2f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a35:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109a3b:	c1 eb 01             	shr    $0x1,%ebx
c0109a3e:	09 d8                	or     %ebx,%eax
c0109a40:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109a46:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
c0109a4c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a52:	c1 e8 01             	shr    $0x1,%eax
c0109a55:	09 c3                	or     %eax,%ebx
c0109a57:	c1 eb 02             	shr    $0x2,%ebx
c0109a5a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
c0109a60:	09 d8                	or     %ebx,%eax
c0109a62:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109a68:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
c0109a6e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a74:	c1 e8 01             	shr    $0x1,%eax
c0109a77:	09 c3                	or     %eax,%ebx
c0109a79:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a7f:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
c0109a85:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109a8b:	c1 e8 01             	shr    $0x1,%eax
c0109a8e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
c0109a94:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
c0109a9a:	89 8d ac fe ff ff    	mov    %ecx,-0x154(%ebp)
c0109aa0:	8b 8d b0 fe ff ff    	mov    -0x150(%ebp),%ecx
c0109aa6:	09 c8                	or     %ecx,%eax
c0109aa8:	c1 e8 02             	shr    $0x2,%eax
c0109aab:	09 c3                	or     %eax,%ebx
c0109aad:	c1 eb 04             	shr    $0x4,%ebx
c0109ab0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
c0109ab6:	09 d8                	or     %ebx,%eax
c0109ab8:	c1 e8 08             	shr    $0x8,%eax
c0109abb:	09 c7                	or     %eax,%edi
c0109abd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109ac3:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109ac9:	c1 e9 01             	shr    $0x1,%ecx
c0109acc:	09 c8                	or     %ecx,%eax
c0109ace:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109ad4:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109ada:	c1 eb 01             	shr    $0x1,%ebx
c0109add:	09 d9                	or     %ebx,%ecx
c0109adf:	c1 e9 02             	shr    $0x2,%ecx
c0109ae2:	09 c8                	or     %ecx,%eax
c0109ae4:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109aea:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109af0:	c1 eb 01             	shr    $0x1,%ebx
c0109af3:	09 d9                	or     %ebx,%ecx
c0109af5:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109afb:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
c0109b01:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109b07:	c1 e8 01             	shr    $0x1,%eax
c0109b0a:	09 c3                	or     %eax,%ebx
c0109b0c:	c1 eb 02             	shr    $0x2,%ebx
c0109b0f:	09 d9                	or     %ebx,%ecx
c0109b11:	c1 e9 04             	shr    $0x4,%ecx
c0109b14:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
c0109b1a:	09 c8                	or     %ecx,%eax
c0109b1c:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109b22:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109b28:	c1 eb 01             	shr    $0x1,%ebx
c0109b2b:	09 d9                	or     %ebx,%ecx
c0109b2d:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109b33:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
c0109b39:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109b3f:	c1 e8 01             	shr    $0x1,%eax
c0109b42:	09 c3                	or     %eax,%ebx
c0109b44:	c1 eb 02             	shr    $0x2,%ebx
c0109b47:	09 d9                	or     %ebx,%ecx
c0109b49:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109b4f:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109b55:	c1 eb 01             	shr    $0x1,%ebx
c0109b58:	09 d8                	or     %ebx,%eax
c0109b5a:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109b60:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
c0109b66:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109b6c:	c1 e8 01             	shr    $0x1,%eax
c0109b6f:	09 c3                	or     %eax,%ebx
c0109b71:	c1 eb 02             	shr    $0x2,%ebx
c0109b74:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
c0109b7a:	09 d8                	or     %ebx,%eax
c0109b7c:	c1 e8 04             	shr    $0x4,%eax
c0109b7f:	09 c1                	or     %eax,%ecx
c0109b81:	c1 e9 08             	shr    $0x8,%ecx
c0109b84:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
c0109b8a:	09 c8                	or     %ecx,%eax
c0109b8c:	c1 e8 10             	shr    $0x10,%eax
c0109b8f:	09 c7                	or     %eax,%edi
c0109b91:	c1 ef 01             	shr    $0x1,%edi
c0109b94:	21 fe                	and    %edi,%esi
c0109b96:	83 fe 00             	cmp    $0x0,%esi
c0109b99:	0f 84 91 01 00 00    	je     c0109d30 <buddy_free_pages+0x1570>
c0109b9f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109ba5:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c0109bab:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
c0109bb1:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109bb7:	c1 ee 01             	shr    $0x1,%esi
c0109bba:	09 f2                	or     %esi,%edx
c0109bbc:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109bc2:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109bc8:	c1 ef 01             	shr    $0x1,%edi
c0109bcb:	09 fe                	or     %edi,%esi
c0109bcd:	c1 ee 02             	shr    $0x2,%esi
c0109bd0:	09 f2                	or     %esi,%edx
c0109bd2:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109bd8:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109bde:	c1 ef 01             	shr    $0x1,%edi
c0109be1:	09 fe                	or     %edi,%esi
c0109be3:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109be9:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109bef:	c1 eb 01             	shr    $0x1,%ebx
c0109bf2:	09 df                	or     %ebx,%edi
c0109bf4:	c1 ef 02             	shr    $0x2,%edi
c0109bf7:	09 fe                	or     %edi,%esi
c0109bf9:	c1 ee 04             	shr    $0x4,%esi
c0109bfc:	09 f2                	or     %esi,%edx
c0109bfe:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109c04:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c0a:	c1 ef 01             	shr    $0x1,%edi
c0109c0d:	09 fe                	or     %edi,%esi
c0109c0f:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c15:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109c1b:	c1 eb 01             	shr    $0x1,%ebx
c0109c1e:	09 df                	or     %ebx,%edi
c0109c20:	c1 ef 02             	shr    $0x2,%edi
c0109c23:	09 fe                	or     %edi,%esi
c0109c25:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c2b:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109c31:	c1 eb 01             	shr    $0x1,%ebx
c0109c34:	09 df                	or     %ebx,%edi
c0109c36:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109c3c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
c0109c42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109c48:	c1 e8 01             	shr    $0x1,%eax
c0109c4b:	09 c3                	or     %eax,%ebx
c0109c4d:	c1 eb 02             	shr    $0x2,%ebx
c0109c50:	09 df                	or     %ebx,%edi
c0109c52:	c1 ef 04             	shr    $0x4,%edi
c0109c55:	09 fe                	or     %edi,%esi
c0109c57:	c1 ee 08             	shr    $0x8,%esi
c0109c5a:	09 f2                	or     %esi,%edx
c0109c5c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109c62:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109c68:	c1 ee 01             	shr    $0x1,%esi
c0109c6b:	09 f0                	or     %esi,%eax
c0109c6d:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109c73:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c79:	c1 ef 01             	shr    $0x1,%edi
c0109c7c:	09 fe                	or     %edi,%esi
c0109c7e:	c1 ee 02             	shr    $0x2,%esi
c0109c81:	09 f0                	or     %esi,%eax
c0109c83:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109c89:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c8f:	c1 ef 01             	shr    $0x1,%edi
c0109c92:	09 fe                	or     %edi,%esi
c0109c94:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109c9a:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109ca0:	c1 eb 01             	shr    $0x1,%ebx
c0109ca3:	09 df                	or     %ebx,%edi
c0109ca5:	c1 ef 02             	shr    $0x2,%edi
c0109ca8:	09 fe                	or     %edi,%esi
c0109caa:	c1 ee 04             	shr    $0x4,%esi
c0109cad:	09 f0                	or     %esi,%eax
c0109caf:	8b b5 74 ff ff ff    	mov    -0x8c(%ebp),%esi
c0109cb5:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109cbb:	c1 ef 01             	shr    $0x1,%edi
c0109cbe:	09 fe                	or     %edi,%esi
c0109cc0:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109cc6:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109ccc:	c1 eb 01             	shr    $0x1,%ebx
c0109ccf:	09 df                	or     %ebx,%edi
c0109cd1:	c1 ef 02             	shr    $0x2,%edi
c0109cd4:	09 fe                	or     %edi,%esi
c0109cd6:	8b bd 74 ff ff ff    	mov    -0x8c(%ebp),%edi
c0109cdc:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109ce2:	c1 eb 01             	shr    $0x1,%ebx
c0109ce5:	09 df                	or     %ebx,%edi
c0109ce7:	8b 9d 74 ff ff ff    	mov    -0x8c(%ebp),%ebx
c0109ced:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
c0109cf3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109cf9:	c1 e8 01             	shr    $0x1,%eax
c0109cfc:	09 c3                	or     %eax,%ebx
c0109cfe:	c1 eb 02             	shr    $0x2,%ebx
c0109d01:	09 df                	or     %ebx,%edi
c0109d03:	c1 ef 04             	shr    $0x4,%edi
c0109d06:	09 fe                	or     %edi,%esi
c0109d08:	c1 ee 08             	shr    $0x8,%esi
c0109d0b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
c0109d11:	09 f0                	or     %esi,%eax
c0109d13:	c1 e8 10             	shr    $0x10,%eax
c0109d16:	09 c2                	or     %eax,%edx
c0109d18:	c1 ea 01             	shr    $0x1,%edx
c0109d1b:	21 d1                	and    %edx,%ecx
c0109d1d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
c0109d23:	29 c8                	sub    %ecx,%eax
c0109d25:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
c0109d2b:	e9 0c 00 00 00       	jmp    c0109d3c <buddy_free_pages+0x157c>
c0109d30:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0109d36:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
c0109d3c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
c0109d42:	8d 0d 30 49 11 c0    	lea    0xc0114930,%ecx
c0109d48:	8b 95 ac fe ff ff    	mov    -0x154(%ebp),%edx
c0109d4e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
c0109d54:	89 d0                	mov    %edx,%eax
c0109d56:	31 d2                	xor    %edx,%edx
c0109d58:	8b b5 90 fe ff ff    	mov    -0x170(%ebp),%esi
c0109d5e:	f7 f6                	div    %esi
c0109d60:	8b bd c4 fe ff ff    	mov    -0x13c(%ebp),%edi
c0109d66:	0f af f8             	imul   %eax,%edi
c0109d69:	89 bd 6c ff ff ff    	mov    %edi,-0x94(%ebp)
            list_del(&(buddy_alloc[lbegin].page_link));
c0109d6f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c0109d75:	6b c0 14             	imul   $0x14,%eax,%eax
c0109d78:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0109d7e:	83 c0 0c             	add    $0xc,%eax
c0109d81:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109d84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d87:	8b 00                	mov    (%eax),%eax
c0109d89:	8b 7d e8             	mov    -0x18(%ebp),%edi
c0109d8c:	8b 7f 04             	mov    0x4(%edi),%edi
c0109d8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d92:	89 7d ec             	mov    %edi,-0x14(%ebp)
    prev->next = next;
c0109d95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d98:	8b 7d f0             	mov    -0x10(%ebp),%edi
c0109d9b:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
c0109d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109da1:	8b 7d ec             	mov    -0x14(%ebp),%edi
c0109da4:	89 07                	mov    %eax,(%edi)
            list_del(&(buddy_alloc[rbegin].page_link));
c0109da6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
c0109dac:	6b c0 14             	imul   $0x14,%eax,%eax
c0109daf:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0109db5:	83 c0 0c             	add    $0xc,%eax
c0109db8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_del(listelm->prev, listelm->next);
c0109dbb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109dbe:	8b 00                	mov    (%eax),%eax
c0109dc0:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0109dc3:	8b 7f 04             	mov    0x4(%edi),%edi
c0109dc6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109dc9:	89 7d e0             	mov    %edi,-0x20(%ebp)
    prev->next = next;
c0109dcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109dcf:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c0109dd2:	89 47 04             	mov    %eax,0x4(%edi)
    next->prev = prev;
c0109dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109dd8:	8b 7d e0             	mov    -0x20(%ebp),%edi
c0109ddb:	89 07                	mov    %eax,(%edi)
            buddy_segment[block] = buddy_segment[left]<<1;
c0109ddd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109de3:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c0109de9:	8b 04 87             	mov    (%edi,%eax,4),%eax
c0109dec:	c1 e0 01             	shl    $0x1,%eax
c0109def:	8b bd 7c ff ff ff    	mov    -0x84(%ebp),%edi
c0109df5:	8b 1d 18 49 11 c0    	mov    0xc0114918,%ebx
c0109dfb:	89 04 bb             	mov    %eax,(%ebx,%edi,4)
            buddy_alloc[lbegin].property = buddy_segment[left]<<1;
c0109dfe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0109e04:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c0109e0a:	8b 04 87             	mov    (%edi,%eax,4),%eax
c0109e0d:	c1 e0 01             	shl    $0x1,%eax
c0109e10:	8b bd 70 ff ff ff    	mov    -0x90(%ebp),%edi
c0109e16:	6b ff 14             	imul   $0x14,%edi,%edi
c0109e19:	03 3d 1c 49 11 c0    	add    0xc011491c,%edi
c0109e1f:	89 47 08             	mov    %eax,0x8(%edi)
            list_add(&(free_list), &(buddy_alloc[lbegin].page_link));
c0109e22:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c0109e28:	6b c0 14             	imul   $0x14,%eax,%eax
c0109e2b:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c0109e31:	83 c0 0c             	add    $0xc,%eax
c0109e34:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
c0109e37:	89 45 c0             	mov    %eax,-0x40(%ebp)
    list_add_after(listelm, elm);
c0109e3a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109e3d:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0109e40:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0109e43:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    __list_add(elm, listelm, listelm->next);
c0109e46:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0109e49:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0109e4c:	8b 7d cc             	mov    -0x34(%ebp),%edi
c0109e4f:	8b 7f 04             	mov    0x4(%edi),%edi
c0109e52:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109e55:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c0109e58:	89 7d d0             	mov    %edi,-0x30(%ebp)
    prev->next = next->prev = elm;
c0109e5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109e5e:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0109e61:	89 01                	mov    %eax,(%ecx)
c0109e63:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0109e66:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c0109e69:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e6c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0109e6f:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c0109e72:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109e75:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0109e78:	89 01                	mov    %eax,(%ecx)
        } else {                                        // Update
c0109e7a:	e9 34 00 00 00       	jmp    c0109eb3 <buddy_free_pages+0x16f3>
            buddy_segment[block] = buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)];
c0109e7f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0109e85:	c1 e0 01             	shl    $0x1,%eax
c0109e88:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c0109e8e:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c0109e91:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c0109e97:	c1 e1 01             	shl    $0x1,%ecx
c0109e9a:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0109ea0:	0b 44 8a 04          	or     0x4(%edx,%ecx,4),%eax
c0109ea4:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c0109eaa:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c0109eb0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
    while (block != BUDDY_ROOT) {
c0109eb3:	e9 4c ed ff ff       	jmp    c0108c04 <buddy_free_pages+0x444>
        }
    }
}
c0109eb8:	81 c4 7c 01 00 00    	add    $0x17c,%esp
c0109ebe:	5e                   	pop    %esi
c0109ebf:	5f                   	pop    %edi
c0109ec0:	5b                   	pop    %ebx
c0109ec1:	5d                   	pop    %ebp
c0109ec2:	c3                   	ret    
c0109ec3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c0109eca:	84 00 00 00 00 00 

c0109ed0 <buddy_nr_free_pages>:

static size_t
buddy_nr_free_pages(void) {
c0109ed0:	55                   	push   %ebp
c0109ed1:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0109ed3:	a1 38 49 11 c0       	mov    0xc0114938,%eax
c0109ed8:	5d                   	pop    %ebp
c0109ed9:	c3                   	ret    
c0109eda:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c0109ee0 <default_check>:
    buddy_init_memmap(buddy_physical, buddy_physical_size_store);

}

static void
default_check(void) {
c0109ee0:	55                   	push   %ebp
c0109ee1:	89 e5                	mov    %esp,%ebp

    // Check buddy system
    macro_check();
c0109ee3:	83 ec 08             	sub    $0x8,%esp
c0109ee6:	e8 d5 10 00 00       	call   c010afc0 <macro_check>
    size_check();
c0109eeb:	e8 20 13 00 00       	call   c010b210 <size_check>
    segment_check();
c0109ef0:	e8 0b 15 00 00       	call   c010b400 <segment_check>
    alloc_check();
c0109ef5:	e8 b6 1b 00 00       	call   c010bab0 <alloc_check>
    
}
c0109efa:	83 c4 08             	add    $0x8,%esp
c0109efd:	5d                   	pop    %ebp
c0109efe:	c3                   	ret    
c0109eff:	90                   	nop

c0109f00 <buddy_init_size>:
buddy_init_size(size_t n) {
c0109f00:	55                   	push   %ebp
c0109f01:	89 e5                	mov    %esp,%ebp
c0109f03:	53                   	push   %ebx
c0109f04:	57                   	push   %edi
c0109f05:	56                   	push   %esi
c0109f06:	83 ec 3c             	sub    $0x3c,%esp
c0109f09:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(n > 1);
c0109f0f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
c0109f13:	0f 87 32 00 00 00    	ja     c0109f4b <buddy_init_size+0x4b>
c0109f19:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c0109f1f:	b9 2a 00 00 00       	mov    $0x2a,%ecx
c0109f24:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c0109f2a:	8d 35 dd 00 11 c0    	lea    0xc01100dd,%esi
c0109f30:	89 04 24             	mov    %eax,(%esp)
c0109f33:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0109f3a:	00 
c0109f3b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109f3f:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0109f43:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0109f46:	e8 05 65 ff ff       	call   c0100450 <__panic>
c0109f4b:	e9 00 00 00 00       	jmp    c0109f50 <buddy_init_size+0x50>
    buddy_physical_size = n;
c0109f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f53:	a3 04 49 11 c0       	mov    %eax,0xc0114904
    if (n < 512) {
c0109f58:	81 7d f0 00 02 00 00 	cmpl   $0x200,-0x10(%ebp)
c0109f5f:	0f 83 1a 03 00 00    	jae    c010a27f <buddy_init_size+0x37f>
        buddy_virtual_size = UINT32_ROUND_UP(n-1);
c0109f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f68:	83 e8 01             	sub    $0x1,%eax
c0109f6b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109f6e:	83 e9 01             	sub    $0x1,%ecx
c0109f71:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109f74:	83 ea 01             	sub    $0x1,%edx
c0109f77:	c1 ea 01             	shr    $0x1,%edx
c0109f7a:	09 d1                	or     %edx,%ecx
c0109f7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109f7f:	83 ea 01             	sub    $0x1,%edx
c0109f82:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109f85:	83 ee 01             	sub    $0x1,%esi
c0109f88:	c1 ee 01             	shr    $0x1,%esi
c0109f8b:	09 f2                	or     %esi,%edx
c0109f8d:	c1 ea 02             	shr    $0x2,%edx
c0109f90:	09 d1                	or     %edx,%ecx
c0109f92:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109f95:	83 ea 01             	sub    $0x1,%edx
c0109f98:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109f9b:	83 ee 01             	sub    $0x1,%esi
c0109f9e:	c1 ee 01             	shr    $0x1,%esi
c0109fa1:	09 f2                	or     %esi,%edx
c0109fa3:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109fa6:	83 ee 01             	sub    $0x1,%esi
c0109fa9:	8b 7d f0             	mov    -0x10(%ebp),%edi
c0109fac:	83 ef 01             	sub    $0x1,%edi
c0109faf:	c1 ef 01             	shr    $0x1,%edi
c0109fb2:	09 fe                	or     %edi,%esi
c0109fb4:	c1 ee 02             	shr    $0x2,%esi
c0109fb7:	09 f2                	or     %esi,%edx
c0109fb9:	c1 ea 04             	shr    $0x4,%edx
c0109fbc:	09 d1                	or     %edx,%ecx
c0109fbe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109fc1:	83 ea 01             	sub    $0x1,%edx
c0109fc4:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109fc7:	83 ee 01             	sub    $0x1,%esi
c0109fca:	c1 ee 01             	shr    $0x1,%esi
c0109fcd:	09 f2                	or     %esi,%edx
c0109fcf:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109fd2:	83 ee 01             	sub    $0x1,%esi
c0109fd5:	8b 7d f0             	mov    -0x10(%ebp),%edi
c0109fd8:	83 ef 01             	sub    $0x1,%edi
c0109fdb:	c1 ef 01             	shr    $0x1,%edi
c0109fde:	09 fe                	or     %edi,%esi
c0109fe0:	c1 ee 02             	shr    $0x2,%esi
c0109fe3:	09 f2                	or     %esi,%edx
c0109fe5:	8b 75 f0             	mov    -0x10(%ebp),%esi
c0109fe8:	83 ee 01             	sub    $0x1,%esi
c0109feb:	8b 7d f0             	mov    -0x10(%ebp),%edi
c0109fee:	83 ef 01             	sub    $0x1,%edi
c0109ff1:	c1 ef 01             	shr    $0x1,%edi
c0109ff4:	09 fe                	or     %edi,%esi
c0109ff6:	8b 7d f0             	mov    -0x10(%ebp),%edi
c0109ff9:	83 ef 01             	sub    $0x1,%edi
c0109ffc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0109fff:	83 eb 01             	sub    $0x1,%ebx
c010a002:	c1 eb 01             	shr    $0x1,%ebx
c010a005:	09 df                	or     %ebx,%edi
c010a007:	c1 ef 02             	shr    $0x2,%edi
c010a00a:	09 fe                	or     %edi,%esi
c010a00c:	c1 ee 04             	shr    $0x4,%esi
c010a00f:	09 f2                	or     %esi,%edx
c010a011:	c1 ea 08             	shr    $0x8,%edx
c010a014:	09 d1                	or     %edx,%ecx
c010a016:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a019:	83 ea 01             	sub    $0x1,%edx
c010a01c:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a01f:	83 ee 01             	sub    $0x1,%esi
c010a022:	c1 ee 01             	shr    $0x1,%esi
c010a025:	09 f2                	or     %esi,%edx
c010a027:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a02a:	83 ee 01             	sub    $0x1,%esi
c010a02d:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a030:	83 ef 01             	sub    $0x1,%edi
c010a033:	c1 ef 01             	shr    $0x1,%edi
c010a036:	09 fe                	or     %edi,%esi
c010a038:	c1 ee 02             	shr    $0x2,%esi
c010a03b:	09 f2                	or     %esi,%edx
c010a03d:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a040:	83 ee 01             	sub    $0x1,%esi
c010a043:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a046:	83 ef 01             	sub    $0x1,%edi
c010a049:	c1 ef 01             	shr    $0x1,%edi
c010a04c:	09 fe                	or     %edi,%esi
c010a04e:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a051:	83 ef 01             	sub    $0x1,%edi
c010a054:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a057:	83 eb 01             	sub    $0x1,%ebx
c010a05a:	c1 eb 01             	shr    $0x1,%ebx
c010a05d:	09 df                	or     %ebx,%edi
c010a05f:	c1 ef 02             	shr    $0x2,%edi
c010a062:	09 fe                	or     %edi,%esi
c010a064:	c1 ee 04             	shr    $0x4,%esi
c010a067:	09 f2                	or     %esi,%edx
c010a069:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a06c:	83 ee 01             	sub    $0x1,%esi
c010a06f:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a072:	83 ef 01             	sub    $0x1,%edi
c010a075:	c1 ef 01             	shr    $0x1,%edi
c010a078:	09 fe                	or     %edi,%esi
c010a07a:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a07d:	83 ef 01             	sub    $0x1,%edi
c010a080:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a083:	83 eb 01             	sub    $0x1,%ebx
c010a086:	c1 eb 01             	shr    $0x1,%ebx
c010a089:	09 df                	or     %ebx,%edi
c010a08b:	c1 ef 02             	shr    $0x2,%edi
c010a08e:	09 fe                	or     %edi,%esi
c010a090:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a093:	83 ef 01             	sub    $0x1,%edi
c010a096:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a099:	83 eb 01             	sub    $0x1,%ebx
c010a09c:	c1 eb 01             	shr    $0x1,%ebx
c010a09f:	09 df                	or     %ebx,%edi
c010a0a1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a0a4:	83 eb 01             	sub    $0x1,%ebx
c010a0a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a0aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0ad:	83 e8 01             	sub    $0x1,%eax
c010a0b0:	c1 e8 01             	shr    $0x1,%eax
c010a0b3:	09 c3                	or     %eax,%ebx
c010a0b5:	c1 eb 02             	shr    $0x2,%ebx
c010a0b8:	09 df                	or     %ebx,%edi
c010a0ba:	c1 ef 04             	shr    $0x4,%edi
c010a0bd:	09 fe                	or     %edi,%esi
c010a0bf:	c1 ee 08             	shr    $0x8,%esi
c010a0c2:	09 f2                	or     %esi,%edx
c010a0c4:	c1 ea 10             	shr    $0x10,%edx
c010a0c7:	09 d1                	or     %edx,%ecx
c010a0c9:	c1 e9 01             	shr    $0x1,%ecx
c010a0cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0cf:	21 c8                	and    %ecx,%eax
c010a0d1:	83 f8 00             	cmp    $0x0,%eax
c010a0d4:	0f 84 85 01 00 00    	je     c010a25f <buddy_init_size+0x35f>
c010a0da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0dd:	83 e8 01             	sub    $0x1,%eax
c010a0e0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a0e3:	83 e9 01             	sub    $0x1,%ecx
c010a0e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a0e9:	83 ea 01             	sub    $0x1,%edx
c010a0ec:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a0ef:	83 ee 01             	sub    $0x1,%esi
c010a0f2:	c1 ee 01             	shr    $0x1,%esi
c010a0f5:	09 f2                	or     %esi,%edx
c010a0f7:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a0fa:	83 ee 01             	sub    $0x1,%esi
c010a0fd:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a100:	83 ef 01             	sub    $0x1,%edi
c010a103:	c1 ef 01             	shr    $0x1,%edi
c010a106:	09 fe                	or     %edi,%esi
c010a108:	c1 ee 02             	shr    $0x2,%esi
c010a10b:	09 f2                	or     %esi,%edx
c010a10d:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a110:	83 ee 01             	sub    $0x1,%esi
c010a113:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a116:	83 ef 01             	sub    $0x1,%edi
c010a119:	c1 ef 01             	shr    $0x1,%edi
c010a11c:	09 fe                	or     %edi,%esi
c010a11e:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a121:	83 ef 01             	sub    $0x1,%edi
c010a124:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a127:	83 eb 01             	sub    $0x1,%ebx
c010a12a:	c1 eb 01             	shr    $0x1,%ebx
c010a12d:	09 df                	or     %ebx,%edi
c010a12f:	c1 ef 02             	shr    $0x2,%edi
c010a132:	09 fe                	or     %edi,%esi
c010a134:	c1 ee 04             	shr    $0x4,%esi
c010a137:	09 f2                	or     %esi,%edx
c010a139:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a13c:	83 ee 01             	sub    $0x1,%esi
c010a13f:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a142:	83 ef 01             	sub    $0x1,%edi
c010a145:	c1 ef 01             	shr    $0x1,%edi
c010a148:	09 fe                	or     %edi,%esi
c010a14a:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a14d:	83 ef 01             	sub    $0x1,%edi
c010a150:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a153:	83 eb 01             	sub    $0x1,%ebx
c010a156:	c1 eb 01             	shr    $0x1,%ebx
c010a159:	09 df                	or     %ebx,%edi
c010a15b:	c1 ef 02             	shr    $0x2,%edi
c010a15e:	09 fe                	or     %edi,%esi
c010a160:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a163:	83 ef 01             	sub    $0x1,%edi
c010a166:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a169:	83 eb 01             	sub    $0x1,%ebx
c010a16c:	c1 eb 01             	shr    $0x1,%ebx
c010a16f:	09 df                	or     %ebx,%edi
c010a171:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a174:	83 eb 01             	sub    $0x1,%ebx
c010a177:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a17a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a17d:	83 e8 01             	sub    $0x1,%eax
c010a180:	c1 e8 01             	shr    $0x1,%eax
c010a183:	09 c3                	or     %eax,%ebx
c010a185:	c1 eb 02             	shr    $0x2,%ebx
c010a188:	09 df                	or     %ebx,%edi
c010a18a:	c1 ef 04             	shr    $0x4,%edi
c010a18d:	09 fe                	or     %edi,%esi
c010a18f:	c1 ee 08             	shr    $0x8,%esi
c010a192:	09 f2                	or     %esi,%edx
c010a194:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a197:	83 e8 01             	sub    $0x1,%eax
c010a19a:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a19d:	83 ee 01             	sub    $0x1,%esi
c010a1a0:	c1 ee 01             	shr    $0x1,%esi
c010a1a3:	09 f0                	or     %esi,%eax
c010a1a5:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a1a8:	83 ee 01             	sub    $0x1,%esi
c010a1ab:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a1ae:	83 ef 01             	sub    $0x1,%edi
c010a1b1:	c1 ef 01             	shr    $0x1,%edi
c010a1b4:	09 fe                	or     %edi,%esi
c010a1b6:	c1 ee 02             	shr    $0x2,%esi
c010a1b9:	09 f0                	or     %esi,%eax
c010a1bb:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a1be:	83 ee 01             	sub    $0x1,%esi
c010a1c1:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a1c4:	83 ef 01             	sub    $0x1,%edi
c010a1c7:	c1 ef 01             	shr    $0x1,%edi
c010a1ca:	09 fe                	or     %edi,%esi
c010a1cc:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a1cf:	83 ef 01             	sub    $0x1,%edi
c010a1d2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a1d5:	83 eb 01             	sub    $0x1,%ebx
c010a1d8:	c1 eb 01             	shr    $0x1,%ebx
c010a1db:	09 df                	or     %ebx,%edi
c010a1dd:	c1 ef 02             	shr    $0x2,%edi
c010a1e0:	09 fe                	or     %edi,%esi
c010a1e2:	c1 ee 04             	shr    $0x4,%esi
c010a1e5:	09 f0                	or     %esi,%eax
c010a1e7:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a1ea:	83 ee 01             	sub    $0x1,%esi
c010a1ed:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a1f0:	83 ef 01             	sub    $0x1,%edi
c010a1f3:	c1 ef 01             	shr    $0x1,%edi
c010a1f6:	09 fe                	or     %edi,%esi
c010a1f8:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a1fb:	83 ef 01             	sub    $0x1,%edi
c010a1fe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a201:	83 eb 01             	sub    $0x1,%ebx
c010a204:	c1 eb 01             	shr    $0x1,%ebx
c010a207:	09 df                	or     %ebx,%edi
c010a209:	c1 ef 02             	shr    $0x2,%edi
c010a20c:	09 fe                	or     %edi,%esi
c010a20e:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a211:	83 ef 01             	sub    $0x1,%edi
c010a214:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a217:	83 eb 01             	sub    $0x1,%ebx
c010a21a:	c1 eb 01             	shr    $0x1,%ebx
c010a21d:	09 df                	or     %ebx,%edi
c010a21f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a222:	83 eb 01             	sub    $0x1,%ebx
c010a225:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010a228:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a22b:	83 e8 01             	sub    $0x1,%eax
c010a22e:	c1 e8 01             	shr    $0x1,%eax
c010a231:	09 c3                	or     %eax,%ebx
c010a233:	c1 eb 02             	shr    $0x2,%ebx
c010a236:	09 df                	or     %ebx,%edi
c010a238:	c1 ef 04             	shr    $0x4,%edi
c010a23b:	09 fe                	or     %edi,%esi
c010a23d:	c1 ee 08             	shr    $0x8,%esi
c010a240:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a243:	09 f0                	or     %esi,%eax
c010a245:	c1 e8 10             	shr    $0x10,%eax
c010a248:	09 c2                	or     %eax,%edx
c010a24a:	c1 ea 01             	shr    $0x1,%edx
c010a24d:	21 d1                	and    %edx,%ecx
c010a24f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a252:	29 c8                	sub    %ecx,%eax
c010a254:	c1 e0 01             	shl    $0x1,%eax
c010a257:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a25a:	e9 09 00 00 00       	jmp    c010a268 <buddy_init_size+0x368>
c010a25f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a262:	83 e8 01             	sub    $0x1,%eax
c010a265:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a268:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a26b:	a3 08 49 11 c0       	mov    %eax,0xc0114908
        buddy_segment_size = 1;
c010a270:	c7 05 0c 49 11 c0 01 	movl   $0x1,0xc011490c
c010a277:	00 00 00 
    } else {
c010a27a:	e9 8a 02 00 00       	jmp    c010a509 <buddy_init_size+0x609>
        buddy_virtual_size = UINT32_ROUND_DOWN(n);
c010a27f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a282:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a285:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a288:	c1 ea 01             	shr    $0x1,%edx
c010a28b:	09 d1                	or     %edx,%ecx
c010a28d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a290:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a293:	c1 ee 01             	shr    $0x1,%esi
c010a296:	09 f2                	or     %esi,%edx
c010a298:	c1 ea 02             	shr    $0x2,%edx
c010a29b:	09 d1                	or     %edx,%ecx
c010a29d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a2a0:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a2a3:	c1 ee 01             	shr    $0x1,%esi
c010a2a6:	09 f2                	or     %esi,%edx
c010a2a8:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a2ab:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a2ae:	c1 ef 01             	shr    $0x1,%edi
c010a2b1:	09 fe                	or     %edi,%esi
c010a2b3:	c1 ee 02             	shr    $0x2,%esi
c010a2b6:	09 f2                	or     %esi,%edx
c010a2b8:	c1 ea 04             	shr    $0x4,%edx
c010a2bb:	09 d1                	or     %edx,%ecx
c010a2bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a2c0:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a2c3:	c1 ee 01             	shr    $0x1,%esi
c010a2c6:	09 f2                	or     %esi,%edx
c010a2c8:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a2cb:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a2ce:	c1 ef 01             	shr    $0x1,%edi
c010a2d1:	09 fe                	or     %edi,%esi
c010a2d3:	c1 ee 02             	shr    $0x2,%esi
c010a2d6:	09 f2                	or     %esi,%edx
c010a2d8:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a2db:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a2de:	c1 ef 01             	shr    $0x1,%edi
c010a2e1:	09 fe                	or     %edi,%esi
c010a2e3:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a2e6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a2e9:	c1 eb 01             	shr    $0x1,%ebx
c010a2ec:	09 df                	or     %ebx,%edi
c010a2ee:	c1 ef 02             	shr    $0x2,%edi
c010a2f1:	09 fe                	or     %edi,%esi
c010a2f3:	c1 ee 04             	shr    $0x4,%esi
c010a2f6:	09 f2                	or     %esi,%edx
c010a2f8:	c1 ea 08             	shr    $0x8,%edx
c010a2fb:	09 d1                	or     %edx,%ecx
c010a2fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a300:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a303:	c1 ee 01             	shr    $0x1,%esi
c010a306:	09 f2                	or     %esi,%edx
c010a308:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a30b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a30e:	c1 ef 01             	shr    $0x1,%edi
c010a311:	09 fe                	or     %edi,%esi
c010a313:	c1 ee 02             	shr    $0x2,%esi
c010a316:	09 f2                	or     %esi,%edx
c010a318:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a31b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a31e:	c1 ef 01             	shr    $0x1,%edi
c010a321:	09 fe                	or     %edi,%esi
c010a323:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a326:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a329:	c1 eb 01             	shr    $0x1,%ebx
c010a32c:	09 df                	or     %ebx,%edi
c010a32e:	c1 ef 02             	shr    $0x2,%edi
c010a331:	09 fe                	or     %edi,%esi
c010a333:	c1 ee 04             	shr    $0x4,%esi
c010a336:	09 f2                	or     %esi,%edx
c010a338:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a33b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a33e:	c1 ef 01             	shr    $0x1,%edi
c010a341:	09 fe                	or     %edi,%esi
c010a343:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a346:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a349:	c1 eb 01             	shr    $0x1,%ebx
c010a34c:	09 df                	or     %ebx,%edi
c010a34e:	c1 ef 02             	shr    $0x2,%edi
c010a351:	09 fe                	or     %edi,%esi
c010a353:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a356:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a359:	c1 eb 01             	shr    $0x1,%ebx
c010a35c:	09 df                	or     %ebx,%edi
c010a35e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a361:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a367:	c1 e8 01             	shr    $0x1,%eax
c010a36a:	09 c3                	or     %eax,%ebx
c010a36c:	c1 eb 02             	shr    $0x2,%ebx
c010a36f:	09 df                	or     %ebx,%edi
c010a371:	c1 ef 04             	shr    $0x4,%edi
c010a374:	09 fe                	or     %edi,%esi
c010a376:	c1 ee 08             	shr    $0x8,%esi
c010a379:	09 f2                	or     %esi,%edx
c010a37b:	c1 ea 10             	shr    $0x10,%edx
c010a37e:	09 d1                	or     %edx,%ecx
c010a380:	c1 e9 01             	shr    $0x1,%ecx
c010a383:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a386:	21 c8                	and    %ecx,%eax
c010a388:	83 f8 00             	cmp    $0x0,%eax
c010a38b:	0f 84 1c 01 00 00    	je     c010a4ad <buddy_init_size+0x5ad>
c010a391:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a394:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a397:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a39a:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a39d:	c1 ee 01             	shr    $0x1,%esi
c010a3a0:	09 f2                	or     %esi,%edx
c010a3a2:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a3a5:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3a8:	c1 ef 01             	shr    $0x1,%edi
c010a3ab:	09 fe                	or     %edi,%esi
c010a3ad:	c1 ee 02             	shr    $0x2,%esi
c010a3b0:	09 f2                	or     %esi,%edx
c010a3b2:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a3b5:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3b8:	c1 ef 01             	shr    $0x1,%edi
c010a3bb:	09 fe                	or     %edi,%esi
c010a3bd:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3c0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a3c3:	c1 eb 01             	shr    $0x1,%ebx
c010a3c6:	09 df                	or     %ebx,%edi
c010a3c8:	c1 ef 02             	shr    $0x2,%edi
c010a3cb:	09 fe                	or     %edi,%esi
c010a3cd:	c1 ee 04             	shr    $0x4,%esi
c010a3d0:	09 f2                	or     %esi,%edx
c010a3d2:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a3d5:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3d8:	c1 ef 01             	shr    $0x1,%edi
c010a3db:	09 fe                	or     %edi,%esi
c010a3dd:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3e0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a3e3:	c1 eb 01             	shr    $0x1,%ebx
c010a3e6:	09 df                	or     %ebx,%edi
c010a3e8:	c1 ef 02             	shr    $0x2,%edi
c010a3eb:	09 fe                	or     %edi,%esi
c010a3ed:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a3f0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a3f3:	c1 eb 01             	shr    $0x1,%ebx
c010a3f6:	09 df                	or     %ebx,%edi
c010a3f8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a3fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010a3fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a401:	c1 e8 01             	shr    $0x1,%eax
c010a404:	09 c3                	or     %eax,%ebx
c010a406:	c1 eb 02             	shr    $0x2,%ebx
c010a409:	09 df                	or     %ebx,%edi
c010a40b:	c1 ef 04             	shr    $0x4,%edi
c010a40e:	09 fe                	or     %edi,%esi
c010a410:	c1 ee 08             	shr    $0x8,%esi
c010a413:	09 f2                	or     %esi,%edx
c010a415:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a418:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a41b:	c1 ee 01             	shr    $0x1,%esi
c010a41e:	09 f0                	or     %esi,%eax
c010a420:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a423:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a426:	c1 ef 01             	shr    $0x1,%edi
c010a429:	09 fe                	or     %edi,%esi
c010a42b:	c1 ee 02             	shr    $0x2,%esi
c010a42e:	09 f0                	or     %esi,%eax
c010a430:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a433:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a436:	c1 ef 01             	shr    $0x1,%edi
c010a439:	09 fe                	or     %edi,%esi
c010a43b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a43e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a441:	c1 eb 01             	shr    $0x1,%ebx
c010a444:	09 df                	or     %ebx,%edi
c010a446:	c1 ef 02             	shr    $0x2,%edi
c010a449:	09 fe                	or     %edi,%esi
c010a44b:	c1 ee 04             	shr    $0x4,%esi
c010a44e:	09 f0                	or     %esi,%eax
c010a450:	8b 75 f0             	mov    -0x10(%ebp),%esi
c010a453:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a456:	c1 ef 01             	shr    $0x1,%edi
c010a459:	09 fe                	or     %edi,%esi
c010a45b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a45e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a461:	c1 eb 01             	shr    $0x1,%ebx
c010a464:	09 df                	or     %ebx,%edi
c010a466:	c1 ef 02             	shr    $0x2,%edi
c010a469:	09 fe                	or     %edi,%esi
c010a46b:	8b 7d f0             	mov    -0x10(%ebp),%edi
c010a46e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a471:	c1 eb 01             	shr    $0x1,%ebx
c010a474:	09 df                	or     %ebx,%edi
c010a476:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010a479:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a47c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a47f:	c1 e8 01             	shr    $0x1,%eax
c010a482:	09 c3                	or     %eax,%ebx
c010a484:	c1 eb 02             	shr    $0x2,%ebx
c010a487:	09 df                	or     %ebx,%edi
c010a489:	c1 ef 04             	shr    $0x4,%edi
c010a48c:	09 fe                	or     %edi,%esi
c010a48e:	c1 ee 08             	shr    $0x8,%esi
c010a491:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a494:	09 f0                	or     %esi,%eax
c010a496:	c1 e8 10             	shr    $0x10,%eax
c010a499:	09 c2                	or     %eax,%edx
c010a49b:	c1 ea 01             	shr    $0x1,%edx
c010a49e:	21 d1                	and    %edx,%ecx
c010a4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4a3:	29 c8                	sub    %ecx,%eax
c010a4a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010a4a8:	e9 06 00 00 00       	jmp    c010a4b3 <buddy_init_size+0x5b3>
c010a4ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010a4b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a4b6:	a3 08 49 11 c0       	mov    %eax,0xc0114908
        buddy_segment_size = buddy_virtual_size*sizeof(size_t)*2/PGSIZE;
c010a4bb:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010a4c0:	c1 e0 02             	shl    $0x2,%eax
c010a4c3:	c1 e0 01             	shl    $0x1,%eax
c010a4c6:	c1 e8 0c             	shr    $0xc,%eax
c010a4c9:	a3 0c 49 11 c0       	mov    %eax,0xc011490c
        if (n > buddy_virtual_size + (buddy_segment_size<<1)) {
c010a4ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4d1:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010a4d7:	8b 15 0c 49 11 c0    	mov    0xc011490c,%edx
c010a4dd:	c1 e2 01             	shl    $0x1,%edx
c010a4e0:	01 d1                	add    %edx,%ecx
c010a4e2:	39 c8                	cmp    %ecx,%eax
c010a4e4:	0f 86 1a 00 00 00    	jbe    c010a504 <buddy_init_size+0x604>
            buddy_virtual_size <<= 1;
c010a4ea:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010a4ef:	c1 e0 01             	shl    $0x1,%eax
c010a4f2:	a3 08 49 11 c0       	mov    %eax,0xc0114908
            buddy_segment_size <<= 1;
c010a4f7:	a1 0c 49 11 c0       	mov    0xc011490c,%eax
c010a4fc:	c1 e0 01             	shl    $0x1,%eax
c010a4ff:	a3 0c 49 11 c0       	mov    %eax,0xc011490c
c010a504:	e9 00 00 00 00       	jmp    c010a509 <buddy_init_size+0x609>
    buddy_alloc_size = MIN(buddy_virtual_size, buddy_physical_size-buddy_segment_size);
c010a509:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010a50e:	8b 0d 04 49 11 c0    	mov    0xc0114904,%ecx
c010a514:	2b 0d 0c 49 11 c0    	sub    0xc011490c,%ecx
c010a51a:	39 c8                	cmp    %ecx,%eax
c010a51c:	0f 83 0d 00 00 00    	jae    c010a52f <buddy_init_size+0x62f>
c010a522:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010a527:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010a52a:	e9 0e 00 00 00       	jmp    c010a53d <buddy_init_size+0x63d>
c010a52f:	a1 04 49 11 c0       	mov    0xc0114904,%eax
c010a534:	2b 05 0c 49 11 c0    	sub    0xc011490c,%eax
c010a53a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010a53d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010a540:	a3 10 49 11 c0       	mov    %eax,0xc0114910
}
c010a545:	83 c4 3c             	add    $0x3c,%esp
c010a548:	5e                   	pop    %esi
c010a549:	5f                   	pop    %edi
c010a54a:	5b                   	pop    %ebx
c010a54b:	5d                   	pop    %ebp
c010a54c:	c3                   	ret    
c010a54d:	0f 1f 00             	nopl   (%eax)

c010a550 <buddy_init_segment>:
buddy_init_segment(struct Page *base) {
c010a550:	55                   	push   %ebp
c010a551:	89 e5                	mov    %esp,%ebp
c010a553:	53                   	push   %ebx
c010a554:	57                   	push   %edi
c010a555:	56                   	push   %esi
c010a556:	81 ec dc 00 00 00    	sub    $0xdc,%esp
c010a55c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a55f:	89 45 b8             	mov    %eax,-0x48(%ebp)
    buddy_physical = base;
c010a562:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a565:	a3 14 49 11 c0       	mov    %eax,0xc0114914
    buddy_segment = KADDR(page2pa(base));
c010a56a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a56d:	89 04 24             	mov    %eax,(%esp)
c010a570:	e8 db 09 00 00       	call   c010af50 <page2pa>
c010a575:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a578:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a57b:	c1 e8 0c             	shr    $0xc,%eax
c010a57e:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010a581:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a584:	3b 05 2c 48 11 c0    	cmp    0xc011482c,%eax
c010a58a:	0f 82 2f 00 00 00    	jb     c010a5bf <buddy_init_segment+0x6f>
c010a590:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010a596:	b9 3e 00 00 00       	mov    $0x3e,%ecx
c010a59b:	8d 15 32 f7 10 c0    	lea    0xc010f732,%edx
c010a5a1:	8b 75 b4             	mov    -0x4c(%ebp),%esi
c010a5a4:	89 04 24             	mov    %eax,(%esp)
c010a5a7:	c7 44 24 04 3e 00 00 	movl   $0x3e,0x4(%esp)
c010a5ae:	00 
c010a5af:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a5b3:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010a5b7:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c010a5ba:	e8 91 5e ff ff       	call   c0100450 <__panic>
c010a5bf:	31 c0                	xor    %eax,%eax
c010a5c1:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c010a5c4:	81 c1 00 00 00 c0    	add    $0xc0000000,%ecx
c010a5ca:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c010a5cd:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c010a5d0:	89 0d 18 49 11 c0    	mov    %ecx,0xc0114918
    buddy_alloc = base + buddy_segment_size;
c010a5d6:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c010a5d9:	6b 15 0c 49 11 c0 14 	imul   $0x14,0xc011490c,%edx
c010a5e0:	01 d1                	add    %edx,%ecx
c010a5e2:	89 0d 1c 49 11 c0    	mov    %ecx,0xc011491c
    memset(buddy_segment, 0, buddy_segment_size*PGSIZE);
c010a5e8:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c010a5ee:	8b 15 0c 49 11 c0    	mov    0xc011490c,%edx
c010a5f4:	c1 e2 0c             	shl    $0xc,%edx
c010a5f7:	89 0c 24             	mov    %ecx,(%esp)
c010a5fa:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a601:	00 
c010a602:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a606:	89 45 90             	mov    %eax,-0x70(%ebp)
c010a609:	e8 d2 3d 00 00       	call   c010e3e0 <memset>
    nr_free += buddy_alloc_size;
c010a60e:	8b 0d 10 49 11 c0    	mov    0xc0114910,%ecx
c010a614:	03 0d 38 49 11 c0    	add    0xc0114938,%ecx
c010a61a:	89 0d 38 49 11 c0    	mov    %ecx,0xc0114938
    size_t block = BUDDY_ROOT;
c010a620:	c7 45 a8 01 00 00 00 	movl   $0x1,-0x58(%ebp)
    size_t alloc_size = buddy_alloc_size;
c010a627:	8b 0d 10 49 11 c0    	mov    0xc0114910,%ecx
c010a62d:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
    size_t virtual_size = buddy_virtual_size;
c010a630:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010a636:	89 4d a0             	mov    %ecx,-0x60(%ebp)
    buddy_segment[block] = alloc_size;
c010a639:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010a63c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a63f:	8b 35 18 49 11 c0    	mov    0xc0114918,%esi
c010a645:	89 0c 96             	mov    %ecx,(%esi,%edx,4)
c010a648:	89 45 8c             	mov    %eax,-0x74(%ebp)
c010a64b:	31 c0                	xor    %eax,%eax
c010a64d:	88 c1                	mov    %al,%cl
    while (alloc_size > 0 && alloc_size < virtual_size) {
c010a64f:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010a653:	88 4d 8b             	mov    %cl,-0x75(%ebp)
c010a656:	0f 86 0c 00 00 00    	jbe    c010a668 <buddy_init_segment+0x118>
c010a65c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010a65f:	3b 45 a0             	cmp    -0x60(%ebp),%eax
c010a662:	0f 92 c1             	setb   %cl
c010a665:	88 4d 8b             	mov    %cl,-0x75(%ebp)
c010a668:	8a 45 8b             	mov    -0x75(%ebp),%al
c010a66b:	a8 01                	test   $0x1,%al
c010a66d:	0f 85 05 00 00 00    	jne    c010a678 <buddy_init_segment+0x128>
c010a673:	e9 9d 04 00 00       	jmp    c010ab15 <buddy_init_segment+0x5c5>
        virtual_size >>= 1;
c010a678:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010a67b:	c1 e8 01             	shr    $0x1,%eax
c010a67e:	89 45 a0             	mov    %eax,-0x60(%ebp)
        if (alloc_size > virtual_size) {
c010a681:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010a684:	3b 45 a0             	cmp    -0x60(%ebp),%eax
c010a687:	0f 86 54 04 00 00    	jbe    c010aae1 <buddy_init_segment+0x591>
            struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
c010a68d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a690:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010a693:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a696:	c1 ea 01             	shr    $0x1,%edx
c010a699:	09 d1                	or     %edx,%ecx
c010a69b:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a69e:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6a1:	c1 ee 01             	shr    $0x1,%esi
c010a6a4:	09 f2                	or     %esi,%edx
c010a6a6:	c1 ea 02             	shr    $0x2,%edx
c010a6a9:	09 d1                	or     %edx,%ecx
c010a6ab:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a6ae:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6b1:	c1 ee 01             	shr    $0x1,%esi
c010a6b4:	09 f2                	or     %esi,%edx
c010a6b6:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6b9:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a6bc:	c1 ef 01             	shr    $0x1,%edi
c010a6bf:	09 fe                	or     %edi,%esi
c010a6c1:	c1 ee 02             	shr    $0x2,%esi
c010a6c4:	09 f2                	or     %esi,%edx
c010a6c6:	c1 ea 04             	shr    $0x4,%edx
c010a6c9:	09 d1                	or     %edx,%ecx
c010a6cb:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a6ce:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6d1:	c1 ee 01             	shr    $0x1,%esi
c010a6d4:	09 f2                	or     %esi,%edx
c010a6d6:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6d9:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a6dc:	c1 ef 01             	shr    $0x1,%edi
c010a6df:	09 fe                	or     %edi,%esi
c010a6e1:	c1 ee 02             	shr    $0x2,%esi
c010a6e4:	09 f2                	or     %esi,%edx
c010a6e6:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a6e9:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a6ec:	c1 ef 01             	shr    $0x1,%edi
c010a6ef:	09 fe                	or     %edi,%esi
c010a6f1:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a6f4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a6f7:	c1 eb 01             	shr    $0x1,%ebx
c010a6fa:	09 df                	or     %ebx,%edi
c010a6fc:	c1 ef 02             	shr    $0x2,%edi
c010a6ff:	09 fe                	or     %edi,%esi
c010a701:	c1 ee 04             	shr    $0x4,%esi
c010a704:	09 f2                	or     %esi,%edx
c010a706:	c1 ea 08             	shr    $0x8,%edx
c010a709:	09 d1                	or     %edx,%ecx
c010a70b:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a70e:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a711:	c1 ee 01             	shr    $0x1,%esi
c010a714:	09 f2                	or     %esi,%edx
c010a716:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a719:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a71c:	c1 ef 01             	shr    $0x1,%edi
c010a71f:	09 fe                	or     %edi,%esi
c010a721:	c1 ee 02             	shr    $0x2,%esi
c010a724:	09 f2                	or     %esi,%edx
c010a726:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a729:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a72c:	c1 ef 01             	shr    $0x1,%edi
c010a72f:	09 fe                	or     %edi,%esi
c010a731:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a734:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a737:	c1 eb 01             	shr    $0x1,%ebx
c010a73a:	09 df                	or     %ebx,%edi
c010a73c:	c1 ef 02             	shr    $0x2,%edi
c010a73f:	09 fe                	or     %edi,%esi
c010a741:	c1 ee 04             	shr    $0x4,%esi
c010a744:	09 f2                	or     %esi,%edx
c010a746:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a749:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a74c:	c1 ef 01             	shr    $0x1,%edi
c010a74f:	09 fe                	or     %edi,%esi
c010a751:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a754:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a757:	c1 eb 01             	shr    $0x1,%ebx
c010a75a:	09 df                	or     %ebx,%edi
c010a75c:	c1 ef 02             	shr    $0x2,%edi
c010a75f:	09 fe                	or     %edi,%esi
c010a761:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a764:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a767:	c1 eb 01             	shr    $0x1,%ebx
c010a76a:	09 df                	or     %ebx,%edi
c010a76c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a76f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010a772:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a775:	c1 e8 01             	shr    $0x1,%eax
c010a778:	09 c3                	or     %eax,%ebx
c010a77a:	c1 eb 02             	shr    $0x2,%ebx
c010a77d:	09 df                	or     %ebx,%edi
c010a77f:	c1 ef 04             	shr    $0x4,%edi
c010a782:	09 fe                	or     %edi,%esi
c010a784:	c1 ee 08             	shr    $0x8,%esi
c010a787:	09 f2                	or     %esi,%edx
c010a789:	c1 ea 10             	shr    $0x10,%edx
c010a78c:	09 d1                	or     %edx,%ecx
c010a78e:	c1 e9 01             	shr    $0x1,%ecx
c010a791:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010a794:	21 c8                	and    %ecx,%eax
c010a796:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010a79c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a79f:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a7a2:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7a5:	c1 ef 01             	shr    $0x1,%edi
c010a7a8:	09 fe                	or     %edi,%esi
c010a7aa:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7ad:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a7b0:	c1 eb 01             	shr    $0x1,%ebx
c010a7b3:	09 df                	or     %ebx,%edi
c010a7b5:	c1 ef 02             	shr    $0x2,%edi
c010a7b8:	09 fe                	or     %edi,%esi
c010a7ba:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7bd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a7c0:	c1 eb 01             	shr    $0x1,%ebx
c010a7c3:	09 df                	or     %ebx,%edi
c010a7c5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a7c8:	89 45 80             	mov    %eax,-0x80(%ebp)
c010a7cb:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a7ce:	c1 e8 01             	shr    $0x1,%eax
c010a7d1:	09 c3                	or     %eax,%ebx
c010a7d3:	c1 eb 02             	shr    $0x2,%ebx
c010a7d6:	09 df                	or     %ebx,%edi
c010a7d8:	c1 ef 04             	shr    $0x4,%edi
c010a7db:	09 fe                	or     %edi,%esi
c010a7dd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a7e0:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7e3:	c1 ef 01             	shr    $0x1,%edi
c010a7e6:	09 f8                	or     %edi,%eax
c010a7e8:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7eb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a7ee:	c1 eb 01             	shr    $0x1,%ebx
c010a7f1:	09 df                	or     %ebx,%edi
c010a7f3:	c1 ef 02             	shr    $0x2,%edi
c010a7f6:	09 f8                	or     %edi,%eax
c010a7f8:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a7fb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a7fe:	c1 eb 01             	shr    $0x1,%ebx
c010a801:	09 df                	or     %ebx,%edi
c010a803:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a806:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010a80c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a80f:	c1 e8 01             	shr    $0x1,%eax
c010a812:	09 c3                	or     %eax,%ebx
c010a814:	c1 eb 02             	shr    $0x2,%ebx
c010a817:	09 df                	or     %ebx,%edi
c010a819:	c1 ef 04             	shr    $0x4,%edi
c010a81c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010a822:	09 f8                	or     %edi,%eax
c010a824:	c1 e8 08             	shr    $0x8,%eax
c010a827:	09 c6                	or     %eax,%esi
c010a829:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a82c:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a82f:	c1 ef 01             	shr    $0x1,%edi
c010a832:	09 f8                	or     %edi,%eax
c010a834:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a837:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a83a:	c1 eb 01             	shr    $0x1,%ebx
c010a83d:	09 df                	or     %ebx,%edi
c010a83f:	c1 ef 02             	shr    $0x2,%edi
c010a842:	09 f8                	or     %edi,%eax
c010a844:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a847:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a84a:	c1 eb 01             	shr    $0x1,%ebx
c010a84d:	09 df                	or     %ebx,%edi
c010a84f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a852:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c010a858:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a85b:	c1 e8 01             	shr    $0x1,%eax
c010a85e:	09 c3                	or     %eax,%ebx
c010a860:	c1 eb 02             	shr    $0x2,%ebx
c010a863:	09 df                	or     %ebx,%edi
c010a865:	c1 ef 04             	shr    $0x4,%edi
c010a868:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010a86e:	09 f8                	or     %edi,%eax
c010a870:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a873:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a876:	c1 eb 01             	shr    $0x1,%ebx
c010a879:	09 df                	or     %ebx,%edi
c010a87b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a87e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c010a884:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a887:	c1 e8 01             	shr    $0x1,%eax
c010a88a:	09 c3                	or     %eax,%ebx
c010a88c:	c1 eb 02             	shr    $0x2,%ebx
c010a88f:	09 df                	or     %ebx,%edi
c010a891:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a894:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a897:	c1 eb 01             	shr    $0x1,%ebx
c010a89a:	09 d8                	or     %ebx,%eax
c010a89c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a89f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c010a8a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a8a8:	c1 e8 01             	shr    $0x1,%eax
c010a8ab:	09 c3                	or     %eax,%ebx
c010a8ad:	c1 eb 02             	shr    $0x2,%ebx
c010a8b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c010a8b6:	09 d8                	or     %ebx,%eax
c010a8b8:	c1 e8 04             	shr    $0x4,%eax
c010a8bb:	09 c7                	or     %eax,%edi
c010a8bd:	c1 ef 08             	shr    $0x8,%edi
c010a8c0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010a8c6:	09 f8                	or     %edi,%eax
c010a8c8:	c1 e8 10             	shr    $0x10,%eax
c010a8cb:	09 c6                	or     %eax,%esi
c010a8cd:	c1 ee 01             	shr    $0x1,%esi
c010a8d0:	21 f2                	and    %esi,%edx
c010a8d2:	83 fa 00             	cmp    $0x0,%edx
c010a8d5:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
c010a8db:	0f 84 2b 01 00 00    	je     c010aa0c <buddy_init_segment+0x4bc>
c010a8e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a8e4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010a8e7:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010a8ea:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a8ed:	c1 ee 01             	shr    $0x1,%esi
c010a8f0:	09 f2                	or     %esi,%edx
c010a8f2:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a8f5:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a8f8:	c1 ef 01             	shr    $0x1,%edi
c010a8fb:	09 fe                	or     %edi,%esi
c010a8fd:	c1 ee 02             	shr    $0x2,%esi
c010a900:	09 f2                	or     %esi,%edx
c010a902:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a905:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a908:	c1 ef 01             	shr    $0x1,%edi
c010a90b:	09 fe                	or     %edi,%esi
c010a90d:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a910:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a913:	c1 eb 01             	shr    $0x1,%ebx
c010a916:	09 df                	or     %ebx,%edi
c010a918:	c1 ef 02             	shr    $0x2,%edi
c010a91b:	09 fe                	or     %edi,%esi
c010a91d:	c1 ee 04             	shr    $0x4,%esi
c010a920:	09 f2                	or     %esi,%edx
c010a922:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a925:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a928:	c1 ef 01             	shr    $0x1,%edi
c010a92b:	09 fe                	or     %edi,%esi
c010a92d:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a930:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a933:	c1 eb 01             	shr    $0x1,%ebx
c010a936:	09 df                	or     %ebx,%edi
c010a938:	c1 ef 02             	shr    $0x2,%edi
c010a93b:	09 fe                	or     %edi,%esi
c010a93d:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a940:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a943:	c1 eb 01             	shr    $0x1,%ebx
c010a946:	09 df                	or     %ebx,%edi
c010a948:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a94b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c010a951:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a954:	c1 e8 01             	shr    $0x1,%eax
c010a957:	09 c3                	or     %eax,%ebx
c010a959:	c1 eb 02             	shr    $0x2,%ebx
c010a95c:	09 df                	or     %ebx,%edi
c010a95e:	c1 ef 04             	shr    $0x4,%edi
c010a961:	09 fe                	or     %edi,%esi
c010a963:	c1 ee 08             	shr    $0x8,%esi
c010a966:	09 f2                	or     %esi,%edx
c010a968:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a96b:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a96e:	c1 ee 01             	shr    $0x1,%esi
c010a971:	09 f0                	or     %esi,%eax
c010a973:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a976:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a979:	c1 ef 01             	shr    $0x1,%edi
c010a97c:	09 fe                	or     %edi,%esi
c010a97e:	c1 ee 02             	shr    $0x2,%esi
c010a981:	09 f0                	or     %esi,%eax
c010a983:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a986:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a989:	c1 ef 01             	shr    $0x1,%edi
c010a98c:	09 fe                	or     %edi,%esi
c010a98e:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a991:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a994:	c1 eb 01             	shr    $0x1,%ebx
c010a997:	09 df                	or     %ebx,%edi
c010a999:	c1 ef 02             	shr    $0x2,%edi
c010a99c:	09 fe                	or     %edi,%esi
c010a99e:	c1 ee 04             	shr    $0x4,%esi
c010a9a1:	09 f0                	or     %esi,%eax
c010a9a3:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010a9a6:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a9a9:	c1 ef 01             	shr    $0x1,%edi
c010a9ac:	09 fe                	or     %edi,%esi
c010a9ae:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a9b1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a9b4:	c1 eb 01             	shr    $0x1,%ebx
c010a9b7:	09 df                	or     %ebx,%edi
c010a9b9:	c1 ef 02             	shr    $0x2,%edi
c010a9bc:	09 fe                	or     %edi,%esi
c010a9be:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010a9c1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a9c4:	c1 eb 01             	shr    $0x1,%ebx
c010a9c7:	09 df                	or     %ebx,%edi
c010a9c9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010a9cc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010a9d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010a9d5:	c1 e8 01             	shr    $0x1,%eax
c010a9d8:	09 c3                	or     %eax,%ebx
c010a9da:	c1 eb 02             	shr    $0x2,%ebx
c010a9dd:	09 df                	or     %ebx,%edi
c010a9df:	c1 ef 04             	shr    $0x4,%edi
c010a9e2:	09 fe                	or     %edi,%esi
c010a9e4:	c1 ee 08             	shr    $0x8,%esi
c010a9e7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
c010a9ed:	09 f0                	or     %esi,%eax
c010a9ef:	c1 e8 10             	shr    $0x10,%eax
c010a9f2:	09 c2                	or     %eax,%edx
c010a9f4:	c1 ea 01             	shr    $0x1,%edx
c010a9f7:	21 d1                	and    %edx,%ecx
c010a9f9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
c010a9ff:	29 c8                	sub    %ecx,%eax
c010aa01:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c010aa07:	e9 09 00 00 00       	jmp    c010aa15 <buddy_init_segment+0x4c5>
c010aa0c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010aa0f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c010aa15:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
c010aa1b:	8d 0d 30 49 11 c0    	lea    0xc0114930,%ecx
c010aa21:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
c010aa27:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c010aa2d:	89 d0                	mov    %edx,%eax
c010aa2f:	31 d2                	xor    %edx,%edx
c010aa31:	8b b5 5c ff ff ff    	mov    -0xa4(%ebp),%esi
c010aa37:	f7 f6                	div    %esi
c010aa39:	8b 7d 80             	mov    -0x80(%ebp),%edi
c010aa3c:	0f af f8             	imul   %eax,%edi
c010aa3f:	6b c7 14             	imul   $0x14,%edi,%eax
c010aa42:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c010aa48:	89 45 9c             	mov    %eax,-0x64(%ebp)
            page->property = virtual_size;
c010aa4b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010aa4e:	8b 7d 9c             	mov    -0x64(%ebp),%edi
c010aa51:	89 47 08             	mov    %eax,0x8(%edi)
            list_add(&(free_list), &(page->page_link));
c010aa54:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010aa57:	83 c0 0c             	add    $0xc,%eax
c010aa5a:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010aa5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    list_add_after(listelm, elm);
c010aa60:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aa63:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010aa66:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010aa69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
    __list_add(elm, listelm, listelm->next);
c010aa6c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010aa6f:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010aa72:	8b 7d c8             	mov    -0x38(%ebp),%edi
c010aa75:	8b 7f 04             	mov    0x4(%edi),%edi
c010aa78:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010aa7b:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010aa7e:	89 7d cc             	mov    %edi,-0x34(%ebp)
    prev->next = next->prev = elm;
c010aa81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aa84:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010aa87:	89 01                	mov    %eax,(%ecx)
c010aa89:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010aa8c:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c010aa8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010aa92:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010aa95:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010aa98:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010aa9b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010aa9e:	89 01                	mov    %eax,(%ecx)
            buddy_segment[BUDDY_LEFT(block)] = virtual_size;
c010aaa0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010aaa3:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010aaa6:	c1 e1 01             	shl    $0x1,%ecx
c010aaa9:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c010aaaf:	89 04 8f             	mov    %eax,(%edi,%ecx,4)
            alloc_size -= virtual_size;
c010aab2:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010aab5:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010aab8:	29 c1                	sub    %eax,%ecx
c010aaba:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
            buddy_segment[BUDDY_RIGHT(block)] = alloc_size;
c010aabd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010aac0:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010aac3:	c1 e1 01             	shl    $0x1,%ecx
c010aac6:	8b 3d 18 49 11 c0    	mov    0xc0114918,%edi
c010aacc:	89 44 8f 04          	mov    %eax,0x4(%edi,%ecx,4)
            block = BUDDY_RIGHT(block);
c010aad0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010aad3:	c1 e0 01             	shl    $0x1,%eax
c010aad6:	83 c0 01             	add    $0x1,%eax
c010aad9:	89 45 a8             	mov    %eax,-0x58(%ebp)
        } else {
c010aadc:	e9 2f 00 00 00       	jmp    c010ab10 <buddy_init_segment+0x5c0>
            buddy_segment[BUDDY_LEFT(block)] = alloc_size;
c010aae1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010aae4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010aae7:	c1 e1 01             	shl    $0x1,%ecx
c010aaea:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c010aaf0:	89 04 8a             	mov    %eax,(%edx,%ecx,4)
            buddy_segment[BUDDY_RIGHT(block)] = 0;
c010aaf3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010aaf6:	c1 e0 01             	shl    $0x1,%eax
c010aaf9:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c010aaff:	c7 44 81 04 00 00 00 	movl   $0x0,0x4(%ecx,%eax,4)
c010ab06:	00 
            block = BUDDY_LEFT(block);
c010ab07:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ab0a:	c1 e0 01             	shl    $0x1,%eax
c010ab0d:	89 45 a8             	mov    %eax,-0x58(%ebp)
    while (alloc_size > 0 && alloc_size < virtual_size) {
c010ab10:	e9 36 fb ff ff       	jmp    c010a64b <buddy_init_segment+0xfb>
    if (alloc_size > 0) {
c010ab15:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010ab19:	0f 86 1f 04 00 00    	jbe    c010af3e <buddy_init_segment+0x9ee>
        struct Page *page = &buddy_alloc[BUDDY_BEGIN(block)];
c010ab1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ab22:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010ab25:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ab28:	c1 ea 01             	shr    $0x1,%edx
c010ab2b:	09 d1                	or     %edx,%ecx
c010ab2d:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ab30:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab33:	c1 ee 01             	shr    $0x1,%esi
c010ab36:	09 f2                	or     %esi,%edx
c010ab38:	c1 ea 02             	shr    $0x2,%edx
c010ab3b:	09 d1                	or     %edx,%ecx
c010ab3d:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ab40:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab43:	c1 ee 01             	shr    $0x1,%esi
c010ab46:	09 f2                	or     %esi,%edx
c010ab48:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab4b:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ab4e:	c1 ef 01             	shr    $0x1,%edi
c010ab51:	09 fe                	or     %edi,%esi
c010ab53:	c1 ee 02             	shr    $0x2,%esi
c010ab56:	09 f2                	or     %esi,%edx
c010ab58:	c1 ea 04             	shr    $0x4,%edx
c010ab5b:	09 d1                	or     %edx,%ecx
c010ab5d:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ab60:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab63:	c1 ee 01             	shr    $0x1,%esi
c010ab66:	09 f2                	or     %esi,%edx
c010ab68:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab6b:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ab6e:	c1 ef 01             	shr    $0x1,%edi
c010ab71:	09 fe                	or     %edi,%esi
c010ab73:	c1 ee 02             	shr    $0x2,%esi
c010ab76:	09 f2                	or     %esi,%edx
c010ab78:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ab7b:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ab7e:	c1 ef 01             	shr    $0x1,%edi
c010ab81:	09 fe                	or     %edi,%esi
c010ab83:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ab86:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ab89:	c1 eb 01             	shr    $0x1,%ebx
c010ab8c:	09 df                	or     %ebx,%edi
c010ab8e:	c1 ef 02             	shr    $0x2,%edi
c010ab91:	09 fe                	or     %edi,%esi
c010ab93:	c1 ee 04             	shr    $0x4,%esi
c010ab96:	09 f2                	or     %esi,%edx
c010ab98:	c1 ea 08             	shr    $0x8,%edx
c010ab9b:	09 d1                	or     %edx,%ecx
c010ab9d:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010aba0:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010aba3:	c1 ee 01             	shr    $0x1,%esi
c010aba6:	09 f2                	or     %esi,%edx
c010aba8:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010abab:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abae:	c1 ef 01             	shr    $0x1,%edi
c010abb1:	09 fe                	or     %edi,%esi
c010abb3:	c1 ee 02             	shr    $0x2,%esi
c010abb6:	09 f2                	or     %esi,%edx
c010abb8:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010abbb:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abbe:	c1 ef 01             	shr    $0x1,%edi
c010abc1:	09 fe                	or     %edi,%esi
c010abc3:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abc6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010abc9:	c1 eb 01             	shr    $0x1,%ebx
c010abcc:	09 df                	or     %ebx,%edi
c010abce:	c1 ef 02             	shr    $0x2,%edi
c010abd1:	09 fe                	or     %edi,%esi
c010abd3:	c1 ee 04             	shr    $0x4,%esi
c010abd6:	09 f2                	or     %esi,%edx
c010abd8:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010abdb:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abde:	c1 ef 01             	shr    $0x1,%edi
c010abe1:	09 fe                	or     %edi,%esi
c010abe3:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abe6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010abe9:	c1 eb 01             	shr    $0x1,%ebx
c010abec:	09 df                	or     %ebx,%edi
c010abee:	c1 ef 02             	shr    $0x2,%edi
c010abf1:	09 fe                	or     %edi,%esi
c010abf3:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010abf6:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010abf9:	c1 eb 01             	shr    $0x1,%ebx
c010abfc:	09 df                	or     %ebx,%edi
c010abfe:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac01:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c010ac07:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ac0a:	c1 e8 01             	shr    $0x1,%eax
c010ac0d:	09 c3                	or     %eax,%ebx
c010ac0f:	c1 eb 02             	shr    $0x2,%ebx
c010ac12:	09 df                	or     %ebx,%edi
c010ac14:	c1 ef 04             	shr    $0x4,%edi
c010ac17:	09 fe                	or     %edi,%esi
c010ac19:	c1 ee 08             	shr    $0x8,%esi
c010ac1c:	09 f2                	or     %esi,%edx
c010ac1e:	c1 ea 10             	shr    $0x10,%edx
c010ac21:	09 d1                	or     %edx,%ecx
c010ac23:	c1 e9 01             	shr    $0x1,%ecx
c010ac26:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
c010ac2c:	21 c8                	and    %ecx,%eax
c010ac2e:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010ac34:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ac37:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ac3a:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac3d:	c1 ef 01             	shr    $0x1,%edi
c010ac40:	09 fe                	or     %edi,%esi
c010ac42:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac45:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac48:	c1 eb 01             	shr    $0x1,%ebx
c010ac4b:	09 df                	or     %ebx,%edi
c010ac4d:	c1 ef 02             	shr    $0x2,%edi
c010ac50:	09 fe                	or     %edi,%esi
c010ac52:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac55:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac58:	c1 eb 01             	shr    $0x1,%ebx
c010ac5b:	09 df                	or     %ebx,%edi
c010ac5d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac60:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c010ac66:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ac69:	c1 e8 01             	shr    $0x1,%eax
c010ac6c:	09 c3                	or     %eax,%ebx
c010ac6e:	c1 eb 02             	shr    $0x2,%ebx
c010ac71:	09 df                	or     %ebx,%edi
c010ac73:	c1 ef 04             	shr    $0x4,%edi
c010ac76:	09 fe                	or     %edi,%esi
c010ac78:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ac7b:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac7e:	c1 ef 01             	shr    $0x1,%edi
c010ac81:	09 f8                	or     %edi,%eax
c010ac83:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac86:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac89:	c1 eb 01             	shr    $0x1,%ebx
c010ac8c:	09 df                	or     %ebx,%edi
c010ac8e:	c1 ef 02             	shr    $0x2,%edi
c010ac91:	09 f8                	or     %edi,%eax
c010ac93:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ac96:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ac99:	c1 eb 01             	shr    $0x1,%ebx
c010ac9c:	09 df                	or     %ebx,%edi
c010ac9e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010aca1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
c010aca7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010acaa:	c1 e8 01             	shr    $0x1,%eax
c010acad:	09 c3                	or     %eax,%ebx
c010acaf:	c1 eb 02             	shr    $0x2,%ebx
c010acb2:	09 df                	or     %ebx,%edi
c010acb4:	c1 ef 04             	shr    $0x4,%edi
c010acb7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
c010acbd:	09 f8                	or     %edi,%eax
c010acbf:	c1 e8 08             	shr    $0x8,%eax
c010acc2:	09 c6                	or     %eax,%esi
c010acc4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010acc7:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010acca:	c1 ef 01             	shr    $0x1,%edi
c010accd:	09 f8                	or     %edi,%eax
c010accf:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010acd2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010acd5:	c1 eb 01             	shr    $0x1,%ebx
c010acd8:	09 df                	or     %ebx,%edi
c010acda:	c1 ef 02             	shr    $0x2,%edi
c010acdd:	09 f8                	or     %edi,%eax
c010acdf:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ace2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ace5:	c1 eb 01             	shr    $0x1,%ebx
c010ace8:	09 df                	or     %ebx,%edi
c010acea:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010aced:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
c010acf3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010acf6:	c1 e8 01             	shr    $0x1,%eax
c010acf9:	09 c3                	or     %eax,%ebx
c010acfb:	c1 eb 02             	shr    $0x2,%ebx
c010acfe:	09 df                	or     %ebx,%edi
c010ad00:	c1 ef 04             	shr    $0x4,%edi
c010ad03:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
c010ad09:	09 f8                	or     %edi,%eax
c010ad0b:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ad0e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ad11:	c1 eb 01             	shr    $0x1,%ebx
c010ad14:	09 df                	or     %ebx,%edi
c010ad16:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ad19:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c010ad1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ad22:	c1 e8 01             	shr    $0x1,%eax
c010ad25:	09 c3                	or     %eax,%ebx
c010ad27:	c1 eb 02             	shr    $0x2,%ebx
c010ad2a:	09 df                	or     %ebx,%edi
c010ad2c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ad2f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ad32:	c1 eb 01             	shr    $0x1,%ebx
c010ad35:	09 d8                	or     %ebx,%eax
c010ad37:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ad3a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c010ad40:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ad43:	c1 e8 01             	shr    $0x1,%eax
c010ad46:	09 c3                	or     %eax,%ebx
c010ad48:	c1 eb 02             	shr    $0x2,%ebx
c010ad4b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
c010ad51:	09 d8                	or     %ebx,%eax
c010ad53:	c1 e8 04             	shr    $0x4,%eax
c010ad56:	09 c7                	or     %eax,%edi
c010ad58:	c1 ef 08             	shr    $0x8,%edi
c010ad5b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
c010ad61:	09 f8                	or     %edi,%eax
c010ad63:	c1 e8 10             	shr    $0x10,%eax
c010ad66:	09 c6                	or     %eax,%esi
c010ad68:	c1 ee 01             	shr    $0x1,%esi
c010ad6b:	21 f2                	and    %esi,%edx
c010ad6d:	83 fa 00             	cmp    $0x0,%edx
c010ad70:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%ebp)
c010ad76:	0f 84 2b 01 00 00    	je     c010aea7 <buddy_init_segment+0x957>
c010ad7c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ad7f:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010ad82:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010ad85:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ad88:	c1 ee 01             	shr    $0x1,%esi
c010ad8b:	09 f2                	or     %esi,%edx
c010ad8d:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ad90:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ad93:	c1 ef 01             	shr    $0x1,%edi
c010ad96:	09 fe                	or     %edi,%esi
c010ad98:	c1 ee 02             	shr    $0x2,%esi
c010ad9b:	09 f2                	or     %esi,%edx
c010ad9d:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ada0:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ada3:	c1 ef 01             	shr    $0x1,%edi
c010ada6:	09 fe                	or     %edi,%esi
c010ada8:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010adab:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010adae:	c1 eb 01             	shr    $0x1,%ebx
c010adb1:	09 df                	or     %ebx,%edi
c010adb3:	c1 ef 02             	shr    $0x2,%edi
c010adb6:	09 fe                	or     %edi,%esi
c010adb8:	c1 ee 04             	shr    $0x4,%esi
c010adbb:	09 f2                	or     %esi,%edx
c010adbd:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010adc0:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010adc3:	c1 ef 01             	shr    $0x1,%edi
c010adc6:	09 fe                	or     %edi,%esi
c010adc8:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010adcb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010adce:	c1 eb 01             	shr    $0x1,%ebx
c010add1:	09 df                	or     %ebx,%edi
c010add3:	c1 ef 02             	shr    $0x2,%edi
c010add6:	09 fe                	or     %edi,%esi
c010add8:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010addb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010adde:	c1 eb 01             	shr    $0x1,%ebx
c010ade1:	09 df                	or     %ebx,%edi
c010ade3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ade6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
c010adec:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010adef:	c1 e8 01             	shr    $0x1,%eax
c010adf2:	09 c3                	or     %eax,%ebx
c010adf4:	c1 eb 02             	shr    $0x2,%ebx
c010adf7:	09 df                	or     %ebx,%edi
c010adf9:	c1 ef 04             	shr    $0x4,%edi
c010adfc:	09 fe                	or     %edi,%esi
c010adfe:	c1 ee 08             	shr    $0x8,%esi
c010ae01:	09 f2                	or     %esi,%edx
c010ae03:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ae06:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ae09:	c1 ee 01             	shr    $0x1,%esi
c010ae0c:	09 f0                	or     %esi,%eax
c010ae0e:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ae11:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae14:	c1 ef 01             	shr    $0x1,%edi
c010ae17:	09 fe                	or     %edi,%esi
c010ae19:	c1 ee 02             	shr    $0x2,%esi
c010ae1c:	09 f0                	or     %esi,%eax
c010ae1e:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ae21:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae24:	c1 ef 01             	shr    $0x1,%edi
c010ae27:	09 fe                	or     %edi,%esi
c010ae29:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae2c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ae2f:	c1 eb 01             	shr    $0x1,%ebx
c010ae32:	09 df                	or     %ebx,%edi
c010ae34:	c1 ef 02             	shr    $0x2,%edi
c010ae37:	09 fe                	or     %edi,%esi
c010ae39:	c1 ee 04             	shr    $0x4,%esi
c010ae3c:	09 f0                	or     %esi,%eax
c010ae3e:	8b 75 a8             	mov    -0x58(%ebp),%esi
c010ae41:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae44:	c1 ef 01             	shr    $0x1,%edi
c010ae47:	09 fe                	or     %edi,%esi
c010ae49:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae4c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ae4f:	c1 eb 01             	shr    $0x1,%ebx
c010ae52:	09 df                	or     %ebx,%edi
c010ae54:	c1 ef 02             	shr    $0x2,%edi
c010ae57:	09 fe                	or     %edi,%esi
c010ae59:	8b 7d a8             	mov    -0x58(%ebp),%edi
c010ae5c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ae5f:	c1 eb 01             	shr    $0x1,%ebx
c010ae62:	09 df                	or     %ebx,%edi
c010ae64:	8b 5d a8             	mov    -0x58(%ebp),%ebx
c010ae67:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
c010ae6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ae70:	c1 e8 01             	shr    $0x1,%eax
c010ae73:	09 c3                	or     %eax,%ebx
c010ae75:	c1 eb 02             	shr    $0x2,%ebx
c010ae78:	09 df                	or     %ebx,%edi
c010ae7a:	c1 ef 04             	shr    $0x4,%edi
c010ae7d:	09 fe                	or     %edi,%esi
c010ae7f:	c1 ee 08             	shr    $0x8,%esi
c010ae82:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
c010ae88:	09 f0                	or     %esi,%eax
c010ae8a:	c1 e8 10             	shr    $0x10,%eax
c010ae8d:	09 c2                	or     %eax,%edx
c010ae8f:	c1 ea 01             	shr    $0x1,%edx
c010ae92:	21 d1                	and    %edx,%ecx
c010ae94:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
c010ae9a:	29 c8                	sub    %ecx,%eax
c010ae9c:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c010aea2:	e9 09 00 00 00       	jmp    c010aeb0 <buddy_init_segment+0x960>
c010aea7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010aeaa:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c010aeb0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
c010aeb6:	8d 0d 30 49 11 c0    	lea    0xc0114930,%ecx
c010aebc:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
c010aec2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
c010aec8:	89 d0                	mov    %edx,%eax
c010aeca:	31 d2                	xor    %edx,%edx
c010aecc:	8b b5 30 ff ff ff    	mov    -0xd0(%ebp),%esi
c010aed2:	f7 f6                	div    %esi
c010aed4:	8b bd 54 ff ff ff    	mov    -0xac(%ebp),%edi
c010aeda:	0f af f8             	imul   %eax,%edi
c010aedd:	6b c7 14             	imul   $0x14,%edi,%eax
c010aee0:	03 05 1c 49 11 c0    	add    0xc011491c,%eax
c010aee6:	89 45 98             	mov    %eax,-0x68(%ebp)
        page->property = alloc_size;
c010aee9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010aeec:	8b 7d 98             	mov    -0x68(%ebp),%edi
c010aeef:	89 47 08             	mov    %eax,0x8(%edi)
        list_add(&(free_list), &(page->page_link));
c010aef2:	8b 45 98             	mov    -0x68(%ebp),%eax
c010aef5:	83 c0 0c             	add    $0xc,%eax
c010aef8:	89 4d dc             	mov    %ecx,-0x24(%ebp)
c010aefb:	89 45 d8             	mov    %eax,-0x28(%ebp)
    list_add_after(listelm, elm);
c010aefe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010af01:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010af04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010af07:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c010af0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010af0d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010af10:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010af13:	8b 7f 04             	mov    0x4(%edi),%edi
c010af16:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010af19:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010af1c:	89 7d e8             	mov    %edi,-0x18(%ebp)
    prev->next = next->prev = elm;
c010af1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af22:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010af25:	89 01                	mov    %eax,(%ecx)
c010af27:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010af2a:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c010af2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af30:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010af33:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010af36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af39:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010af3c:	89 01                	mov    %eax,(%ecx)
}
c010af3e:	81 c4 dc 00 00 00    	add    $0xdc,%esp
c010af44:	5e                   	pop    %esi
c010af45:	5f                   	pop    %edi
c010af46:	5b                   	pop    %ebx
c010af47:	5d                   	pop    %ebp
c010af48:	c3                   	ret    
c010af49:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c010af50 <page2pa>:
page2pa(struct Page *page) {
c010af50:	55                   	push   %ebp
c010af51:	89 e5                	mov    %esp,%ebp
c010af53:	83 ec 08             	sub    $0x8,%esp
c010af56:	8b 45 08             	mov    0x8(%ebp),%eax
c010af59:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
c010af5c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010af5f:	89 04 24             	mov    %eax,(%esp)
c010af62:	e8 09 00 00 00       	call   c010af70 <page2ppn>
c010af67:	c1 e0 0c             	shl    $0xc,%eax
c010af6a:	83 c4 08             	add    $0x8,%esp
c010af6d:	5d                   	pop    %ebp
c010af6e:	c3                   	ret    
c010af6f:	90                   	nop

c010af70 <page2ppn>:
page2ppn(struct Page *page) {
c010af70:	55                   	push   %ebp
c010af71:	89 e5                	mov    %esp,%ebp
c010af73:	50                   	push   %eax
c010af74:	8b 45 08             	mov    0x8(%ebp),%eax
c010af77:	b9 14 00 00 00       	mov    $0x14,%ecx
c010af7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
c010af7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010af82:	8b 15 2c 49 11 c0    	mov    0xc011492c,%edx
c010af88:	29 d0                	sub    %edx,%eax
c010af8a:	99                   	cltd   
c010af8b:	f7 f9                	idiv   %ecx
c010af8d:	83 c4 04             	add    $0x4,%esp
c010af90:	5d                   	pop    %ebp
c010af91:	c3                   	ret    
c010af92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010af99:	1f 84 00 00 00 00 00 

c010afa0 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c010afa0:	55                   	push   %ebp
c010afa1:	89 e5                	mov    %esp,%ebp
c010afa3:	83 ec 08             	sub    $0x8,%esp
c010afa6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afa9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010afac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010afaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
c010afb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010afb5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010afb8:	89 01                	mov    %eax,(%ecx)
}
c010afba:	83 c4 08             	add    $0x8,%esp
c010afbd:	5d                   	pop    %ebp
c010afbe:	c3                   	ret    
c010afbf:	90                   	nop

c010afc0 <macro_check>:
macro_check(void) {
c010afc0:	55                   	push   %ebp
c010afc1:	89 e5                	mov    %esp,%ebp
c010afc3:	56                   	push   %esi
c010afc4:	83 ec 34             	sub    $0x34,%esp
    assert(BUDDY_ROOT == 1);
c010afc7:	e9 00 00 00 00       	jmp    c010afcc <macro_check+0xc>
    assert(BUDDY_LEFT(3) == 6);
c010afcc:	e9 00 00 00 00       	jmp    c010afd1 <macro_check+0x11>
c010afd1:	e9 00 00 00 00       	jmp    c010afd6 <macro_check+0x16>
    assert(BUDDY_RIGHT(3) == 7);
c010afd6:	e9 00 00 00 00       	jmp    c010afdb <macro_check+0x1b>
c010afdb:	e9 00 00 00 00       	jmp    c010afe0 <macro_check+0x20>
    assert(BUDDY_PARENT(6) == 3);
c010afe0:	e9 00 00 00 00       	jmp    c010afe5 <macro_check+0x25>
c010afe5:	e9 00 00 00 00       	jmp    c010afea <macro_check+0x2a>
    assert(BUDDY_PARENT(7) == 3);
c010afea:	e9 00 00 00 00       	jmp    c010afef <macro_check+0x2f>
c010afef:	e9 00 00 00 00       	jmp    c010aff4 <macro_check+0x34>
    size_t buddy_virtual_size_store = buddy_virtual_size;
c010aff4:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010aff9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t buddy_segment_root_store = buddy_segment[BUDDY_ROOT];
c010affc:	a1 18 49 11 c0       	mov    0xc0114918,%eax
c010b001:	8b 40 04             	mov    0x4(%eax),%eax
c010b004:	89 45 f4             	mov    %eax,-0xc(%ebp)
    buddy_virtual_size = 16;
c010b007:	c7 05 08 49 11 c0 10 	movl   $0x10,0xc0114908
c010b00e:	00 00 00 
    buddy_segment[BUDDY_ROOT] = 16;
c010b011:	a1 18 49 11 c0       	mov    0xc0114918,%eax
c010b016:	c7 40 04 10 00 00 00 	movl   $0x10,0x4(%eax)
    assert(BUDDY_LENGTH(6) == 4);
c010b01d:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010b022:	c1 e8 02             	shr    $0x2,%eax
c010b025:	83 f8 04             	cmp    $0x4,%eax
c010b028:	0f 84 32 00 00 00    	je     c010b060 <macro_check+0xa0>
c010b02e:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b034:	b9 de 00 00 00       	mov    $0xde,%ecx
c010b039:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b03f:	8d 35 f4 00 11 c0    	lea    0xc01100f4,%esi
c010b045:	89 04 24             	mov    %eax,(%esp)
c010b048:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
c010b04f:	00 
c010b050:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b054:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b058:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010b05b:	e8 f0 53 ff ff       	call   c0100450 <__panic>
c010b060:	e9 00 00 00 00       	jmp    c010b065 <macro_check+0xa5>
    assert(BUDDY_BEGIN(6) == 8);
c010b065:	e9 00 00 00 00       	jmp    c010b06a <macro_check+0xaa>
c010b06a:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010b06f:	c1 e8 02             	shr    $0x2,%eax
c010b072:	c1 e0 01             	shl    $0x1,%eax
c010b075:	83 f8 08             	cmp    $0x8,%eax
c010b078:	0f 84 32 00 00 00    	je     c010b0b0 <macro_check+0xf0>
c010b07e:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b084:	b9 df 00 00 00       	mov    $0xdf,%ecx
c010b089:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b08f:	8d 35 09 01 11 c0    	lea    0xc0110109,%esi
c010b095:	89 04 24             	mov    %eax,(%esp)
c010b098:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c010b09f:	00 
c010b0a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b0a4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b0a8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b0ab:	e8 a0 53 ff ff       	call   c0100450 <__panic>
c010b0b0:	e9 00 00 00 00       	jmp    c010b0b5 <macro_check+0xf5>
    assert(BUDDY_END(6) == 12);
c010b0b5:	e9 00 00 00 00       	jmp    c010b0ba <macro_check+0xfa>
c010b0ba:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010b0bf:	c1 e8 02             	shr    $0x2,%eax
c010b0c2:	6b c0 03             	imul   $0x3,%eax,%eax
c010b0c5:	83 f8 0c             	cmp    $0xc,%eax
c010b0c8:	0f 84 32 00 00 00    	je     c010b100 <macro_check+0x140>
c010b0ce:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b0d4:	b9 e0 00 00 00       	mov    $0xe0,%ecx
c010b0d9:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b0df:	8d 35 1d 01 11 c0    	lea    0xc011011d,%esi
c010b0e5:	89 04 24             	mov    %eax,(%esp)
c010b0e8:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010b0ef:	00 
c010b0f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b0f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b0f8:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b0fb:	e8 50 53 ff ff       	call   c0100450 <__panic>
c010b100:	e9 00 00 00 00       	jmp    c010b105 <macro_check+0x145>
    assert(BUDDY_BLOCK(8, 12) == 6);
c010b105:	e9 00 00 00 00       	jmp    c010b10a <macro_check+0x14a>
c010b10a:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010b10f:	c1 e8 02             	shr    $0x2,%eax
c010b112:	83 c0 02             	add    $0x2,%eax
c010b115:	83 f8 06             	cmp    $0x6,%eax
c010b118:	0f 84 32 00 00 00    	je     c010b150 <macro_check+0x190>
c010b11e:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b124:	b9 e1 00 00 00       	mov    $0xe1,%ecx
c010b129:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b12f:	8d 35 30 01 11 c0    	lea    0xc0110130,%esi
c010b135:	89 04 24             	mov    %eax,(%esp)
c010b138:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c010b13f:	00 
c010b140:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b144:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b148:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010b14b:	e8 00 53 ff ff       	call   c0100450 <__panic>
c010b150:	e9 00 00 00 00       	jmp    c010b155 <macro_check+0x195>
    assert(BUDDY_EMPTY(BUDDY_ROOT));
c010b155:	e9 00 00 00 00       	jmp    c010b15a <macro_check+0x19a>
c010b15a:	a1 18 49 11 c0       	mov    0xc0114918,%eax
c010b15f:	8b 40 04             	mov    0x4(%eax),%eax
c010b162:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010b168:	c1 e9 00             	shr    $0x0,%ecx
c010b16b:	39 c8                	cmp    %ecx,%eax
c010b16d:	0f 84 32 00 00 00    	je     c010b1a5 <macro_check+0x1e5>
c010b173:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b179:	b9 e2 00 00 00       	mov    $0xe2,%ecx
c010b17e:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b184:	8d 35 48 01 11 c0    	lea    0xc0110148,%esi
c010b18a:	89 04 24             	mov    %eax,(%esp)
c010b18d:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010b194:	00 
c010b195:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b199:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b19d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010b1a0:	e8 ab 52 ff ff       	call   c0100450 <__panic>
c010b1a5:	e9 00 00 00 00       	jmp    c010b1aa <macro_check+0x1ea>
    buddy_virtual_size = buddy_virtual_size_store;
c010b1aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b1ad:	a3 08 49 11 c0       	mov    %eax,0xc0114908
    buddy_segment[BUDDY_ROOT] = buddy_segment_root_store;
c010b1b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1b5:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c010b1bb:	89 41 04             	mov    %eax,0x4(%ecx)
    assert(UINT32_SHR_OR(0xCC, 2) == 0xFF);
c010b1be:	e9 00 00 00 00       	jmp    c010b1c3 <macro_check+0x203>
    assert(UINT32_MASK(0x4000) == 0x7FFF);
c010b1c3:	e9 00 00 00 00       	jmp    c010b1c8 <macro_check+0x208>
c010b1c8:	e9 00 00 00 00       	jmp    c010b1cd <macro_check+0x20d>
    assert(UINT32_REMAINDER(0x4321) == 0x321);
c010b1cd:	e9 00 00 00 00       	jmp    c010b1d2 <macro_check+0x212>
c010b1d2:	e9 00 00 00 00       	jmp    c010b1d7 <macro_check+0x217>
    assert(UINT32_ROUND_UP(0x2321) == 0x4000);
c010b1d7:	e9 00 00 00 00       	jmp    c010b1dc <macro_check+0x21c>
c010b1dc:	e9 00 00 00 00       	jmp    c010b1e1 <macro_check+0x221>
    assert(UINT32_ROUND_UP(0x2000) == 0x2000);
c010b1e1:	e9 00 00 00 00       	jmp    c010b1e6 <macro_check+0x226>
c010b1e6:	e9 00 00 00 00       	jmp    c010b1eb <macro_check+0x22b>
    assert(UINT32_ROUND_DOWN(0x4321) == 0x4000);
c010b1eb:	e9 00 00 00 00       	jmp    c010b1f0 <macro_check+0x230>
c010b1f0:	e9 00 00 00 00       	jmp    c010b1f5 <macro_check+0x235>
    assert(UINT32_ROUND_DOWN(0x4000) == 0x4000);
c010b1f5:	e9 00 00 00 00       	jmp    c010b1fa <macro_check+0x23a>
c010b1fa:	e9 00 00 00 00       	jmp    c010b1ff <macro_check+0x23f>
}
c010b1ff:	83 c4 34             	add    $0x34,%esp
c010b202:	5e                   	pop    %esi
c010b203:	5d                   	pop    %ebp
c010b204:	c3                   	ret    
c010b205:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010b20c:	00 00 00 00 

c010b210 <size_check>:
size_check(void) {
c010b210:	55                   	push   %ebp
c010b211:	89 e5                	mov    %esp,%ebp
c010b213:	56                   	push   %esi
c010b214:	83 ec 44             	sub    $0x44,%esp
c010b217:	b8 c8 00 00 00       	mov    $0xc8,%eax
    size_t buddy_physical_size_store = buddy_physical_size;
c010b21c:	8b 0d 04 49 11 c0    	mov    0xc0114904,%ecx
c010b222:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    buddy_init_size(200);
c010b225:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010b22c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b22f:	e8 cc ec ff ff       	call   c0109f00 <buddy_init_size>
    assert(buddy_virtual_size == 256);
c010b234:	81 3d 08 49 11 c0 00 	cmpl   $0x100,0xc0114908
c010b23b:	01 00 00 
c010b23e:	0f 84 32 00 00 00    	je     c010b276 <size_check+0x66>
c010b244:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b24a:	b9 f6 00 00 00       	mov    $0xf6,%ecx
c010b24f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b255:	8d 35 60 01 11 c0    	lea    0xc0110160,%esi
c010b25b:	89 04 24             	mov    %eax,(%esp)
c010b25e:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010b265:	00 
c010b266:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b26a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b26e:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010b271:	e8 da 51 ff ff       	call   c0100450 <__panic>
c010b276:	e9 00 00 00 00       	jmp    c010b27b <size_check+0x6b>
c010b27b:	b8 00 04 00 00       	mov    $0x400,%eax
    buddy_init_size(1024);
c010b280:	c7 04 24 00 04 00 00 	movl   $0x400,(%esp)
c010b287:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b28a:	e8 71 ec ff ff       	call   c0109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c010b28f:	81 3d 08 49 11 c0 00 	cmpl   $0x400,0xc0114908
c010b296:	04 00 00 
c010b299:	0f 84 32 00 00 00    	je     c010b2d1 <size_check+0xc1>
c010b29f:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b2a5:	b9 f8 00 00 00       	mov    $0xf8,%ecx
c010b2aa:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b2b0:	8d 35 7a 01 11 c0    	lea    0xc011017a,%esi
c010b2b6:	89 04 24             	mov    %eax,(%esp)
c010b2b9:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c010b2c0:	00 
c010b2c1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b2c5:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b2c9:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b2cc:	e8 7f 51 ff ff       	call   c0100450 <__panic>
c010b2d1:	e9 00 00 00 00       	jmp    c010b2d6 <size_check+0xc6>
c010b2d6:	b8 02 04 00 00       	mov    $0x402,%eax
    buddy_init_size(1026);
c010b2db:	c7 04 24 02 04 00 00 	movl   $0x402,(%esp)
c010b2e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b2e5:	e8 16 ec ff ff       	call   c0109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c010b2ea:	81 3d 08 49 11 c0 00 	cmpl   $0x400,0xc0114908
c010b2f1:	04 00 00 
c010b2f4:	0f 84 32 00 00 00    	je     c010b32c <size_check+0x11c>
c010b2fa:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b300:	b9 fa 00 00 00       	mov    $0xfa,%ecx
c010b305:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b30b:	8d 35 7a 01 11 c0    	lea    0xc011017a,%esi
c010b311:	89 04 24             	mov    %eax,(%esp)
c010b314:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010b31b:	00 
c010b31c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b320:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b324:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010b327:	e8 24 51 ff ff       	call   c0100450 <__panic>
c010b32c:	e9 00 00 00 00       	jmp    c010b331 <size_check+0x121>
c010b331:	b8 04 04 00 00       	mov    $0x404,%eax
    buddy_init_size(1028);    
c010b336:	c7 04 24 04 04 00 00 	movl   $0x404,(%esp)
c010b33d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b340:	e8 bb eb ff ff       	call   c0109f00 <buddy_init_size>
    assert(buddy_virtual_size == 1024);
c010b345:	81 3d 08 49 11 c0 00 	cmpl   $0x400,0xc0114908
c010b34c:	04 00 00 
c010b34f:	0f 84 32 00 00 00    	je     c010b387 <size_check+0x177>
c010b355:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b35b:	b9 fc 00 00 00       	mov    $0xfc,%ecx
c010b360:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b366:	8d 35 7a 01 11 c0    	lea    0xc011017a,%esi
c010b36c:	89 04 24             	mov    %eax,(%esp)
c010b36f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010b376:	00 
c010b377:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b37b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b37f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b382:	e8 c9 50 ff ff       	call   c0100450 <__panic>
c010b387:	e9 00 00 00 00       	jmp    c010b38c <size_check+0x17c>
c010b38c:	b8 06 04 00 00       	mov    $0x406,%eax
    buddy_init_size(1030);    
c010b391:	c7 04 24 06 04 00 00 	movl   $0x406,(%esp)
c010b398:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010b39b:	e8 60 eb ff ff       	call   c0109f00 <buddy_init_size>
    assert(buddy_virtual_size == 2048);
c010b3a0:	81 3d 08 49 11 c0 00 	cmpl   $0x800,0xc0114908
c010b3a7:	08 00 00 
c010b3aa:	0f 84 32 00 00 00    	je     c010b3e2 <size_check+0x1d2>
c010b3b0:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b3b6:	b9 fe 00 00 00       	mov    $0xfe,%ecx
c010b3bb:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b3c1:	8d 35 95 01 11 c0    	lea    0xc0110195,%esi
c010b3c7:	89 04 24             	mov    %eax,(%esp)
c010b3ca:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c010b3d1:	00 
c010b3d2:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b3d6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b3da:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010b3dd:	e8 6e 50 ff ff       	call   c0100450 <__panic>
c010b3e2:	e9 00 00 00 00       	jmp    c010b3e7 <size_check+0x1d7>
    buddy_init_size(buddy_physical_size_store);   
c010b3e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b3ea:	89 04 24             	mov    %eax,(%esp)
c010b3ed:	e8 0e eb ff ff       	call   c0109f00 <buddy_init_size>
}
c010b3f2:	83 c4 44             	add    $0x44,%esp
c010b3f5:	5e                   	pop    %esi
c010b3f6:	5d                   	pop    %ebp
c010b3f7:	c3                   	ret    
c010b3f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010b3ff:	00 

c010b400 <segment_check>:
segment_check(void) {
c010b400:	55                   	push   %ebp
c010b401:	89 e5                	mov    %esp,%ebp
    size_t total = 0, count = 0;
c010b403:	53                   	push   %ebx
c010b404:	57                   	push   %edi
c010b405:	56                   	push   %esi
c010b406:	83 ec 7c             	sub    $0x7c,%esp
c010b409:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010b410:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    for (size_t block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
c010b417:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c010b41e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b421:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010b427:	c1 e1 01             	shl    $0x1,%ecx
c010b42a:	39 c8                	cmp    %ecx,%eax
c010b42c:	0f 83 6f 05 00 00    	jae    c010b9a1 <segment_check+0x5a1>
        if (BUDDY_EMPTY(block))
c010b432:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b435:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c010b43b:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c010b43e:	8b 0d 08 49 11 c0    	mov    0xc0114908,%ecx
c010b444:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b447:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b44a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b44d:	c1 ef 01             	shr    $0x1,%edi
c010b450:	09 fe                	or     %edi,%esi
c010b452:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b455:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b458:	c1 eb 01             	shr    $0x1,%ebx
c010b45b:	09 df                	or     %ebx,%edi
c010b45d:	c1 ef 02             	shr    $0x2,%edi
c010b460:	09 fe                	or     %edi,%esi
c010b462:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b465:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b468:	c1 eb 01             	shr    $0x1,%ebx
c010b46b:	09 df                	or     %ebx,%edi
c010b46d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b470:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b473:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b476:	c1 e8 01             	shr    $0x1,%eax
c010b479:	09 c3                	or     %eax,%ebx
c010b47b:	c1 eb 02             	shr    $0x2,%ebx
c010b47e:	09 df                	or     %ebx,%edi
c010b480:	c1 ef 04             	shr    $0x4,%edi
c010b483:	09 fe                	or     %edi,%esi
c010b485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b488:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b48b:	c1 ef 01             	shr    $0x1,%edi
c010b48e:	09 f8                	or     %edi,%eax
c010b490:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b493:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b496:	c1 eb 01             	shr    $0x1,%ebx
c010b499:	09 df                	or     %ebx,%edi
c010b49b:	c1 ef 02             	shr    $0x2,%edi
c010b49e:	09 f8                	or     %edi,%eax
c010b4a0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b4a3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b4a6:	c1 eb 01             	shr    $0x1,%ebx
c010b4a9:	09 df                	or     %ebx,%edi
c010b4ab:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b4ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010b4b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4b4:	c1 e8 01             	shr    $0x1,%eax
c010b4b7:	09 c3                	or     %eax,%ebx
c010b4b9:	c1 eb 02             	shr    $0x2,%ebx
c010b4bc:	09 df                	or     %ebx,%edi
c010b4be:	c1 ef 04             	shr    $0x4,%edi
c010b4c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b4c4:	09 f8                	or     %edi,%eax
c010b4c6:	c1 e8 08             	shr    $0x8,%eax
c010b4c9:	09 c6                	or     %eax,%esi
c010b4cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4ce:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b4d1:	c1 ef 01             	shr    $0x1,%edi
c010b4d4:	09 f8                	or     %edi,%eax
c010b4d6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b4d9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b4dc:	c1 eb 01             	shr    $0x1,%ebx
c010b4df:	09 df                	or     %ebx,%edi
c010b4e1:	c1 ef 02             	shr    $0x2,%edi
c010b4e4:	09 f8                	or     %edi,%eax
c010b4e6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b4e9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b4ec:	c1 eb 01             	shr    $0x1,%ebx
c010b4ef:	09 df                	or     %ebx,%edi
c010b4f1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b4f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b4f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4fa:	c1 e8 01             	shr    $0x1,%eax
c010b4fd:	09 c3                	or     %eax,%ebx
c010b4ff:	c1 eb 02             	shr    $0x2,%ebx
c010b502:	09 df                	or     %ebx,%edi
c010b504:	c1 ef 04             	shr    $0x4,%edi
c010b507:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b50a:	09 f8                	or     %edi,%eax
c010b50c:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b50f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b512:	c1 eb 01             	shr    $0x1,%ebx
c010b515:	09 df                	or     %ebx,%edi
c010b517:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b51a:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010b51d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b520:	c1 e8 01             	shr    $0x1,%eax
c010b523:	09 c3                	or     %eax,%ebx
c010b525:	c1 eb 02             	shr    $0x2,%ebx
c010b528:	09 df                	or     %ebx,%edi
c010b52a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b52d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b530:	c1 eb 01             	shr    $0x1,%ebx
c010b533:	09 d8                	or     %ebx,%eax
c010b535:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b538:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010b53b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b53e:	c1 e8 01             	shr    $0x1,%eax
c010b541:	09 c3                	or     %eax,%ebx
c010b543:	c1 eb 02             	shr    $0x2,%ebx
c010b546:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b549:	09 d8                	or     %ebx,%eax
c010b54b:	c1 e8 04             	shr    $0x4,%eax
c010b54e:	09 c7                	or     %eax,%edi
c010b550:	c1 ef 08             	shr    $0x8,%edi
c010b553:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b556:	09 f8                	or     %edi,%eax
c010b558:	c1 e8 10             	shr    $0x10,%eax
c010b55b:	09 c6                	or     %eax,%esi
c010b55d:	c1 ee 01             	shr    $0x1,%esi
c010b560:	21 f2                	and    %esi,%edx
c010b562:	83 fa 00             	cmp    $0x0,%edx
c010b565:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
c010b568:	0f 84 1c 01 00 00    	je     c010b68a <segment_check+0x28a>
c010b56e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b571:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b574:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b577:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b57a:	c1 ee 01             	shr    $0x1,%esi
c010b57d:	09 f2                	or     %esi,%edx
c010b57f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b582:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b585:	c1 ef 01             	shr    $0x1,%edi
c010b588:	09 fe                	or     %edi,%esi
c010b58a:	c1 ee 02             	shr    $0x2,%esi
c010b58d:	09 f2                	or     %esi,%edx
c010b58f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b592:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b595:	c1 ef 01             	shr    $0x1,%edi
c010b598:	09 fe                	or     %edi,%esi
c010b59a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b59d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b5a0:	c1 eb 01             	shr    $0x1,%ebx
c010b5a3:	09 df                	or     %ebx,%edi
c010b5a5:	c1 ef 02             	shr    $0x2,%edi
c010b5a8:	09 fe                	or     %edi,%esi
c010b5aa:	c1 ee 04             	shr    $0x4,%esi
c010b5ad:	09 f2                	or     %esi,%edx
c010b5af:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b5b2:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b5b5:	c1 ef 01             	shr    $0x1,%edi
c010b5b8:	09 fe                	or     %edi,%esi
c010b5ba:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b5bd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b5c0:	c1 eb 01             	shr    $0x1,%ebx
c010b5c3:	09 df                	or     %ebx,%edi
c010b5c5:	c1 ef 02             	shr    $0x2,%edi
c010b5c8:	09 fe                	or     %edi,%esi
c010b5ca:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b5cd:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b5d0:	c1 eb 01             	shr    $0x1,%ebx
c010b5d3:	09 df                	or     %ebx,%edi
c010b5d5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b5d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010b5db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5de:	c1 e8 01             	shr    $0x1,%eax
c010b5e1:	09 c3                	or     %eax,%ebx
c010b5e3:	c1 eb 02             	shr    $0x2,%ebx
c010b5e6:	09 df                	or     %ebx,%edi
c010b5e8:	c1 ef 04             	shr    $0x4,%edi
c010b5eb:	09 fe                	or     %edi,%esi
c010b5ed:	c1 ee 08             	shr    $0x8,%esi
c010b5f0:	09 f2                	or     %esi,%edx
c010b5f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5f5:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b5f8:	c1 ee 01             	shr    $0x1,%esi
c010b5fb:	09 f0                	or     %esi,%eax
c010b5fd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b600:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b603:	c1 ef 01             	shr    $0x1,%edi
c010b606:	09 fe                	or     %edi,%esi
c010b608:	c1 ee 02             	shr    $0x2,%esi
c010b60b:	09 f0                	or     %esi,%eax
c010b60d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b610:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b613:	c1 ef 01             	shr    $0x1,%edi
c010b616:	09 fe                	or     %edi,%esi
c010b618:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b61b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b61e:	c1 eb 01             	shr    $0x1,%ebx
c010b621:	09 df                	or     %ebx,%edi
c010b623:	c1 ef 02             	shr    $0x2,%edi
c010b626:	09 fe                	or     %edi,%esi
c010b628:	c1 ee 04             	shr    $0x4,%esi
c010b62b:	09 f0                	or     %esi,%eax
c010b62d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b630:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b633:	c1 ef 01             	shr    $0x1,%edi
c010b636:	09 fe                	or     %edi,%esi
c010b638:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b63b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b63e:	c1 eb 01             	shr    $0x1,%ebx
c010b641:	09 df                	or     %ebx,%edi
c010b643:	c1 ef 02             	shr    $0x2,%edi
c010b646:	09 fe                	or     %edi,%esi
c010b648:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b64b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b64e:	c1 eb 01             	shr    $0x1,%ebx
c010b651:	09 df                	or     %ebx,%edi
c010b653:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b656:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b659:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b65c:	c1 e8 01             	shr    $0x1,%eax
c010b65f:	09 c3                	or     %eax,%ebx
c010b661:	c1 eb 02             	shr    $0x2,%ebx
c010b664:	09 df                	or     %ebx,%edi
c010b666:	c1 ef 04             	shr    $0x4,%edi
c010b669:	09 fe                	or     %edi,%esi
c010b66b:	c1 ee 08             	shr    $0x8,%esi
c010b66e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010b671:	09 f0                	or     %esi,%eax
c010b673:	c1 e8 10             	shr    $0x10,%eax
c010b676:	09 c2                	or     %eax,%edx
c010b678:	c1 ea 01             	shr    $0x1,%edx
c010b67b:	21 d1                	and    %edx,%ecx
c010b67d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b680:	29 c8                	sub    %ecx,%eax
c010b682:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010b685:	e9 06 00 00 00       	jmp    c010b690 <segment_check+0x290>
c010b68a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b68d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010b690:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b693:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010b696:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b699:	89 c8                	mov    %ecx,%eax
c010b69b:	31 d2                	xor    %edx,%edx
c010b69d:	8b 75 b4             	mov    -0x4c(%ebp),%esi
c010b6a0:	f7 f6                	div    %esi
c010b6a2:	8b 7d d8             	mov    -0x28(%ebp),%edi
c010b6a5:	39 c7                	cmp    %eax,%edi
c010b6a7:	0f 85 59 02 00 00    	jne    c010b906 <segment_check+0x506>
            total += BUDDY_LENGTH(block);
c010b6ad:	a1 08 49 11 c0       	mov    0xc0114908,%eax
c010b6b2:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b6b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b6b8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b6bb:	c1 ee 01             	shr    $0x1,%esi
c010b6be:	09 f2                	or     %esi,%edx
c010b6c0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b6c3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b6c6:	c1 ef 01             	shr    $0x1,%edi
c010b6c9:	09 fe                	or     %edi,%esi
c010b6cb:	c1 ee 02             	shr    $0x2,%esi
c010b6ce:	09 f2                	or     %esi,%edx
c010b6d0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b6d3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b6d6:	c1 ef 01             	shr    $0x1,%edi
c010b6d9:	09 fe                	or     %edi,%esi
c010b6db:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b6de:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b6e1:	c1 eb 01             	shr    $0x1,%ebx
c010b6e4:	09 df                	or     %ebx,%edi
c010b6e6:	c1 ef 02             	shr    $0x2,%edi
c010b6e9:	09 fe                	or     %edi,%esi
c010b6eb:	c1 ee 04             	shr    $0x4,%esi
c010b6ee:	09 f2                	or     %esi,%edx
c010b6f0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b6f3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b6f6:	c1 ef 01             	shr    $0x1,%edi
c010b6f9:	09 fe                	or     %edi,%esi
c010b6fb:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b6fe:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b701:	c1 eb 01             	shr    $0x1,%ebx
c010b704:	09 df                	or     %ebx,%edi
c010b706:	c1 ef 02             	shr    $0x2,%edi
c010b709:	09 fe                	or     %edi,%esi
c010b70b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b70e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b711:	c1 eb 01             	shr    $0x1,%ebx
c010b714:	09 df                	or     %ebx,%edi
c010b716:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b719:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b71c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b71f:	c1 e8 01             	shr    $0x1,%eax
c010b722:	09 c3                	or     %eax,%ebx
c010b724:	c1 eb 02             	shr    $0x2,%ebx
c010b727:	09 df                	or     %ebx,%edi
c010b729:	c1 ef 04             	shr    $0x4,%edi
c010b72c:	09 fe                	or     %edi,%esi
c010b72e:	c1 ee 08             	shr    $0x8,%esi
c010b731:	09 f2                	or     %esi,%edx
c010b733:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b736:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b739:	c1 ee 01             	shr    $0x1,%esi
c010b73c:	09 f0                	or     %esi,%eax
c010b73e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b741:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b744:	c1 ef 01             	shr    $0x1,%edi
c010b747:	09 fe                	or     %edi,%esi
c010b749:	c1 ee 02             	shr    $0x2,%esi
c010b74c:	09 f0                	or     %esi,%eax
c010b74e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b751:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b754:	c1 ef 01             	shr    $0x1,%edi
c010b757:	09 fe                	or     %edi,%esi
c010b759:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b75c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b75f:	c1 eb 01             	shr    $0x1,%ebx
c010b762:	09 df                	or     %ebx,%edi
c010b764:	c1 ef 02             	shr    $0x2,%edi
c010b767:	09 fe                	or     %edi,%esi
c010b769:	c1 ee 04             	shr    $0x4,%esi
c010b76c:	09 f0                	or     %esi,%eax
c010b76e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b771:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b774:	c1 ef 01             	shr    $0x1,%edi
c010b777:	09 fe                	or     %edi,%esi
c010b779:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b77c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b77f:	c1 eb 01             	shr    $0x1,%ebx
c010b782:	09 df                	or     %ebx,%edi
c010b784:	c1 ef 02             	shr    $0x2,%edi
c010b787:	09 fe                	or     %edi,%esi
c010b789:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b78c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b78f:	c1 eb 01             	shr    $0x1,%ebx
c010b792:	09 df                	or     %ebx,%edi
c010b794:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b797:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b79a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b79d:	c1 e8 01             	shr    $0x1,%eax
c010b7a0:	09 c3                	or     %eax,%ebx
c010b7a2:	c1 eb 02             	shr    $0x2,%ebx
c010b7a5:	09 df                	or     %ebx,%edi
c010b7a7:	c1 ef 04             	shr    $0x4,%edi
c010b7aa:	09 fe                	or     %edi,%esi
c010b7ac:	c1 ee 08             	shr    $0x8,%esi
c010b7af:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b7b2:	09 f0                	or     %esi,%eax
c010b7b4:	c1 e8 10             	shr    $0x10,%eax
c010b7b7:	09 c2                	or     %eax,%edx
c010b7b9:	c1 ea 01             	shr    $0x1,%edx
c010b7bc:	21 d1                	and    %edx,%ecx
c010b7be:	83 f9 00             	cmp    $0x0,%ecx
c010b7c1:	0f 84 1c 01 00 00    	je     c010b8e3 <segment_check+0x4e3>
c010b7c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7ca:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b7cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b7d0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b7d3:	c1 ee 01             	shr    $0x1,%esi
c010b7d6:	09 f2                	or     %esi,%edx
c010b7d8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b7db:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b7de:	c1 ef 01             	shr    $0x1,%edi
c010b7e1:	09 fe                	or     %edi,%esi
c010b7e3:	c1 ee 02             	shr    $0x2,%esi
c010b7e6:	09 f2                	or     %esi,%edx
c010b7e8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b7eb:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b7ee:	c1 ef 01             	shr    $0x1,%edi
c010b7f1:	09 fe                	or     %edi,%esi
c010b7f3:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b7f6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b7f9:	c1 eb 01             	shr    $0x1,%ebx
c010b7fc:	09 df                	or     %ebx,%edi
c010b7fe:	c1 ef 02             	shr    $0x2,%edi
c010b801:	09 fe                	or     %edi,%esi
c010b803:	c1 ee 04             	shr    $0x4,%esi
c010b806:	09 f2                	or     %esi,%edx
c010b808:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b80b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b80e:	c1 ef 01             	shr    $0x1,%edi
c010b811:	09 fe                	or     %edi,%esi
c010b813:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b816:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b819:	c1 eb 01             	shr    $0x1,%ebx
c010b81c:	09 df                	or     %ebx,%edi
c010b81e:	c1 ef 02             	shr    $0x2,%edi
c010b821:	09 fe                	or     %edi,%esi
c010b823:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b826:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b829:	c1 eb 01             	shr    $0x1,%ebx
c010b82c:	09 df                	or     %ebx,%edi
c010b82e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b831:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010b834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b837:	c1 e8 01             	shr    $0x1,%eax
c010b83a:	09 c3                	or     %eax,%ebx
c010b83c:	c1 eb 02             	shr    $0x2,%ebx
c010b83f:	09 df                	or     %ebx,%edi
c010b841:	c1 ef 04             	shr    $0x4,%edi
c010b844:	09 fe                	or     %edi,%esi
c010b846:	c1 ee 08             	shr    $0x8,%esi
c010b849:	09 f2                	or     %esi,%edx
c010b84b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b84e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b851:	c1 ee 01             	shr    $0x1,%esi
c010b854:	09 f0                	or     %esi,%eax
c010b856:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b859:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b85c:	c1 ef 01             	shr    $0x1,%edi
c010b85f:	09 fe                	or     %edi,%esi
c010b861:	c1 ee 02             	shr    $0x2,%esi
c010b864:	09 f0                	or     %esi,%eax
c010b866:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b869:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b86c:	c1 ef 01             	shr    $0x1,%edi
c010b86f:	09 fe                	or     %edi,%esi
c010b871:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b874:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b877:	c1 eb 01             	shr    $0x1,%ebx
c010b87a:	09 df                	or     %ebx,%edi
c010b87c:	c1 ef 02             	shr    $0x2,%edi
c010b87f:	09 fe                	or     %edi,%esi
c010b881:	c1 ee 04             	shr    $0x4,%esi
c010b884:	09 f0                	or     %esi,%eax
c010b886:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010b889:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b88c:	c1 ef 01             	shr    $0x1,%edi
c010b88f:	09 fe                	or     %edi,%esi
c010b891:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b894:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b897:	c1 eb 01             	shr    $0x1,%ebx
c010b89a:	09 df                	or     %ebx,%edi
c010b89c:	c1 ef 02             	shr    $0x2,%edi
c010b89f:	09 fe                	or     %edi,%esi
c010b8a1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
c010b8a4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b8a7:	c1 eb 01             	shr    $0x1,%ebx
c010b8aa:	09 df                	or     %ebx,%edi
c010b8ac:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
c010b8af:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010b8b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8b5:	c1 e8 01             	shr    $0x1,%eax
c010b8b8:	09 c3                	or     %eax,%ebx
c010b8ba:	c1 eb 02             	shr    $0x2,%ebx
c010b8bd:	09 df                	or     %ebx,%edi
c010b8bf:	c1 ef 04             	shr    $0x4,%edi
c010b8c2:	09 fe                	or     %edi,%esi
c010b8c4:	c1 ee 08             	shr    $0x8,%esi
c010b8c7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010b8ca:	09 f0                	or     %esi,%eax
c010b8cc:	c1 e8 10             	shr    $0x10,%eax
c010b8cf:	09 c2                	or     %eax,%edx
c010b8d1:	c1 ea 01             	shr    $0x1,%edx
c010b8d4:	21 d1                	and    %edx,%ecx
c010b8d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010b8d9:	29 c8                	sub    %ecx,%eax
c010b8db:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010b8de:	e9 06 00 00 00       	jmp    c010b8e9 <segment_check+0x4e9>
c010b8e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b8e6:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010b8e9:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010b8ec:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c010b8ef:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010b8f2:	89 c8                	mov    %ecx,%eax
c010b8f4:	31 d2                	xor    %edx,%edx
c010b8f6:	8b 75 9c             	mov    -0x64(%ebp),%esi
c010b8f9:	f7 f6                	div    %esi
c010b8fb:	03 45 ec             	add    -0x14(%ebp),%eax
c010b8fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b901:	e9 88 00 00 00       	jmp    c010b98e <segment_check+0x58e>
        else if (block < buddy_virtual_size)
c010b906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b909:	3b 05 08 49 11 c0    	cmp    0xc0114908,%eax
c010b90f:	0f 83 74 00 00 00    	jae    c010b989 <segment_check+0x589>
            assert(buddy_segment[block] == (buddy_segment[BUDDY_LEFT(block)] | buddy_segment[BUDDY_RIGHT(block)]));
c010b915:	e9 00 00 00 00       	jmp    c010b91a <segment_check+0x51a>
c010b91a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b91d:	8b 0d 18 49 11 c0    	mov    0xc0114918,%ecx
c010b923:	8b 04 81             	mov    (%ecx,%eax,4),%eax
c010b926:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b929:	c1 e1 01             	shl    $0x1,%ecx
c010b92c:	8b 15 18 49 11 c0    	mov    0xc0114918,%edx
c010b932:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
c010b935:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b938:	c1 e2 01             	shl    $0x1,%edx
c010b93b:	8b 35 18 49 11 c0    	mov    0xc0114918,%esi
c010b941:	0b 4c 96 04          	or     0x4(%esi,%edx,4),%ecx
c010b945:	39 c8                	cmp    %ecx,%eax
c010b947:	0f 84 32 00 00 00    	je     c010b97f <segment_check+0x57f>
c010b94d:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b953:	b9 0c 01 00 00       	mov    $0x10c,%ecx
c010b958:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b95e:	8d 35 b0 01 11 c0    	lea    0xc01101b0,%esi
c010b964:	89 04 24             	mov    %eax,(%esp)
c010b967:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010b96e:	00 
c010b96f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b973:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b977:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c010b97a:	e8 d1 4a ff ff       	call   c0100450 <__panic>
c010b97f:	e9 00 00 00 00       	jmp    c010b984 <segment_check+0x584>
c010b984:	e9 00 00 00 00       	jmp    c010b989 <segment_check+0x589>
c010b989:	e9 00 00 00 00       	jmp    c010b98e <segment_check+0x58e>
        if (BUDDY_EMPTY(block))
c010b98e:	e9 00 00 00 00       	jmp    c010b993 <segment_check+0x593>
    for (size_t block = BUDDY_ROOT; block < (buddy_virtual_size<<1); block++)
c010b993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b996:	83 c0 01             	add    $0x1,%eax
c010b999:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b99c:	e9 7d fa ff ff       	jmp    c010b41e <segment_check+0x1e>
    assert(total == nr_free_pages());
c010b9a1:	e9 00 00 00 00       	jmp    c010b9a6 <segment_check+0x5a6>
c010b9a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9a9:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010b9ac:	e8 5f 77 ff ff       	call   c0103110 <nr_free_pages>
c010b9b1:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010b9b4:	39 c1                	cmp    %eax,%ecx
c010b9b6:	0f 84 32 00 00 00    	je     c010b9ee <segment_check+0x5ee>
c010b9bc:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010b9c2:	b9 0d 01 00 00       	mov    $0x10d,%ecx
c010b9c7:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010b9cd:	8d 35 0f 02 11 c0    	lea    0xc011020f,%esi
c010b9d3:	89 04 24             	mov    %eax,(%esp)
c010b9d6:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c010b9dd:	00 
c010b9de:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b9e2:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010b9e6:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c010b9e9:	e8 62 4a ff ff       	call   c0100450 <__panic>
c010b9ee:	e9 00 00 00 00       	jmp    c010b9f3 <segment_check+0x5f3>
c010b9f3:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    total = 0, count = 0;
c010b9f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ba00:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    list_entry_t *le = &free_list;
c010ba07:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba0a:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while ((le = list_next(le)) != &free_list) {
c010ba10:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010ba13:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    return listelm->next;
c010ba16:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ba19:	8b 49 04             	mov    0x4(%ecx),%ecx
c010ba1c:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010ba1f:	39 c1                	cmp    %eax,%ecx
c010ba21:	0f 84 2b 00 00 00    	je     c010ba52 <segment_check+0x652>
c010ba27:	31 c0                	xor    %eax,%eax
c010ba29:	89 c1                	mov    %eax,%ecx
c010ba2b:	83 c1 0c             	add    $0xc,%ecx
c010ba2e:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
c010ba30:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010ba33:	01 c1                	add    %eax,%ecx
c010ba35:	89 4d dc             	mov    %ecx,-0x24(%ebp)
        count ++, total += p->property;
c010ba38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba3b:	83 c0 01             	add    $0x1,%eax
c010ba3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ba41:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ba44:	8b 40 08             	mov    0x8(%eax),%eax
c010ba47:	03 45 ec             	add    -0x14(%ebp),%eax
c010ba4a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010ba4d:	e9 b8 ff ff ff       	jmp    c010ba0a <segment_check+0x60a>
    assert(total == nr_free_pages());
c010ba52:	e9 00 00 00 00       	jmp    c010ba57 <segment_check+0x657>
c010ba57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba5a:	89 45 8c             	mov    %eax,-0x74(%ebp)
c010ba5d:	e8 ae 76 ff ff       	call   c0103110 <nr_free_pages>
c010ba62:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c010ba65:	39 c1                	cmp    %eax,%ecx
c010ba67:	0f 84 32 00 00 00    	je     c010ba9f <segment_check+0x69f>
c010ba6d:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010ba73:	b9 16 01 00 00       	mov    $0x116,%ecx
c010ba78:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010ba7e:	8d 35 0f 02 11 c0    	lea    0xc011020f,%esi
c010ba84:	89 04 24             	mov    %eax,(%esp)
c010ba87:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010ba8e:	00 
c010ba8f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ba93:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010ba97:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c010ba9a:	e8 b1 49 ff ff       	call   c0100450 <__panic>
c010ba9f:	e9 00 00 00 00       	jmp    c010baa4 <segment_check+0x6a4>
}
c010baa4:	83 c4 7c             	add    $0x7c,%esp
c010baa7:	5e                   	pop    %esi
c010baa8:	5f                   	pop    %edi
c010baa9:	5b                   	pop    %ebx
c010baaa:	5d                   	pop    %ebp
c010baab:	c3                   	ret    
c010baac:	0f 1f 40 00          	nopl   0x0(%eax)

c010bab0 <alloc_check>:
alloc_check(void) {
c010bab0:	55                   	push   %ebp
c010bab1:	89 e5                	mov    %esp,%ebp
    size_t buddy_physical_size_store = buddy_physical_size;
c010bab3:	56                   	push   %esi
c010bab4:	81 ec f4 00 00 00    	sub    $0xf4,%esp
c010baba:	a1 04 49 11 c0       	mov    0xc0114904,%eax
c010babf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for (struct Page *p = buddy_physical; p < buddy_physical + 1026; p++)
c010bac2:	a1 14 49 11 c0       	mov    0xc0114914,%eax
c010bac7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010baca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bacd:	8b 0d 14 49 11 c0    	mov    0xc0114914,%ecx
c010bad3:	81 c1 28 50 00 00    	add    $0x5028,%ecx
c010bad9:	39 c8                	cmp    %ecx,%eax
c010badb:	0f 83 27 00 00 00    	jae    c010bb08 <alloc_check+0x58>
        SetPageReserved(p);
c010bae1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bae4:	83 c0 04             	add    $0x4,%eax
c010bae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010baee:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010baf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010baf4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010baf7:	0f ab 08             	bts    %ecx,(%eax)
    for (struct Page *p = buddy_physical; p < buddy_physical + 1026; p++)
c010bafa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bafd:	83 c0 14             	add    $0x14,%eax
c010bb00:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bb03:	e9 c2 ff ff ff       	jmp    c010baca <alloc_check+0x1a>
    buddy_init();
c010bb08:	e8 73 b4 ff ff       	call   c0106f80 <buddy_init>
c010bb0d:	b8 02 04 00 00       	mov    $0x402,%eax
    buddy_init_memmap(buddy_physical, 1026);
c010bb12:	8b 0d 14 49 11 c0    	mov    0xc0114914,%ecx
c010bb18:	89 0c 24             	mov    %ecx,(%esp)
c010bb1b:	c7 44 24 04 02 04 00 	movl   $0x402,0x4(%esp)
c010bb22:	00 
c010bb23:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010bb26:	e8 85 b4 ff ff       	call   c0106fb0 <buddy_init_memmap>
    p0 = p1 = p2 = NULL;
c010bb2b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c010bb32:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c010bb39:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010bb40:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p0 = alloc_page()) != NULL);
c010bb45:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bb4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010bb4f:	e8 bc 74 ff ff       	call   c0103010 <alloc_pages>
c010bb54:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010bb57:	83 f8 00             	cmp    $0x0,%eax
c010bb5a:	0f 85 32 00 00 00    	jne    c010bb92 <alloc_check+0xe2>
c010bb60:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bb66:	b9 27 01 00 00       	mov    $0x127,%ecx
c010bb6b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bb71:	8d 35 28 02 11 c0    	lea    0xc0110228,%esi
c010bb77:	89 04 24             	mov    %eax,(%esp)
c010bb7a:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c010bb81:	00 
c010bb82:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb86:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bb8a:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c010bb8d:	e8 be 48 ff ff       	call   c0100450 <__panic>
c010bb92:	e9 00 00 00 00       	jmp    c010bb97 <alloc_check+0xe7>
    assert((p1 = alloc_page()) != NULL);
c010bb97:	e9 00 00 00 00       	jmp    c010bb9c <alloc_check+0xec>
c010bb9c:	b8 01 00 00 00       	mov    $0x1,%eax
c010bba1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bba8:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010bbab:	e8 60 74 ff ff       	call   c0103010 <alloc_pages>
c010bbb0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010bbb3:	83 f8 00             	cmp    $0x0,%eax
c010bbb6:	0f 85 32 00 00 00    	jne    c010bbee <alloc_check+0x13e>
c010bbbc:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bbc2:	b9 28 01 00 00       	mov    $0x128,%ecx
c010bbc7:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bbcd:	8d 35 44 02 11 c0    	lea    0xc0110244,%esi
c010bbd3:	89 04 24             	mov    %eax,(%esp)
c010bbd6:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c010bbdd:	00 
c010bbde:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bbe2:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bbe6:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c010bbe9:	e8 62 48 ff ff       	call   c0100450 <__panic>
c010bbee:	e9 00 00 00 00       	jmp    c010bbf3 <alloc_check+0x143>
    assert((p2 = alloc_page()) != NULL);
c010bbf3:	e9 00 00 00 00       	jmp    c010bbf8 <alloc_check+0x148>
c010bbf8:	b8 01 00 00 00       	mov    $0x1,%eax
c010bbfd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bc04:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010bc07:	e8 04 74 ff ff       	call   c0103010 <alloc_pages>
c010bc0c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010bc0f:	83 f8 00             	cmp    $0x0,%eax
c010bc12:	0f 85 32 00 00 00    	jne    c010bc4a <alloc_check+0x19a>
c010bc18:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bc1e:	b9 29 01 00 00       	mov    $0x129,%ecx
c010bc23:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bc29:	8d 35 60 02 11 c0    	lea    0xc0110260,%esi
c010bc2f:	89 04 24             	mov    %eax,(%esp)
c010bc32:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c010bc39:	00 
c010bc3a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc3e:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bc42:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c010bc45:	e8 06 48 ff ff       	call   c0100450 <__panic>
c010bc4a:	e9 00 00 00 00       	jmp    c010bc4f <alloc_check+0x19f>
    assert((p3 = alloc_page()) != NULL);
c010bc4f:	e9 00 00 00 00       	jmp    c010bc54 <alloc_check+0x1a4>
c010bc54:	b8 01 00 00 00       	mov    $0x1,%eax
c010bc59:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010bc60:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010bc63:	e8 a8 73 ff ff       	call   c0103010 <alloc_pages>
c010bc68:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010bc6b:	83 f8 00             	cmp    $0x0,%eax
c010bc6e:	0f 85 32 00 00 00    	jne    c010bca6 <alloc_check+0x1f6>
c010bc74:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bc7a:	b9 2a 01 00 00       	mov    $0x12a,%ecx
c010bc7f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bc85:	8d 35 7c 02 11 c0    	lea    0xc011027c,%esi
c010bc8b:	89 04 24             	mov    %eax,(%esp)
c010bc8e:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c010bc95:	00 
c010bc96:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bc9a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bc9e:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
c010bca1:	e8 aa 47 ff ff       	call   c0100450 <__panic>
c010bca6:	e9 00 00 00 00       	jmp    c010bcab <alloc_check+0x1fb>
    assert(p0 + 1 == p1);
c010bcab:	e9 00 00 00 00       	jmp    c010bcb0 <alloc_check+0x200>
c010bcb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bcb3:	83 c0 14             	add    $0x14,%eax
c010bcb6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c010bcb9:	0f 84 32 00 00 00    	je     c010bcf1 <alloc_check+0x241>
c010bcbf:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bcc5:	b9 2c 01 00 00       	mov    $0x12c,%ecx
c010bcca:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bcd0:	8d 35 98 02 11 c0    	lea    0xc0110298,%esi
c010bcd6:	89 04 24             	mov    %eax,(%esp)
c010bcd9:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c010bce0:	00 
c010bce1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bce5:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bce9:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c010bcec:	e8 5f 47 ff ff       	call   c0100450 <__panic>
c010bcf1:	e9 00 00 00 00       	jmp    c010bcf6 <alloc_check+0x246>
    assert(p1 + 1 == p2);
c010bcf6:	e9 00 00 00 00       	jmp    c010bcfb <alloc_check+0x24b>
c010bcfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bcfe:	83 c0 14             	add    $0x14,%eax
c010bd01:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010bd04:	0f 84 32 00 00 00    	je     c010bd3c <alloc_check+0x28c>
c010bd0a:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bd10:	b9 2d 01 00 00       	mov    $0x12d,%ecx
c010bd15:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bd1b:	8d 35 a5 02 11 c0    	lea    0xc01102a5,%esi
c010bd21:	89 04 24             	mov    %eax,(%esp)
c010bd24:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
c010bd2b:	00 
c010bd2c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bd30:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bd34:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
c010bd37:	e8 14 47 ff ff       	call   c0100450 <__panic>
c010bd3c:	e9 00 00 00 00       	jmp    c010bd41 <alloc_check+0x291>
    assert(p2 + 1 == p3);
c010bd41:	e9 00 00 00 00       	jmp    c010bd46 <alloc_check+0x296>
c010bd46:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010bd49:	83 c0 14             	add    $0x14,%eax
c010bd4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010bd4f:	0f 84 32 00 00 00    	je     c010bd87 <alloc_check+0x2d7>
c010bd55:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bd5b:	b9 2e 01 00 00       	mov    $0x12e,%ecx
c010bd60:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bd66:	8d 35 b2 02 11 c0    	lea    0xc01102b2,%esi
c010bd6c:	89 04 24             	mov    %eax,(%esp)
c010bd6f:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c010bd76:	00 
c010bd77:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bd7b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bd7f:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c010bd82:	e8 c9 46 ff ff       	call   c0100450 <__panic>
c010bd87:	e9 00 00 00 00       	jmp    c010bd8c <alloc_check+0x2dc>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0 && page_ref(p3) == 0);
c010bd8c:	e9 00 00 00 00       	jmp    c010bd91 <alloc_check+0x2e1>
c010bd91:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bd94:	89 04 24             	mov    %eax,(%esp)
c010bd97:	e8 b4 06 00 00       	call   c010c450 <page_ref>
c010bd9c:	83 f8 00             	cmp    $0x0,%eax
c010bd9f:	0f 85 3c 00 00 00    	jne    c010bde1 <alloc_check+0x331>
c010bda5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bda8:	89 04 24             	mov    %eax,(%esp)
c010bdab:	e8 a0 06 00 00       	call   c010c450 <page_ref>
c010bdb0:	83 f8 00             	cmp    $0x0,%eax
c010bdb3:	0f 85 28 00 00 00    	jne    c010bde1 <alloc_check+0x331>
c010bdb9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010bdbc:	89 04 24             	mov    %eax,(%esp)
c010bdbf:	e8 8c 06 00 00       	call   c010c450 <page_ref>
c010bdc4:	83 f8 00             	cmp    $0x0,%eax
c010bdc7:	0f 85 14 00 00 00    	jne    c010bde1 <alloc_check+0x331>
c010bdcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bdd0:	89 04 24             	mov    %eax,(%esp)
c010bdd3:	e8 78 06 00 00       	call   c010c450 <page_ref>
c010bdd8:	83 f8 00             	cmp    $0x0,%eax
c010bddb:	0f 84 32 00 00 00    	je     c010be13 <alloc_check+0x363>
c010bde1:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bde7:	b9 2f 01 00 00       	mov    $0x12f,%ecx
c010bdec:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bdf2:	8d 35 bf 02 11 c0    	lea    0xc01102bf,%esi
c010bdf8:	89 04 24             	mov    %eax,(%esp)
c010bdfb:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
c010be02:	00 
c010be03:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be07:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010be0b:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
c010be0e:	e8 3d 46 ff ff       	call   c0100450 <__panic>
c010be13:	e9 00 00 00 00       	jmp    c010be18 <alloc_check+0x368>
    assert(page2pa(p0) < npage * PGSIZE);
c010be18:	e9 00 00 00 00       	jmp    c010be1d <alloc_check+0x36d>
c010be1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010be20:	89 04 24             	mov    %eax,(%esp)
c010be23:	e8 28 f1 ff ff       	call   c010af50 <page2pa>
c010be28:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010be2e:	c1 e1 0c             	shl    $0xc,%ecx
c010be31:	39 c8                	cmp    %ecx,%eax
c010be33:	0f 82 32 00 00 00    	jb     c010be6b <alloc_check+0x3bb>
c010be39:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010be3f:	b9 31 01 00 00       	mov    $0x131,%ecx
c010be44:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010be4a:	8d 35 10 03 11 c0    	lea    0xc0110310,%esi
c010be50:	89 04 24             	mov    %eax,(%esp)
c010be53:	c7 44 24 04 31 01 00 	movl   $0x131,0x4(%esp)
c010be5a:	00 
c010be5b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be5f:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010be63:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c010be66:	e8 e5 45 ff ff       	call   c0100450 <__panic>
c010be6b:	e9 00 00 00 00       	jmp    c010be70 <alloc_check+0x3c0>
    assert(page2pa(p1) < npage * PGSIZE);
c010be70:	e9 00 00 00 00       	jmp    c010be75 <alloc_check+0x3c5>
c010be75:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010be78:	89 04 24             	mov    %eax,(%esp)
c010be7b:	e8 d0 f0 ff ff       	call   c010af50 <page2pa>
c010be80:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010be86:	c1 e1 0c             	shl    $0xc,%ecx
c010be89:	39 c8                	cmp    %ecx,%eax
c010be8b:	0f 82 32 00 00 00    	jb     c010bec3 <alloc_check+0x413>
c010be91:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010be97:	b9 32 01 00 00       	mov    $0x132,%ecx
c010be9c:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bea2:	8d 35 2d 03 11 c0    	lea    0xc011032d,%esi
c010bea8:	89 04 24             	mov    %eax,(%esp)
c010beab:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010beb2:	00 
c010beb3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010beb7:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bebb:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c010bebe:	e8 8d 45 ff ff       	call   c0100450 <__panic>
c010bec3:	e9 00 00 00 00       	jmp    c010bec8 <alloc_check+0x418>
    assert(page2pa(p2) < npage * PGSIZE);
c010bec8:	e9 00 00 00 00       	jmp    c010becd <alloc_check+0x41d>
c010becd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010bed0:	89 04 24             	mov    %eax,(%esp)
c010bed3:	e8 78 f0 ff ff       	call   c010af50 <page2pa>
c010bed8:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010bede:	c1 e1 0c             	shl    $0xc,%ecx
c010bee1:	39 c8                	cmp    %ecx,%eax
c010bee3:	0f 82 32 00 00 00    	jb     c010bf1b <alloc_check+0x46b>
c010bee9:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010beef:	b9 33 01 00 00       	mov    $0x133,%ecx
c010bef4:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010befa:	8d 35 4a 03 11 c0    	lea    0xc011034a,%esi
c010bf00:	89 04 24             	mov    %eax,(%esp)
c010bf03:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c010bf0a:	00 
c010bf0b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bf0f:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bf13:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c010bf16:	e8 35 45 ff ff       	call   c0100450 <__panic>
c010bf1b:	e9 00 00 00 00       	jmp    c010bf20 <alloc_check+0x470>
    assert(page2pa(p3) < npage * PGSIZE);
c010bf20:	e9 00 00 00 00       	jmp    c010bf25 <alloc_check+0x475>
c010bf25:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bf28:	89 04 24             	mov    %eax,(%esp)
c010bf2b:	e8 20 f0 ff ff       	call   c010af50 <page2pa>
c010bf30:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010bf36:	c1 e1 0c             	shl    $0xc,%ecx
c010bf39:	39 c8                	cmp    %ecx,%eax
c010bf3b:	0f 82 35 00 00 00    	jb     c010bf76 <alloc_check+0x4c6>
c010bf41:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bf47:	b9 34 01 00 00       	mov    $0x134,%ecx
c010bf4c:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bf52:	8d 35 67 03 11 c0    	lea    0xc0110367,%esi
c010bf58:	89 04 24             	mov    %eax,(%esp)
c010bf5b:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c010bf62:	00 
c010bf63:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bf67:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bf6b:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c010bf71:	e8 da 44 ff ff       	call   c0100450 <__panic>
c010bf76:	e9 00 00 00 00       	jmp    c010bf7b <alloc_check+0x4cb>
c010bf7b:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    list_entry_t *le = &free_list;
c010bf81:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010bf84:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while ((le = list_next(le)) != &free_list) {
c010bf8a:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010bf8d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010bf90:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010bf93:	8b 49 04             	mov    0x4(%ecx),%ecx
c010bf96:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010bf99:	39 c1                	cmp    %eax,%ecx
c010bf9b:	0f 84 67 00 00 00    	je     c010c008 <alloc_check+0x558>
c010bfa1:	31 c0                	xor    %eax,%eax
c010bfa3:	89 c1                	mov    %eax,%ecx
c010bfa5:	83 c1 0c             	add    $0xc,%ecx
c010bfa8:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
c010bfaa:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010bfad:	01 c1                	add    %eax,%ecx
c010bfaf:	89 4d c8             	mov    %ecx,-0x38(%ebp)
        assert(buddy_alloc_pages(p->property) != NULL);
c010bfb2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010bfb5:	8b 40 08             	mov    0x8(%eax),%eax
c010bfb8:	89 04 24             	mov    %eax,(%esp)
c010bfbb:	e8 10 b1 ff ff       	call   c01070d0 <buddy_alloc_pages>
c010bfc0:	83 f8 00             	cmp    $0x0,%eax
c010bfc3:	0f 85 35 00 00 00    	jne    c010bffe <alloc_check+0x54e>
c010bfc9:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010bfcf:	b9 39 01 00 00       	mov    $0x139,%ecx
c010bfd4:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010bfda:	8d 35 84 03 11 c0    	lea    0xc0110384,%esi
c010bfe0:	89 04 24             	mov    %eax,(%esp)
c010bfe3:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
c010bfea:	00 
c010bfeb:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bfef:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bff3:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c010bff9:	e8 52 44 ff ff       	call   c0100450 <__panic>
c010bffe:	e9 00 00 00 00       	jmp    c010c003 <alloc_check+0x553>
    while ((le = list_next(le)) != &free_list) {
c010c003:	e9 7c ff ff ff       	jmp    c010bf84 <alloc_check+0x4d4>
    assert(alloc_page() == NULL);
c010c008:	e9 00 00 00 00       	jmp    c010c00d <alloc_check+0x55d>
c010c00d:	b8 01 00 00 00       	mov    $0x1,%eax
c010c012:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c019:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c010c01f:	e8 ec 6f ff ff       	call   c0103010 <alloc_pages>
c010c024:	83 f8 00             	cmp    $0x0,%eax
c010c027:	0f 84 35 00 00 00    	je     c010c062 <alloc_check+0x5b2>
c010c02d:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c033:	b9 3c 01 00 00       	mov    $0x13c,%ecx
c010c038:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c03e:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010c044:	89 04 24             	mov    %eax,(%esp)
c010c047:	c7 44 24 04 3c 01 00 	movl   $0x13c,0x4(%esp)
c010c04e:	00 
c010c04f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c053:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c057:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
c010c05d:	e8 ee 43 ff ff       	call   c0100450 <__panic>
c010c062:	e9 00 00 00 00       	jmp    c010c067 <alloc_check+0x5b7>
c010c067:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
c010c06c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c06f:	89 0c 24             	mov    %ecx,(%esp)
c010c072:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c079:	00 
c010c07a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
c010c080:	e8 3b 70 ff ff       	call   c01030c0 <free_pages>
c010c085:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
c010c08a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010c08d:	89 0c 24             	mov    %ecx,(%esp)
c010c090:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c097:	00 
c010c098:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c010c09e:	e8 1d 70 ff ff       	call   c01030c0 <free_pages>
c010c0a3:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
c010c0a8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010c0ab:	89 0c 24             	mov    %ecx,(%esp)
c010c0ae:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c0b5:	00 
c010c0b6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010c0bc:	e8 ff 6f ff ff       	call   c01030c0 <free_pages>
    assert(nr_free == 3);
c010c0c1:	83 3d 38 49 11 c0 03 	cmpl   $0x3,0xc0114938
c010c0c8:	0f 84 35 00 00 00    	je     c010c103 <alloc_check+0x653>
c010c0ce:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c0d4:	b9 42 01 00 00       	mov    $0x142,%ecx
c010c0d9:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c0df:	8d 35 c0 03 11 c0    	lea    0xc01103c0,%esi
c010c0e5:	89 04 24             	mov    %eax,(%esp)
c010c0e8:	c7 44 24 04 42 01 00 	movl   $0x142,0x4(%esp)
c010c0ef:	00 
c010c0f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c0f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c0f8:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
c010c0fe:	e8 4d 43 ff ff       	call   c0100450 <__panic>
c010c103:	e9 00 00 00 00       	jmp    c010c108 <alloc_check+0x658>
    assert((p1 = alloc_page()) != NULL);
c010c108:	e9 00 00 00 00       	jmp    c010c10d <alloc_check+0x65d>
c010c10d:	b8 01 00 00 00       	mov    $0x1,%eax
c010c112:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c119:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c010c11f:	e8 ec 6e ff ff       	call   c0103010 <alloc_pages>
c010c124:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c127:	83 f8 00             	cmp    $0x0,%eax
c010c12a:	0f 85 35 00 00 00    	jne    c010c165 <alloc_check+0x6b5>
c010c130:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c136:	b9 44 01 00 00       	mov    $0x144,%ecx
c010c13b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c141:	8d 35 44 02 11 c0    	lea    0xc0110244,%esi
c010c147:	89 04 24             	mov    %eax,(%esp)
c010c14a:	c7 44 24 04 44 01 00 	movl   $0x144,0x4(%esp)
c010c151:	00 
c010c152:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c156:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c15a:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
c010c160:	e8 eb 42 ff ff       	call   c0100450 <__panic>
c010c165:	e9 00 00 00 00       	jmp    c010c16a <alloc_check+0x6ba>
    assert((p0 = alloc_pages(2)) != NULL);
c010c16a:	e9 00 00 00 00       	jmp    c010c16f <alloc_check+0x6bf>
c010c16f:	b8 02 00 00 00       	mov    $0x2,%eax
c010c174:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c17b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c010c181:	e8 8a 6e ff ff       	call   c0103010 <alloc_pages>
c010c186:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c189:	83 f8 00             	cmp    $0x0,%eax
c010c18c:	0f 85 35 00 00 00    	jne    c010c1c7 <alloc_check+0x717>
c010c192:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c198:	b9 45 01 00 00       	mov    $0x145,%ecx
c010c19d:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c1a3:	8d 35 cd 03 11 c0    	lea    0xc01103cd,%esi
c010c1a9:	89 04 24             	mov    %eax,(%esp)
c010c1ac:	c7 44 24 04 45 01 00 	movl   $0x145,0x4(%esp)
c010c1b3:	00 
c010c1b4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c1b8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c1bc:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
c010c1c2:	e8 89 42 ff ff       	call   c0100450 <__panic>
c010c1c7:	e9 00 00 00 00       	jmp    c010c1cc <alloc_check+0x71c>
    assert(p0 + 2 == p1);
c010c1cc:	e9 00 00 00 00       	jmp    c010c1d1 <alloc_check+0x721>
c010c1d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c1d4:	83 c0 28             	add    $0x28,%eax
c010c1d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
c010c1da:	0f 84 35 00 00 00    	je     c010c215 <alloc_check+0x765>
c010c1e0:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c1e6:	b9 46 01 00 00       	mov    $0x146,%ecx
c010c1eb:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c1f1:	8d 35 eb 03 11 c0    	lea    0xc01103eb,%esi
c010c1f7:	89 04 24             	mov    %eax,(%esp)
c010c1fa:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c010c201:	00 
c010c202:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c206:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c20a:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c010c210:	e8 3b 42 ff ff       	call   c0100450 <__panic>
c010c215:	e9 00 00 00 00       	jmp    c010c21a <alloc_check+0x76a>
    assert(alloc_page() == NULL);
c010c21a:	e9 00 00 00 00       	jmp    c010c21f <alloc_check+0x76f>
c010c21f:	b8 01 00 00 00       	mov    $0x1,%eax
c010c224:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c22b:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c010c231:	e8 da 6d ff ff       	call   c0103010 <alloc_pages>
c010c236:	83 f8 00             	cmp    $0x0,%eax
c010c239:	0f 84 35 00 00 00    	je     c010c274 <alloc_check+0x7c4>
c010c23f:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c245:	b9 48 01 00 00       	mov    $0x148,%ecx
c010c24a:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c250:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010c256:	89 04 24             	mov    %eax,(%esp)
c010c259:	c7 44 24 04 48 01 00 	movl   $0x148,0x4(%esp)
c010c260:	00 
c010c261:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c265:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c269:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%ebp)
c010c26f:	e8 dc 41 ff ff       	call   c0100450 <__panic>
c010c274:	e9 00 00 00 00       	jmp    c010c279 <alloc_check+0x7c9>
c010c279:	b8 02 00 00 00       	mov    $0x2,%eax
    free_pages(p0, 2);
c010c27e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c281:	89 0c 24             	mov    %ecx,(%esp)
c010c284:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c28b:	00 
c010c28c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c010c292:	e8 29 6e ff ff       	call   c01030c0 <free_pages>
c010c297:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
c010c29c:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010c29f:	89 0c 24             	mov    %ecx,(%esp)
c010c2a2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c2a9:	00 
c010c2aa:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
c010c2b0:	e8 0b 6e ff ff       	call   c01030c0 <free_pages>
c010c2b5:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p3);
c010c2ba:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010c2bd:	89 0c 24             	mov    %ecx,(%esp)
c010c2c0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c2c7:	00 
c010c2c8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
c010c2ce:	e8 ed 6d ff ff       	call   c01030c0 <free_pages>
c010c2d3:	b8 04 00 00 00       	mov    $0x4,%eax
    assert((p = alloc_pages(4)) == p0);
c010c2d8:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010c2df:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c010c2e5:	e8 26 6d ff ff       	call   c0103010 <alloc_pages>
c010c2ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010c2ed:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010c2f0:	0f 84 35 00 00 00    	je     c010c32b <alloc_check+0x87b>
c010c2f6:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c2fc:	b9 4f 01 00 00       	mov    $0x14f,%ecx
c010c301:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c307:	8d 35 f8 03 11 c0    	lea    0xc01103f8,%esi
c010c30d:	89 04 24             	mov    %eax,(%esp)
c010c310:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c010c317:	00 
c010c318:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c31c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c320:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%ebp)
c010c326:	e8 25 41 ff ff       	call   c0100450 <__panic>
c010c32b:	e9 00 00 00 00       	jmp    c010c330 <alloc_check+0x880>
    assert(alloc_page() == NULL);
c010c330:	e9 00 00 00 00       	jmp    c010c335 <alloc_check+0x885>
c010c335:	b8 01 00 00 00       	mov    $0x1,%eax
c010c33a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c341:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
c010c347:	e8 c4 6c ff ff       	call   c0103010 <alloc_pages>
c010c34c:	83 f8 00             	cmp    $0x0,%eax
c010c34f:	0f 84 35 00 00 00    	je     c010c38a <alloc_check+0x8da>
c010c355:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c35b:	b9 50 01 00 00       	mov    $0x150,%ecx
c010c360:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c366:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010c36c:	89 04 24             	mov    %eax,(%esp)
c010c36f:	c7 44 24 04 50 01 00 	movl   $0x150,0x4(%esp)
c010c376:	00 
c010c377:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c37b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c37f:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
c010c385:	e8 c6 40 ff ff       	call   c0100450 <__panic>
c010c38a:	e9 00 00 00 00       	jmp    c010c38f <alloc_check+0x8df>
    assert(nr_free == 0);
c010c38f:	e9 00 00 00 00       	jmp    c010c394 <alloc_check+0x8e4>
c010c394:	83 3d 38 49 11 c0 00 	cmpl   $0x0,0xc0114938
c010c39b:	0f 84 35 00 00 00    	je     c010c3d6 <alloc_check+0x926>
c010c3a1:	8d 05 c7 00 11 c0    	lea    0xc01100c7,%eax
c010c3a7:	b9 52 01 00 00       	mov    $0x152,%ecx
c010c3ac:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c3b2:	8d 35 13 04 11 c0    	lea    0xc0110413,%esi
c010c3b8:	89 04 24             	mov    %eax,(%esp)
c010c3bb:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c010c3c2:	00 
c010c3c3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c3c7:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c3cb:	89 8d 24 ff ff ff    	mov    %ecx,-0xdc(%ebp)
c010c3d1:	e8 7a 40 ff ff       	call   c0100450 <__panic>
c010c3d6:	e9 00 00 00 00       	jmp    c010c3db <alloc_check+0x92b>
    for (struct Page *p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
c010c3db:	a1 14 49 11 c0       	mov    0xc0114914,%eax
c010c3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010c3e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c3e6:	8b 0d 14 49 11 c0    	mov    0xc0114914,%ecx
c010c3ec:	6b 55 e4 14          	imul   $0x14,-0x1c(%ebp),%edx
c010c3f0:	01 d1                	add    %edx,%ecx
c010c3f2:	39 c8                	cmp    %ecx,%eax
c010c3f4:	0f 83 27 00 00 00    	jae    c010c421 <alloc_check+0x971>
        SetPageReserved(p);
c010c3fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c3fd:	83 c0 04             	add    $0x4,%eax
c010c400:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010c407:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c40a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c40d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010c410:	0f ab 08             	bts    %ecx,(%eax)
    for (struct Page *p = buddy_physical; p < buddy_physical + buddy_physical_size_store; p++)
c010c413:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c416:	83 c0 14             	add    $0x14,%eax
c010c419:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010c41c:	e9 c2 ff ff ff       	jmp    c010c3e3 <alloc_check+0x933>
    buddy_init();
c010c421:	e8 5a ab ff ff       	call   c0106f80 <buddy_init>
    buddy_init_memmap(buddy_physical, buddy_physical_size_store);
c010c426:	a1 14 49 11 c0       	mov    0xc0114914,%eax
c010c42b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010c42e:	89 04 24             	mov    %eax,(%esp)
c010c431:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c435:	e8 76 ab ff ff       	call   c0106fb0 <buddy_init_memmap>
}
c010c43a:	81 c4 f4 00 00 00    	add    $0xf4,%esp
c010c440:	5e                   	pop    %esi
c010c441:	5d                   	pop    %ebp
c010c442:	c3                   	ret    
c010c443:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010c44a:	84 00 00 00 00 00 

c010c450 <page_ref>:
page_ref(struct Page *page) {
c010c450:	55                   	push   %ebp
c010c451:	89 e5                	mov    %esp,%ebp
c010c453:	50                   	push   %eax
c010c454:	8b 45 08             	mov    0x8(%ebp),%eax
c010c457:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
c010c45a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c45d:	8b 00                	mov    (%eax),%eax
c010c45f:	83 c4 04             	add    $0x4,%esp
c010c462:	5d                   	pop    %ebp
c010c463:	c3                   	ret    
c010c464:	66 90                	xchg   %ax,%ax
c010c466:	66 90                	xchg   %ax,%ax
c010c468:	66 90                	xchg   %ax,%ax
c010c46a:	66 90                	xchg   %ax,%ax
c010c46c:	66 90                	xchg   %ax,%ax
c010c46e:	66 90                	xchg   %ax,%ax

c010c470 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c010c470:	55                   	push   %ebp
c010c471:	89 e5                	mov    %esp,%ebp
c010c473:	50                   	push   %eax
c010c474:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    list_init(&free_list);
c010c47a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010c47d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c480:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010c483:	89 41 04             	mov    %eax,0x4(%ecx)
c010c486:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010c489:	89 01                	mov    %eax,(%ecx)
    nr_free = 0;
c010c48b:	c7 05 38 49 11 c0 00 	movl   $0x0,0xc0114938
c010c492:	00 00 00 
}
c010c495:	83 c4 04             	add    $0x4,%esp
c010c498:	5d                   	pop    %ebp
c010c499:	c3                   	ret    
c010c49a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c010c4a0 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010c4a0:	55                   	push   %ebp
c010c4a1:	89 e5                	mov    %esp,%ebp
c010c4a3:	56                   	push   %esi
c010c4a4:	83 ec 64             	sub    $0x64,%esp
c010c4a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c4ad:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c010c4b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    assert(n > 0);
c010c4b3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010c4b7:	0f 87 32 00 00 00    	ja     c010c4ef <default_init_memmap+0x4f>
c010c4bd:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010c4c3:	b9 46 00 00 00       	mov    $0x46,%ecx
c010c4c8:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c4ce:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c010c4d4:	89 04 24             	mov    %eax,(%esp)
c010c4d7:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010c4de:	00 
c010c4df:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c4e3:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c4e7:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010c4ea:	e8 61 3f ff ff       	call   c0100450 <__panic>
c010c4ef:	e9 00 00 00 00       	jmp    c010c4f4 <default_init_memmap+0x54>
    struct Page *p = base;
c010c4f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c4f7:	89 45 c0             	mov    %eax,-0x40(%ebp)
    for (; p != base + n; p ++) {
c010c4fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c4fd:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010c500:	6b 55 c4 14          	imul   $0x14,-0x3c(%ebp),%edx
c010c504:	01 d1                	add    %edx,%ecx
c010c506:	39 c8                	cmp    %ecx,%eax
c010c508:	0f 84 aa 00 00 00    	je     c010c5b8 <default_init_memmap+0x118>
        assert(PageReserved(p));
c010c50e:	e9 00 00 00 00       	jmp    c010c513 <default_init_memmap+0x73>
c010c513:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c516:	83 c0 04             	add    $0x4,%eax
c010c519:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c010c520:	89 45 d0             	mov    %eax,-0x30(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010c523:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c526:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010c529:	0f a3 08             	bt     %ecx,(%eax)
c010c52c:	19 c0                	sbb    %eax,%eax
c010c52e:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return oldbit != 0;
c010c531:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010c535:	0f 95 c2             	setne  %dl
c010c538:	80 e2 01             	and    $0x1,%dl
c010c53b:	0f b6 c2             	movzbl %dl,%eax
c010c53e:	83 f8 00             	cmp    $0x0,%eax
c010c541:	0f 85 32 00 00 00    	jne    c010c579 <default_init_memmap+0xd9>
c010c547:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010c54d:	b9 49 00 00 00       	mov    $0x49,%ecx
c010c552:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c558:	8d 35 e4 00 11 c0    	lea    0xc01100e4,%esi
c010c55e:	89 04 24             	mov    %eax,(%esp)
c010c561:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010c568:	00 
c010c569:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c56d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c571:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c010c574:	e8 d7 3e ff ff       	call   c0100450 <__panic>
c010c579:	e9 00 00 00 00       	jmp    c010c57e <default_init_memmap+0xde>
c010c57e:	31 c0                	xor    %eax,%eax
        p->flags = p->property = 0;
c010c580:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010c583:	c7 41 08 00 00 00 00 	movl   $0x0,0x8(%ecx)
c010c58a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010c58d:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
c010c594:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010c597:	89 0c 24             	mov    %ecx,(%esp)
c010c59a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c5a1:	00 
c010c5a2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010c5a5:	e8 16 10 00 00       	call   c010d5c0 <set_page_ref>
    for (; p != base + n; p ++) {
c010c5aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5ad:	83 c0 14             	add    $0x14,%eax
c010c5b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010c5b3:	e9 42 ff ff ff       	jmp    c010c4fa <default_init_memmap+0x5a>
    }
    base->property = n;
c010c5b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c5bb:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010c5be:	89 41 08             	mov    %eax,0x8(%ecx)
    SetPageProperty(base);
c010c5c1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c5c4:	83 c0 04             	add    $0x4,%eax
c010c5c7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c010c5ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010c5d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c5d4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c5d7:	0f ab 08             	bts    %ecx,(%eax)
c010c5da:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    nr_free += n;
c010c5e0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c5e3:	03 0d 38 49 11 c0    	add    0xc0114938,%ecx
c010c5e9:	89 0d 38 49 11 c0    	mov    %ecx,0xc0114938
    list_add(&free_list, &(base->page_link));
c010c5ef:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010c5f2:	83 c1 0c             	add    $0xc,%ecx
c010c5f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c5f8:	89 4d e0             	mov    %ecx,-0x20(%ebp)
    list_add_after(listelm, elm);
c010c5fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5fe:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010c601:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c604:	89 4d e8             	mov    %ecx,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c010c607:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c60a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c60d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c610:	8b 52 04             	mov    0x4(%edx),%edx
c010c613:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c616:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010c619:	89 55 f0             	mov    %edx,-0x10(%ebp)
    prev->next = next->prev = elm;
c010c61c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c61f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c622:	89 01                	mov    %eax,(%ecx)
c010c624:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010c627:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c010c62a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c62d:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010c630:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010c633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c636:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010c639:	89 01                	mov    %eax,(%ecx)
}
c010c63b:	83 c4 64             	add    $0x64,%esp
c010c63e:	5e                   	pop    %esi
c010c63f:	5d                   	pop    %ebp
c010c640:	c3                   	ret    
c010c641:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010c648:	0f 1f 84 00 00 00 00 
c010c64f:	00 

c010c650 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010c650:	55                   	push   %ebp
c010c651:	89 e5                	mov    %esp,%ebp
c010c653:	56                   	push   %esi
c010c654:	83 ec 74             	sub    $0x74,%esp
c010c657:	8b 45 08             	mov    0x8(%ebp),%eax
c010c65a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
    assert(n > 0);
c010c65d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
c010c661:	0f 87 32 00 00 00    	ja     c010c699 <default_alloc_pages+0x49>
c010c667:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010c66d:	b9 55 00 00 00       	mov    $0x55,%ecx
c010c672:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c678:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c010c67e:	89 04 24             	mov    %eax,(%esp)
c010c681:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010c688:	00 
c010c689:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c68d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c691:	89 4d a0             	mov    %ecx,-0x60(%ebp)
c010c694:	e8 b7 3d ff ff       	call   c0100450 <__panic>
c010c699:	e9 00 00 00 00       	jmp    c010c69e <default_alloc_pages+0x4e>
    if (n > nr_free) {
c010c69e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c6a1:	3b 05 38 49 11 c0    	cmp    0xc0114938,%eax
c010c6a7:	0f 86 0c 00 00 00    	jbe    c010c6b9 <default_alloc_pages+0x69>
        return NULL;
c010c6ad:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c010c6b4:	e9 5c 01 00 00       	jmp    c010c815 <default_alloc_pages+0x1c5>
c010c6b9:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    }
    struct Page *page = NULL;
c010c6bf:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
    list_entry_t *le = &free_list;
c010c6c6:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010c6c9:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while ((le = list_next(le)) != &free_list) {
c010c6cf:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c010c6d2:	89 4d bc             	mov    %ecx,-0x44(%ebp)
    return listelm->next;
c010c6d5:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010c6d8:	8b 49 04             	mov    0x4(%ecx),%ecx
c010c6db:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c010c6de:	39 c1                	cmp    %eax,%ecx
c010c6e0:	0f 84 30 00 00 00    	je     c010c716 <default_alloc_pages+0xc6>
c010c6e6:	31 c0                	xor    %eax,%eax
c010c6e8:	89 c1                	mov    %eax,%ecx
c010c6ea:	83 c1 0c             	add    $0xc,%ecx
c010c6ed:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
c010c6ef:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c010c6f2:	01 c1                	add    %eax,%ecx
c010c6f4:	89 4d a8             	mov    %ecx,-0x58(%ebp)
        if (p->property >= n) {
c010c6f7:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010c6fa:	8b 40 08             	mov    0x8(%eax),%eax
c010c6fd:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c700:	0f 82 0b 00 00 00    	jb     c010c711 <default_alloc_pages+0xc1>
            page = p;
c010c706:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010c709:	89 45 b0             	mov    %eax,-0x50(%ebp)
            break;
c010c70c:	e9 05 00 00 00       	jmp    c010c716 <default_alloc_pages+0xc6>
    while ((le = list_next(le)) != &free_list) {
c010c711:	e9 b3 ff ff ff       	jmp    c010c6c9 <default_alloc_pages+0x79>
        }
    }
    if (page != NULL) {
c010c716:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c010c71a:	0f 84 ef 00 00 00    	je     c010c80f <default_alloc_pages+0x1bf>
        list_del(&(page->page_link));
c010c720:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c723:	83 c0 0c             	add    $0xc,%eax
c010c726:	89 45 c8             	mov    %eax,-0x38(%ebp)
    __list_del(listelm->prev, listelm->next);
c010c729:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c72c:	8b 00                	mov    (%eax),%eax
c010c72e:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010c731:	8b 49 04             	mov    0x4(%ecx),%ecx
c010c734:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c737:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    prev->next = next;
c010c73a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c73d:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010c740:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
c010c743:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c746:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010c749:	89 01                	mov    %eax,(%ecx)
        if (page->property > n) {
c010c74b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c74e:	8b 40 08             	mov    0x8(%eax),%eax
c010c751:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c754:	0f 86 8b 00 00 00    	jbe    c010c7e5 <default_alloc_pages+0x195>
            struct Page *p = page + n;
c010c75a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c75d:	6b 4d b4 14          	imul   $0x14,-0x4c(%ebp),%ecx
c010c761:	01 c8                	add    %ecx,%eax
c010c763:	89 45 a4             	mov    %eax,-0x5c(%ebp)
            p->property = page->property - n;
c010c766:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c769:	8b 40 08             	mov    0x8(%eax),%eax
c010c76c:	2b 45 b4             	sub    -0x4c(%ebp),%eax
c010c76f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010c772:	89 41 08             	mov    %eax,0x8(%ecx)
            SetPageProperty(p);
c010c775:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010c778:	83 c0 04             	add    $0x4,%eax
c010c77b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
c010c782:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c788:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010c78b:	0f ab 08             	bts    %ecx,(%eax)
            list_add(list_prev(le), &(p->page_link));
c010c78e:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010c791:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->prev;
c010c794:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c797:	8b 00                	mov    (%eax),%eax
c010c799:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010c79c:	83 c1 0c             	add    $0xc,%ecx
c010c79f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c7a2:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
    list_add_after(listelm, elm);
c010c7a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7a8:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010c7ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c7ae:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    __list_add(elm, listelm, listelm->next);
c010c7b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7b4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010c7b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c7ba:	8b 52 04             	mov    0x4(%edx),%edx
c010c7bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c7c0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c7c3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    prev->next = next->prev = elm;
c010c7c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7c9:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010c7cc:	89 01                	mov    %eax,(%ecx)
c010c7ce:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010c7d1:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c010c7d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c7d7:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c7da:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010c7dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7e0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c7e3:	89 01                	mov    %eax,(%ecx)
        }
        nr_free -= n;
c010c7e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c7e8:	8b 0d 38 49 11 c0    	mov    0xc0114938,%ecx
c010c7ee:	29 c1                	sub    %eax,%ecx
c010c7f0:	89 0d 38 49 11 c0    	mov    %ecx,0xc0114938
        ClearPageProperty(page);
c010c7f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c7f9:	83 c0 04             	add    $0x4,%eax
c010c7fc:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010c803:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010c806:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c809:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010c80c:	0f b3 08             	btr    %ecx,(%eax)
    }
    return page;
c010c80f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c812:	89 45 b8             	mov    %eax,-0x48(%ebp)
}
c010c815:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010c818:	83 c4 74             	add    $0x74,%esp
c010c81b:	5e                   	pop    %esi
c010c81c:	5d                   	pop    %ebp
c010c81d:	c3                   	ret    
c010c81e:	66 90                	xchg   %ax,%ax

c010c820 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010c820:	55                   	push   %ebp
c010c821:	89 e5                	mov    %esp,%ebp
c010c823:	56                   	push   %esi
c010c824:	81 ec b4 00 00 00    	sub    $0xb4,%esp
c010c82a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c82d:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c830:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
c010c833:	89 45 80             	mov    %eax,-0x80(%ebp)
    assert(n > 0);
c010c836:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
c010c83a:	0f 87 35 00 00 00    	ja     c010c875 <default_free_pages+0x55>
c010c840:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010c846:	b9 72 00 00 00       	mov    $0x72,%ecx
c010c84b:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c851:	8d 35 d7 00 11 c0    	lea    0xc01100d7,%esi
c010c857:	89 04 24             	mov    %eax,(%esp)
c010c85a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010c861:	00 
c010c862:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c866:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c86a:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
c010c870:	e8 db 3b ff ff       	call   c0100450 <__panic>
c010c875:	e9 00 00 00 00       	jmp    c010c87a <default_free_pages+0x5a>
    struct Page *p = base;
c010c87a:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010c87d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
    for (; p != base + n; p ++) {
c010c883:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010c889:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010c88c:	6b 55 80 14          	imul   $0x14,-0x80(%ebp),%edx
c010c890:	01 d1                	add    %edx,%ecx
c010c892:	39 c8                	cmp    %ecx,%eax
c010c894:	0f 84 ec 00 00 00    	je     c010c986 <default_free_pages+0x166>
        assert(!PageReserved(p) && !PageProperty(p));
c010c89a:	e9 00 00 00 00       	jmp    c010c89f <default_free_pages+0x7f>
c010c89f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010c8a5:	83 c0 04             	add    $0x4,%eax
c010c8a8:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010c8af:	89 45 8c             	mov    %eax,-0x74(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010c8b2:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010c8b5:	8b 4d 90             	mov    -0x70(%ebp),%ecx
c010c8b8:	0f a3 08             	bt     %ecx,(%eax)
c010c8bb:	19 c0                	sbb    %eax,%eax
c010c8bd:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c010c8c0:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c010c8c4:	0f 95 c2             	setne  %dl
c010c8c7:	80 e2 01             	and    $0x1,%dl
c010c8ca:	0f b6 c2             	movzbl %dl,%eax
c010c8cd:	83 f8 00             	cmp    $0x0,%eax
c010c8d0:	0f 85 37 00 00 00    	jne    c010c90d <default_free_pages+0xed>
c010c8d6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010c8dc:	83 c0 04             	add    $0x4,%eax
c010c8df:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
c010c8e6:	89 45 98             	mov    %eax,-0x68(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010c8e9:	8b 45 98             	mov    -0x68(%ebp),%eax
c010c8ec:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010c8ef:	0f a3 08             	bt     %ecx,(%eax)
c010c8f2:	19 c0                	sbb    %eax,%eax
c010c8f4:	89 45 94             	mov    %eax,-0x6c(%ebp)
    return oldbit != 0;
c010c8f7:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
c010c8fb:	0f 95 c2             	setne  %dl
c010c8fe:	80 e2 01             	and    $0x1,%dl
c010c901:	0f b6 c2             	movzbl %dl,%eax
c010c904:	83 f8 00             	cmp    $0x0,%eax
c010c907:	0f 84 35 00 00 00    	je     c010c942 <default_free_pages+0x122>
c010c90d:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010c913:	b9 75 00 00 00       	mov    $0x75,%ecx
c010c918:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010c91e:	8d 35 66 04 11 c0    	lea    0xc0110466,%esi
c010c924:	89 04 24             	mov    %eax,(%esp)
c010c927:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c010c92e:	00 
c010c92f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c933:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c937:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c010c93d:	e8 0e 3b ff ff       	call   c0100450 <__panic>
c010c942:	e9 00 00 00 00       	jmp    c010c947 <default_free_pages+0x127>
c010c947:	31 c0                	xor    %eax,%eax
        p->flags = 0;
c010c949:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c010c94f:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)
        set_page_ref(p, 0);
c010c956:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c010c95c:	89 0c 24             	mov    %ecx,(%esp)
c010c95f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c966:	00 
c010c967:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010c96d:	e8 4e 0c 00 00       	call   c010d5c0 <set_page_ref>
    for (; p != base + n; p ++) {
c010c972:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010c978:	83 c0 14             	add    $0x14,%eax
c010c97b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010c981:	e9 fd fe ff ff       	jmp    c010c883 <default_free_pages+0x63>
    }
    base->property = n;
c010c986:	8b 45 80             	mov    -0x80(%ebp),%eax
c010c989:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010c98c:	89 41 08             	mov    %eax,0x8(%ecx)
    SetPageProperty(base);
c010c98f:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010c992:	83 c0 04             	add    $0x4,%eax
c010c995:	c7 45 a4 01 00 00 00 	movl   $0x1,-0x5c(%ebp)
c010c99c:	89 45 a0             	mov    %eax,-0x60(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010c99f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010c9a2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010c9a5:	0f ab 08             	bts    %ecx,(%eax)
c010c9a8:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    // Find insert location
    list_entry_t *next_entry = list_next(&free_list);
c010c9ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return listelm->next;
c010c9b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010c9b4:	8b 40 04             	mov    0x4(%eax),%eax
c010c9b7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c010c9bd:	31 c0                	xor    %eax,%eax
c010c9bf:	88 c1                	mov    %al,%cl
c010c9c1:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while (next_entry != &free_list && le2page(next_entry, page_link) < base)
c010c9c7:	39 85 78 ff ff ff    	cmp    %eax,-0x88(%ebp)
c010c9cd:	88 8d 63 ff ff ff    	mov    %cl,-0x9d(%ebp)
c010c9d3:	0f 84 1d 00 00 00    	je     c010c9f6 <default_free_pages+0x1d6>
c010c9d9:	31 c0                	xor    %eax,%eax
c010c9db:	89 c1                	mov    %eax,%ecx
c010c9dd:	83 c1 0c             	add    $0xc,%ecx
c010c9e0:	29 c8                	sub    %ecx,%eax
c010c9e2:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c010c9e8:	01 c1                	add    %eax,%ecx
c010c9ea:	3b 4d 84             	cmp    -0x7c(%ebp),%ecx
c010c9ed:	0f 92 c2             	setb   %dl
c010c9f0:	88 95 63 ff ff ff    	mov    %dl,-0x9d(%ebp)
c010c9f6:	8a 85 63 ff ff ff    	mov    -0x9d(%ebp),%al
c010c9fc:	a8 01                	test   $0x1,%al
c010c9fe:	0f 85 05 00 00 00    	jne    c010ca09 <default_free_pages+0x1e9>
c010ca04:	e9 1a 00 00 00       	jmp    c010ca23 <default_free_pages+0x203>
        next_entry = list_next(next_entry);
c010ca09:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010ca0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ca12:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ca15:	8b 40 04             	mov    0x4(%eax),%eax
c010ca18:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
    while (next_entry != &free_list && le2page(next_entry, page_link) < base)
c010ca1e:	e9 9a ff ff ff       	jmp    c010c9bd <default_free_pages+0x19d>
c010ca23:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    // Merge block
    list_entry_t *prev_entry = list_prev(next_entry);
c010ca29:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c010ca2f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
    return listelm->prev;
c010ca32:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010ca35:	8b 09                	mov    (%ecx),%ecx
c010ca37:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
    list_entry_t *insert_entry = prev_entry;
c010ca3d:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c010ca43:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
    if (prev_entry != &free_list) {
c010ca49:	39 85 74 ff ff ff    	cmp    %eax,-0x8c(%ebp)
c010ca4f:	0f 84 aa 00 00 00    	je     c010caff <default_free_pages+0x2df>
c010ca55:	31 c0                	xor    %eax,%eax
c010ca57:	89 c1                	mov    %eax,%ecx
c010ca59:	83 c1 0c             	add    $0xc,%ecx
c010ca5c:	29 c8                	sub    %ecx,%eax
        p = le2page(prev_entry, page_link);
c010ca5e:	8b 8d 74 ff ff ff    	mov    -0x8c(%ebp),%ecx
c010ca64:	01 c1                	add    %eax,%ecx
c010ca66:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
        if (p + p->property == base) {
c010ca6c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010ca72:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c010ca78:	6b 49 08 14          	imul   $0x14,0x8(%ecx),%ecx
c010ca7c:	01 c8                	add    %ecx,%eax
c010ca7e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
c010ca81:	0f 85 73 00 00 00    	jne    c010cafa <default_free_pages+0x2da>
            p->property += base->property;
c010ca87:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010ca8a:	8b 40 08             	mov    0x8(%eax),%eax
c010ca8d:	8b 8d 7c ff ff ff    	mov    -0x84(%ebp),%ecx
c010ca93:	03 41 08             	add    0x8(%ecx),%eax
c010ca96:	89 41 08             	mov    %eax,0x8(%ecx)
            ClearPageProperty(base);
c010ca99:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010ca9c:	83 c0 04             	add    $0x4,%eax
c010ca9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010caa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010caa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010caaf:	0f b3 08             	btr    %ecx,(%eax)
            base = p;
c010cab2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010cab8:	89 45 84             	mov    %eax,-0x7c(%ebp)
            insert_entry = list_prev(prev_entry);
c010cabb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010cac1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cac4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cac7:	8b 00                	mov    (%eax),%eax
c010cac9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
            list_del(prev_entry);
c010cacf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c010cad5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_del(listelm->prev, listelm->next);
c010cad8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cadb:	8b 00                	mov    (%eax),%eax
c010cadd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010cae0:	8b 49 04             	mov    0x4(%ecx),%ecx
c010cae3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cae6:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
    prev->next = next;
c010cae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010caec:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010caef:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
c010caf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010caf5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010caf8:	89 01                	mov    %eax,(%ecx)
        }
    }
c010cafa:	e9 00 00 00 00       	jmp    c010caff <default_free_pages+0x2df>
c010caff:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    if (next_entry != &free_list) {
c010cb05:	39 85 78 ff ff ff    	cmp    %eax,-0x88(%ebp)
c010cb0b:	0f 84 8d 00 00 00    	je     c010cb9e <default_free_pages+0x37e>
c010cb11:	31 c0                	xor    %eax,%eax
c010cb13:	89 c1                	mov    %eax,%ecx
c010cb15:	83 c1 0c             	add    $0xc,%ecx
c010cb18:	29 c8                	sub    %ecx,%eax
        p = le2page(next_entry, page_link);
c010cb1a:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c010cb20:	01 c1                	add    %eax,%ecx
c010cb22:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
        if (base + base->property == p) {
c010cb28:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010cb2b:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010cb2e:	6b 49 08 14          	imul   $0x14,0x8(%ecx),%ecx
c010cb32:	01 c8                	add    %ecx,%eax
c010cb34:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
c010cb3a:	0f 85 59 00 00 00    	jne    c010cb99 <default_free_pages+0x379>
            base->property += p->property;
c010cb40:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010cb46:	8b 40 08             	mov    0x8(%eax),%eax
c010cb49:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010cb4c:	03 41 08             	add    0x8(%ecx),%eax
c010cb4f:	89 41 08             	mov    %eax,0x8(%ecx)
            ClearPageProperty(p);
c010cb52:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010cb58:	83 c0 04             	add    $0x4,%eax
c010cb5b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c010cb62:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010cb65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cb68:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010cb6b:	0f b3 08             	btr    %ecx,(%eax)
            list_del(next_entry);
c010cb6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010cb74:	89 45 c8             	mov    %eax,-0x38(%ebp)
    __list_del(listelm->prev, listelm->next);
c010cb77:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cb7a:	8b 00                	mov    (%eax),%eax
c010cb7c:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010cb7f:	8b 49 04             	mov    0x4(%ecx),%ecx
c010cb82:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010cb85:	89 4d cc             	mov    %ecx,-0x34(%ebp)
    prev->next = next;
c010cb88:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cb8b:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010cb8e:	89 41 04             	mov    %eax,0x4(%ecx)
    next->prev = prev;
c010cb91:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cb94:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010cb97:	89 01                	mov    %eax,(%ecx)
        }
    }
c010cb99:	e9 00 00 00 00       	jmp    c010cb9e <default_free_pages+0x37e>
    // Insert into free list
    nr_free += n;
c010cb9e:	8b 45 80             	mov    -0x80(%ebp),%eax
c010cba1:	03 05 38 49 11 c0    	add    0xc0114938,%eax
c010cba7:	a3 38 49 11 c0       	mov    %eax,0xc0114938
    list_add(insert_entry, &(base->page_link));
c010cbac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c010cbb2:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010cbb5:	83 c1 0c             	add    $0xc,%ecx
c010cbb8:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010cbbb:	89 4d ac             	mov    %ecx,-0x54(%ebp)
    list_add_after(listelm, elm);
c010cbbe:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010cbc1:	8b 4d ac             	mov    -0x54(%ebp),%ecx
c010cbc4:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010cbc7:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    __list_add(elm, listelm, listelm->next);
c010cbca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cbcd:	8b 4d b8             	mov    -0x48(%ebp),%ecx
c010cbd0:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010cbd3:	8b 52 04             	mov    0x4(%edx),%edx
c010cbd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010cbd9:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010cbdc:	89 55 bc             	mov    %edx,-0x44(%ebp)
    prev->next = next->prev = elm;
c010cbdf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cbe2:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010cbe5:	89 01                	mov    %eax,(%ecx)
c010cbe7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010cbea:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->next = next;
c010cbed:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010cbf0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010cbf3:	89 41 04             	mov    %eax,0x4(%ecx)
    elm->prev = prev;
c010cbf6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cbf9:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010cbfc:	89 01                	mov    %eax,(%ecx)
}
c010cbfe:	81 c4 b4 00 00 00    	add    $0xb4,%esp
c010cc04:	5e                   	pop    %esi
c010cc05:	5d                   	pop    %ebp
c010cc06:	c3                   	ret    
c010cc07:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c010cc0e:	00 00 

c010cc10 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c010cc10:	55                   	push   %ebp
c010cc11:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010cc13:	a1 38 49 11 c0       	mov    0xc0114938,%eax
c010cc18:	5d                   	pop    %ebp
c010cc19:	c3                   	ret    
c010cc1a:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)

c010cc20 <default_check>:
}

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010cc20:	55                   	push   %ebp
c010cc21:	89 e5                	mov    %esp,%ebp
c010cc23:	56                   	push   %esi
c010cc24:	81 ec 24 01 00 00    	sub    $0x124,%esp
c010cc2a:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    int count = 0, total = 0;
c010cc30:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
c010cc37:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
    list_entry_t *le = &free_list;
c010cc3e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010cc41:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while ((le = list_next(le)) != &free_list) {
c010cc47:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010cc4a:	89 4d b0             	mov    %ecx,-0x50(%ebp)
    return listelm->next;
c010cc4d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c010cc50:	8b 49 04             	mov    0x4(%ecx),%ecx
c010cc53:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c010cc56:	39 c1                	cmp    %eax,%ecx
c010cc58:	0f 84 99 00 00 00    	je     c010ccf7 <default_check+0xd7>
c010cc5e:	31 c0                	xor    %eax,%eax
c010cc60:	89 c1                	mov    %eax,%ecx
c010cc62:	83 c1 0c             	add    $0xc,%ecx
c010cc65:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
c010cc67:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010cc6a:	01 c1                	add    %eax,%ecx
c010cc6c:	89 4d a0             	mov    %ecx,-0x60(%ebp)
        assert(PageProperty(p));
c010cc6f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010cc72:	83 c0 04             	add    $0x4,%eax
c010cc75:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c010cc7c:	89 45 c8             	mov    %eax,-0x38(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010cc7f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cc82:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010cc85:	0f a3 08             	bt     %ecx,(%eax)
c010cc88:	19 c0                	sbb    %eax,%eax
c010cc8a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return oldbit != 0;
c010cc8d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010cc91:	0f 95 c2             	setne  %dl
c010cc94:	80 e2 01             	and    $0x1,%dl
c010cc97:	0f b6 c2             	movzbl %dl,%eax
c010cc9a:	83 f8 00             	cmp    $0x0,%eax
c010cc9d:	0f 85 35 00 00 00    	jne    c010ccd8 <default_check+0xb8>
c010cca3:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cca9:	b9 d9 00 00 00       	mov    $0xd9,%ecx
c010ccae:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010ccb4:	8d 35 7b 04 11 c0    	lea    0xc011047b,%esi
c010ccba:	89 04 24             	mov    %eax,(%esp)
c010ccbd:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c010ccc4:	00 
c010ccc5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ccc9:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cccd:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c010ccd3:	e8 78 37 ff ff       	call   c0100450 <__panic>
c010ccd8:	e9 00 00 00 00       	jmp    c010ccdd <default_check+0xbd>
        count ++, total += p->property;
c010ccdd:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010cce0:	83 c0 01             	add    $0x1,%eax
c010cce3:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010cce6:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010cce9:	8b 40 08             	mov    0x8(%eax),%eax
c010ccec:	03 45 a8             	add    -0x58(%ebp),%eax
c010ccef:	89 45 a8             	mov    %eax,-0x58(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010ccf2:	e9 4a ff ff ff       	jmp    c010cc41 <default_check+0x21>
    }
    assert(total == nr_free_pages());
c010ccf7:	e9 00 00 00 00       	jmp    c010ccfc <default_check+0xdc>
c010ccfc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ccff:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c010cd05:	e8 06 64 ff ff       	call   c0103110 <nr_free_pages>
c010cd0a:	8b 8d 78 ff ff ff    	mov    -0x88(%ebp),%ecx
c010cd10:	39 c1                	cmp    %eax,%ecx
c010cd12:	0f 84 35 00 00 00    	je     c010cd4d <default_check+0x12d>
c010cd18:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cd1e:	b9 dc 00 00 00       	mov    $0xdc,%ecx
c010cd23:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cd29:	8d 35 0f 02 11 c0    	lea    0xc011020f,%esi
c010cd2f:	89 04 24             	mov    %eax,(%esp)
c010cd32:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010cd39:	00 
c010cd3a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cd3e:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cd42:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%ebp)
c010cd48:	e8 03 37 ff ff       	call   c0100450 <__panic>
c010cd4d:	e9 00 00 00 00       	jmp    c010cd52 <default_check+0x132>

    basic_check();
c010cd52:	e8 89 08 00 00       	call   c010d5e0 <basic_check>
c010cd57:	b8 05 00 00 00       	mov    $0x5,%eax

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010cd5c:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010cd63:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c010cd69:	e8 a2 62 ff ff       	call   c0103010 <alloc_pages>
c010cd6e:	89 45 9c             	mov    %eax,-0x64(%ebp)
    assert(p0 != NULL);
c010cd71:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
c010cd75:	0f 85 35 00 00 00    	jne    c010cdb0 <default_check+0x190>
c010cd7b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cd81:	b9 e1 00 00 00       	mov    $0xe1,%ecx
c010cd86:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cd8c:	8d 35 6b fd 10 c0    	lea    0xc010fd6b,%esi
c010cd92:	89 04 24             	mov    %eax,(%esp)
c010cd95:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c010cd9c:	00 
c010cd9d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cda1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cda5:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%ebp)
c010cdab:	e8 a0 36 ff ff       	call   c0100450 <__panic>
c010cdb0:	e9 00 00 00 00       	jmp    c010cdb5 <default_check+0x195>
    assert(!PageProperty(p0));
c010cdb5:	e9 00 00 00 00       	jmp    c010cdba <default_check+0x19a>
c010cdba:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cdbd:	83 c0 04             	add    $0x4,%eax
c010cdc0:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c010cdc7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010cdca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cdcd:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010cdd0:	0f a3 08             	bt     %ecx,(%eax)
c010cdd3:	19 c0                	sbb    %eax,%eax
c010cdd5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    return oldbit != 0;
c010cdd8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010cddc:	0f 95 c2             	setne  %dl
c010cddf:	80 e2 01             	and    $0x1,%dl
c010cde2:	0f b6 c2             	movzbl %dl,%eax
c010cde5:	83 f8 00             	cmp    $0x0,%eax
c010cde8:	0f 84 35 00 00 00    	je     c010ce23 <default_check+0x203>
c010cdee:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cdf4:	b9 e2 00 00 00       	mov    $0xe2,%ecx
c010cdf9:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cdff:	8d 35 8b 04 11 c0    	lea    0xc011048b,%esi
c010ce05:	89 04 24             	mov    %eax,(%esp)
c010ce08:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010ce0f:	00 
c010ce10:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ce14:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010ce18:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c010ce1e:	e8 2d 36 ff ff       	call   c0100450 <__panic>
c010ce23:	e9 00 00 00 00       	jmp    c010ce28 <default_check+0x208>
c010ce28:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax

    list_entry_t free_list_store = free_list;
c010ce2e:	8b 0d 30 49 11 c0    	mov    0xc0114930,%ecx
c010ce34:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c010ce37:	8b 0d 34 49 11 c0    	mov    0xc0114934,%ecx
c010ce3d:	89 4d 8c             	mov    %ecx,-0x74(%ebp)
    list_init(&free_list);
c010ce40:	89 45 dc             	mov    %eax,-0x24(%ebp)
    elm->prev = elm->next = elm;
c010ce43:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ce46:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010ce49:	89 41 04             	mov    %eax,0x4(%ecx)
c010ce4c:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010ce4f:	89 01                	mov    %eax,(%ecx)
c010ce51:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    assert(list_empty(&free_list));
c010ce57:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return list->next == list;
c010ce5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ce5d:	8b 40 04             	mov    0x4(%eax),%eax
c010ce60:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010ce63:	0f 94 c1             	sete   %cl
c010ce66:	80 e1 01             	and    $0x1,%cl
c010ce69:	0f b6 c1             	movzbl %cl,%eax
c010ce6c:	83 f8 00             	cmp    $0x0,%eax
c010ce6f:	0f 85 35 00 00 00    	jne    c010ceaa <default_check+0x28a>
c010ce75:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010ce7b:	b9 e6 00 00 00       	mov    $0xe6,%ecx
c010ce80:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010ce86:	8d 35 1a 06 11 c0    	lea    0xc011061a,%esi
c010ce8c:	89 04 24             	mov    %eax,(%esp)
c010ce8f:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
c010ce96:	00 
c010ce97:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ce9b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010ce9f:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%ebp)
c010cea5:	e8 a6 35 ff ff       	call   c0100450 <__panic>
c010ceaa:	e9 00 00 00 00       	jmp    c010ceaf <default_check+0x28f>
    assert(alloc_page() == NULL);
c010ceaf:	e9 00 00 00 00       	jmp    c010ceb4 <default_check+0x294>
c010ceb4:	b8 01 00 00 00       	mov    $0x1,%eax
c010ceb9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010cec0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c010cec6:	e8 45 61 ff ff       	call   c0103010 <alloc_pages>
c010cecb:	83 f8 00             	cmp    $0x0,%eax
c010cece:	0f 84 35 00 00 00    	je     c010cf09 <default_check+0x2e9>
c010ced4:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010ceda:	b9 e7 00 00 00       	mov    $0xe7,%ecx
c010cedf:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cee5:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010ceeb:	89 04 24             	mov    %eax,(%esp)
c010ceee:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c010cef5:	00 
c010cef6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cefa:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cefe:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
c010cf04:	e8 47 35 ff ff       	call   c0100450 <__panic>
c010cf09:	e9 00 00 00 00       	jmp    c010cf0e <default_check+0x2ee>
c010cf0e:	b8 03 00 00 00       	mov    $0x3,%eax

    unsigned int nr_free_store = nr_free;
c010cf13:	8b 0d 38 49 11 c0    	mov    0xc0114938,%ecx
c010cf19:	89 4d 84             	mov    %ecx,-0x7c(%ebp)
    nr_free = 0;
c010cf1c:	c7 05 38 49 11 c0 00 	movl   $0x0,0xc0114938
c010cf23:	00 00 00 

    free_pages(p0 + 2, 3);
c010cf26:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010cf29:	83 c1 28             	add    $0x28,%ecx
c010cf2c:	89 0c 24             	mov    %ecx,(%esp)
c010cf2f:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010cf36:	00 
c010cf37:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c010cf3d:	e8 7e 61 ff ff       	call   c01030c0 <free_pages>
c010cf42:	b8 04 00 00 00       	mov    $0x4,%eax
    assert(alloc_pages(4) == NULL);
c010cf47:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010cf4e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c010cf54:	e8 b7 60 ff ff       	call   c0103010 <alloc_pages>
c010cf59:	83 f8 00             	cmp    $0x0,%eax
c010cf5c:	0f 84 35 00 00 00    	je     c010cf97 <default_check+0x377>
c010cf62:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cf68:	b9 ed 00 00 00       	mov    $0xed,%ecx
c010cf6d:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cf73:	8d 35 9d 04 11 c0    	lea    0xc011049d,%esi
c010cf79:	89 04 24             	mov    %eax,(%esp)
c010cf7c:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010cf83:	00 
c010cf84:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cf88:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cf8c:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
c010cf92:	e8 b9 34 ff ff       	call   c0100450 <__panic>
c010cf97:	e9 00 00 00 00       	jmp    c010cf9c <default_check+0x37c>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010cf9c:	e9 00 00 00 00       	jmp    c010cfa1 <default_check+0x381>
c010cfa1:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cfa4:	83 c0 28             	add    $0x28,%eax
c010cfa7:	83 c0 04             	add    $0x4,%eax
c010cfaa:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
c010cfb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010cfb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfb7:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010cfba:	0f a3 08             	bt     %ecx,(%eax)
c010cfbd:	19 c0                	sbb    %eax,%eax
c010cfbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return oldbit != 0;
c010cfc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cfc6:	0f 95 c2             	setne  %dl
c010cfc9:	80 e2 01             	and    $0x1,%dl
c010cfcc:	0f b6 c2             	movzbl %dl,%eax
c010cfcf:	83 f8 00             	cmp    $0x0,%eax
c010cfd2:	0f 84 0d 00 00 00    	je     c010cfe5 <default_check+0x3c5>
c010cfd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cfdb:	83 78 30 03          	cmpl   $0x3,0x30(%eax)
c010cfdf:	0f 84 35 00 00 00    	je     c010d01a <default_check+0x3fa>
c010cfe5:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010cfeb:	b9 ee 00 00 00       	mov    $0xee,%ecx
c010cff0:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010cff6:	8d 35 b4 04 11 c0    	lea    0xc01104b4,%esi
c010cffc:	89 04 24             	mov    %eax,(%esp)
c010cfff:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c010d006:	00 
c010d007:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d00b:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d00f:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c010d015:	e8 36 34 ff ff       	call   c0100450 <__panic>
c010d01a:	e9 00 00 00 00       	jmp    c010d01f <default_check+0x3ff>
    assert((p1 = alloc_pages(3)) != NULL);
c010d01f:	e9 00 00 00 00       	jmp    c010d024 <default_check+0x404>
c010d024:	b8 03 00 00 00       	mov    $0x3,%eax
c010d029:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010d030:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c010d036:	e8 d5 5f ff ff       	call   c0103010 <alloc_pages>
c010d03b:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d03e:	83 f8 00             	cmp    $0x0,%eax
c010d041:	0f 85 35 00 00 00    	jne    c010d07c <default_check+0x45c>
c010d047:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d04d:	b9 ef 00 00 00       	mov    $0xef,%ecx
c010d052:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d058:	8d 35 e0 04 11 c0    	lea    0xc01104e0,%esi
c010d05e:	89 04 24             	mov    %eax,(%esp)
c010d061:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010d068:	00 
c010d069:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d06d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d071:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%ebp)
c010d077:	e8 d4 33 ff ff       	call   c0100450 <__panic>
c010d07c:	e9 00 00 00 00       	jmp    c010d081 <default_check+0x461>
    assert(alloc_page() == NULL);
c010d081:	e9 00 00 00 00       	jmp    c010d086 <default_check+0x466>
c010d086:	b8 01 00 00 00       	mov    $0x1,%eax
c010d08b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d092:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c010d098:	e8 73 5f ff ff       	call   c0103010 <alloc_pages>
c010d09d:	83 f8 00             	cmp    $0x0,%eax
c010d0a0:	0f 84 35 00 00 00    	je     c010d0db <default_check+0x4bb>
c010d0a6:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d0ac:	b9 f0 00 00 00       	mov    $0xf0,%ecx
c010d0b1:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d0b7:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010d0bd:	89 04 24             	mov    %eax,(%esp)
c010d0c0:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c010d0c7:	00 
c010d0c8:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0cc:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d0d0:	89 8d 3c ff ff ff    	mov    %ecx,-0xc4(%ebp)
c010d0d6:	e8 75 33 ff ff       	call   c0100450 <__panic>
c010d0db:	e9 00 00 00 00       	jmp    c010d0e0 <default_check+0x4c0>
    assert(p0 + 2 == p1);
c010d0e0:	e9 00 00 00 00       	jmp    c010d0e5 <default_check+0x4c5>
c010d0e5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d0e8:	83 c0 28             	add    $0x28,%eax
c010d0eb:	3b 45 98             	cmp    -0x68(%ebp),%eax
c010d0ee:	0f 84 35 00 00 00    	je     c010d129 <default_check+0x509>
c010d0f4:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d0fa:	b9 f1 00 00 00       	mov    $0xf1,%ecx
c010d0ff:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d105:	8d 35 eb 03 11 c0    	lea    0xc01103eb,%esi
c010d10b:	89 04 24             	mov    %eax,(%esp)
c010d10e:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c010d115:	00 
c010d116:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d11a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d11e:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%ebp)
c010d124:	e8 27 33 ff ff       	call   c0100450 <__panic>
c010d129:	e9 00 00 00 00       	jmp    c010d12e <default_check+0x50e>
c010d12e:	b8 01 00 00 00       	mov    $0x1,%eax

    p2 = p0 + 1;
c010d133:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010d136:	83 c1 14             	add    $0x14,%ecx
c010d139:	89 4d 94             	mov    %ecx,-0x6c(%ebp)
    free_page(p0);
c010d13c:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010d13f:	89 0c 24             	mov    %ecx,(%esp)
c010d142:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d149:	00 
c010d14a:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
c010d150:	e8 6b 5f ff ff       	call   c01030c0 <free_pages>
c010d155:	b8 03 00 00 00       	mov    $0x3,%eax
    free_pages(p1, 3);
c010d15a:	8b 4d 98             	mov    -0x68(%ebp),%ecx
c010d15d:	89 0c 24             	mov    %ecx,(%esp)
c010d160:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010d167:	00 
c010d168:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
c010d16e:	e8 4d 5f ff ff       	call   c01030c0 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c010d173:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d176:	83 c0 04             	add    $0x4,%eax
c010d179:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c010d180:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010d183:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d186:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d189:	0f a3 08             	bt     %ecx,(%eax)
c010d18c:	19 c0                	sbb    %eax,%eax
c010d18e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c010d191:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010d195:	0f 95 c2             	setne  %dl
c010d198:	80 e2 01             	and    $0x1,%dl
c010d19b:	0f b6 c2             	movzbl %dl,%eax
c010d19e:	83 f8 00             	cmp    $0x0,%eax
c010d1a1:	0f 84 0d 00 00 00    	je     c010d1b4 <default_check+0x594>
c010d1a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d1aa:	83 78 08 01          	cmpl   $0x1,0x8(%eax)
c010d1ae:	0f 84 35 00 00 00    	je     c010d1e9 <default_check+0x5c9>
c010d1b4:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d1ba:	b9 f6 00 00 00       	mov    $0xf6,%ecx
c010d1bf:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d1c5:	8d 35 fe 04 11 c0    	lea    0xc01104fe,%esi
c010d1cb:	89 04 24             	mov    %eax,(%esp)
c010d1ce:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c010d1d5:	00 
c010d1d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d1da:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d1de:	89 8d 2c ff ff ff    	mov    %ecx,-0xd4(%ebp)
c010d1e4:	e8 67 32 ff ff       	call   c0100450 <__panic>
c010d1e9:	e9 00 00 00 00       	jmp    c010d1ee <default_check+0x5ce>
    assert(PageProperty(p1) && p1->property == 3);
c010d1ee:	e9 00 00 00 00       	jmp    c010d1f3 <default_check+0x5d3>
c010d1f3:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d1f6:	83 c0 04             	add    $0x4,%eax
c010d1f9:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010d200:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010d203:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010d206:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010d209:	0f a3 08             	bt     %ecx,(%eax)
c010d20c:	19 c0                	sbb    %eax,%eax
c010d20e:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010d211:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010d215:	0f 95 c2             	setne  %dl
c010d218:	80 e2 01             	and    $0x1,%dl
c010d21b:	0f b6 c2             	movzbl %dl,%eax
c010d21e:	83 f8 00             	cmp    $0x0,%eax
c010d221:	0f 84 0d 00 00 00    	je     c010d234 <default_check+0x614>
c010d227:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d22a:	83 78 08 03          	cmpl   $0x3,0x8(%eax)
c010d22e:	0f 84 35 00 00 00    	je     c010d269 <default_check+0x649>
c010d234:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d23a:	b9 f7 00 00 00       	mov    $0xf7,%ecx
c010d23f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d245:	8d 35 24 05 11 c0    	lea    0xc0110524,%esi
c010d24b:	89 04 24             	mov    %eax,(%esp)
c010d24e:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c010d255:	00 
c010d256:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d25a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d25e:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%ebp)
c010d264:	e8 e7 31 ff ff       	call   c0100450 <__panic>
c010d269:	e9 00 00 00 00       	jmp    c010d26e <default_check+0x64e>

    assert((p0 = alloc_page()) == p2 - 1);
c010d26e:	e9 00 00 00 00       	jmp    c010d273 <default_check+0x653>
c010d273:	b8 01 00 00 00       	mov    $0x1,%eax
c010d278:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d27f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
c010d285:	e8 86 5d ff ff       	call   c0103010 <alloc_pages>
c010d28a:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010d28d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010d290:	83 c1 ec             	add    $0xffffffec,%ecx
c010d293:	39 c8                	cmp    %ecx,%eax
c010d295:	0f 84 35 00 00 00    	je     c010d2d0 <default_check+0x6b0>
c010d29b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d2a1:	b9 f9 00 00 00       	mov    $0xf9,%ecx
c010d2a6:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d2ac:	8d 35 4a 05 11 c0    	lea    0xc011054a,%esi
c010d2b2:	89 04 24             	mov    %eax,(%esp)
c010d2b5:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010d2bc:	00 
c010d2bd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d2c1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d2c5:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%ebp)
c010d2cb:	e8 80 31 ff ff       	call   c0100450 <__panic>
c010d2d0:	e9 00 00 00 00       	jmp    c010d2d5 <default_check+0x6b5>
c010d2d5:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
c010d2da:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010d2dd:	89 0c 24             	mov    %ecx,(%esp)
c010d2e0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d2e7:	00 
c010d2e8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
c010d2ee:	e8 cd 5d ff ff       	call   c01030c0 <free_pages>
c010d2f3:	b8 02 00 00 00       	mov    $0x2,%eax
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010d2f8:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010d2ff:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
c010d305:	e8 06 5d ff ff       	call   c0103010 <alloc_pages>
c010d30a:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010d30d:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010d310:	83 c1 14             	add    $0x14,%ecx
c010d313:	39 c8                	cmp    %ecx,%eax
c010d315:	0f 84 35 00 00 00    	je     c010d350 <default_check+0x730>
c010d31b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d321:	b9 fb 00 00 00       	mov    $0xfb,%ecx
c010d326:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d32c:	8d 35 68 05 11 c0    	lea    0xc0110568,%esi
c010d332:	89 04 24             	mov    %eax,(%esp)
c010d335:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010d33c:	00 
c010d33d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d341:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d345:	89 8d 14 ff ff ff    	mov    %ecx,-0xec(%ebp)
c010d34b:	e8 00 31 ff ff       	call   c0100450 <__panic>
c010d350:	e9 00 00 00 00       	jmp    c010d355 <default_check+0x735>
c010d355:	b8 02 00 00 00       	mov    $0x2,%eax

    free_pages(p0, 2);
c010d35a:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010d35d:	89 0c 24             	mov    %ecx,(%esp)
c010d360:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010d367:	00 
c010d368:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
c010d36e:	e8 4d 5d ff ff       	call   c01030c0 <free_pages>
c010d373:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
c010d378:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010d37b:	89 0c 24             	mov    %ecx,(%esp)
c010d37e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d385:	00 
c010d386:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
c010d38c:	e8 2f 5d ff ff       	call   c01030c0 <free_pages>
c010d391:	b8 05 00 00 00       	mov    $0x5,%eax

    assert((p0 = alloc_pages(5)) != NULL);
c010d396:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010d39d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
c010d3a3:	e8 68 5c ff ff       	call   c0103010 <alloc_pages>
c010d3a8:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010d3ab:	83 f8 00             	cmp    $0x0,%eax
c010d3ae:	0f 85 35 00 00 00    	jne    c010d3e9 <default_check+0x7c9>
c010d3b4:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d3ba:	b9 00 01 00 00       	mov    $0x100,%ecx
c010d3bf:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d3c5:	8d 35 88 05 11 c0    	lea    0xc0110588,%esi
c010d3cb:	89 04 24             	mov    %eax,(%esp)
c010d3ce:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c010d3d5:	00 
c010d3d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d3da:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d3de:	89 8d 04 ff ff ff    	mov    %ecx,-0xfc(%ebp)
c010d3e4:	e8 67 30 ff ff       	call   c0100450 <__panic>
c010d3e9:	e9 00 00 00 00       	jmp    c010d3ee <default_check+0x7ce>
    assert(alloc_page() == NULL);
c010d3ee:	e9 00 00 00 00       	jmp    c010d3f3 <default_check+0x7d3>
c010d3f3:	b8 01 00 00 00       	mov    $0x1,%eax
c010d3f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d3ff:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
c010d405:	e8 06 5c ff ff       	call   c0103010 <alloc_pages>
c010d40a:	83 f8 00             	cmp    $0x0,%eax
c010d40d:	0f 84 35 00 00 00    	je     c010d448 <default_check+0x828>
c010d413:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d419:	b9 01 01 00 00       	mov    $0x101,%ecx
c010d41e:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d424:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010d42a:	89 04 24             	mov    %eax,(%esp)
c010d42d:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010d434:	00 
c010d435:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d439:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d43d:	89 8d fc fe ff ff    	mov    %ecx,-0x104(%ebp)
c010d443:	e8 08 30 ff ff       	call   c0100450 <__panic>
c010d448:	e9 00 00 00 00       	jmp    c010d44d <default_check+0x82d>

    assert(nr_free == 0);
c010d44d:	e9 00 00 00 00       	jmp    c010d452 <default_check+0x832>
c010d452:	83 3d 38 49 11 c0 00 	cmpl   $0x0,0xc0114938
c010d459:	0f 84 35 00 00 00    	je     c010d494 <default_check+0x874>
c010d45f:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d465:	b9 03 01 00 00       	mov    $0x103,%ecx
c010d46a:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d470:	8d 35 13 04 11 c0    	lea    0xc0110413,%esi
c010d476:	89 04 24             	mov    %eax,(%esp)
c010d479:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c010d480:	00 
c010d481:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d485:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d489:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%ebp)
c010d48f:	e8 bc 2f ff ff       	call   c0100450 <__panic>
c010d494:	e9 00 00 00 00       	jmp    c010d499 <default_check+0x879>
c010d499:	b8 05 00 00 00       	mov    $0x5,%eax
    nr_free = nr_free_store;
c010d49e:	8b 4d 84             	mov    -0x7c(%ebp),%ecx
c010d4a1:	89 0d 38 49 11 c0    	mov    %ecx,0xc0114938

    free_list = free_list_store;
c010d4a7:	8b 4d 88             	mov    -0x78(%ebp),%ecx
c010d4aa:	89 0d 30 49 11 c0    	mov    %ecx,0xc0114930
c010d4b0:	8b 4d 8c             	mov    -0x74(%ebp),%ecx
c010d4b3:	89 0d 34 49 11 c0    	mov    %ecx,0xc0114934
    free_pages(p0, 5);
c010d4b9:	8b 4d 9c             	mov    -0x64(%ebp),%ecx
c010d4bc:	89 0c 24             	mov    %ecx,(%esp)
c010d4bf:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010d4c6:	00 
c010d4c7:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
c010d4cd:	e8 ee 5b ff ff       	call   c01030c0 <free_pages>
c010d4d2:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax

    le = &free_list;
c010d4d8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010d4db:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    while ((le = list_next(le)) != &free_list) {
c010d4e1:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d4e4:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
    return listelm->next;
c010d4e7:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c010d4ea:	8b 49 04             	mov    0x4(%ecx),%ecx
c010d4ed:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c010d4f0:	39 c1                	cmp    %eax,%ecx
c010d4f2:	0f 84 2d 00 00 00    	je     c010d525 <default_check+0x905>
c010d4f8:	31 c0                	xor    %eax,%eax
c010d4fa:	89 c1                	mov    %eax,%ecx
c010d4fc:	83 c1 0c             	add    $0xc,%ecx
c010d4ff:	29 c8                	sub    %ecx,%eax
        struct Page *p = le2page(le, page_link);
c010d501:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d504:	01 c1                	add    %eax,%ecx
c010d506:	89 4d 80             	mov    %ecx,-0x80(%ebp)
        count --, total -= p->property;
c010d509:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d50c:	83 c0 ff             	add    $0xffffffff,%eax
c010d50f:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010d512:	8b 45 80             	mov    -0x80(%ebp),%eax
c010d515:	8b 40 08             	mov    0x8(%eax),%eax
c010d518:	8b 4d a8             	mov    -0x58(%ebp),%ecx
c010d51b:	29 c1                	sub    %eax,%ecx
c010d51d:	89 4d a8             	mov    %ecx,-0x58(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010d520:	e9 b6 ff ff ff       	jmp    c010d4db <default_check+0x8bb>
    }
    assert(count == 0);
c010d525:	e9 00 00 00 00       	jmp    c010d52a <default_check+0x90a>
c010d52a:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010d52e:	0f 84 35 00 00 00    	je     c010d569 <default_check+0x949>
c010d534:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d53a:	b9 0e 01 00 00       	mov    $0x10e,%ecx
c010d53f:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d545:	8d 35 a6 05 11 c0    	lea    0xc01105a6,%esi
c010d54b:	89 04 24             	mov    %eax,(%esp)
c010d54e:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010d555:	00 
c010d556:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d55a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d55e:	89 8d f0 fe ff ff    	mov    %ecx,-0x110(%ebp)
c010d564:	e8 e7 2e ff ff       	call   c0100450 <__panic>
c010d569:	e9 00 00 00 00       	jmp    c010d56e <default_check+0x94e>
    assert(total == 0);
c010d56e:	e9 00 00 00 00       	jmp    c010d573 <default_check+0x953>
c010d573:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c010d577:	0f 84 35 00 00 00    	je     c010d5b2 <default_check+0x992>
c010d57d:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d583:	b9 0f 01 00 00       	mov    $0x10f,%ecx
c010d588:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d58e:	8d 35 b1 05 11 c0    	lea    0xc01105b1,%esi
c010d594:	89 04 24             	mov    %eax,(%esp)
c010d597:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c010d59e:	00 
c010d59f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d5a3:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d5a7:	89 8d ec fe ff ff    	mov    %ecx,-0x114(%ebp)
c010d5ad:	e8 9e 2e ff ff       	call   c0100450 <__panic>
c010d5b2:	e9 00 00 00 00       	jmp    c010d5b7 <default_check+0x997>
}
c010d5b7:	81 c4 24 01 00 00    	add    $0x124,%esp
c010d5bd:	5e                   	pop    %esi
c010d5be:	5d                   	pop    %ebp
c010d5bf:	c3                   	ret    

c010d5c0 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c010d5c0:	55                   	push   %ebp
c010d5c1:	89 e5                	mov    %esp,%ebp
c010d5c3:	83 ec 08             	sub    $0x8,%esp
c010d5c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010d5cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010d5cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    page->ref = val;
c010d5d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d5d5:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010d5d8:	89 01                	mov    %eax,(%ecx)
}
c010d5da:	83 c4 08             	add    $0x8,%esp
c010d5dd:	5d                   	pop    %ebp
c010d5de:	c3                   	ret    
c010d5df:	90                   	nop

c010d5e0 <basic_check>:
basic_check(void) {
c010d5e0:	55                   	push   %ebp
c010d5e1:	89 e5                	mov    %esp,%ebp
    p0 = p1 = p2 = NULL;
c010d5e3:	56                   	push   %esi
c010d5e4:	81 ec d4 00 00 00    	sub    $0xd4,%esp
c010d5ea:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010d5f1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010d5f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010d5ff:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p0 = alloc_page()) != NULL);
c010d604:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d60b:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010d60e:	e8 fd 59 ff ff       	call   c0103010 <alloc_pages>
c010d613:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d616:	83 f8 00             	cmp    $0x0,%eax
c010d619:	0f 85 32 00 00 00    	jne    c010d651 <basic_check+0x71>
c010d61f:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d625:	b9 a2 00 00 00       	mov    $0xa2,%ecx
c010d62a:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d630:	8d 35 28 02 11 c0    	lea    0xc0110228,%esi
c010d636:	89 04 24             	mov    %eax,(%esp)
c010d639:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010d640:	00 
c010d641:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d645:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d649:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c010d64c:	e8 ff 2d ff ff       	call   c0100450 <__panic>
c010d651:	e9 00 00 00 00       	jmp    c010d656 <basic_check+0x76>
    assert((p1 = alloc_page()) != NULL);
c010d656:	e9 00 00 00 00       	jmp    c010d65b <basic_check+0x7b>
c010d65b:	b8 01 00 00 00       	mov    $0x1,%eax
c010d660:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d667:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010d66a:	e8 a1 59 ff ff       	call   c0103010 <alloc_pages>
c010d66f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d672:	83 f8 00             	cmp    $0x0,%eax
c010d675:	0f 85 32 00 00 00    	jne    c010d6ad <basic_check+0xcd>
c010d67b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d681:	b9 a3 00 00 00       	mov    $0xa3,%ecx
c010d686:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d68c:	8d 35 44 02 11 c0    	lea    0xc0110244,%esi
c010d692:	89 04 24             	mov    %eax,(%esp)
c010d695:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010d69c:	00 
c010d69d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d6a1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d6a5:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010d6a8:	e8 a3 2d ff ff       	call   c0100450 <__panic>
c010d6ad:	e9 00 00 00 00       	jmp    c010d6b2 <basic_check+0xd2>
    assert((p2 = alloc_page()) != NULL);
c010d6b2:	e9 00 00 00 00       	jmp    c010d6b7 <basic_check+0xd7>
c010d6b7:	b8 01 00 00 00       	mov    $0x1,%eax
c010d6bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d6c3:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010d6c6:	e8 45 59 ff ff       	call   c0103010 <alloc_pages>
c010d6cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d6ce:	83 f8 00             	cmp    $0x0,%eax
c010d6d1:	0f 85 32 00 00 00    	jne    c010d709 <basic_check+0x129>
c010d6d7:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d6dd:	b9 a4 00 00 00       	mov    $0xa4,%ecx
c010d6e2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d6e8:	8d 35 60 02 11 c0    	lea    0xc0110260,%esi
c010d6ee:	89 04 24             	mov    %eax,(%esp)
c010d6f1:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
c010d6f8:	00 
c010d6f9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d6fd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d701:	89 4d b8             	mov    %ecx,-0x48(%ebp)
c010d704:	e8 47 2d ff ff       	call   c0100450 <__panic>
c010d709:	e9 00 00 00 00       	jmp    c010d70e <basic_check+0x12e>
    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010d70e:	e9 00 00 00 00       	jmp    c010d713 <basic_check+0x133>
c010d713:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d716:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010d719:	0f 84 18 00 00 00    	je     c010d737 <basic_check+0x157>
c010d71f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d722:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d725:	0f 84 0c 00 00 00    	je     c010d737 <basic_check+0x157>
c010d72b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d72e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d731:	0f 85 32 00 00 00    	jne    c010d769 <basic_check+0x189>
c010d737:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d73d:	b9 a6 00 00 00       	mov    $0xa6,%ecx
c010d742:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d748:	8d 35 bc 05 11 c0    	lea    0xc01105bc,%esi
c010d74e:	89 04 24             	mov    %eax,(%esp)
c010d751:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
c010d758:	00 
c010d759:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d75d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d761:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c010d764:	e8 e7 2c ff ff       	call   c0100450 <__panic>
c010d769:	e9 00 00 00 00       	jmp    c010d76e <basic_check+0x18e>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010d76e:	e9 00 00 00 00       	jmp    c010d773 <basic_check+0x193>
c010d773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d776:	89 04 24             	mov    %eax,(%esp)
c010d779:	e8 72 06 00 00       	call   c010ddf0 <page_ref>
c010d77e:	83 f8 00             	cmp    $0x0,%eax
c010d781:	0f 85 28 00 00 00    	jne    c010d7af <basic_check+0x1cf>
c010d787:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d78a:	89 04 24             	mov    %eax,(%esp)
c010d78d:	e8 5e 06 00 00       	call   c010ddf0 <page_ref>
c010d792:	83 f8 00             	cmp    $0x0,%eax
c010d795:	0f 85 14 00 00 00    	jne    c010d7af <basic_check+0x1cf>
c010d79b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d79e:	89 04 24             	mov    %eax,(%esp)
c010d7a1:	e8 4a 06 00 00       	call   c010ddf0 <page_ref>
c010d7a6:	83 f8 00             	cmp    $0x0,%eax
c010d7a9:	0f 84 32 00 00 00    	je     c010d7e1 <basic_check+0x201>
c010d7af:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d7b5:	b9 a7 00 00 00       	mov    $0xa7,%ecx
c010d7ba:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d7c0:	8d 35 dd 05 11 c0    	lea    0xc01105dd,%esi
c010d7c6:	89 04 24             	mov    %eax,(%esp)
c010d7c9:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010d7d0:	00 
c010d7d1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d7d5:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d7d9:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c010d7dc:	e8 6f 2c ff ff       	call   c0100450 <__panic>
c010d7e1:	e9 00 00 00 00       	jmp    c010d7e6 <basic_check+0x206>
    assert(page2pa(p0) < npage * PGSIZE);
c010d7e6:	e9 00 00 00 00       	jmp    c010d7eb <basic_check+0x20b>
c010d7eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d7ee:	89 04 24             	mov    %eax,(%esp)
c010d7f1:	e8 1a 06 00 00       	call   c010de10 <page2pa>
c010d7f6:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010d7fc:	c1 e1 0c             	shl    $0xc,%ecx
c010d7ff:	39 c8                	cmp    %ecx,%eax
c010d801:	0f 82 32 00 00 00    	jb     c010d839 <basic_check+0x259>
c010d807:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d80d:	b9 a9 00 00 00       	mov    $0xa9,%ecx
c010d812:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d818:	8d 35 10 03 11 c0    	lea    0xc0110310,%esi
c010d81e:	89 04 24             	mov    %eax,(%esp)
c010d821:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
c010d828:	00 
c010d829:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d82d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d831:	89 4d ac             	mov    %ecx,-0x54(%ebp)
c010d834:	e8 17 2c ff ff       	call   c0100450 <__panic>
c010d839:	e9 00 00 00 00       	jmp    c010d83e <basic_check+0x25e>
    assert(page2pa(p1) < npage * PGSIZE);
c010d83e:	e9 00 00 00 00       	jmp    c010d843 <basic_check+0x263>
c010d843:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d846:	89 04 24             	mov    %eax,(%esp)
c010d849:	e8 c2 05 00 00       	call   c010de10 <page2pa>
c010d84e:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010d854:	c1 e1 0c             	shl    $0xc,%ecx
c010d857:	39 c8                	cmp    %ecx,%eax
c010d859:	0f 82 32 00 00 00    	jb     c010d891 <basic_check+0x2b1>
c010d85f:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d865:	b9 aa 00 00 00       	mov    $0xaa,%ecx
c010d86a:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d870:	8d 35 2d 03 11 c0    	lea    0xc011032d,%esi
c010d876:	89 04 24             	mov    %eax,(%esp)
c010d879:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
c010d880:	00 
c010d881:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d885:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d889:	89 4d a8             	mov    %ecx,-0x58(%ebp)
c010d88c:	e8 bf 2b ff ff       	call   c0100450 <__panic>
c010d891:	e9 00 00 00 00       	jmp    c010d896 <basic_check+0x2b6>
    assert(page2pa(p2) < npage * PGSIZE);
c010d896:	e9 00 00 00 00       	jmp    c010d89b <basic_check+0x2bb>
c010d89b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d89e:	89 04 24             	mov    %eax,(%esp)
c010d8a1:	e8 6a 05 00 00       	call   c010de10 <page2pa>
c010d8a6:	8b 0d 2c 48 11 c0    	mov    0xc011482c,%ecx
c010d8ac:	c1 e1 0c             	shl    $0xc,%ecx
c010d8af:	39 c8                	cmp    %ecx,%eax
c010d8b1:	0f 82 32 00 00 00    	jb     c010d8e9 <basic_check+0x309>
c010d8b7:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d8bd:	b9 ab 00 00 00       	mov    $0xab,%ecx
c010d8c2:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d8c8:	8d 35 4a 03 11 c0    	lea    0xc011034a,%esi
c010d8ce:	89 04 24             	mov    %eax,(%esp)
c010d8d1:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
c010d8d8:	00 
c010d8d9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d8dd:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d8e1:	89 4d a4             	mov    %ecx,-0x5c(%ebp)
c010d8e4:	e8 67 2b ff ff       	call   c0100450 <__panic>
c010d8e9:	e9 00 00 00 00       	jmp    c010d8ee <basic_check+0x30e>
c010d8ee:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    list_entry_t free_list_store = free_list;
c010d8f4:	8b 0d 30 49 11 c0    	mov    0xc0114930,%ecx
c010d8fa:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d8fd:	8b 0d 34 49 11 c0    	mov    0xc0114934,%ecx
c010d903:	89 4d dc             	mov    %ecx,-0x24(%ebp)
    list_init(&free_list);
c010d906:	89 45 f0             	mov    %eax,-0x10(%ebp)
    elm->prev = elm->next = elm;
c010d909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d90c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d90f:	89 41 04             	mov    %eax,0x4(%ecx)
c010d912:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d915:	89 01                	mov    %eax,(%ecx)
c010d917:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    assert(list_empty(&free_list));
c010d91d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return list->next == list;
c010d920:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d923:	8b 40 04             	mov    0x4(%eax),%eax
c010d926:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010d929:	0f 94 c1             	sete   %cl
c010d92c:	80 e1 01             	and    $0x1,%cl
c010d92f:	0f b6 c1             	movzbl %cl,%eax
c010d932:	83 f8 00             	cmp    $0x0,%eax
c010d935:	0f 85 32 00 00 00    	jne    c010d96d <basic_check+0x38d>
c010d93b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d941:	b9 af 00 00 00       	mov    $0xaf,%ecx
c010d946:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d94c:	8d 35 1a 06 11 c0    	lea    0xc011061a,%esi
c010d952:	89 04 24             	mov    %eax,(%esp)
c010d955:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c010d95c:	00 
c010d95d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d961:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d965:	89 4d a0             	mov    %ecx,-0x60(%ebp)
c010d968:	e8 e3 2a ff ff       	call   c0100450 <__panic>
c010d96d:	e9 00 00 00 00       	jmp    c010d972 <basic_check+0x392>
    unsigned int nr_free_store = nr_free;
c010d972:	a1 38 49 11 c0       	mov    0xc0114938,%eax
c010d977:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    nr_free = 0;
c010d97a:	c7 05 38 49 11 c0 00 	movl   $0x0,0xc0114938
c010d981:	00 00 00 
c010d984:	b8 01 00 00 00       	mov    $0x1,%eax
    assert(alloc_page() == NULL);
c010d989:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010d990:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010d993:	e8 78 56 ff ff       	call   c0103010 <alloc_pages>
c010d998:	83 f8 00             	cmp    $0x0,%eax
c010d99b:	0f 84 32 00 00 00    	je     c010d9d3 <basic_check+0x3f3>
c010d9a1:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010d9a7:	b9 b4 00 00 00       	mov    $0xb4,%ecx
c010d9ac:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010d9b2:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010d9b8:	89 04 24             	mov    %eax,(%esp)
c010d9bb:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c010d9c2:	00 
c010d9c3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d9c7:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d9cb:	89 4d 98             	mov    %ecx,-0x68(%ebp)
c010d9ce:	e8 7d 2a ff ff       	call   c0100450 <__panic>
c010d9d3:	e9 00 00 00 00       	jmp    c010d9d8 <basic_check+0x3f8>
c010d9d8:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
c010d9dd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d9e0:	89 0c 24             	mov    %ecx,(%esp)
c010d9e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010d9ea:	00 
c010d9eb:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010d9ee:	e8 cd 56 ff ff       	call   c01030c0 <free_pages>
c010d9f3:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
c010d9f8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d9fb:	89 0c 24             	mov    %ecx,(%esp)
c010d9fe:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010da05:	00 
c010da06:	89 45 90             	mov    %eax,-0x70(%ebp)
c010da09:	e8 b2 56 ff ff       	call   c01030c0 <free_pages>
c010da0e:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
c010da13:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010da16:	89 0c 24             	mov    %ecx,(%esp)
c010da19:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010da20:	00 
c010da21:	89 45 8c             	mov    %eax,-0x74(%ebp)
c010da24:	e8 97 56 ff ff       	call   c01030c0 <free_pages>
    assert(nr_free == 3);
c010da29:	83 3d 38 49 11 c0 03 	cmpl   $0x3,0xc0114938
c010da30:	0f 84 32 00 00 00    	je     c010da68 <basic_check+0x488>
c010da36:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010da3c:	b9 b9 00 00 00       	mov    $0xb9,%ecx
c010da41:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010da47:	8d 35 c0 03 11 c0    	lea    0xc01103c0,%esi
c010da4d:	89 04 24             	mov    %eax,(%esp)
c010da50:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c010da57:	00 
c010da58:	89 54 24 08          	mov    %edx,0x8(%esp)
c010da5c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010da60:	89 4d 88             	mov    %ecx,-0x78(%ebp)
c010da63:	e8 e8 29 ff ff       	call   c0100450 <__panic>
c010da68:	e9 00 00 00 00       	jmp    c010da6d <basic_check+0x48d>
    assert((p0 = alloc_page()) != NULL);
c010da6d:	e9 00 00 00 00       	jmp    c010da72 <basic_check+0x492>
c010da72:	b8 01 00 00 00       	mov    $0x1,%eax
c010da77:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010da7e:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010da81:	e8 8a 55 ff ff       	call   c0103010 <alloc_pages>
c010da86:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da89:	83 f8 00             	cmp    $0x0,%eax
c010da8c:	0f 85 32 00 00 00    	jne    c010dac4 <basic_check+0x4e4>
c010da92:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010da98:	b9 bb 00 00 00       	mov    $0xbb,%ecx
c010da9d:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010daa3:	8d 35 28 02 11 c0    	lea    0xc0110228,%esi
c010daa9:	89 04 24             	mov    %eax,(%esp)
c010daac:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c010dab3:	00 
c010dab4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dab8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dabc:	89 4d 80             	mov    %ecx,-0x80(%ebp)
c010dabf:	e8 8c 29 ff ff       	call   c0100450 <__panic>
c010dac4:	e9 00 00 00 00       	jmp    c010dac9 <basic_check+0x4e9>
    assert((p1 = alloc_page()) != NULL);
c010dac9:	e9 00 00 00 00       	jmp    c010dace <basic_check+0x4ee>
c010dace:	b8 01 00 00 00       	mov    $0x1,%eax
c010dad3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010dada:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010dae0:	e8 2b 55 ff ff       	call   c0103010 <alloc_pages>
c010dae5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dae8:	83 f8 00             	cmp    $0x0,%eax
c010daeb:	0f 85 35 00 00 00    	jne    c010db26 <basic_check+0x546>
c010daf1:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010daf7:	b9 bc 00 00 00       	mov    $0xbc,%ecx
c010dafc:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010db02:	8d 35 44 02 11 c0    	lea    0xc0110244,%esi
c010db08:	89 04 24             	mov    %eax,(%esp)
c010db0b:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c010db12:	00 
c010db13:	89 54 24 08          	mov    %edx,0x8(%esp)
c010db17:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010db1b:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c010db21:	e8 2a 29 ff ff       	call   c0100450 <__panic>
c010db26:	e9 00 00 00 00       	jmp    c010db2b <basic_check+0x54b>
    assert((p2 = alloc_page()) != NULL);
c010db2b:	e9 00 00 00 00       	jmp    c010db30 <basic_check+0x550>
c010db30:	b8 01 00 00 00       	mov    $0x1,%eax
c010db35:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010db3c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c010db42:	e8 c9 54 ff ff       	call   c0103010 <alloc_pages>
c010db47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010db4a:	83 f8 00             	cmp    $0x0,%eax
c010db4d:	0f 85 35 00 00 00    	jne    c010db88 <basic_check+0x5a8>
c010db53:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010db59:	b9 bd 00 00 00       	mov    $0xbd,%ecx
c010db5e:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010db64:	8d 35 60 02 11 c0    	lea    0xc0110260,%esi
c010db6a:	89 04 24             	mov    %eax,(%esp)
c010db6d:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c010db74:	00 
c010db75:	89 54 24 08          	mov    %edx,0x8(%esp)
c010db79:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010db7d:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%ebp)
c010db83:	e8 c8 28 ff ff       	call   c0100450 <__panic>
c010db88:	e9 00 00 00 00       	jmp    c010db8d <basic_check+0x5ad>
    assert(alloc_page() == NULL);
c010db8d:	e9 00 00 00 00       	jmp    c010db92 <basic_check+0x5b2>
c010db92:	b8 01 00 00 00       	mov    $0x1,%eax
c010db97:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010db9e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
c010dba4:	e8 67 54 ff ff       	call   c0103010 <alloc_pages>
c010dba9:	83 f8 00             	cmp    $0x0,%eax
c010dbac:	0f 84 35 00 00 00    	je     c010dbe7 <basic_check+0x607>
c010dbb2:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010dbb8:	b9 bf 00 00 00       	mov    $0xbf,%ecx
c010dbbd:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010dbc3:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010dbc9:	89 04 24             	mov    %eax,(%esp)
c010dbcc:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c010dbd3:	00 
c010dbd4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dbd8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dbdc:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%ebp)
c010dbe2:	e8 69 28 ff ff       	call   c0100450 <__panic>
c010dbe7:	e9 00 00 00 00       	jmp    c010dbec <basic_check+0x60c>
c010dbec:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p0);
c010dbf1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010dbf4:	89 0c 24             	mov    %ecx,(%esp)
c010dbf7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010dbfe:	00 
c010dbff:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010dc05:	e8 b6 54 ff ff       	call   c01030c0 <free_pages>
c010dc0a:	8d 05 30 49 11 c0    	lea    0xc0114930,%eax
    assert(!list_empty(&free_list));
c010dc10:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dc13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc16:	8b 40 04             	mov    0x4(%eax),%eax
c010dc19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010dc1c:	0f 94 c1             	sete   %cl
c010dc1f:	80 e1 01             	and    $0x1,%cl
c010dc22:	0f b6 c1             	movzbl %cl,%eax
c010dc25:	83 f8 00             	cmp    $0x0,%eax
c010dc28:	0f 84 35 00 00 00    	je     c010dc63 <basic_check+0x683>
c010dc2e:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010dc34:	b9 c2 00 00 00       	mov    $0xc2,%ecx
c010dc39:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010dc3f:	8d 35 19 06 11 c0    	lea    0xc0110619,%esi
c010dc45:	89 04 24             	mov    %eax,(%esp)
c010dc48:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
c010dc4f:	00 
c010dc50:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dc54:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dc58:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
c010dc5e:	e8 ed 27 ff ff       	call   c0100450 <__panic>
c010dc63:	e9 00 00 00 00       	jmp    c010dc68 <basic_check+0x688>
c010dc68:	b8 01 00 00 00       	mov    $0x1,%eax
    assert((p = alloc_page()) == p0);
c010dc6d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010dc74:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c010dc7a:	e8 91 53 ff ff       	call   c0103010 <alloc_pages>
c010dc7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010dc82:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010dc85:	0f 84 35 00 00 00    	je     c010dcc0 <basic_check+0x6e0>
c010dc8b:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010dc91:	b9 c5 00 00 00       	mov    $0xc5,%ecx
c010dc96:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010dc9c:	8d 35 31 06 11 c0    	lea    0xc0110631,%esi
c010dca2:	89 04 24             	mov    %eax,(%esp)
c010dca5:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
c010dcac:	00 
c010dcad:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dcb1:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dcb5:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%ebp)
c010dcbb:	e8 90 27 ff ff       	call   c0100450 <__panic>
c010dcc0:	e9 00 00 00 00       	jmp    c010dcc5 <basic_check+0x6e5>
    assert(alloc_page() == NULL);
c010dcc5:	e9 00 00 00 00       	jmp    c010dcca <basic_check+0x6ea>
c010dcca:	b8 01 00 00 00       	mov    $0x1,%eax
c010dccf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010dcd6:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
c010dcdc:	e8 2f 53 ff ff       	call   c0103010 <alloc_pages>
c010dce1:	83 f8 00             	cmp    $0x0,%eax
c010dce4:	0f 84 35 00 00 00    	je     c010dd1f <basic_check+0x73f>
c010dcea:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010dcf0:	b9 c6 00 00 00       	mov    $0xc6,%ecx
c010dcf5:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010dcfb:	8d 35 ab 03 11 c0    	lea    0xc01103ab,%esi
c010dd01:	89 04 24             	mov    %eax,(%esp)
c010dd04:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010dd0b:	00 
c010dd0c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dd10:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dd14:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%ebp)
c010dd1a:	e8 31 27 ff ff       	call   c0100450 <__panic>
c010dd1f:	e9 00 00 00 00       	jmp    c010dd24 <basic_check+0x744>
    assert(nr_free == 0);
c010dd24:	e9 00 00 00 00       	jmp    c010dd29 <basic_check+0x749>
c010dd29:	83 3d 38 49 11 c0 00 	cmpl   $0x0,0xc0114938
c010dd30:	0f 84 35 00 00 00    	je     c010dd6b <basic_check+0x78b>
c010dd36:	8d 05 50 04 11 c0    	lea    0xc0110450,%eax
c010dd3c:	b9 c8 00 00 00       	mov    $0xc8,%ecx
c010dd41:	8d 15 8e f8 10 c0    	lea    0xc010f88e,%edx
c010dd47:	8d 35 13 04 11 c0    	lea    0xc0110413,%esi
c010dd4d:	89 04 24             	mov    %eax,(%esp)
c010dd50:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c010dd57:	00 
c010dd58:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dd5c:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010dd60:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%ebp)
c010dd66:	e8 e5 26 ff ff       	call   c0100450 <__panic>
c010dd6b:	e9 00 00 00 00       	jmp    c010dd70 <basic_check+0x790>
c010dd70:	b8 01 00 00 00       	mov    $0x1,%eax
    free_list = free_list_store;
c010dd75:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010dd78:	89 0d 30 49 11 c0    	mov    %ecx,0xc0114930
c010dd7e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010dd81:	89 0d 34 49 11 c0    	mov    %ecx,0xc0114934
    nr_free = nr_free_store;
c010dd87:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010dd8a:	89 0d 38 49 11 c0    	mov    %ecx,0xc0114938
    free_page(p);
c010dd90:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010dd93:	89 0c 24             	mov    %ecx,(%esp)
c010dd96:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010dd9d:	00 
c010dd9e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c010dda4:	e8 17 53 ff ff       	call   c01030c0 <free_pages>
c010dda9:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p1);
c010ddae:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010ddb1:	89 0c 24             	mov    %ecx,(%esp)
c010ddb4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ddbb:	00 
c010ddbc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c010ddc2:	e8 f9 52 ff ff       	call   c01030c0 <free_pages>
c010ddc7:	b8 01 00 00 00       	mov    $0x1,%eax
    free_page(p2);
c010ddcc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010ddcf:	89 0c 24             	mov    %ecx,(%esp)
c010ddd2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ddd9:	00 
c010ddda:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
c010dde0:	e8 db 52 ff ff       	call   c01030c0 <free_pages>
}
c010dde5:	81 c4 d4 00 00 00    	add    $0xd4,%esp
c010ddeb:	5e                   	pop    %esi
c010ddec:	5d                   	pop    %ebp
c010dded:	c3                   	ret    
c010ddee:	66 90                	xchg   %ax,%ax

c010ddf0 <page_ref>:
page_ref(struct Page *page) {
c010ddf0:	55                   	push   %ebp
c010ddf1:	89 e5                	mov    %esp,%ebp
c010ddf3:	50                   	push   %eax
c010ddf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddf7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page->ref;
c010ddfa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ddfd:	8b 00                	mov    (%eax),%eax
c010ddff:	83 c4 04             	add    $0x4,%esp
c010de02:	5d                   	pop    %ebp
c010de03:	c3                   	ret    
c010de04:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010de0b:	00 00 00 00 00 

c010de10 <page2pa>:
page2pa(struct Page *page) {
c010de10:	55                   	push   %ebp
c010de11:	89 e5                	mov    %esp,%ebp
c010de13:	83 ec 08             	sub    $0x8,%esp
c010de16:	8b 45 08             	mov    0x8(%ebp),%eax
c010de19:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page2ppn(page) << PGSHIFT;
c010de1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010de1f:	89 04 24             	mov    %eax,(%esp)
c010de22:	e8 09 00 00 00       	call   c010de30 <page2ppn>
c010de27:	c1 e0 0c             	shl    $0xc,%eax
c010de2a:	83 c4 08             	add    $0x8,%esp
c010de2d:	5d                   	pop    %ebp
c010de2e:	c3                   	ret    
c010de2f:	90                   	nop

c010de30 <page2ppn>:
page2ppn(struct Page *page) {
c010de30:	55                   	push   %ebp
c010de31:	89 e5                	mov    %esp,%ebp
c010de33:	50                   	push   %eax
c010de34:	8b 45 08             	mov    0x8(%ebp),%eax
c010de37:	b9 14 00 00 00       	mov    $0x14,%ecx
c010de3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return page - pages;
c010de3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010de42:	8b 15 2c 49 11 c0    	mov    0xc011492c,%edx
c010de48:	29 d0                	sub    %edx,%eax
c010de4a:	99                   	cltd   
c010de4b:	f7 f9                	idiv   %ecx
c010de4d:	83 c4 04             	add    $0x4,%esp
c010de50:	5d                   	pop    %ebp
c010de51:	c3                   	ret    
c010de52:	66 90                	xchg   %ax,%ax
c010de54:	66 90                	xchg   %ax,%ax
c010de56:	66 90                	xchg   %ax,%ax
c010de58:	66 90                	xchg   %ax,%ax
c010de5a:	66 90                	xchg   %ax,%ax
c010de5c:	66 90                	xchg   %ax,%ax
c010de5e:	66 90                	xchg   %ax,%ax

c010de60 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010de60:	55                   	push   %ebp
c010de61:	89 e5                	mov    %esp,%ebp
c010de63:	83 ec 08             	sub    $0x8,%esp
c010de66:	8b 45 08             	mov    0x8(%ebp),%eax
c010de69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    size_t cnt = 0;
c010de6c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*s ++ != '\0') {
c010de73:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010de76:	89 c1                	mov    %eax,%ecx
c010de78:	83 c1 01             	add    $0x1,%ecx
c010de7b:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010de7e:	0f be 00             	movsbl (%eax),%eax
c010de81:	83 f8 00             	cmp    $0x0,%eax
c010de84:	0f 84 0e 00 00 00    	je     c010de98 <strlen+0x38>
        cnt ++;
c010de8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de8d:	83 c0 01             	add    $0x1,%eax
c010de90:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*s ++ != '\0') {
c010de93:	e9 db ff ff ff       	jmp    c010de73 <strlen+0x13>
    }
    return cnt;
c010de98:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010de9b:	83 c4 08             	add    $0x8,%esp
c010de9e:	5d                   	pop    %ebp
c010de9f:	c3                   	ret    

c010dea0 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010dea0:	55                   	push   %ebp
c010dea1:	89 e5                	mov    %esp,%ebp
c010dea3:	83 ec 10             	sub    $0x10,%esp
c010dea6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dea9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010deac:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010deaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    size_t cnt = 0;
c010deb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010deb9:	31 c0                	xor    %eax,%eax
c010debb:	88 c1                	mov    %al,%cl
    while (cnt < len && *s ++ != '\0') {
c010debd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dec0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010dec3:	88 4d f3             	mov    %cl,-0xd(%ebp)
c010dec6:	0f 83 17 00 00 00    	jae    c010dee3 <strnlen+0x43>
c010decc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010decf:	89 c1                	mov    %eax,%ecx
c010ded1:	83 c1 01             	add    $0x1,%ecx
c010ded4:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010ded7:	0f be 00             	movsbl (%eax),%eax
c010deda:	83 f8 00             	cmp    $0x0,%eax
c010dedd:	0f 95 c2             	setne  %dl
c010dee0:	88 55 f3             	mov    %dl,-0xd(%ebp)
c010dee3:	8a 45 f3             	mov    -0xd(%ebp),%al
c010dee6:	a8 01                	test   $0x1,%al
c010dee8:	0f 85 05 00 00 00    	jne    c010def3 <strnlen+0x53>
c010deee:	e9 0e 00 00 00       	jmp    c010df01 <strnlen+0x61>
        cnt ++;
c010def3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010def6:	83 c0 01             	add    $0x1,%eax
c010def9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010defc:	e9 b8 ff ff ff       	jmp    c010deb9 <strnlen+0x19>
    }
    return cnt;
c010df01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df04:	83 c4 10             	add    $0x10,%esp
c010df07:	5d                   	pop    %ebp
c010df08:	c3                   	ret    
c010df09:	0f 1f 80 00 00 00 00 	nopl   0x0(%eax)

c010df10 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010df10:	55                   	push   %ebp
c010df11:	89 e5                	mov    %esp,%ebp
c010df13:	57                   	push   %edi
c010df14:	56                   	push   %esi
c010df15:	83 ec 1c             	sub    $0x1c,%esp
c010df18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010df1e:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010df21:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010df24:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010df27:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010df2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010df2d:	89 4d f0             	mov    %ecx,-0x10(%ebp)
        "1: lodsb;"
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
c010df30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df33:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    asm volatile (
c010df36:	89 c6                	mov    %eax,%esi
c010df38:	89 cf                	mov    %ecx,%edi
c010df3a:	ac                   	lods   %ds:(%esi),%al
c010df3b:	aa                   	stos   %al,%es:(%edi)
c010df3c:	84 c0                	test   %al,%al
c010df3e:	0f 85 f6 ff ff ff    	jne    c010df3a <strcpy+0x2a>
c010df44:	89 75 ec             	mov    %esi,-0x14(%ebp)
c010df47:	89 7d e8             	mov    %edi,-0x18(%ebp)
c010df4a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return dst;
c010df4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df50:	83 c4 1c             	add    $0x1c,%esp
c010df53:	5e                   	pop    %esi
c010df54:	5f                   	pop    %edi
c010df55:	5d                   	pop    %ebp
c010df56:	c3                   	ret    
c010df57:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
c010df5e:	00 00 

c010df60 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010df60:	55                   	push   %ebp
c010df61:	89 e5                	mov    %esp,%ebp
c010df63:	83 ec 10             	sub    $0x10,%esp
c010df66:	8b 45 10             	mov    0x10(%ebp),%eax
c010df69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010df6c:	8b 55 08             	mov    0x8(%ebp),%edx
c010df6f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c010df72:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c010df75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *p = dst;
c010df78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010df7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (len > 0) {
c010df7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010df82:	0f 86 36 00 00 00    	jbe    c010dfbe <strncpy+0x5e>
        if ((*p = *src) != '\0') {
c010df88:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010df8b:	8a 08                	mov    (%eax),%cl
c010df8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010df90:	88 08                	mov    %cl,(%eax)
c010df92:	0f be c1             	movsbl %cl,%eax
c010df95:	83 f8 00             	cmp    $0x0,%eax
c010df98:	0f 84 09 00 00 00    	je     c010dfa7 <strncpy+0x47>
            src ++;
c010df9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dfa1:	83 c0 01             	add    $0x1,%eax
c010dfa4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        p ++, len --;
c010dfa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfaa:	83 c0 01             	add    $0x1,%eax
c010dfad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010dfb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dfb3:	83 c0 ff             	add    $0xffffffff,%eax
c010dfb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (len > 0) {
c010dfb9:	e9 c0 ff ff ff       	jmp    c010df7e <strncpy+0x1e>
    }
    return dst;
c010dfbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dfc1:	83 c4 10             	add    $0x10,%esp
c010dfc4:	5d                   	pop    %ebp
c010dfc5:	c3                   	ret    
c010dfc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
c010dfcd:	00 00 00 

c010dfd0 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010dfd0:	55                   	push   %ebp
c010dfd1:	89 e5                	mov    %esp,%ebp
c010dfd3:	57                   	push   %edi
c010dfd4:	56                   	push   %esi
c010dfd5:	83 ec 1c             	sub    $0x1c,%esp
c010dfd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dfdb:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010dfde:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010dfe1:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010dfe4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dfe7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010dfea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dfed:	89 4d f0             	mov    %ecx,-0x10(%ebp)
        : "1" (s1), "2" (s2)
c010dff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dff3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    asm volatile (
c010dff6:	89 c6                	mov    %eax,%esi
c010dff8:	89 cf                	mov    %ecx,%edi
c010dffa:	ac                   	lods   %ds:(%esi),%al
c010dffb:	ae                   	scas   %es:(%edi),%al
c010dffc:	0f 85 0f 00 00 00    	jne    c010e011 <strcmp+0x41>
c010e002:	84 c0                	test   %al,%al
c010e004:	0f 85 f0 ff ff ff    	jne    c010dffa <strcmp+0x2a>
c010e00a:	31 c0                	xor    %eax,%eax
c010e00c:	e9 04 00 00 00       	jmp    c010e015 <strcmp+0x45>
c010e011:	19 c0                	sbb    %eax,%eax
c010e013:	0c 01                	or     $0x1,%al
c010e015:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e018:	89 75 ec             	mov    %esi,-0x14(%ebp)
c010e01b:	89 7d e8             	mov    %edi,-0x18(%ebp)
    return ret;
c010e01e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e021:	83 c4 1c             	add    $0x1c,%esp
c010e024:	5e                   	pop    %esi
c010e025:	5f                   	pop    %edi
c010e026:	5d                   	pop    %ebp
c010e027:	c3                   	ret    
c010e028:	0f 1f 84 00 00 00 00 	nopl   0x0(%eax,%eax,1)
c010e02f:	00 

c010e030 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010e030:	55                   	push   %ebp
c010e031:	89 e5                	mov    %esp,%ebp
c010e033:	83 ec 14             	sub    $0x14,%esp
c010e036:	8b 45 10             	mov    0x10(%ebp),%eax
c010e039:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e03c:	8b 55 08             	mov    0x8(%ebp),%edx
c010e03f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c010e042:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c010e045:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e048:	31 c0                	xor    %eax,%eax
c010e04a:	88 c1                	mov    %al,%cl
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010e04c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e050:	88 4d f3             	mov    %cl,-0xd(%ebp)
c010e053:	0f 86 2a 00 00 00    	jbe    c010e083 <strncmp+0x53>
c010e059:	31 c0                	xor    %eax,%eax
c010e05b:	88 c1                	mov    %al,%cl
c010e05d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e060:	0f be 00             	movsbl (%eax),%eax
c010e063:	83 f8 00             	cmp    $0x0,%eax
c010e066:	88 4d f3             	mov    %cl,-0xd(%ebp)
c010e069:	0f 84 14 00 00 00    	je     c010e083 <strncmp+0x53>
c010e06f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e072:	0f be 00             	movsbl (%eax),%eax
c010e075:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010e078:	0f be 09             	movsbl (%ecx),%ecx
c010e07b:	39 c8                	cmp    %ecx,%eax
c010e07d:	0f 94 c2             	sete   %dl
c010e080:	88 55 f3             	mov    %dl,-0xd(%ebp)
c010e083:	8a 45 f3             	mov    -0xd(%ebp),%al
c010e086:	a8 01                	test   $0x1,%al
c010e088:	0f 85 05 00 00 00    	jne    c010e093 <strncmp+0x63>
c010e08e:	e9 20 00 00 00       	jmp    c010e0b3 <strncmp+0x83>
        n --, s1 ++, s2 ++;
c010e093:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e096:	83 c0 ff             	add    $0xffffffff,%eax
c010e099:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e09c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e09f:	83 c0 01             	add    $0x1,%eax
c010e0a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e0a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e0a8:	83 c0 01             	add    $0x1,%eax
c010e0ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010e0ae:	e9 95 ff ff ff       	jmp    c010e048 <strncmp+0x18>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010e0b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e0b7:	0f 85 0a 00 00 00    	jne    c010e0c7 <strncmp+0x97>
c010e0bd:	31 c0                	xor    %eax,%eax
c010e0bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e0c2:	e9 11 00 00 00       	jmp    c010e0d8 <strncmp+0xa8>
c010e0c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e0ca:	0f b6 00             	movzbl (%eax),%eax
c010e0cd:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010e0d0:	0f b6 09             	movzbl (%ecx),%ecx
c010e0d3:	29 c8                	sub    %ecx,%eax
c010e0d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e0d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e0db:	83 c4 14             	add    $0x14,%esp
c010e0de:	5d                   	pop    %ebp
c010e0df:	c3                   	ret    

c010e0e0 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010e0e0:	55                   	push   %ebp
c010e0e1:	89 e5                	mov    %esp,%ebp
c010e0e3:	83 ec 0c             	sub    $0xc,%esp
c010e0e6:	8a 45 0c             	mov    0xc(%ebp),%al
c010e0e9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e0ec:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c010e0ef:	88 45 f7             	mov    %al,-0x9(%ebp)
    while (*s != '\0') {
c010e0f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e0f5:	0f be 00             	movsbl (%eax),%eax
c010e0f8:	83 f8 00             	cmp    $0x0,%eax
c010e0fb:	0f 84 2b 00 00 00    	je     c010e12c <strchr+0x4c>
        if (*s == c) {
c010e101:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e104:	0f be 00             	movsbl (%eax),%eax
c010e107:	0f be 4d f7          	movsbl -0x9(%ebp),%ecx
c010e10b:	39 c8                	cmp    %ecx,%eax
c010e10d:	0f 85 0b 00 00 00    	jne    c010e11e <strchr+0x3e>
            return (char *)s;
c010e113:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e116:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e119:	e9 15 00 00 00       	jmp    c010e133 <strchr+0x53>
        }
        s ++;
c010e11e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e121:	83 c0 01             	add    $0x1,%eax
c010e124:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*s != '\0') {
c010e127:	e9 c6 ff ff ff       	jmp    c010e0f2 <strchr+0x12>
    }
    return NULL;
c010e12c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
c010e133:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e136:	83 c4 0c             	add    $0xc,%esp
c010e139:	5d                   	pop    %ebp
c010e13a:	c3                   	ret    
c010e13b:	0f 1f 44 00 00       	nopl   0x0(%eax,%eax,1)

c010e140 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010e140:	55                   	push   %ebp
c010e141:	89 e5                	mov    %esp,%ebp
c010e143:	83 ec 08             	sub    $0x8,%esp
c010e146:	8a 45 0c             	mov    0xc(%ebp),%al
c010e149:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e14c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010e14f:	88 45 fb             	mov    %al,-0x5(%ebp)
    while (*s != '\0') {
c010e152:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e155:	0f be 00             	movsbl (%eax),%eax
c010e158:	83 f8 00             	cmp    $0x0,%eax
c010e15b:	0f 84 25 00 00 00    	je     c010e186 <strfind+0x46>
        if (*s == c) {
c010e161:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e164:	0f be 00             	movsbl (%eax),%eax
c010e167:	0f be 4d fb          	movsbl -0x5(%ebp),%ecx
c010e16b:	39 c8                	cmp    %ecx,%eax
c010e16d:	0f 85 05 00 00 00    	jne    c010e178 <strfind+0x38>
            break;
c010e173:	e9 0e 00 00 00       	jmp    c010e186 <strfind+0x46>
        }
        s ++;
c010e178:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e17b:	83 c0 01             	add    $0x1,%eax
c010e17e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s != '\0') {
c010e181:	e9 cc ff ff ff       	jmp    c010e152 <strfind+0x12>
    }
    return (char *)s;
c010e186:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e189:	83 c4 08             	add    $0x8,%esp
c010e18c:	5d                   	pop    %ebp
c010e18d:	c3                   	ret    
c010e18e:	66 90                	xchg   %ax,%ax

c010e190 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010e190:	55                   	push   %ebp
c010e191:	89 e5                	mov    %esp,%ebp
c010e193:	83 ec 20             	sub    $0x20,%esp
c010e196:	8b 45 10             	mov    0x10(%ebp),%eax
c010e199:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e19c:	8b 55 08             	mov    0x8(%ebp),%edx
c010e19f:	89 55 fc             	mov    %edx,-0x4(%ebp)
c010e1a2:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c010e1a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int neg = 0;
c010e1a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    long val = 0;
c010e1af:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010e1b6:	b0 01                	mov    $0x1,%al

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010e1b8:	8b 4d fc             	mov    -0x4(%ebp),%ecx
c010e1bb:	0f be 09             	movsbl (%ecx),%ecx
c010e1be:	83 f9 20             	cmp    $0x20,%ecx
c010e1c1:	88 45 e7             	mov    %al,-0x19(%ebp)
c010e1c4:	0f 84 0f 00 00 00    	je     c010e1d9 <strtol+0x49>
c010e1ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e1cd:	0f be 00             	movsbl (%eax),%eax
c010e1d0:	83 f8 09             	cmp    $0x9,%eax
c010e1d3:	0f 94 c1             	sete   %cl
c010e1d6:	88 4d e7             	mov    %cl,-0x19(%ebp)
c010e1d9:	8a 45 e7             	mov    -0x19(%ebp),%al
c010e1dc:	a8 01                	test   $0x1,%al
c010e1de:	0f 85 05 00 00 00    	jne    c010e1e9 <strtol+0x59>
c010e1e4:	e9 0e 00 00 00       	jmp    c010e1f7 <strtol+0x67>
        s ++;
c010e1e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e1ec:	83 c0 01             	add    $0x1,%eax
c010e1ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (*s == ' ' || *s == '\t') {
c010e1f2:	e9 bf ff ff ff       	jmp    c010e1b6 <strtol+0x26>
    }

    // plus/minus sign
    if (*s == '+') {
c010e1f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e1fa:	0f be 00             	movsbl (%eax),%eax
c010e1fd:	83 f8 2b             	cmp    $0x2b,%eax
c010e200:	0f 85 0e 00 00 00    	jne    c010e214 <strtol+0x84>
        s ++;
c010e206:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e209:	83 c0 01             	add    $0x1,%eax
c010e20c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    }
c010e20f:	e9 24 00 00 00       	jmp    c010e238 <strtol+0xa8>
    else if (*s == '-') {
c010e214:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e217:	0f be 00             	movsbl (%eax),%eax
c010e21a:	83 f8 2d             	cmp    $0x2d,%eax
c010e21d:	0f 85 10 00 00 00    	jne    c010e233 <strtol+0xa3>
        s ++, neg = 1;
c010e223:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e226:	83 c0 01             	add    $0x1,%eax
c010e229:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e22c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010e233:	e9 00 00 00 00       	jmp    c010e238 <strtol+0xa8>
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010e238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e23c:	0f 84 0a 00 00 00    	je     c010e24c <strtol+0xbc>
c010e242:	83 7d f4 10          	cmpl   $0x10,-0xc(%ebp)
c010e246:	0f 85 34 00 00 00    	jne    c010e280 <strtol+0xf0>
c010e24c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e24f:	0f be 00             	movsbl (%eax),%eax
c010e252:	83 f8 30             	cmp    $0x30,%eax
c010e255:	0f 85 25 00 00 00    	jne    c010e280 <strtol+0xf0>
c010e25b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e25e:	0f be 40 01          	movsbl 0x1(%eax),%eax
c010e262:	83 f8 78             	cmp    $0x78,%eax
c010e265:	0f 85 15 00 00 00    	jne    c010e280 <strtol+0xf0>
        s += 2, base = 16;
c010e26b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e26e:	83 c0 02             	add    $0x2,%eax
c010e271:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e274:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
    }
c010e27b:	e9 49 00 00 00       	jmp    c010e2c9 <strtol+0x139>
    else if (base == 0 && s[0] == '0') {
c010e280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e284:	0f 85 24 00 00 00    	jne    c010e2ae <strtol+0x11e>
c010e28a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e28d:	0f be 00             	movsbl (%eax),%eax
c010e290:	83 f8 30             	cmp    $0x30,%eax
c010e293:	0f 85 15 00 00 00    	jne    c010e2ae <strtol+0x11e>
        s ++, base = 8;
c010e299:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e29c:	83 c0 01             	add    $0x1,%eax
c010e29f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e2a2:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
    }
c010e2a9:	e9 16 00 00 00       	jmp    c010e2c4 <strtol+0x134>
    else if (base == 0) {
c010e2ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2b2:	0f 85 07 00 00 00    	jne    c010e2bf <strtol+0x12f>
        base = 10;
c010e2b8:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
c010e2bf:	e9 00 00 00 00       	jmp    c010e2c4 <strtol+0x134>
c010e2c4:	e9 00 00 00 00       	jmp    c010e2c9 <strtol+0x139>
    }

    // digits
    while (1) {
c010e2c9:	e9 00 00 00 00       	jmp    c010e2ce <strtol+0x13e>
        int dig;

        if (*s >= '0' && *s <= '9') {
c010e2ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2d1:	0f be 00             	movsbl (%eax),%eax
c010e2d4:	83 f8 30             	cmp    $0x30,%eax
c010e2d7:	0f 8c 20 00 00 00    	jl     c010e2fd <strtol+0x16d>
c010e2dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2e0:	0f be 00             	movsbl (%eax),%eax
c010e2e3:	83 f8 39             	cmp    $0x39,%eax
c010e2e6:	0f 8f 11 00 00 00    	jg     c010e2fd <strtol+0x16d>
            dig = *s - '0';
c010e2ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e2ef:	0f be 00             	movsbl (%eax),%eax
c010e2f2:	83 e8 30             	sub    $0x30,%eax
c010e2f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
c010e2f8:	e9 73 00 00 00       	jmp    c010e370 <strtol+0x1e0>
        else if (*s >= 'a' && *s <= 'z') {
c010e2fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e300:	0f be 00             	movsbl (%eax),%eax
c010e303:	83 f8 61             	cmp    $0x61,%eax
c010e306:	0f 8c 23 00 00 00    	jl     c010e32f <strtol+0x19f>
c010e30c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e30f:	0f be 00             	movsbl (%eax),%eax
c010e312:	83 f8 7a             	cmp    $0x7a,%eax
c010e315:	0f 8f 14 00 00 00    	jg     c010e32f <strtol+0x19f>
            dig = *s - 'a' + 10;
c010e31b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e31e:	0f be 00             	movsbl (%eax),%eax
c010e321:	83 e8 61             	sub    $0x61,%eax
c010e324:	83 c0 0a             	add    $0xa,%eax
c010e327:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
c010e32a:	e9 3c 00 00 00       	jmp    c010e36b <strtol+0x1db>
        else if (*s >= 'A' && *s <= 'Z') {
c010e32f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e332:	0f be 00             	movsbl (%eax),%eax
c010e335:	83 f8 41             	cmp    $0x41,%eax
c010e338:	0f 8c 23 00 00 00    	jl     c010e361 <strtol+0x1d1>
c010e33e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e341:	0f be 00             	movsbl (%eax),%eax
c010e344:	83 f8 5a             	cmp    $0x5a,%eax
c010e347:	0f 8f 14 00 00 00    	jg     c010e361 <strtol+0x1d1>
            dig = *s - 'A' + 10;
c010e34d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e350:	0f be 00             	movsbl (%eax),%eax
c010e353:	83 e8 41             	sub    $0x41,%eax
c010e356:	83 c0 0a             	add    $0xa,%eax
c010e359:	89 45 e8             	mov    %eax,-0x18(%ebp)
        }
c010e35c:	e9 05 00 00 00       	jmp    c010e366 <strtol+0x1d6>
        else {
            break;
c010e361:	e9 36 00 00 00       	jmp    c010e39c <strtol+0x20c>
c010e366:	e9 00 00 00 00       	jmp    c010e36b <strtol+0x1db>
c010e36b:	e9 00 00 00 00       	jmp    c010e370 <strtol+0x1e0>
        }
        if (dig >= base) {
c010e370:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e373:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010e376:	0f 8c 05 00 00 00    	jl     c010e381 <strtol+0x1f1>
            break;
c010e37c:	e9 1b 00 00 00       	jmp    c010e39c <strtol+0x20c>
        }
        s ++, val = (val * base) + dig;
c010e381:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e384:	83 c0 01             	add    $0x1,%eax
c010e387:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e38a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e38d:	0f af 45 f4          	imul   -0xc(%ebp),%eax
c010e391:	03 45 e8             	add    -0x18(%ebp),%eax
c010e394:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (1) {
c010e397:	e9 32 ff ff ff       	jmp    c010e2ce <strtol+0x13e>
        // we don't properly detect overflow!
    }

    if (endptr) {
c010e39c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010e3a0:	0f 84 08 00 00 00    	je     c010e3ae <strtol+0x21e>
        *endptr = (char *) s;
c010e3a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e3a9:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010e3ac:	89 01                	mov    %eax,(%ecx)
    }
    return (neg ? -val : val);
c010e3ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e3b2:	0f 84 0d 00 00 00    	je     c010e3c5 <strtol+0x235>
c010e3b8:	31 c0                	xor    %eax,%eax
c010e3ba:	2b 45 ec             	sub    -0x14(%ebp),%eax
c010e3bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e3c0:	e9 06 00 00 00       	jmp    c010e3cb <strtol+0x23b>
c010e3c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e3c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e3cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e3ce:	83 c4 20             	add    $0x20,%esp
c010e3d1:	5d                   	pop    %ebp
c010e3d2:	c3                   	ret    
c010e3d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010e3da:	84 00 00 00 00 00 

c010e3e0 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010e3e0:	55                   	push   %ebp
c010e3e1:	89 e5                	mov    %esp,%ebp
c010e3e3:	57                   	push   %edi
c010e3e4:	83 ec 24             	sub    $0x24,%esp
c010e3e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010e3ea:	8a 4d 0c             	mov    0xc(%ebp),%cl
c010e3ed:	8b 55 08             	mov    0x8(%ebp),%edx
c010e3f0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010e3f3:	88 4d e3             	mov    %cl,-0x1d(%ebp)
c010e3f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010e3f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e3fc:	8a 4d e3             	mov    -0x1d(%ebp),%cl
c010e3ff:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e402:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010e405:	88 4d f7             	mov    %cl,-0x9(%ebp)
c010e408:	89 55 f0             	mov    %edx,-0x10(%ebp)
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
c010e40b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e40e:	8a 4d f7             	mov    -0x9(%ebp),%cl
c010e411:	8b 55 f8             	mov    -0x8(%ebp),%edx
    asm volatile (
c010e414:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010e417:	88 c8                	mov    %cl,%al
c010e419:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010e41c:	89 d7                	mov    %edx,%edi
c010e41e:	f3 aa                	rep stos %al,%es:(%edi)
c010e420:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010e423:	89 7d e8             	mov    %edi,-0x18(%ebp)
        : "memory");
    return s;
c010e426:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e429:	83 c4 24             	add    $0x24,%esp
c010e42c:	5f                   	pop    %edi
c010e42d:	5d                   	pop    %ebp
c010e42e:	c3                   	ret    
c010e42f:	90                   	nop

c010e430 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010e430:	55                   	push   %ebp
c010e431:	89 e5                	mov    %esp,%ebp
c010e433:	57                   	push   %edi
c010e434:	56                   	push   %esi
c010e435:	83 ec 48             	sub    $0x48,%esp
c010e438:	8b 45 10             	mov    0x10(%ebp),%eax
c010e43b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e43e:	8b 55 08             	mov    0x8(%ebp),%edx
c010e441:	89 55 c0             	mov    %edx,-0x40(%ebp)
c010e444:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010e447:	89 45 b8             	mov    %eax,-0x48(%ebp)
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010e44a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010e44d:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010e450:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010e453:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010e456:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
c010e459:	89 55 d0             	mov    %edx,-0x30(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010e45c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e45f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010e462:	0f 83 4c 00 00 00    	jae    c010e4b4 <memmove+0x84>
        return __memcpy(dst, src, n);
c010e468:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e46b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010e46e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e471:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e474:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010e477:	89 55 ec             	mov    %edx,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010e47a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e47d:	c1 e8 02             	shr    $0x2,%eax
c010e480:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e483:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e486:	8b 75 f0             	mov    -0x10(%ebp),%esi
    asm volatile (
c010e489:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
c010e48c:	89 c1                	mov    %eax,%ecx
c010e48e:	89 d7                	mov    %edx,%edi
c010e490:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010e492:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
c010e495:	83 e1 03             	and    $0x3,%ecx
c010e498:	0f 84 02 00 00 00    	je     c010e4a0 <memmove+0x70>
c010e49e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010e4a0:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e4a3:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010e4a6:	89 75 e0             	mov    %esi,-0x20(%ebp)
        : "memory");
    return dst;
c010e4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
        return __memcpy(dst, src, n);
c010e4ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e4af:	e9 32 00 00 00       	jmp    c010e4e6 <memmove+0xb6>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010e4b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e4b7:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010e4ba:	83 e9 01             	sub    $0x1,%ecx
c010e4bd:	03 4d d4             	add    -0x2c(%ebp),%ecx
c010e4c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e4c3:	83 ea 01             	sub    $0x1,%edx
c010e4c6:	03 55 d8             	add    -0x28(%ebp),%edx
    asm volatile (
c010e4c9:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c010e4cc:	89 c1                	mov    %eax,%ecx
c010e4ce:	89 d7                	mov    %edx,%edi
c010e4d0:	8b 75 b0             	mov    -0x50(%ebp),%esi
c010e4d3:	fd                   	std    
c010e4d4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010e4d6:	fc                   	cld    
c010e4d7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010e4da:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010e4dd:	89 7d c4             	mov    %edi,-0x3c(%ebp)
    return dst;
c010e4e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e4e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
}
c010e4e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e4e9:	83 c4 48             	add    $0x48,%esp
c010e4ec:	5e                   	pop    %esi
c010e4ed:	5f                   	pop    %edi
c010e4ee:	5d                   	pop    %ebp
c010e4ef:	c3                   	ret    

c010e4f0 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010e4f0:	55                   	push   %ebp
c010e4f1:	89 e5                	mov    %esp,%ebp
c010e4f3:	57                   	push   %edi
c010e4f4:	56                   	push   %esi
c010e4f5:	83 ec 28             	sub    $0x28,%esp
c010e4f8:	8b 45 10             	mov    0x10(%ebp),%eax
c010e4fb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e4fe:	8b 55 08             	mov    0x8(%ebp),%edx
c010e501:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010e504:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010e507:	89 45 d4             	mov    %eax,-0x2c(%ebp)
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010e50a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e50d:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c010e510:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e513:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e516:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010e519:	89 55 ec             	mov    %edx,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010e51c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e51f:	c1 e8 02             	shr    $0x2,%eax
c010e522:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e525:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e528:	8b 75 f0             	mov    -0x10(%ebp),%esi
    asm volatile (
c010e52b:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010e52e:	89 d7                	mov    %edx,%edi
c010e530:	89 c1                	mov    %eax,%ecx
c010e532:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010e534:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010e537:	83 e1 03             	and    $0x3,%ecx
c010e53a:	0f 84 02 00 00 00    	je     c010e542 <memcpy+0x52>
c010e540:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010e542:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e545:	89 7d e4             	mov    %edi,-0x1c(%ebp)
c010e548:	89 75 e0             	mov    %esi,-0x20(%ebp)
    return dst;
c010e54b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e54e:	83 c4 28             	add    $0x28,%esp
c010e551:	5e                   	pop    %esi
c010e552:	5f                   	pop    %edi
c010e553:	5d                   	pop    %ebp
c010e554:	c3                   	ret    
c010e555:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010e55c:	00 00 00 00 

c010e560 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010e560:	55                   	push   %ebp
c010e561:	89 e5                	mov    %esp,%ebp
c010e563:	83 ec 18             	sub    $0x18,%esp
c010e566:	8b 45 10             	mov    0x10(%ebp),%eax
c010e569:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e56c:	8b 55 08             	mov    0x8(%ebp),%edx
c010e56f:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010e572:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010e575:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *s1 = (const char *)v1;
c010e578:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e57b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    const char *s2 = (const char *)v2;
c010e57e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e581:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (n -- > 0) {
c010e584:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e587:	89 c1                	mov    %eax,%ecx
c010e589:	83 c1 ff             	add    $0xffffffff,%ecx
c010e58c:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010e58f:	83 f8 00             	cmp    $0x0,%eax
c010e592:	0f 86 41 00 00 00    	jbe    c010e5d9 <memcmp+0x79>
        if (*s1 != *s2) {
c010e598:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e59b:	0f be 00             	movsbl (%eax),%eax
c010e59e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010e5a1:	0f be 09             	movsbl (%ecx),%ecx
c010e5a4:	39 c8                	cmp    %ecx,%eax
c010e5a6:	0f 84 16 00 00 00    	je     c010e5c2 <memcmp+0x62>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010e5ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e5af:	0f b6 00             	movzbl (%eax),%eax
c010e5b2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010e5b5:	0f b6 09             	movzbl (%ecx),%ecx
c010e5b8:	29 c8                	sub    %ecx,%eax
c010e5ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e5bd:	e9 1e 00 00 00       	jmp    c010e5e0 <memcmp+0x80>
        }
        s1 ++, s2 ++;
c010e5c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e5c5:	83 c0 01             	add    $0x1,%eax
c010e5c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e5cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e5ce:	83 c0 01             	add    $0x1,%eax
c010e5d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    while (n -- > 0) {
c010e5d4:	e9 ab ff ff ff       	jmp    c010e584 <memcmp+0x24>
    }
    return 0;
c010e5d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
c010e5e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e5e3:	83 c4 18             	add    $0x18,%esp
c010e5e6:	5d                   	pop    %ebp
c010e5e7:	c3                   	ret    
c010e5e8:	66 90                	xchg   %ax,%ax
c010e5ea:	66 90                	xchg   %ax,%ax
c010e5ec:	66 90                	xchg   %ax,%ax
c010e5ee:	66 90                	xchg   %ax,%ax

c010e5f0 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010e5f0:	55                   	push   %ebp
c010e5f1:	89 e5                	mov    %esp,%ebp
c010e5f3:	57                   	push   %edi
c010e5f4:	56                   	push   %esi
c010e5f5:	83 ec 20             	sub    $0x20,%esp
c010e5f8:	8b 45 10             	mov    0x10(%ebp),%eax
c010e5fb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010e5fe:	8b 55 08             	mov    0x8(%ebp),%edx
c010e601:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010e604:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010e607:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e60a:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;

    va_start(ap, fmt);
c010e60d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010e610:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010e613:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e616:	8b 75 ec             	mov    -0x14(%ebp),%esi
c010e619:	89 e7                	mov    %esp,%edi
c010e61b:	89 47 0c             	mov    %eax,0xc(%edi)
c010e61e:	89 77 08             	mov    %esi,0x8(%edi)
c010e621:	89 57 04             	mov    %edx,0x4(%edi)
c010e624:	89 0f                	mov    %ecx,(%edi)
c010e626:	e8 15 00 00 00       	call   c010e640 <vprintfmt>
    va_end(ap);
}
c010e62b:	83 c4 20             	add    $0x20,%esp
c010e62e:	5e                   	pop    %esi
c010e62f:	5f                   	pop    %edi
c010e630:	5d                   	pop    %ebp
c010e631:	c3                   	ret    
c010e632:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010e639:	1f 84 00 00 00 00 00 

c010e640 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010e640:	55                   	push   %ebp
c010e641:	89 e5                	mov    %esp,%ebp
c010e643:	53                   	push   %ebx
c010e644:	57                   	push   %edi
c010e645:	56                   	push   %esi
c010e646:	81 ec bc 00 00 00    	sub    $0xbc,%esp
c010e64c:	8b 45 14             	mov    0x14(%ebp),%eax
c010e64f:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010e652:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e655:	8b 75 08             	mov    0x8(%ebp),%esi
c010e658:	89 75 f0             	mov    %esi,-0x10(%ebp)
c010e65b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010e65e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e661:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010e664:	e9 00 00 00 00       	jmp    c010e669 <vprintfmt+0x29>
c010e669:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e66c:	89 c1                	mov    %eax,%ecx
c010e66e:	83 c1 01             	add    $0x1,%ecx
c010e671:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e674:	0f b6 00             	movzbl (%eax),%eax
c010e677:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e67a:	83 f8 25             	cmp    $0x25,%eax
c010e67d:	0f 84 2c 00 00 00    	je     c010e6af <vprintfmt+0x6f>
            if (ch == '\0') {
c010e683:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010e687:	0f 85 0b 00 00 00    	jne    c010e698 <vprintfmt+0x58>
                return;
c010e68d:	81 c4 bc 00 00 00    	add    $0xbc,%esp
c010e693:	5e                   	pop    %esi
c010e694:	5f                   	pop    %edi
c010e695:	5b                   	pop    %ebx
c010e696:	5d                   	pop    %ebp
c010e697:	c3                   	ret    
            }
            putch(ch, putdat);
c010e698:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e69b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010e69e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e6a1:	89 0c 24             	mov    %ecx,(%esp)
c010e6a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e6a8:	ff d0                	call   *%eax
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010e6aa:	e9 ba ff ff ff       	jmp    c010e669 <vprintfmt+0x29>
        }

        // Process a %-escape sequence
        char padc = ' ';
c010e6af:	c6 45 bb 20          	movb   $0x20,-0x45(%ebp)
        width = precision = -1;
c010e6b3:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
c010e6ba:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
        lflag = altflag = 0;
c010e6c1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
c010e6c8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010e6cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e6d2:	89 c1                	mov    %eax,%ecx
c010e6d4:	41                   	inc    %ecx
c010e6d5:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010e6d8:	0f b6 00             	movzbl (%eax),%eax
c010e6db:	89 c1                	mov    %eax,%ecx
c010e6dd:	83 e9 23             	sub    $0x23,%ecx
c010e6e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e6e3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010e6e6:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c010e6e9:	0f 84 c8 01 00 00    	je     c010e8b7 <vprintfmt+0x277>
c010e6ef:	e9 00 00 00 00       	jmp    c010e6f4 <vprintfmt+0xb4>
c010e6f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e6f7:	83 e8 25             	sub    $0x25,%eax
c010e6fa:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010e6fd:	0f 84 95 05 00 00    	je     c010ec98 <vprintfmt+0x658>
c010e703:	e9 00 00 00 00       	jmp    c010e708 <vprintfmt+0xc8>
c010e708:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e70b:	83 e8 2a             	sub    $0x2a,%eax
c010e70e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010e711:	0f 84 75 01 00 00    	je     c010e88c <vprintfmt+0x24c>
c010e717:	e9 00 00 00 00       	jmp    c010e71c <vprintfmt+0xdc>
c010e71c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e71f:	83 e8 2d             	sub    $0x2d,%eax
c010e722:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010e725:	0f 84 01 01 00 00    	je     c010e82c <vprintfmt+0x1ec>
c010e72b:	e9 00 00 00 00       	jmp    c010e730 <vprintfmt+0xf0>
c010e730:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e733:	83 e8 2e             	sub    $0x2e,%eax
c010e736:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010e739:	0f 84 62 01 00 00    	je     c010e8a1 <vprintfmt+0x261>
c010e73f:	e9 00 00 00 00       	jmp    c010e744 <vprintfmt+0x104>
c010e744:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e747:	83 e8 30             	sub    $0x30,%eax
c010e74a:	89 45 9c             	mov    %eax,-0x64(%ebp)
c010e74d:	0f 84 e2 00 00 00    	je     c010e835 <vprintfmt+0x1f5>
c010e753:	e9 00 00 00 00       	jmp    c010e758 <vprintfmt+0x118>
c010e758:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e75b:	83 c0 cf             	add    $0xffffffcf,%eax
c010e75e:	83 e8 09             	sub    $0x9,%eax
c010e761:	89 45 98             	mov    %eax,-0x68(%ebp)
c010e764:	0f 82 d4 00 00 00    	jb     c010e83e <vprintfmt+0x1fe>
c010e76a:	e9 00 00 00 00       	jmp    c010e76f <vprintfmt+0x12f>
c010e76f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e772:	83 e8 63             	sub    $0x63,%eax
c010e775:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010e778:	0f 84 6f 01 00 00    	je     c010e8ed <vprintfmt+0x2ad>
c010e77e:	e9 00 00 00 00       	jmp    c010e783 <vprintfmt+0x143>
c010e783:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e786:	83 e8 64             	sub    $0x64,%eax
c010e789:	89 45 90             	mov    %eax,-0x70(%ebp)
c010e78c:	0f 84 a6 03 00 00    	je     c010eb38 <vprintfmt+0x4f8>
c010e792:	e9 00 00 00 00       	jmp    c010e797 <vprintfmt+0x157>
c010e797:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e79a:	83 e8 65             	sub    $0x65,%eax
c010e79d:	89 45 8c             	mov    %eax,-0x74(%ebp)
c010e7a0:	0f 84 68 01 00 00    	je     c010e90e <vprintfmt+0x2ce>
c010e7a6:	e9 00 00 00 00       	jmp    c010e7ab <vprintfmt+0x16b>
c010e7ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e7ae:	83 e8 6c             	sub    $0x6c,%eax
c010e7b1:	89 45 88             	mov    %eax,-0x78(%ebp)
c010e7b4:	0f 84 25 01 00 00    	je     c010e8df <vprintfmt+0x29f>
c010e7ba:	e9 00 00 00 00       	jmp    c010e7bf <vprintfmt+0x17f>
c010e7bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e7c2:	83 e8 6f             	sub    $0x6f,%eax
c010e7c5:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010e7c8:	0f 84 e4 03 00 00    	je     c010ebb2 <vprintfmt+0x572>
c010e7ce:	e9 00 00 00 00       	jmp    c010e7d3 <vprintfmt+0x193>
c010e7d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e7d6:	83 e8 70             	sub    $0x70,%eax
c010e7d9:	89 45 80             	mov    %eax,-0x80(%ebp)
c010e7dc:	0f 84 f4 03 00 00    	je     c010ebd6 <vprintfmt+0x596>
c010e7e2:	e9 00 00 00 00       	jmp    c010e7e7 <vprintfmt+0x1a7>
c010e7e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e7ea:	83 e8 73             	sub    $0x73,%eax
c010e7ed:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010e7f3:	0f 84 a7 01 00 00    	je     c010e9a0 <vprintfmt+0x360>
c010e7f9:	e9 00 00 00 00       	jmp    c010e7fe <vprintfmt+0x1be>
c010e7fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e801:	83 e8 75             	sub    $0x75,%eax
c010e804:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
c010e80a:	0f 84 7e 03 00 00    	je     c010eb8e <vprintfmt+0x54e>
c010e810:	e9 00 00 00 00       	jmp    c010e815 <vprintfmt+0x1d5>
c010e815:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010e818:	83 e8 78             	sub    $0x78,%eax
c010e81b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
c010e821:	0f 84 f8 03 00 00    	je     c010ec1f <vprintfmt+0x5df>
c010e827:	e9 83 04 00 00       	jmp    c010ecaf <vprintfmt+0x66f>

        // flag to pad on the right
        case '-':
            padc = '-';
c010e82c:	c6 45 bb 2d          	movb   $0x2d,-0x45(%ebp)
            goto reswitch;
c010e830:	e9 9a fe ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010e835:	c6 45 bb 30          	movb   $0x30,-0x45(%ebp)
            goto reswitch;
c010e839:	e9 91 fe ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010e83e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
                precision = precision * 10 + ch - '0';
c010e845:	6b 45 c4 0a          	imul   $0xa,-0x3c(%ebp),%eax
c010e849:	03 45 dc             	add    -0x24(%ebp),%eax
c010e84c:	83 e8 30             	sub    $0x30,%eax
c010e84f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
                ch = *fmt;
c010e852:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e855:	0f be 00             	movsbl (%eax),%eax
c010e858:	89 45 dc             	mov    %eax,-0x24(%ebp)
                if (ch < '0' || ch > '9') {
c010e85b:	83 7d dc 30          	cmpl   $0x30,-0x24(%ebp)
c010e85f:	0f 8c 0a 00 00 00    	jl     c010e86f <vprintfmt+0x22f>
c010e865:	83 7d dc 39          	cmpl   $0x39,-0x24(%ebp)
c010e869:	0f 8e 05 00 00 00    	jle    c010e874 <vprintfmt+0x234>
                    break;
c010e86f:	e9 13 00 00 00       	jmp    c010e887 <vprintfmt+0x247>
                }
            }
c010e874:	e9 00 00 00 00       	jmp    c010e879 <vprintfmt+0x239>
            for (precision = 0; ; ++ fmt) {
c010e879:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e87c:	83 c0 01             	add    $0x1,%eax
c010e87f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e882:	e9 be ff ff ff       	jmp    c010e845 <vprintfmt+0x205>
            goto process_precision;
c010e887:	e9 37 00 00 00       	jmp    c010e8c3 <vprintfmt+0x283>

        case '*':
            precision = va_arg(ap, int);
c010e88c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e88f:	89 c1                	mov    %eax,%ecx
c010e891:	83 c1 04             	add    $0x4,%ecx
c010e894:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010e897:	8b 00                	mov    (%eax),%eax
c010e899:	89 45 c4             	mov    %eax,-0x3c(%ebp)
            goto process_precision;
c010e89c:	e9 22 00 00 00       	jmp    c010e8c3 <vprintfmt+0x283>

        case '.':
            if (width < 0)
c010e8a1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010e8a5:	0f 8d 07 00 00 00    	jge    c010e8b2 <vprintfmt+0x272>
                width = 0;
c010e8ab:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
            goto reswitch;
c010e8b2:	e9 18 fe ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        case '#':
            altflag = 1;
c010e8b7:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
            goto reswitch;
c010e8be:	e9 0c fe ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        process_precision:
            if (width < 0)
c010e8c3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010e8c7:	0f 8d 0d 00 00 00    	jge    c010e8da <vprintfmt+0x29a>
                width = precision, precision = -1;
c010e8cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010e8d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010e8d3:	c7 45 c4 ff ff ff ff 	movl   $0xffffffff,-0x3c(%ebp)
            goto reswitch;
c010e8da:	e9 f0 fd ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010e8df:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010e8e2:	83 c0 01             	add    $0x1,%eax
c010e8e5:	89 45 c0             	mov    %eax,-0x40(%ebp)
            goto reswitch;
c010e8e8:	e9 e2 fd ff ff       	jmp    c010e6cf <vprintfmt+0x8f>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010e8ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010e8f3:	89 ca                	mov    %ecx,%edx
c010e8f5:	83 c2 04             	add    $0x4,%edx
c010e8f8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010e8fb:	8b 09                	mov    (%ecx),%ecx
c010e8fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e900:	89 0c 24             	mov    %ecx,(%esp)
c010e903:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e907:	ff d0                	call   *%eax
            break;
c010e909:	e9 f0 03 00 00       	jmp    c010ecfe <vprintfmt+0x6be>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010e90e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e911:	89 c1                	mov    %eax,%ecx
c010e913:	83 c1 04             	add    $0x4,%ecx
c010e916:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010e919:	8b 00                	mov    (%eax),%eax
c010e91b:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
c010e91e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010e922:	0f 8d 08 00 00 00    	jge    c010e930 <vprintfmt+0x2f0>
c010e928:	31 c0                	xor    %eax,%eax
                err = -err;
c010e92a:	2b 45 d8             	sub    -0x28(%ebp),%eax
c010e92d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010e930:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
c010e934:	0f 8f 16 00 00 00    	jg     c010e950 <vprintfmt+0x310>
c010e93a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e93d:	8b 04 85 68 06 11 c0 	mov    -0x3feef998(,%eax,4),%eax
c010e944:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e947:	83 f8 00             	cmp    $0x0,%eax
c010e94a:	0f 85 28 00 00 00    	jne    c010e978 <vprintfmt+0x338>
c010e950:	8d 05 84 06 11 c0    	lea    0xc0110684,%eax
                printfmt(putch, putdat, "error %d", err);
c010e956:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010e959:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e95c:	8b 75 d8             	mov    -0x28(%ebp),%esi
c010e95f:	89 0c 24             	mov    %ecx,(%esp)
c010e962:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e966:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e96a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010e96e:	e8 7d fc ff ff       	call   c010e5f0 <printfmt>
            }
c010e973:	e9 23 00 00 00       	jmp    c010e99b <vprintfmt+0x35b>
c010e978:	8d 05 a0 f8 10 c0    	lea    0xc010f8a0,%eax
            else {
                printfmt(putch, putdat, "%s", p);
c010e97e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010e981:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e984:	8b 75 e0             	mov    -0x20(%ebp),%esi
c010e987:	89 0c 24             	mov    %ecx,(%esp)
c010e98a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e98e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e992:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010e996:	e8 55 fc ff ff       	call   c010e5f0 <printfmt>
            }
            break;
c010e99b:	e9 5e 03 00 00       	jmp    c010ecfe <vprintfmt+0x6be>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010e9a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e9a3:	89 c1                	mov    %eax,%ecx
c010e9a5:	83 c1 04             	add    $0x4,%ecx
c010e9a8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010e9ab:	8b 00                	mov    (%eax),%eax
c010e9ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e9b0:	83 f8 00             	cmp    $0x0,%eax
c010e9b3:	0f 85 09 00 00 00    	jne    c010e9c2 <vprintfmt+0x382>
c010e9b9:	8d 05 8d 06 11 c0    	lea    0xc011068d,%eax
                p = "(null)";
c010e9bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
            }
            if (width > 0 && padc != '-') {
c010e9c2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010e9c6:	0f 8e 57 00 00 00    	jle    c010ea23 <vprintfmt+0x3e3>
c010e9cc:	0f be 45 bb          	movsbl -0x45(%ebp),%eax
c010e9d0:	83 f8 2d             	cmp    $0x2d,%eax
c010e9d3:	0f 84 4a 00 00 00    	je     c010ea23 <vprintfmt+0x3e3>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010e9d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e9dc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010e9df:	89 04 24             	mov    %eax,(%esp)
c010e9e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e9e6:	e8 b5 f4 ff ff       	call   c010dea0 <strnlen>
c010e9eb:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c010e9ee:	29 c1                	sub    %eax,%ecx
c010e9f0:	89 4d c8             	mov    %ecx,-0x38(%ebp)
c010e9f3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010e9f7:	0f 8e 21 00 00 00    	jle    c010ea1e <vprintfmt+0x3de>
                    putch(padc, putdat);
c010e9fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea00:	0f be 4d bb          	movsbl -0x45(%ebp),%ecx
c010ea04:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ea07:	89 0c 24             	mov    %ecx,(%esp)
c010ea0a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ea0e:	ff d0                	call   *%eax
                for (width -= strnlen(p, precision); width > 0; width --) {
c010ea10:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ea13:	83 c0 ff             	add    $0xffffffff,%eax
c010ea16:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ea19:	e9 d5 ff ff ff       	jmp    c010e9f3 <vprintfmt+0x3b3>
                }
            }
c010ea1e:	e9 00 00 00 00       	jmp    c010ea23 <vprintfmt+0x3e3>
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ea23:	e9 00 00 00 00       	jmp    c010ea28 <vprintfmt+0x3e8>
c010ea28:	31 c0                	xor    %eax,%eax
c010ea2a:	88 c1                	mov    %al,%cl
c010ea2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ea2f:	89 c2                	mov    %eax,%edx
c010ea31:	83 c2 01             	add    $0x1,%edx
c010ea34:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ea37:	0f be 00             	movsbl (%eax),%eax
c010ea3a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ea3d:	83 f8 00             	cmp    $0x0,%eax
c010ea40:	88 8d 73 ff ff ff    	mov    %cl,-0x8d(%ebp)
c010ea46:	0f 84 33 00 00 00    	je     c010ea7f <vprintfmt+0x43f>
c010ea4c:	b0 01                	mov    $0x1,%al
c010ea4e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010ea52:	88 85 72 ff ff ff    	mov    %al,-0x8e(%ebp)
c010ea58:	0f 8c 15 00 00 00    	jl     c010ea73 <vprintfmt+0x433>
c010ea5e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ea61:	83 c0 ff             	add    $0xffffffff,%eax
c010ea64:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010ea67:	83 f8 00             	cmp    $0x0,%eax
c010ea6a:	0f 9d c1             	setge  %cl
c010ea6d:	88 8d 72 ff ff ff    	mov    %cl,-0x8e(%ebp)
c010ea73:	8a 85 72 ff ff ff    	mov    -0x8e(%ebp),%al
c010ea79:	88 85 73 ff ff ff    	mov    %al,-0x8d(%ebp)
c010ea7f:	8a 85 73 ff ff ff    	mov    -0x8d(%ebp),%al
c010ea85:	a8 01                	test   $0x1,%al
c010ea87:	0f 85 05 00 00 00    	jne    c010ea92 <vprintfmt+0x452>
c010ea8d:	e9 66 00 00 00       	jmp    c010eaf8 <vprintfmt+0x4b8>
                if (altflag && (ch < ' ' || ch > '~')) {
c010ea92:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010ea96:	0f 84 37 00 00 00    	je     c010ead3 <vprintfmt+0x493>
c010ea9c:	83 7d dc 20          	cmpl   $0x20,-0x24(%ebp)
c010eaa0:	0f 8c 0a 00 00 00    	jl     c010eab0 <vprintfmt+0x470>
c010eaa6:	83 7d dc 7e          	cmpl   $0x7e,-0x24(%ebp)
c010eaaa:	0f 8e 23 00 00 00    	jle    c010ead3 <vprintfmt+0x493>
c010eab0:	b8 3f 00 00 00       	mov    $0x3f,%eax
                    putch('?', putdat);
c010eab5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010eab8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eabb:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010eac2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010eac6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
c010eacc:	ff d1                	call   *%ecx
                }
c010eace:	e9 12 00 00 00       	jmp    c010eae5 <vprintfmt+0x4a5>
                else {
                    putch(ch, putdat);
c010ead3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ead6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010ead9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eadc:	89 0c 24             	mov    %ecx,(%esp)
c010eadf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010eae3:	ff d0                	call   *%eax
                }
            }
c010eae5:	e9 00 00 00 00       	jmp    c010eaea <vprintfmt+0x4aa>
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010eaea:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010eaed:	83 c0 ff             	add    $0xffffffff,%eax
c010eaf0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010eaf3:	e9 30 ff ff ff       	jmp    c010ea28 <vprintfmt+0x3e8>
            for (; width > 0; width --) {
c010eaf8:	e9 00 00 00 00       	jmp    c010eafd <vprintfmt+0x4bd>
c010eafd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010eb01:	0f 8e 2c 00 00 00    	jle    c010eb33 <vprintfmt+0x4f3>
c010eb07:	b8 20 00 00 00       	mov    $0x20,%eax
                putch(' ', putdat);
c010eb0c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010eb0f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eb12:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010eb19:	89 54 24 04          	mov    %edx,0x4(%esp)
c010eb1d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
c010eb23:	ff d1                	call   *%ecx
            for (; width > 0; width --) {
c010eb25:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010eb28:	83 c0 ff             	add    $0xffffffff,%eax
c010eb2b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010eb2e:	e9 ca ff ff ff       	jmp    c010eafd <vprintfmt+0x4bd>
            }
            break;
c010eb33:	e9 c6 01 00 00       	jmp    c010ecfe <vprintfmt+0x6be>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010eb38:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010eb3b:	89 e1                	mov    %esp,%ecx
c010eb3d:	89 41 04             	mov    %eax,0x4(%ecx)
c010eb40:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010eb43:	89 01                	mov    %eax,(%ecx)
c010eb45:	e8 c6 01 00 00       	call   c010ed10 <getint>
c010eb4a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010eb4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if ((long long)num < 0) {
c010eb50:	85 d2                	test   %edx,%edx
c010eb52:	0f 89 2a 00 00 00    	jns    c010eb82 <vprintfmt+0x542>
c010eb58:	e9 00 00 00 00       	jmp    c010eb5d <vprintfmt+0x51d>
                putch('-', putdat);
c010eb5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb60:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010eb63:	89 e2                	mov    %esp,%edx
c010eb65:	89 4a 04             	mov    %ecx,0x4(%edx)
c010eb68:	c7 02 2d 00 00 00    	movl   $0x2d,(%edx)
c010eb6e:	ff d0                	call   *%eax
                num = -(long long)num;
c010eb70:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010eb73:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010eb76:	31 d2                	xor    %edx,%edx
c010eb78:	f7 d8                	neg    %eax
c010eb7a:	19 ca                	sbb    %ecx,%edx
c010eb7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010eb7f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
            }
            base = 10;
c010eb82:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%ebp)
            goto number;
c010eb89:	e9 b0 00 00 00       	jmp    c010ec3e <vprintfmt+0x5fe>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010eb8e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010eb91:	89 e1                	mov    %esp,%ecx
c010eb93:	89 41 04             	mov    %eax,0x4(%ecx)
c010eb96:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010eb99:	89 01                	mov    %eax,(%ecx)
c010eb9b:	e8 00 02 00 00       	call   c010eda0 <getuint>
c010eba0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010eba3:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 10;
c010eba6:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%ebp)
            goto number;
c010ebad:	e9 8c 00 00 00       	jmp    c010ec3e <vprintfmt+0x5fe>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010ebb2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ebb5:	89 e1                	mov    %esp,%ecx
c010ebb7:	89 41 04             	mov    %eax,0x4(%ecx)
c010ebba:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010ebbd:	89 01                	mov    %eax,(%ecx)
c010ebbf:	e8 dc 01 00 00       	call   c010eda0 <getuint>
c010ebc4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ebc7:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 8;
c010ebca:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%ebp)
            goto number;
c010ebd1:	e9 68 00 00 00       	jmp    c010ec3e <vprintfmt+0x5fe>

        // pointer
        case 'p':
            putch('0', putdat);
c010ebd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebd9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ebdc:	89 e2                	mov    %esp,%edx
c010ebde:	89 4a 04             	mov    %ecx,0x4(%edx)
c010ebe1:	c7 02 30 00 00 00    	movl   $0x30,(%edx)
c010ebe7:	ff d0                	call   *%eax
            putch('x', putdat);
c010ebe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebec:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ebef:	89 e2                	mov    %esp,%edx
c010ebf1:	89 4a 04             	mov    %ecx,0x4(%edx)
c010ebf4:	c7 02 78 00 00 00    	movl   $0x78,(%edx)
c010ebfa:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010ebfc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ebff:	89 c1                	mov    %eax,%ecx
c010ec01:	83 c1 04             	add    $0x4,%ecx
c010ec04:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010ec07:	8b 00                	mov    (%eax),%eax
c010ec09:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ec0c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            base = 16;
c010ec13:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)
            goto number;
c010ec1a:	e9 1f 00 00 00       	jmp    c010ec3e <vprintfmt+0x5fe>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010ec1f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ec22:	89 e1                	mov    %esp,%ecx
c010ec24:	89 41 04             	mov    %eax,0x4(%ecx)
c010ec27:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010ec2a:	89 01                	mov    %eax,(%ecx)
c010ec2c:	e8 6f 01 00 00       	call   c010eda0 <getuint>
c010ec31:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ec34:	89 45 d0             	mov    %eax,-0x30(%ebp)
            base = 16;
c010ec37:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010ec3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec41:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ec44:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ec47:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c010ec4a:	8b 7d cc             	mov    -0x34(%ebp),%edi
c010ec4d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
c010ec50:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c010ec56:	0f be 45 bb          	movsbl -0x45(%ebp),%eax
c010ec5a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
c010ec60:	89 e0                	mov    %esp,%eax
c010ec62:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%ebp)
c010ec68:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
c010ec6e:	89 48 18             	mov    %ecx,0x18(%eax)
c010ec71:	89 58 14             	mov    %ebx,0x14(%eax)
c010ec74:	89 78 10             	mov    %edi,0x10(%eax)
c010ec77:	89 70 0c             	mov    %esi,0xc(%eax)
c010ec7a:	89 50 08             	mov    %edx,0x8(%eax)
c010ec7d:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
c010ec83:	89 50 04             	mov    %edx,0x4(%eax)
c010ec86:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
c010ec8c:	89 30                	mov    %esi,(%eax)
c010ec8e:	e8 9d 01 00 00       	call   c010ee30 <printnum>
            break;
c010ec93:	e9 66 00 00 00       	jmp    c010ecfe <vprintfmt+0x6be>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010ec98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec9b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010ec9e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010eca1:	89 0c 24             	mov    %ecx,(%esp)
c010eca4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010eca8:	ff d0                	call   *%eax
            break;
c010ecaa:	e9 4f 00 00 00       	jmp    c010ecfe <vprintfmt+0x6be>
c010ecaf:	b8 25 00 00 00       	mov    $0x25,%eax

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010ecb4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ecb7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ecba:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010ecc1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ecc5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
c010eccb:	ff d1                	call   *%ecx
            for (fmt --; fmt[-1] != '%'; fmt --)
c010eccd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ecd0:	83 c0 ff             	add    $0xffffffff,%eax
c010ecd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ecd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ecd9:	0f be 40 ff          	movsbl -0x1(%eax),%eax
c010ecdd:	83 f8 25             	cmp    $0x25,%eax
c010ece0:	0f 84 13 00 00 00    	je     c010ecf9 <vprintfmt+0x6b9>
c010ece6:	e9 00 00 00 00       	jmp    c010eceb <vprintfmt+0x6ab>
c010eceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ecee:	83 c0 ff             	add    $0xffffffff,%eax
c010ecf1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ecf4:	e9 dd ff ff ff       	jmp    c010ecd6 <vprintfmt+0x696>
                /* do nothing */;
            break;
c010ecf9:	e9 00 00 00 00       	jmp    c010ecfe <vprintfmt+0x6be>
    while (1) {
c010ecfe:	e9 61 f9 ff ff       	jmp    c010e664 <vprintfmt+0x24>
c010ed03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010ed0a:	84 00 00 00 00 00 

c010ed10 <getint>:
getint(va_list *ap, int lflag) {
c010ed10:	55                   	push   %ebp
c010ed11:	89 e5                	mov    %esp,%ebp
c010ed13:	83 ec 10             	sub    $0x10,%esp
c010ed16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ed19:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010ed1c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010ed1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (lflag >= 2) {
c010ed22:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c010ed26:	0f 8c 1c 00 00 00    	jl     c010ed48 <getint+0x38>
        return va_arg(*ap, long long);
c010ed2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed2f:	8b 08                	mov    (%eax),%ecx
c010ed31:	89 ca                	mov    %ecx,%edx
c010ed33:	83 c2 08             	add    $0x8,%edx
c010ed36:	89 10                	mov    %edx,(%eax)
c010ed38:	8b 01                	mov    (%ecx),%eax
c010ed3a:	8b 49 04             	mov    0x4(%ecx),%ecx
c010ed3d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010ed40:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ed43:	e9 41 00 00 00       	jmp    c010ed89 <getint+0x79>
    else if (lflag) {
c010ed48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ed4c:	0f 84 1e 00 00 00    	je     c010ed70 <getint+0x60>
        return va_arg(*ap, long);
c010ed52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed55:	8b 08                	mov    (%eax),%ecx
c010ed57:	89 ca                	mov    %ecx,%edx
c010ed59:	83 c2 04             	add    $0x4,%edx
c010ed5c:	89 10                	mov    %edx,(%eax)
c010ed5e:	8b 01                	mov    (%ecx),%eax
c010ed60:	89 c1                	mov    %eax,%ecx
c010ed62:	c1 f9 1f             	sar    $0x1f,%ecx
c010ed65:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ed68:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010ed6b:	e9 19 00 00 00       	jmp    c010ed89 <getint+0x79>
        return va_arg(*ap, int);
c010ed70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed73:	8b 08                	mov    (%eax),%ecx
c010ed75:	89 ca                	mov    %ecx,%edx
c010ed77:	83 c2 04             	add    $0x4,%edx
c010ed7a:	89 10                	mov    %edx,(%eax)
c010ed7c:	8b 01                	mov    (%ecx),%eax
c010ed7e:	89 c1                	mov    %eax,%ecx
c010ed80:	c1 f9 1f             	sar    $0x1f,%ecx
c010ed83:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ed86:	89 4d fc             	mov    %ecx,-0x4(%ebp)
}
c010ed89:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ed8c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ed8f:	83 c4 10             	add    $0x10,%esp
c010ed92:	5d                   	pop    %ebp
c010ed93:	c3                   	ret    
c010ed94:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010ed9b:	00 00 00 00 00 

c010eda0 <getuint>:
getuint(va_list *ap, int lflag) {
c010eda0:	55                   	push   %ebp
c010eda1:	89 e5                	mov    %esp,%ebp
c010eda3:	83 ec 10             	sub    $0x10,%esp
c010eda6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eda9:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010edac:	89 4d f4             	mov    %ecx,-0xc(%ebp)
c010edaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (lflag >= 2) {
c010edb2:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c010edb6:	0f 8c 1c 00 00 00    	jl     c010edd8 <getuint+0x38>
        return va_arg(*ap, unsigned long long);
c010edbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edbf:	8b 08                	mov    (%eax),%ecx
c010edc1:	89 ca                	mov    %ecx,%edx
c010edc3:	83 c2 08             	add    $0x8,%edx
c010edc6:	89 10                	mov    %edx,(%eax)
c010edc8:	8b 01                	mov    (%ecx),%eax
c010edca:	8b 49 04             	mov    0x4(%ecx),%ecx
c010edcd:	89 4d fc             	mov    %ecx,-0x4(%ebp)
c010edd0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010edd3:	e9 3f 00 00 00       	jmp    c010ee17 <getuint+0x77>
    else if (lflag) {
c010edd8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010eddc:	0f 84 1d 00 00 00    	je     c010edff <getuint+0x5f>
        return va_arg(*ap, unsigned long);
c010ede2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ede5:	8b 08                	mov    (%eax),%ecx
c010ede7:	89 ca                	mov    %ecx,%edx
c010ede9:	83 c2 04             	add    $0x4,%edx
c010edec:	89 10                	mov    %edx,(%eax)
c010edee:	8b 01                	mov    (%ecx),%eax
c010edf0:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010edf3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010edfa:	e9 18 00 00 00       	jmp    c010ee17 <getuint+0x77>
        return va_arg(*ap, unsigned int);
c010edff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee02:	8b 08                	mov    (%eax),%ecx
c010ee04:	89 ca                	mov    %ecx,%edx
c010ee06:	83 c2 04             	add    $0x4,%edx
c010ee09:	89 10                	mov    %edx,(%eax)
c010ee0b:	8b 01                	mov    (%ecx),%eax
c010ee0d:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010ee10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
}
c010ee17:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ee1a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ee1d:	83 c4 10             	add    $0x10,%esp
c010ee20:	5d                   	pop    %ebp
c010ee21:	c3                   	ret    
c010ee22:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010ee29:	1f 84 00 00 00 00 00 

c010ee30 <printnum>:
        unsigned long long num, unsigned base, int width, int padc) {
c010ee30:	55                   	push   %ebp
c010ee31:	89 e5                	mov    %esp,%ebp
c010ee33:	53                   	push   %ebx
c010ee34:	57                   	push   %edi
c010ee35:	56                   	push   %esi
c010ee36:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
c010ee3c:	8b 45 14             	mov    0x14(%ebp),%eax
c010ee3f:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010ee42:	8b 55 20             	mov    0x20(%ebp),%edx
c010ee45:	8b 75 1c             	mov    0x1c(%ebp),%esi
c010ee48:	8b 7d 18             	mov    0x18(%ebp),%edi
c010ee4b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ee4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010ee51:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ee57:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c010ee5a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010ee5d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ee60:	89 4d e0             	mov    %ecx,-0x20(%ebp)
c010ee63:	89 7d dc             	mov    %edi,-0x24(%ebp)
c010ee66:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010ee69:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    unsigned long long result = num;
c010ee6c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010ee6f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ee72:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010ee75:	89 4d c8             	mov    %ecx,-0x38(%ebp)
    unsigned mod = do_div(result, base);
c010ee78:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010ee7b:	89 4d b0             	mov    %ecx,-0x50(%ebp)
c010ee7e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ee81:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010ee84:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010ee87:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010ee8a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ee8d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010ee90:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010ee94:	0f 84 18 00 00 00    	je     c010eeb2 <printnum+0x82>
c010ee9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010ee9d:	31 d2                	xor    %edx,%edx
c010ee9f:	f7 75 b0             	divl   -0x50(%ebp)
c010eea2:	89 55 c0             	mov    %edx,-0x40(%ebp)
c010eea5:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010eea8:	89 d0                	mov    %edx,%eax
c010eeaa:	31 d2                	xor    %edx,%edx
c010eeac:	f7 75 b0             	divl   -0x50(%ebp)
c010eeaf:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010eeb2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010eeb5:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010eeb8:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010eebb:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010eebe:	89 c8                	mov    %ecx,%eax
c010eec0:	f7 75 a8             	divl   -0x58(%ebp)
c010eec3:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010eec6:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c010eec9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010eecc:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010eecf:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010eed2:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010eed5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010eed8:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010eedb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if (num >= base) {
c010eede:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eee1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010eee4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010eee7:	29 d0                	sub    %edx,%eax
c010eee9:	83 d9 00             	sbb    $0x0,%ecx
c010eeec:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010eeef:	89 4d 9c             	mov    %ecx,-0x64(%ebp)
c010eef2:	0f 82 4f 00 00 00    	jb     c010ef47 <printnum+0x117>
c010eef8:	e9 00 00 00 00       	jmp    c010eefd <printnum+0xcd>
        printnum(putch, putdat, result, base, width - 1, padc);
c010eefd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef00:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010ef03:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010ef06:	8b 75 cc             	mov    -0x34(%ebp),%esi
c010ef09:	8b 7d dc             	mov    -0x24(%ebp),%edi
c010ef0c:	8b 5d d8             	mov    -0x28(%ebp),%ebx
c010ef0f:	83 eb 01             	sub    $0x1,%ebx
c010ef12:	89 45 98             	mov    %eax,-0x68(%ebp)
c010ef15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ef18:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010ef1b:	89 e0                	mov    %esp,%eax
c010ef1d:	89 4d 90             	mov    %ecx,-0x70(%ebp)
c010ef20:	8b 4d 94             	mov    -0x6c(%ebp),%ecx
c010ef23:	89 48 18             	mov    %ecx,0x18(%eax)
c010ef26:	89 58 14             	mov    %ebx,0x14(%eax)
c010ef29:	89 78 10             	mov    %edi,0x10(%eax)
c010ef2c:	89 70 0c             	mov    %esi,0xc(%eax)
c010ef2f:	89 50 08             	mov    %edx,0x8(%eax)
c010ef32:	8b 55 90             	mov    -0x70(%ebp),%edx
c010ef35:	89 50 04             	mov    %edx,0x4(%eax)
c010ef38:	8b 75 98             	mov    -0x68(%ebp),%esi
c010ef3b:	89 30                	mov    %esi,(%eax)
c010ef3d:	e8 ee fe ff ff       	call   c010ee30 <printnum>
    } else {
c010ef42:	e9 33 00 00 00       	jmp    c010ef7a <printnum+0x14a>
        while (-- width > 0)
c010ef47:	e9 00 00 00 00       	jmp    c010ef4c <printnum+0x11c>
c010ef4c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ef4f:	83 c0 ff             	add    $0xffffffff,%eax
c010ef52:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ef55:	83 f8 00             	cmp    $0x0,%eax
c010ef58:	0f 8e 17 00 00 00    	jle    c010ef75 <printnum+0x145>
            putch(padc, putdat);
c010ef5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef61:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010ef64:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ef67:	89 0c 24             	mov    %ecx,(%esp)
c010ef6a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ef6e:	ff d0                	call   *%eax
        while (-- width > 0)
c010ef70:	e9 d7 ff ff ff       	jmp    c010ef4c <printnum+0x11c>
c010ef75:	e9 00 00 00 00       	jmp    c010ef7a <printnum+0x14a>
    putch("0123456789abcdef"[mod], putdat);
c010ef7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef7d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010ef80:	0f be 0c 0d f6 06 11 	movsbl -0x3feef90a(,%ecx,1),%ecx
c010ef87:	c0 
c010ef88:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ef8b:	89 0c 24             	mov    %ecx,(%esp)
c010ef8e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ef92:	ff d0                	call   *%eax
}
c010ef94:	81 c4 8c 00 00 00    	add    $0x8c,%esp
c010ef9a:	5e                   	pop    %esi
c010ef9b:	5f                   	pop    %edi
c010ef9c:	5b                   	pop    %ebx
c010ef9d:	5d                   	pop    %ebp
c010ef9e:	c3                   	ret    
c010ef9f:	90                   	nop

c010efa0 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010efa0:	55                   	push   %ebp
c010efa1:	89 e5                	mov    %esp,%ebp
c010efa3:	57                   	push   %edi
c010efa4:	56                   	push   %esi
c010efa5:	83 ec 30             	sub    $0x30,%esp
c010efa8:	8b 45 10             	mov    0x10(%ebp),%eax
c010efab:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010efae:	8b 55 08             	mov    0x8(%ebp),%edx
c010efb1:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010efb4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
c010efb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010efba:	8d 45 14             	lea    0x14(%ebp),%eax
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010efbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010efc0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010efc3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010efc6:	8b 75 ec             	mov    -0x14(%ebp),%esi
c010efc9:	89 e7                	mov    %esp,%edi
c010efcb:	89 47 0c             	mov    %eax,0xc(%edi)
c010efce:	89 77 08             	mov    %esi,0x8(%edi)
c010efd1:	89 57 04             	mov    %edx,0x4(%edi)
c010efd4:	89 0f                	mov    %ecx,(%edi)
c010efd6:	e8 15 00 00 00       	call   c010eff0 <vsnprintf>
c010efdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    va_end(ap);
    return cnt;
c010efde:	83 c4 30             	add    $0x30,%esp
c010efe1:	5e                   	pop    %esi
c010efe2:	5f                   	pop    %edi
c010efe3:	5d                   	pop    %ebp
c010efe4:	c3                   	ret    
c010efe5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%eax,%eax,1)
c010efec:	00 00 00 00 

c010eff0 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010eff0:	55                   	push   %ebp
c010eff1:	89 e5                	mov    %esp,%ebp
c010eff3:	56                   	push   %esi
c010eff4:	83 ec 34             	sub    $0x34,%esp
c010eff7:	8b 45 14             	mov    0x14(%ebp),%eax
c010effa:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010effd:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f000:	8b 75 08             	mov    0x8(%ebp),%esi
c010f003:	89 75 f4             	mov    %esi,-0xc(%ebp)
c010f006:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010f009:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010f00c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sprintbuf b = {str, str + size - 1, 0};
c010f00f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f012:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010f015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f018:	03 45 f0             	add    -0x10(%ebp),%eax
c010f01b:	83 c0 ff             	add    $0xffffffff,%eax
c010f01e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010f021:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010f028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f02c:	0f 84 0c 00 00 00    	je     c010f03e <vsnprintf+0x4e>
c010f032:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f035:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010f038:	0f 86 0c 00 00 00    	jbe    c010f04a <vsnprintf+0x5a>
        return -E_INVAL;
c010f03e:	c7 45 f8 fd ff ff ff 	movl   $0xfffffffd,-0x8(%ebp)
c010f045:	e9 2f 00 00 00       	jmp    c010f079 <vsnprintf+0x89>
c010f04a:	8d 05 90 f0 10 c0    	lea    0xc010f090,%eax
c010f050:	8d 4d d8             	lea    -0x28(%ebp),%ecx
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010f053:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f056:	8b 75 e8             	mov    -0x18(%ebp),%esi
c010f059:	89 04 24             	mov    %eax,(%esp)
c010f05c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010f060:	89 54 24 08          	mov    %edx,0x8(%esp)
c010f064:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010f068:	e8 d3 f5 ff ff       	call   c010e640 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010f06d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f070:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010f073:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f076:	89 45 f8             	mov    %eax,-0x8(%ebp)
}
c010f079:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010f07c:	83 c4 34             	add    $0x34,%esp
c010f07f:	5e                   	pop    %esi
c010f080:	5d                   	pop    %ebp
c010f081:	c3                   	ret    
c010f082:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%eax,%eax,1)
c010f089:	1f 84 00 00 00 00 00 

c010f090 <sprintputch>:
sprintputch(int ch, struct sprintbuf *b) {
c010f090:	55                   	push   %ebp
c010f091:	89 e5                	mov    %esp,%ebp
c010f093:	56                   	push   %esi
c010f094:	83 ec 08             	sub    $0x8,%esp
c010f097:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f09a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010f09d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
c010f0a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    b->cnt ++;
c010f0a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f0a6:	8b 48 08             	mov    0x8(%eax),%ecx
c010f0a9:	83 c1 01             	add    $0x1,%ecx
c010f0ac:	89 48 08             	mov    %ecx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010f0af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f0b2:	8b 00                	mov    (%eax),%eax
c010f0b4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010f0b7:	3b 41 04             	cmp    0x4(%ecx),%eax
c010f0ba:	0f 83 13 00 00 00    	jae    c010f0d3 <sprintputch+0x43>
        *b->buf ++ = ch;
c010f0c0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010f0c3:	88 c1                	mov    %al,%cl
c010f0c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f0c8:	8b 10                	mov    (%eax),%edx
c010f0ca:	89 d6                	mov    %edx,%esi
c010f0cc:	83 c6 01             	add    $0x1,%esi
c010f0cf:	89 30                	mov    %esi,(%eax)
c010f0d1:	88 0a                	mov    %cl,(%edx)
}
c010f0d3:	83 c4 08             	add    $0x8,%esp
c010f0d6:	5e                   	pop    %esi
c010f0d7:	5d                   	pop    %ebp
c010f0d8:	c3                   	ret    
